00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C                            	;	movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
0000031C                            	;	movea.l	#RomEndLoc,a1	; stop at end of ROM
0000031C                            	;	move.l	(a1),d0
0000031C                            	;	moveq	#0,d1
0000031C                            	 ;
0000031C                            loc_32C: ;
0000031C                            	;	add.w	(a0)+,d1
0000031C                            	;	cmp.l	a0,d0
0000031C                            	;	bcc.s	loc_32C
0000031C                            	;	movea.l	#Checksum,a1	; read the checksum
0000031C                            	;	cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000031C                            	;	bne.w	CheckSumError	; if they don't match, branch
0000031C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000320 7E00                       		moveq	#0,d7
00000322 3C3C 007F                  		move.w	#$7F,d6
00000326                            
00000326                            loc_348:
00000326 2CC7                       		move.l	d7,(a6)+
00000328 51CE FFFC                  		dbf	d6,loc_348
0000032C 1039 00A1 0001             		move.b	($A10001).l,d0
00000332 0200 00C0                  		andi.b	#$C0,d0
00000336 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000342                            
00000342                            GameInit:
00000342 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000348 7E00                       		moveq	#0,d7
0000034A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034E                            
0000034E                            GameClrRAM:
0000034E 2CC7                       		move.l	d7,(a6)+
00000350 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000354 6100 0000                  		bsr.w	VDPSetupGame
00000358 6100 0000                  		bsr.w	SoundDriverLoad
0000035C 6100 0000                  		bsr.w	JoypadInit
00000360 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000366                            
00000366                            MainGameLoop:
00000366 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000036A 0240 001C                  		andi.w	#$1C,d0
0000036E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000372 60F2                       		bra.s	MainGameLoop
00000374                            ; ===========================================================================
00000374                            ; ---------------------------------------------------------------------------
00000374                            ; Main game mode array
00000374                            ; ---------------------------------------------------------------------------
00000374                            
00000374                            GameModeArray:
00000374 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000378                            ; ===========================================================================
00000378 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000394                            ; ===========================================================================
00000394 4E75                       		rts	
00000396                            ; ===========================================================================
00000396                            
00000396                            CheckSumError:
00000396 6100 0000                  		bsr.w	VDPSetupGame
0000039A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003A4 7E3F                       		moveq	#$3F,d7
000003A6                            
000003A6                            CheckSum_Red:
000003A6 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003AE 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003B2                            
000003B2                            CheckSum_Loop:
000003B2 60FE                       		bra.s	CheckSum_Loop
000003B4                            ; ===========================================================================
000003B4                            
000003B4                            BusError:
000003B4 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003BA 6000                       		bra.s	loc_43A
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            AddressError:
000003BC 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003C2 6000                       		bra.s	loc_43A
000003C4                            ; ===========================================================================
000003C4                            
000003C4                            IllegalInstr:
000003C4 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003CA 54AF 0002                  		addq.l	#2,2(sp)
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ZeroDivide:
000003D0 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            ChkInstr:
000003D8 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003DE 6000                       		bra.s	loc_462
000003E0                            ; ===========================================================================
000003E0                            
000003E0                            TrapvInstr:
000003E0 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003E6 6000                       		bra.s	loc_462
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            PrivilegeViol:
000003E8 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003EE 6000                       		bra.s	loc_462
000003F0                            ; ===========================================================================
000003F0                            
000003F0                            Trace:
000003F0 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003F6 6000                       		bra.s	loc_462
000003F8                            ; ===========================================================================
000003F8                            
000003F8                            Line1010Emu:
000003F8 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003FE 54AF 0002                  		addq.l	#2,2(sp)
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            Line1111Emu:
00000404 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000040A 54AF 0002                  		addq.l	#2,2(sp)
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ErrorExcept:
00000410 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            loc_43A:
00000418 46FC 2700                  		move	#$2700,sr
0000041C 544F                       		addq.w	#2,sp
0000041E 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000422 544F                       		addq.w	#2,sp
00000424 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000042A 6100 0000                  		bsr.w	ShowErrorMsg
0000042E 202F 0002                  		move.l	2(sp),d0
00000432 6100 0000                  		bsr.w	sub_5BA
00000436 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000043A 6100 0000                  		bsr.w	sub_5BA
0000043E 6000                       		bra.s	loc_478
00000440                            ; ===========================================================================
00000440                            
00000440                            loc_462:
00000440 46FC 2700                  		move	#$2700,sr
00000444 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044A 6100 0000                  		bsr.w	ShowErrorMsg
0000044E 202F 0002                  		move.l	2(sp),d0
00000452 6100 0000                  		bsr.w	sub_5BA
00000456                            
00000456                            loc_478:
00000456 6100 0000                  		bsr.w	ErrorWaitForC
0000045A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000460 46FC 2300                  		move	#$2300,sr
00000464 4E73                       		rte	
00000466                            
00000466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000466                            
00000466                            
00000466                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000466 4DF9 00C0 0000             		lea	($C00000).l,a6
0000046C 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000476 41F9 0000 0000             		lea	(Art_Text).l,a0
0000047C 323C 027F                  		move.w	#$27F,d1
00000480                            
00000480                            Error_LoadGfx:
00000480 3C98                       		move.w	(a0)+,(a6)
00000482 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000486 7000                       		moveq	#0,d0		; clear	d0
00000488 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000048C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000490 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000494 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000049E 7212                       		moveq	#$12,d1		; number of characters
000004A0                            
000004A0                            Error_LoopChars:
000004A0 7000                       		moveq	#0,d0
000004A2 1018                       		move.b	(a0)+,d0
000004A4 0640 0790                  		addi.w	#$790,d0
000004A8 3C80                       		move.w	d0,(a6)
000004AA 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004AE 4E75                       		rts	
000004B0                            ; End of function ShowErrorMsg
000004B0                            
000004B0                            ; ===========================================================================
000004B0 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004B4 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004B8 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004BC 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004C0 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004C4 0000                       		dc.w asc_5A6-ErrorText
000004C6 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004D9 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004EC 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004FF 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000512 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000525 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000538 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000054B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000055E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000571 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000584 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000598 00                         		even
00000598                            
00000598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000598                            
00000598                            
00000598                            sub_5BA:				; XREF: loc_43A; loc_462
00000598 3CBC 07CA                  		move.w	#$7CA,(a6)
0000059C 7407                       		moveq	#7,d2
0000059E                            
0000059E                            loc_5C0:
0000059E E998                       		rol.l	#4,d0
000005A0 6100                       		bsr.s	sub_5CA
000005A2 51CA FFFA                  		dbf	d2,loc_5C0
000005A6 4E75                       		rts	
000005A8                            ; End of function sub_5BA
000005A8                            
000005A8                            
000005A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005A8                            
000005A8                            
000005A8                            sub_5CA:				; XREF: sub_5BA
000005A8 3200                       		move.w	d0,d1
000005AA 0241 000F                  		andi.w	#$F,d1
000005AE 0C41 000A                  		cmpi.w	#$A,d1
000005B2 6500                       		bcs.s	loc_5D8
000005B4 5E41                       		addq.w	#7,d1
000005B6                            
000005B6                            loc_5D8:
000005B6 0641 07C0                  		addi.w	#$7C0,d1
000005BA 3C81                       		move.w	d1,(a6)
000005BC 4E75                       		rts	
000005BE                            ; End of function sub_5CA
000005BE                            
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            ErrorWaitForC:				; XREF: loc_478
000005BE 6100 0000                  		bsr.w	ReadJoypads
000005C2 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005C8 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005CC 4E75                       		rts	
000005CE                            ; End of function ErrorWaitForC
000005CE                            
000005CE                            ; ===========================================================================
000005CE                            
000005CE                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AEE                            		even
00000AEE                            
00000AEE                            ; ===========================================================================
00000AEE                            
00000AEE                            loc_B10:				; XREF: Vectors
00000AEE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AF2 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AF6 6700                       		beq.s	loc_B88
00000AF8 3039 00C0 0004             		move.w	($C00004).l,d0
00000AFE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B08 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B10 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B16 6700                       		beq.s	loc_B42
00000B18 303C 0700                  		move.w	#$700,d0
00000B1C                            
00000B1C                            loc_B3E:
00000B1C 51C8 FFFE                  		dbf	d0,loc_B3E
00000B20                            
00000B20                            loc_B42:
00000B20 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B24 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B2A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B30 0240 003E                  		andi.w	#$3E,d0
00000B34 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B38 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B3C                            
00000B3C                            loc_B5E:				; XREF: loc_B88
00000B3C 4EB9 0000 0000             		jsr	sub_71B4C
00000B42                            
00000B42                            loc_B64:				; XREF: loc_D50
00000B42 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B46 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B4A 4E73                       		rte	
00000B4C                            ; ===========================================================================
00000B4C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B50 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B54 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B58 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B5C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B60 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B64 0000                       		dc.w loc_E72-off_B6E
00000B66                            ; ===========================================================================
00000B66                            
00000B66                            loc_B88:				; XREF: loc_B10; off_B6E
00000B66 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B6C 6700                       		beq.s	loc_B9A
00000B6E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B74 6600 FFC6                  		bne.w	loc_B5E
00000B78                            
00000B78                            loc_B9A:
00000B78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B7E 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B82 3039 00C0 0004             		move.w	($C00004).l,d0
00000B88 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B8E 6700                       		beq.s	loc_BBA
00000B90 303C 0700                  		move.w	#$700,d0
00000B94                            
00000B94                            loc_BB6:
00000B94 51C8 FFFE                  		dbf	d0,loc_BB6
00000B98                            
00000B98                            loc_BBA:
00000B98 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B9E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BA6                            
00000BA6                            loc_BC8:
00000BA6 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BAE 66F6                       		bne.s	loc_BC8
00000BB0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BB4 6600                       		bne.s	loc_BFE
00000BB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BC8 3ABC 977F                  		move.w	#$977F,(a5)
00000BCC 3ABC C000                  		move.w	#$C000,(a5)
00000BD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BDA 6000                       		bra.s	loc_C22
00000BDC                            ; ===========================================================================
00000BDC                            
00000BDC                            loc_BFE:				; XREF: loc_BC8
00000BDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BEE 3ABC 977F                  		move.w	#$977F,(a5)
00000BF2 3ABC C000                  		move.w	#$C000,(a5)
00000BF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C00                            
00000C00                            loc_C22:				; XREF: loc_BC8
00000C00 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C04 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C0C 6000 FF2E                  		bra.w	loc_B5E
00000C10                            ; ===========================================================================
00000C10                            
00000C10                            loc_C32:				; XREF: off_B6E
00000C10 6100 0000                  		bsr.w	sub_106E
00000C14                            
00000C14                            loc_C36:				; XREF: off_B6E
00000C14 4A78 F614                  		tst.w	($FFFFF614).w
00000C18 6700 0000                  		beq.w	locret_C42
00000C1C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C20                            
00000C20                            locret_C42:
00000C20 4E75                       		rts	
00000C22                            ; ===========================================================================
00000C22                            
00000C22                            loc_C44:				; XREF: off_B6E
00000C22 6100 0000                  		bsr.w	sub_106E
00000C26 6100 0000                  		bsr.w	sub_6886
00000C2A 6100 0000                  		bsr.w	sub_1642
00000C2E 4A78 F614                  		tst.w	($FFFFF614).w
00000C32 6700 0000                  		beq.w	locret_C5C
00000C36 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C3A                            
00000C3A                            locret_C5C:
00000C3A 4E75                       		rts	
00000C3C                            ; ===========================================================================
00000C3C                            
00000C3C                            loc_C5E:				; XREF: off_B6E
00000C3C 6100 0000                  		bsr.w	sub_106E
00000C40 4E75                       		rts	
00000C42                            ; ===========================================================================
00000C42                            
00000C42                            loc_C64:				; XREF: off_B6E
00000C42 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C48 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C4C                            
00000C4C                            loc_C6E:				; XREF: off_B6E
00000C4C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C54                            
00000C54                            loc_C76:
00000C54 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C5C 66F6                       		bne.s	loc_C76		; if not, branch
00000C5E 6100 0000                  		bsr.w	ReadJoypads
00000C62 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C66 6600                       		bne.s	loc_CB0
00000C68 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C6E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C74 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C7A 3ABC 977F                  		move.w	#$977F,(a5)
00000C7E 3ABC C000                  		move.w	#$C000,(a5)
00000C82 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C88 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C8C 6000                       		bra.s	loc_CD4
00000C8E                            ; ===========================================================================
00000C8E                            
00000C8E                            loc_CB0:				; XREF: loc_C76
00000C8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C9A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CA0 3ABC 977F                  		move.w	#$977F,(a5)
00000CA4 3ABC C000                  		move.w	#$C000,(a5)
00000CA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CB2                            
00000CB2                            loc_CD4:				; XREF: loc_C76
00000CB2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CBC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CC2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CC8 3ABC 977F                  		move.w	#$977F,(a5)
00000CCC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CD0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CDA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CE0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CE6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CEC 3ABC 977F                  		move.w	#$977F,(a5)
00000CF0 3ABC 7800                  		move.w	#$7800,(a5)
00000CF4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CFA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFE 4A38 F767                  		tst.b	($FFFFF767).w
00000D02 6700                       		beq.s	loc_D50
00000D04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D0A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D10 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D16 3ABC 977F                  		move.w	#$977F,(a5)
00000D1A 3ABC 7000                  		move.w	#$7000,(a5)
00000D1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D28 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D2E                            
00000D2E                            loc_D50:
00000D2E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D36 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D3C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D42 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D48 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D4E 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D54 6400                       		bcc.s	Demo_Time
00000D56 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D5C 588F                       		addq.l	#4,sp
00000D5E 6000 FDE2                  		bra.w	loc_B64
00000D62                            
00000D62                            ; ---------------------------------------------------------------------------
00000D62                            ; Subroutine to	run a demo for an amount of time
00000D62                            ; ---------------------------------------------------------------------------
00000D62                            
00000D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D62                            
00000D62                            
00000D62                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D62 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D66 4EB9 0000 0000             		jsr	AniArt_Load
00000D6C 4EB9 0000 0000             		jsr	HudUpdate
00000D72 6100 0000                  		bsr.w	sub_165E
00000D76 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D7A 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D7E 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D82                            
00000D82                            Demo_TimeEnd:
00000D82 4E75                       		rts	
00000D84                            ; End of function Demo_Time
00000D84                            
00000D84                            ; ===========================================================================
00000D84                            
00000D84                            loc_DA6:				; XREF: off_B6E
00000D84 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D8C                            
00000D8C                            loc_DAE:
00000D8C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D94 66F6                       		bne.s	loc_DAE		; if not, branch
00000D96 6100 0000                  		bsr.w	ReadJoypads
00000D9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DA0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DA6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DAC 3ABC 977F                  		move.w	#$977F,(a5)
00000DB0 3ABC C000                  		move.w	#$C000,(a5)
00000DB4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DCA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DD0 3ABC 977F                  		move.w	#$977F,(a5)
00000DD4 3ABC 7800                  		move.w	#$7800,(a5)
00000DD8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF4 3ABC 977F                  		move.w	#$977F,(a5)
00000DF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E06 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E0E 6100 0000                  		bsr.w	PalCycle_SS
00000E12 4A38 F767                  		tst.b	($FFFFF767).w
00000E16 6700                       		beq.s	loc_E64
00000E18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E1E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E24 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E2A 3ABC 977F                  		move.w	#$977F,(a5)
00000E2E 3ABC 7000                  		move.w	#$7000,(a5)
00000E32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E3C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E42                            
00000E42                            loc_E64:
00000E42 4A78 F614                  		tst.w	($FFFFF614).w
00000E46 6700 0000                  		beq.w	locret_E70
00000E4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E4E                            
00000E4E                            locret_E70:
00000E4E 4E75                       		rts	
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_E72:				; XREF: off_B6E
00000E50 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E58                            
00000E58                            loc_E7A:
00000E58 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E60 66F6                       		bne.s	loc_E7A		; if not, branch
00000E62 6100 0000                  		bsr.w	ReadJoypads
00000E66 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E6A 6600                       		bne.s	loc_EB4
00000E6C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E72 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E78 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E7E 3ABC 977F                  		move.w	#$977F,(a5)
00000E82 3ABC C000                  		move.w	#$C000,(a5)
00000E86 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E8C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E90 6000                       		bra.s	loc_ED8
00000E92                            ; ===========================================================================
00000E92                            
00000E92                            loc_EB4:				; XREF: loc_E7A
00000E92 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E98 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EA4 3ABC 977F                  		move.w	#$977F,(a5)
00000EA8 3ABC C000                  		move.w	#$C000,(a5)
00000EAC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EB2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB6                            
00000EB6                            loc_ED8:				; XREF: loc_E7A
00000EB6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EBA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EC6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000ECC                            
00000ECC                            loc_EEE:
00000ECC 3ABC 977F                  		move.w	#$977F,(a5)
00000ED0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000ED4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EDA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EEA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000EF0 3ABC 977F                  		move.w	#$977F,(a5)
00000EF4 3ABC 7800                  		move.w	#$7800,(a5)
00000EF8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F02 4A38 F767                  		tst.b	($FFFFF767).w
00000F06 6700                       		beq.s	loc_F54
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F14 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F1A 3ABC 977F                  		move.w	#$977F,(a5)
00000F1E 3ABC 7000                  		move.w	#$7000,(a5)
00000F22 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F28 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F2C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F32                            
00000F32                            loc_F54:
00000F32 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F3A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F40 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F46 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F4C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F52 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F56 4EB9 0000 0000             		jsr	AniArt_Load
00000F5C 4EB9 0000 0000             		jsr	HudUpdate
00000F62 6100 0000                  		bsr.w	sub_1642
00000F66 4E75                       		rts	
00000F68                            ; ===========================================================================
00000F68                            
00000F68                            loc_F8A:				; XREF: off_B6E
00000F68 6100 0000                  		bsr.w	sub_106E
00000F6C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F70 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F76 4E75                       		rts	
00000F78                            ; ===========================================================================
00000F78                            
00000F78                            loc_F9A:				; XREF: off_B6E
00000F78 6100 0000                  		bsr.w	sub_106E
00000F7C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F80 6000 0000                  		bra.w	sub_1642
00000F84                            ; ===========================================================================
00000F84                            
00000F84                            loc_FA6:				; XREF: off_B6E
00000F84 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F8C                            
00000F8C                            loc_FAE:
00000F8C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F94 66F6                       		bne.s	loc_FAE		; if not, branch
00000F96 6100 0000                  		bsr.w	ReadJoypads
00000F9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FA0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FA6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FAC 3ABC 977F                  		move.w	#$977F,(a5)
00000FB0 3ABC C000                  		move.w	#$C000,(a5)
00000FB4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FCA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FD0 3ABC 977F                  		move.w	#$977F,(a5)
00000FD4 3ABC 7800                  		move.w	#$7800,(a5)
00000FD8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000FEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000FF4 3ABC 977F                  		move.w	#$977F,(a5)
00000FF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000FFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001002 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001006 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000100E 4A38 F767                  		tst.b	($FFFFF767).w
00001012 6700                       		beq.s	loc_1060
00001014 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001020 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001026 3ABC 977F                  		move.w	#$977F,(a5)
0000102A 3ABC 7000                  		move.w	#$7000,(a5)
0000102E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001034 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001038 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000103E                            
0000103E                            loc_1060:
0000103E 4A78 F614                  		tst.w	($FFFFF614).w
00001042 6700 0000                  		beq.w	locret_106C
00001046 5378 F614                  		subq.w	#1,($FFFFF614).w
0000104A                            
0000104A                            locret_106C:
0000104A 4E75                       		rts	
0000104C                            
0000104C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000104C                            
0000104C                            
0000104C                            sub_106E:				; XREF: loc_C32; et al
0000104C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001054                            
00001054                            loc_1076:
00001054 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000105C 66F6                       		bne.s	loc_1076	; if not, branch
0000105E 6100 0000                  		bsr.w	ReadJoypads
00001062 4A38 F64E                  		tst.b	($FFFFF64E).w
00001066 6600                       		bne.s	loc_10B0
00001068 4BF9 00C0 0004             		lea	($C00004).l,a5
0000106E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001074 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000107A 3ABC 977F                  		move.w	#$977F,(a5)
0000107E 3ABC C000                  		move.w	#$C000,(a5)
00001082 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001088 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000108C 6000                       		bra.s	loc_10D4
0000108E                            ; ===========================================================================
0000108E                            
0000108E                            loc_10B0:				; XREF: sub_106E
0000108E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001094 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000109A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010A0 3ABC 977F                  		move.w	#$977F,(a5)
000010A4 3ABC C000                  		move.w	#$C000,(a5)
000010A8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010B2                            
000010B2                            loc_10D4:				; XREF: sub_106E
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010BE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC 7800                  		move.w	#$7800,(a5)
000010CC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010E2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E8 3ABC 977F                  		move.w	#$977F,(a5)
000010EC 3ABC 7C00                  		move.w	#$7C00,(a5)
000010F0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001102 4E75                       		rts	
00001104                            ; End of function sub_106E
00001104                            
00001104                            ; ---------------------------------------------------------------------------
00001104                            ; Subroutine to	move pallets from the RAM to CRAM
00001104                            ; ---------------------------------------------------------------------------
00001104                            
00001104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001104                            
00001104                            
00001104                            PalToCRAM:
00001104 46FC 2700                  		move	#$2700,sr
00001108 4A78 F644                  		tst.w	($FFFFF644).w
0000110C 6700                       		beq.s	locret_119C
0000110E 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001114 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001118 43F9 00C0 0000             		lea	($C00000).l,a1
0000111E 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001122 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000112A 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000112C 2298                       		move.l	(a0)+,(a1)
0000112E 2298                       		move.l	(a0)+,(a1)
00001130 2298                       		move.l	(a0)+,(a1)
00001132 2298                       		move.l	(a0)+,(a1)
00001134 2298                       		move.l	(a0)+,(a1)
00001136 2298                       		move.l	(a0)+,(a1)
00001138 2298                       		move.l	(a0)+,(a1)
0000113A 2298                       		move.l	(a0)+,(a1)
0000113C 2298                       		move.l	(a0)+,(a1)
0000113E 2298                       		move.l	(a0)+,(a1)
00001140 2298                       		move.l	(a0)+,(a1)
00001142 2298                       		move.l	(a0)+,(a1)
00001144 2298                       		move.l	(a0)+,(a1)
00001146 2298                       		move.l	(a0)+,(a1)
00001148 2298                       		move.l	(a0)+,(a1)
0000114A 2298                       		move.l	(a0)+,(a1)
0000114C 2298                       		move.l	(a0)+,(a1)
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001170 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001174 4A38 F64F                  		tst.b	($FFFFF64F).w
00001178 6600                       		bne.s	loc_119E
0000117A                            
0000117A                            locret_119C:
0000117A 4E73                       		rte	
0000117C                            ; ===========================================================================
0000117C                            
0000117C                            loc_119E:				; XREF: PalToCRAM
0000117C 4238 F64F                  		clr.b	($FFFFF64F).w
00001180 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001184 6100 FBDC                  		bsr.w	Demo_Time
00001188 4EB9 0000 0000             		jsr	sub_71B4C
0000118E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001192 4E73                       		rte	
00001194                            ; End of function PalToCRAM
00001194                            
00001194                            ; ---------------------------------------------------------------------------
00001194                            ; Subroutine to	initialise joypads
00001194                            ; ---------------------------------------------------------------------------
00001194                            
00001194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001194                            
00001194                            
00001194                            JoypadInit:				; XREF: GameClrRAM
00001194 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000119C                            
0000119C                            Joypad_WaitZ80:
0000119C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011A4 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011A6 7040                       		moveq	#$40,d0
000011A8 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011AE 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011B4 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011BA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011C2 4E75                       		rts	
000011C4                            ; End of function JoypadInit
000011C4                            
000011C4                            ; ---------------------------------------------------------------------------
000011C4                            ; Subroutine to	read joypad input, and send it to the RAM
000011C4                            ; ---------------------------------------------------------------------------
000011C4                            
000011C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C4                            
000011C4                            
000011C4                            ReadJoypads:
000011C4 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011C8 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011CE 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011D0 5449                       		addq.w	#2,a1		; do the second	joypad
000011D2                            
000011D2                            Joypad_Read:
000011D2 12BC 0000                  		move.b	#0,(a1)
000011D6 4E71                       		nop	
000011D8 4E71                       		nop	
000011DA 1011                       		move.b	(a1),d0
000011DC E508                       		lsl.b	#2,d0
000011DE 0200 00C0                  		andi.b	#$C0,d0
000011E2 12BC 0040                  		move.b	#$40,(a1)
000011E6 4E71                       		nop	
000011E8 4E71                       		nop	
000011EA 1211                       		move.b	(a1),d1
000011EC 0201 003F                  		andi.b	#$3F,d1
000011F0 8001                       		or.b	d1,d0
000011F2 4600                       		not.b	d0
000011F4 1210                       		move.b	(a0),d1
000011F6 B101                       		eor.b	d0,d1
000011F8 10C0                       		move.b	d0,(a0)+
000011FA C200                       		and.b	d0,d1
000011FC 10C1                       		move.b	d1,(a0)+
000011FE 4E75                       		rts	
00001200                            ; End of function ReadJoypads
00001200                            
00001200                            
00001200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001200                            
00001200                            
00001200                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001200 41F9 00C0 0004             		lea	($C00004).l,a0
00001206 43F9 00C0 0000             		lea	($C00000).l,a1
0000120C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001212 7E12                       		moveq	#$12,d7
00001214                            
00001214                            VDP_Loop:
00001214 309A                       		move.w	(a2)+,(a0)
00001216 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000121A                            
0000121A 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001220 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001224 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000122A 7000                       		moveq	#0,d0
0000122C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001236 3E3C 003F                  		move.w	#$3F,d7
0000123A                            
0000123A                            VDP_ClrCRAM:
0000123A 3280                       		move.w	d0,(a1)
0000123C 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001240                            
00001240 42B8 F616                  		clr.l	($FFFFF616).w
00001244 42B8 F61A                  		clr.l	($FFFFF61A).w
00001248 2F01                       		move.l	d1,-(sp)
0000124A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001250 3ABC 8F01                  		move.w	#$8F01,(a5)
00001254 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000125A 3ABC 9780                  		move.w	#$9780,(a5)
0000125E 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001264 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000126C                            
0000126C                            loc_128E:
0000126C 3215                       		move.w	(a5),d1
0000126E 0801 0001                  		btst	#1,d1
00001272 66F8                       		bne.s	loc_128E
00001274                            
00001274 3ABC 8F02                  		move.w	#$8F02,(a5)
00001278 221F                       		move.l	(sp)+,d1
0000127A 4E75                       		rts	
0000127C                            ; End of function VDPSetupGame
0000127C                            
0000127C                            ; ===========================================================================
0000127C 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001284 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000128C 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001294 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000129C 9001 9100 9200             		dc.w $9001, $9100, $9200
000012A2                            
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            ; Subroutine to	clear the screen
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            ClearScreen:
000012A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012AC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012B2 3ABC 9780                  		move.w	#$9780,(a5)
000012B6 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012C4                            
000012C4                            loc_12E6:
000012C4 3215                       		move.w	(a5),d1
000012C6 0801 0001                  		btst	#1,d1
000012CA 66F8                       		bne.s	loc_12E6
000012CC                            
000012CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 3ABC 8F01                  		move.w	#$8F01,(a5)
000012DA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012E0 3ABC 9780                  		move.w	#$9780,(a5)
000012E4 2ABC 6000 0083             		move.l	#$60000083,(a5)
000012EA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012F2                            
000012F2                            loc_1314:
000012F2 3215                       		move.w	(a5),d1
000012F4 0801 0001                  		btst	#1,d1
000012F8 66F8                       		bne.s	loc_1314
000012FA                            
000012FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000012FE 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001306 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000130E 43F8 F800                  		lea	($FFFFF800).w,a1
00001312 7000                       		moveq	#0,d0
00001314 323C 00A0                  		move.w	#$A0,d1
00001318                            
00001318                            loc_133A:
00001318 22C0                       		move.l	d0,(a1)+
0000131A 51C9 FFFC                  		dbf	d1,loc_133A
0000131E                            
0000131E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001322 7000                       		moveq	#0,d0
00001324 323C 0100                  		move.w	#$100,d1
00001328                            
00001328                            loc_134A:
00001328 22C0                       		move.l	d0,(a1)+
0000132A 51C9 FFFC                  		dbf	d1,loc_134A
0000132E 4E75                       		rts	
00001330                            ; End of function ClearScreen
00001330                            
00001330                            ; ---------------------------------------------------------------------------
00001330                            ; Subroutine to	load the sound driver
00001330                            ; ---------------------------------------------------------------------------
00001330                            
00001330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001330                            
00001330                            
00001330                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001330 4E71                       		nop	
00001332 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000133A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001342 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001348 43F9 00A0 0000             		lea	($A00000).l,a1
0000134E 6100 0000                  		bsr.w	KosDec		; decompress
00001352 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000135A 4E71                       		nop	
0000135C 4E71                       		nop	
0000135E 4E71                       		nop	
00001360 4E71                       		nop	
00001362 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000136A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001372 4E75                       		rts	
00001374                            ; End of function SoundDriverLoad
00001374                            
00001374                            ; ---------------------------------------------------------------------------
00001374                            ; Subroutine to	play a sound or	music track
00001374                            ; ---------------------------------------------------------------------------
00001374                            
00001374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001374                            
00001374                            
00001374                            PlaySound:
00001374 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001378 4E75                       		rts	
0000137A                            ; End of function PlaySound
0000137A                            
0000137A                            ; ---------------------------------------------------------------------------
0000137A                            ; Subroutine to	play a special sound/music (E0-E4)
0000137A                            ;
0000137A                            ; E0 - Fade out
0000137A                            ; E1 - Sega
0000137A                            ; E2 - Speed up
0000137A                            ; E3 - Normal speed
0000137A                            ; E4 - Stop
0000137A                            ; ---------------------------------------------------------------------------
0000137A                            
0000137A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000137A                            
0000137A                            
0000137A                            PlaySound_Special:
0000137A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000137E 4E75                       		rts	
00001380                            ; End of function PlaySound_Special
00001380                            
00001380                            ; ===========================================================================
00001380                            ; ---------------------------------------------------------------------------
00001380                            ; Unused sound/music subroutine
00001380                            ; ---------------------------------------------------------------------------
00001380                            
00001380                            PlaySound_Unk:
00001380 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001384 4E75                       		rts	
00001386                            
00001386                            ; ---------------------------------------------------------------------------
00001386                            ; Subroutine to	pause the game
00001386                            ; ---------------------------------------------------------------------------
00001386                            
00001386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001386                            
00001386                            
00001386                            PauseGame:				; XREF: Level_MainLoop; et al
00001386 4E71                       		nop	
00001388 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
0000138C 6700                       		beq.s	Unpause		; if not, branch
0000138E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001392 6600                       		bne.s	loc_13BE	; if yes, branch
00001394 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000139A 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000139C                            
0000139C                            loc_13BE:
0000139C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013A2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013A8                            
000013A8                            loc_13CA:
000013A8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013AE 6100 0000                  		bsr.w	DelayProgram
000013B2 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013B6 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013B8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013BE 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013C0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013C6 4E71                       		nop	
000013C8 6000                       		bra.s	loc_1404
000013CA                            ; ===========================================================================
000013CA                            
000013CA                            Pause_ChkBC:				; XREF: PauseGame
000013CA 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013D0 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013D2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013D8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013DA                            
000013DA                            Pause_ChkStart:				; XREF: PauseGame
000013DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013E0 67C6                       		beq.s	loc_13CA	; if not, branch
000013E2                            
000013E2                            loc_1404:				; XREF: PauseGame
000013E2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000013E8                            
000013E8                            Unpause:				; XREF: PauseGame
000013E8 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000013EE                            
000013EE                            Pause_DoNothing:			; XREF: PauseGame
000013EE 4E75                       		rts	
000013F0                            ; ===========================================================================
000013F0                            
000013F0                            Pause_SlowMo:				; XREF: PauseGame
000013F0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000013F6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000013FC 4E75                       		rts	
000013FE                            ; End of function PauseGame
000013FE                            
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            ; Subroutine to	display	patterns via the VDP
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            
000013FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013FE                            
000013FE                            
000013FE                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000013FE 4DF9 00C0 0000             		lea	($C00000).l,a6
00001404 283C 0080 0000             		move.l	#$800000,d4
0000140A                            
0000140A                            loc_142C:
0000140A 2D40 0004                  		move.l	d0,4(a6)
0000140E 3601                       		move.w	d1,d3
00001410                            
00001410                            loc_1432:
00001410 3C99                       		move.w	(a1)+,(a6)
00001412 51CB FFFC                  		dbf	d3,loc_1432
00001416 D084                       		add.l	d4,d0
00001418 51CA FFF0                  		dbf	d2,loc_142C
0000141C 4E75                       		rts	
0000141E                            ; End of function ShowVDPGraphics
0000141E                            
0000141E                            ; ---------------------------------------------------------------------------
0000141E                            ; Nemesis decompression	algorithm
0000141E                            ; ---------------------------------------------------------------------------
0000141E                            
0000141E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141E                            
0000141E                            
0000141E                            NemDec:
0000141E 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001422 47F9 0000 0000             		lea	(loc_1502).l,a3
00001428 49F9 00C0 0000             		lea	($C00000).l,a4
0000142E 6000                       		bra.s	loc_145C
00001430                            ; ===========================================================================
00001430 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001434 47F9 0000 0000             		lea	(loc_1518).l,a3
0000143A                            
0000143A                            loc_145C:				; XREF: NemDec
0000143A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000143E 3418                       		move.w	(a0)+,d2
00001440 E34A                       		lsl.w	#1,d2
00001442 6400                       		bcc.s	loc_146A
00001444 D6FC 000A                  		adda.w	#$A,a3
00001448                            
00001448                            loc_146A:
00001448 E54A                       		lsl.w	#2,d2
0000144A 3A42                       		movea.w	d2,a5
0000144C 7608                       		moveq	#8,d3
0000144E 7400                       		moveq	#0,d2
00001450 7800                       		moveq	#0,d4
00001452 6100 0000                  		bsr.w	NemDec4
00001456 1A18                       		move.b	(a0)+,d5
00001458 E145                       		asl.w	#8,d5
0000145A 1A18                       		move.b	(a0)+,d5
0000145C 3C3C 0010                  		move.w	#$10,d6
00001460 6100                       		bsr.s	NemDec2
00001462 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001466 4E75                       		rts	
00001468                            ; End of function NemDec
00001468                            
00001468                            
00001468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001468                            
00001468                            
00001468                            NemDec2:				; XREF: NemDec
00001468 3E06                       		move.w	d6,d7
0000146A 5147                       		subq.w	#8,d7
0000146C 3205                       		move.w	d5,d1
0000146E EE69                       		lsr.w	d7,d1
00001470 0C01 00FC                  		cmpi.b	#-4,d1
00001474 6400                       		bcc.s	loc_14D6
00001476 0241 00FF                  		andi.w	#$FF,d1
0000147A D241                       		add.w	d1,d1
0000147C 1031 1000                  		move.b	(a1,d1.w),d0
00001480 4880                       		ext.w	d0
00001482 9C40                       		sub.w	d0,d6
00001484 0C46 0009                  		cmpi.w	#9,d6
00001488 6400                       		bcc.s	loc_14B2
0000148A 5046                       		addq.w	#8,d6
0000148C E145                       		asl.w	#8,d5
0000148E 1A18                       		move.b	(a0)+,d5
00001490                            
00001490                            loc_14B2:
00001490 1231 1001                  		move.b	1(a1,d1.w),d1
00001494 3001                       		move.w	d1,d0
00001496 0241 000F                  		andi.w	#$F,d1
0000149A 0240 00F0                  		andi.w	#$F0,d0
0000149E                            
0000149E                            loc_14C0:				; XREF: NemDec3
0000149E E848                       		lsr.w	#4,d0
000014A0                            
000014A0                            loc_14C2:				; XREF: NemDec3
000014A0 E98C                       		lsl.l	#4,d4
000014A2 8801                       		or.b	d1,d4
000014A4 5343                       		subq.w	#1,d3
000014A6 6600                       		bne.s	loc_14D0
000014A8 4ED3                       		jmp	(a3)
000014AA                            ; End of function NemDec2
000014AA                            
000014AA                            
000014AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014AA                            
000014AA                            
000014AA                            NemDec3:				; XREF: loc_1502
000014AA 7800                       		moveq	#0,d4
000014AC 7608                       		moveq	#8,d3
000014AE                            
000014AE                            loc_14D0:				; XREF: NemDec2
000014AE 51C8 FFF0                  		dbf	d0,loc_14C2
000014B2 60B4                       		bra.s	NemDec2
000014B4                            ; ===========================================================================
000014B4                            
000014B4                            loc_14D6:				; XREF: NemDec2
000014B4 5D46                       		subq.w	#6,d6
000014B6 0C46 0009                  		cmpi.w	#9,d6
000014BA 6400                       		bcc.s	loc_14E4
000014BC 5046                       		addq.w	#8,d6
000014BE E145                       		asl.w	#8,d5
000014C0 1A18                       		move.b	(a0)+,d5
000014C2                            
000014C2                            loc_14E4:				; XREF: NemDec3
000014C2 5F46                       		subq.w	#7,d6
000014C4 3205                       		move.w	d5,d1
000014C6 EC69                       		lsr.w	d6,d1
000014C8 3001                       		move.w	d1,d0
000014CA 0241 000F                  		andi.w	#$F,d1
000014CE 0240 0070                  		andi.w	#$70,d0
000014D2 0C46 0009                  		cmpi.w	#9,d6
000014D6 64C6                       		bcc.s	loc_14C0
000014D8 5046                       		addq.w	#8,d6
000014DA E145                       		asl.w	#8,d5
000014DC 1A18                       		move.b	(a0)+,d5
000014DE 60BE                       		bra.s	loc_14C0
000014E0                            ; End of function NemDec3
000014E0                            
000014E0                            ; ===========================================================================
000014E0                            
000014E0                            loc_1502:				; XREF: NemDec
000014E0 2884                       		move.l	d4,(a4)
000014E2 534D                       		subq.w	#1,a5
000014E4 380D                       		move.w	a5,d4
000014E6 66C2                       		bne.s	NemDec3
000014E8 4E75                       		rts	
000014EA                            ; ===========================================================================
000014EA B982                       		eor.l	d4,d2
000014EC 2882                       		move.l	d2,(a4)
000014EE 534D                       		subq.w	#1,a5
000014F0 380D                       		move.w	a5,d4
000014F2 66B6                       		bne.s	NemDec3
000014F4 4E75                       		rts	
000014F6                            ; ===========================================================================
000014F6                            
000014F6                            loc_1518:				; XREF: NemDec
000014F6 28C4                       		move.l	d4,(a4)+
000014F8 534D                       		subq.w	#1,a5
000014FA 380D                       		move.w	a5,d4
000014FC 66AC                       		bne.s	NemDec3
000014FE 4E75                       		rts	
00001500                            ; ===========================================================================
00001500 B982                       		eor.l	d4,d2
00001502 28C2                       		move.l	d2,(a4)+
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66A0                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            
0000150C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000150C                            
0000150C                            
0000150C                            NemDec4:				; XREF: NemDec
0000150C 1018                       		move.b	(a0)+,d0
0000150E                            
0000150E                            loc_1530:
0000150E 0C00 00FF                  		cmpi.b	#-1,d0
00001512 6600                       		bne.s	loc_1538
00001514 4E75                       		rts	
00001516                            ; ===========================================================================
00001516                            
00001516                            loc_1538:				; XREF: NemDec4
00001516 3E00                       		move.w	d0,d7
00001518                            
00001518                            loc_153A:
00001518 1018                       		move.b	(a0)+,d0
0000151A 0C00 0080                  		cmpi.b	#$80,d0
0000151E 64EE                       		bcc.s	loc_1530
00001520 1200                       		move.b	d0,d1
00001522 0247 000F                  		andi.w	#$F,d7
00001526 0241 0070                  		andi.w	#$70,d1
0000152A 8E41                       		or.w	d1,d7
0000152C 0240 000F                  		andi.w	#$F,d0
00001530 1200                       		move.b	d0,d1
00001532 E149                       		lsl.w	#8,d1
00001534 8E41                       		or.w	d1,d7
00001536 7208                       		moveq	#8,d1
00001538 9240                       		sub.w	d0,d1
0000153A 6600                       		bne.s	loc_1568
0000153C 1018                       		move.b	(a0)+,d0
0000153E D040                       		add.w	d0,d0
00001540 3387 0000                  		move.w	d7,(a1,d0.w)
00001544 60D2                       		bra.s	loc_153A
00001546                            ; ===========================================================================
00001546                            
00001546                            loc_1568:				; XREF: NemDec4
00001546 1018                       		move.b	(a0)+,d0
00001548 E368                       		lsl.w	d1,d0
0000154A D040                       		add.w	d0,d0
0000154C 7A01                       		moveq	#1,d5
0000154E E36D                       		lsl.w	d1,d5
00001550 5345                       		subq.w	#1,d5
00001552                            
00001552                            loc_1574:
00001552 3387 0000                  		move.w	d7,(a1,d0.w)
00001556 5440                       		addq.w	#2,d0
00001558 51CD FFF8                  		dbf	d5,loc_1574
0000155C 60BA                       		bra.s	loc_153A
0000155E                            ; End of function NemDec4
0000155E                            
0000155E                            ; ---------------------------------------------------------------------------
0000155E                            ; Subroutine to	load pattern load cues
0000155E                            ; ---------------------------------------------------------------------------
0000155E                            
0000155E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000155E                            
0000155E                            
0000155E                            LoadPLC:
0000155E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001562 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001568 D040                       		add.w	d0,d0
0000156A 3031 0000                  		move.w	(a1,d0.w),d0
0000156E 43F1 0000                  		lea	(a1,d0.w),a1
00001572 45F8 F680                  		lea	($FFFFF680).w,a2
00001576                            
00001576                            loc_1598:
00001576 4A92                       		tst.l	(a2)
00001578 6700                       		beq.s	loc_15A0
0000157A 5C4A                       		addq.w	#6,a2
0000157C 60F8                       		bra.s	loc_1598
0000157E                            ; ===========================================================================
0000157E                            
0000157E                            loc_15A0:				; XREF: LoadPLC
0000157E 3019                       		move.w	(a1)+,d0
00001580 6B00                       		bmi.s	loc_15AC
00001582                            
00001582                            loc_15A4:
00001582 24D9                       		move.l	(a1)+,(a2)+
00001584 34D9                       		move.w	(a1)+,(a2)+
00001586 51C8 FFFA                  		dbf	d0,loc_15A4
0000158A                            
0000158A                            loc_15AC:
0000158A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000158E 4E75                       		rts	
00001590                            ; End of function LoadPLC
00001590                            
00001590                            
00001590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001590                            
00001590                            
00001590                            LoadPLC2:
00001590 48E7 0060                  		movem.l	a1-a2,-(sp)
00001594 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000159A D040                       		add.w	d0,d0
0000159C 3031 0000                  		move.w	(a1,d0.w),d0
000015A0 43F1 0000                  		lea	(a1,d0.w),a1
000015A4 6100                       		bsr.s	ClearPLC
000015A6 45F8 F680                  		lea	($FFFFF680).w,a2
000015AA 3019                       		move.w	(a1)+,d0
000015AC 6B00                       		bmi.s	loc_15D8
000015AE                            
000015AE                            loc_15D0:
000015AE 24D9                       		move.l	(a1)+,(a2)+
000015B0 34D9                       		move.w	(a1)+,(a2)+
000015B2 51C8 FFFA                  		dbf	d0,loc_15D0
000015B6                            
000015B6                            loc_15D8:
000015B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015BA 4E75                       		rts	
000015BC                            ; End of function LoadPLC2
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	clear the pattern load cues
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            ClearPLC:				; XREF: LoadPLC2
000015BC 45F8 F680                  		lea	($FFFFF680).w,a2
000015C0 701F                       		moveq	#$1F,d0
000015C2                            
000015C2                            ClearPLC_Loop:
000015C2 429A                       		clr.l	(a2)+
000015C4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015C8 4E75                       		rts	
000015CA                            ; End of function ClearPLC
000015CA                            
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            ; Subroutine to	use graphics listed in a pattern load cue
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            
000015CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CA                            
000015CA                            
000015CA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015CA 4AB8 F680                  		tst.l	($FFFFF680).w
000015CE 6700                       		beq.s	locret_1640
000015D0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015D4 6600                       		bne.s	locret_1640
000015D6 2078 F680                  		movea.l	($FFFFF680).w,a0
000015DA 47F9 0000 14E0             		lea	(loc_1502).l,a3
000015E0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015E4 3418                       		move.w	(a0)+,d2
000015E6 6A00                       		bpl.s	loc_160E
000015E8 D6FC 000A                  		adda.w	#$A,a3
000015EC                            
000015EC                            loc_160E:
000015EC 0242 7FFF                  		andi.w	#$7FFF,d2
000015F0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000015F4 6100 FF16                  		bsr.w	NemDec4
000015F8 1A18                       		move.b	(a0)+,d5
000015FA E145                       		asl.w	#8,d5
000015FC 1A18                       		move.b	(a0)+,d5
000015FE 7C10                       		moveq	#$10,d6
00001600 7000                       		moveq	#0,d0
00001602 21C8 F680                  		move.l	a0,($FFFFF680).w
00001606 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000160A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000160E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001612 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001616 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000161A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000161E                            
0000161E                            locret_1640:
0000161E 4E75                       		rts	
00001620                            ; End of function RunPLC_RAM
00001620                            
00001620                            
00001620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001620                            
00001620                            
00001620                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001620 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001624 6700 0000                  		beq.w	locret_16DA
00001628 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000162E 7000                       		moveq	#0,d0
00001630 3038 F684                  		move.w	($FFFFF684).w,d0
00001634 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000163A 6000                       		bra.s	loc_1676
0000163C                            ; End of function sub_1642
0000163C                            
0000163C                            
0000163C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163C                            
0000163C                            
0000163C                            sub_165E:				; XREF: Demo_Time
0000163C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001640 6700                       		beq.s	locret_16DA
00001642 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001648 7000                       		moveq	#0,d0
0000164A 3038 F684                  		move.w	($FFFFF684).w,d0
0000164E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001654                            
00001654                            loc_1676:				; XREF: sub_1642
00001654 49F9 00C0 0004             		lea	($C00004).l,a4
0000165A E588                       		lsl.l	#2,d0
0000165C E448                       		lsr.w	#2,d0
0000165E 0040 4000                  		ori.w	#$4000,d0
00001662 4840                       		swap	d0
00001664 2880                       		move.l	d0,(a4)
00001666 594C                       		subq.w	#4,a4
00001668 2078 F680                  		movea.l	($FFFFF680).w,a0
0000166C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001670 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001674 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001678 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000167C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001680 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001684 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001688                            
00001688                            loc_16AA:				; XREF: sub_165E
00001688 3A7C 0008                  		movea.w	#8,a5
0000168C 6100 FE1C                  		bsr.w	NemDec3
00001690 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001694 6700                       		beq.s	loc_16DC
00001696 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000169A 66EC                       		bne.s	loc_16AA
0000169C 21C8 F680                  		move.l	a0,($FFFFF680).w
000016A0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016A4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016A8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016AC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016B0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016B4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016B8                            
000016B8                            locret_16DA:				; XREF: sub_1642
000016B8 4E75                       		rts	
000016BA                            ; ===========================================================================
000016BA                            
000016BA                            loc_16DC:				; XREF: sub_165E
000016BA 41F8 F680                  		lea	($FFFFF680).w,a0
000016BE 7015                       		moveq	#$15,d0
000016C0                            
000016C0                            loc_16E2:				; XREF: sub_165E
000016C0 20E8 0006                  		move.l	6(a0),(a0)+
000016C4 51C8 FFFA                  		dbf	d0,loc_16E2
000016C8 4E75                       		rts	
000016CA                            ; End of function sub_165E
000016CA                            
000016CA                            ; ---------------------------------------------------------------------------
000016CA                            ; Subroutine to	execute	the pattern load cue
000016CA                            ; ---------------------------------------------------------------------------
000016CA                            
000016CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016CA                            
000016CA                            
000016CA                            RunPLC_ROM:
000016CA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016D0 D040                       		add.w	d0,d0
000016D2 3031 0000                  		move.w	(a1,d0.w),d0
000016D6 43F1 0000                  		lea	(a1,d0.w),a1
000016DA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016DC                            
000016DC                            RunPLC_Loop:
000016DC 2059                       		movea.l	(a1)+,a0	; get art pointer
000016DE 7000                       		moveq	#0,d0
000016E0 3019                       		move.w	(a1)+,d0	; get VRAM address
000016E2 E588                       		lsl.l	#2,d0		; divide address by $20
000016E4 E448                       		lsr.w	#2,d0
000016E6 0040 4000                  		ori.w	#$4000,d0
000016EA 4840                       		swap	d0
000016EC 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000016F2 6100 FD2A                  		bsr.w	NemDec		; decompress
000016F6 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000016FA 4E75                       		rts	
000016FC                            ; End of function RunPLC_ROM
000016FC                            
000016FC                            ; ---------------------------------------------------------------------------
000016FC                            ; Enigma decompression algorithm
000016FC                            ; ---------------------------------------------------------------------------
000016FC                            
000016FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016FC                            
000016FC                            
000016FC                            EniDec:
000016FC 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001700 3640                       		movea.w	d0,a3
00001702 1018                       		move.b	(a0)+,d0
00001704 4880                       		ext.w	d0
00001706 3A40                       		movea.w	d0,a5
00001708 1818                       		move.b	(a0)+,d4
0000170A E70C                       		lsl.b	#3,d4
0000170C 3458                       		movea.w	(a0)+,a2
0000170E D4CB                       		adda.w	a3,a2
00001710 3858                       		movea.w	(a0)+,a4
00001712 D8CB                       		adda.w	a3,a4
00001714 1A18                       		move.b	(a0)+,d5
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A 7C10                       		moveq	#$10,d6
0000171C                            
0000171C                            loc_173E:				; XREF: loc_1768
0000171C 7007                       		moveq	#7,d0
0000171E 3E06                       		move.w	d6,d7
00001720 9E40                       		sub.w	d0,d7
00001722 3205                       		move.w	d5,d1
00001724 EE69                       		lsr.w	d7,d1
00001726 0241 007F                  		andi.w	#$7F,d1
0000172A 3401                       		move.w	d1,d2
0000172C 0C41 0040                  		cmpi.w	#$40,d1
00001730 6400                       		bcc.s	loc_1758
00001732 7006                       		moveq	#6,d0
00001734 E24A                       		lsr.w	#1,d2
00001736                            
00001736                            loc_1758:
00001736 6100 0000                  		bsr.w	sub_188C
0000173A 0242 000F                  		andi.w	#$F,d2
0000173E E849                       		lsr.w	#4,d1
00001740 D241                       		add.w	d1,d1
00001742 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001746                            ; End of function EniDec
00001746                            
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1768:				; XREF: loc_17B4
00001746 32CA                       		move.w	a2,(a1)+
00001748 524A                       		addq.w	#1,a2
0000174A 51CA FFFA                  		dbf	d2,loc_1768
0000174E 60CC                       		bra.s	loc_173E
00001750                            ; ===========================================================================
00001750                            
00001750                            loc_1772:				; XREF: loc_17B4
00001750 32CC                       		move.w	a4,(a1)+
00001752 51CA FFFC                  		dbf	d2,loc_1772
00001756 60C4                       		bra.s	loc_173E
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_177A:				; XREF: loc_17B4
00001758 6100 0000                  		bsr.w	loc_17DC
0000175C                            
0000175C                            loc_177E:
0000175C 32C1                       		move.w	d1,(a1)+
0000175E 51CA FFFC                  		dbf	d2,loc_177E
00001762 60B8                       		bra.s	loc_173E
00001764                            ; ===========================================================================
00001764                            
00001764                            loc_1786:				; XREF: loc_17B4
00001764 6100 0000                  		bsr.w	loc_17DC
00001768                            
00001768                            loc_178A:
00001768 32C1                       		move.w	d1,(a1)+
0000176A 5241                       		addq.w	#1,d1
0000176C 51CA FFFA                  		dbf	d2,loc_178A
00001770 60AA                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1794:				; XREF: loc_17B4
00001772 6100 0000                  		bsr.w	loc_17DC
00001776                            
00001776                            loc_1798:
00001776 32C1                       		move.w	d1,(a1)+
00001778 5341                       		subq.w	#1,d1
0000177A 51CA FFFA                  		dbf	d2,loc_1798
0000177E 609C                       		bra.s	loc_173E
00001780                            ; ===========================================================================
00001780                            
00001780                            loc_17A2:				; XREF: loc_17B4
00001780 0C42 000F                  		cmpi.w	#$F,d2
00001784 6700                       		beq.s	loc_17C4
00001786                            
00001786                            loc_17A8:
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 51CA FFF8                  		dbf	d2,loc_17A8
00001790 608A                       		bra.s	loc_173E
00001792                            ; ===========================================================================
00001792                            
00001792                            loc_17B4:				; XREF: EniDec
00001792 60B2                       		bra.s	loc_1768
00001794                            ; ===========================================================================
00001794 60B0                       		bra.s	loc_1768
00001796                            ; ===========================================================================
00001796 60B8                       		bra.s	loc_1772
00001798                            ; ===========================================================================
00001798 60B6                       		bra.s	loc_1772
0000179A                            ; ===========================================================================
0000179A 60BC                       		bra.s	loc_177A
0000179C                            ; ===========================================================================
0000179C 60C6                       		bra.s	loc_1786
0000179E                            ; ===========================================================================
0000179E 60D2                       		bra.s	loc_1794
000017A0                            ; ===========================================================================
000017A0 60DE                       		bra.s	loc_17A2
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17C4:				; XREF: loc_17A2
000017A2 5348                       		subq.w	#1,a0
000017A4 0C46 0010                  		cmpi.w	#$10,d6
000017A8 6600                       		bne.s	loc_17CE
000017AA 5348                       		subq.w	#1,a0
000017AC                            
000017AC                            loc_17CE:
000017AC 3008                       		move.w	a0,d0
000017AE E248                       		lsr.w	#1,d0
000017B0 6400                       		bcc.s	loc_17D6
000017B2 5248                       		addq.w	#1,a0
000017B4                            
000017B4                            loc_17D6:
000017B4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017B8 4E75                       		rts	
000017BA                            ; ===========================================================================
000017BA                            
000017BA                            loc_17DC:				; XREF: loc_17A2
000017BA 360B                       		move.w	a3,d3
000017BC 1204                       		move.b	d4,d1
000017BE D201                       		add.b	d1,d1
000017C0 6400                       		bcc.s	loc_17EE
000017C2 5346                       		subq.w	#1,d6
000017C4 0D05                       		btst	d6,d5
000017C6 6700                       		beq.s	loc_17EE
000017C8 0043 8000                  		ori.w	#-$8000,d3
000017CC                            
000017CC                            loc_17EE:
000017CC D201                       		add.b	d1,d1
000017CE 6400                       		bcc.s	loc_17FC
000017D0 5346                       		subq.w	#1,d6
000017D2 0D05                       		btst	d6,d5
000017D4 6700                       		beq.s	loc_17FC
000017D6 0643 4000                  		addi.w	#$4000,d3
000017DA                            
000017DA                            loc_17FC:
000017DA D201                       		add.b	d1,d1
000017DC 6400                       		bcc.s	loc_180A
000017DE 5346                       		subq.w	#1,d6
000017E0 0D05                       		btst	d6,d5
000017E2 6700                       		beq.s	loc_180A
000017E4 0643 2000                  		addi.w	#$2000,d3
000017E8                            
000017E8                            loc_180A:
000017E8 D201                       		add.b	d1,d1
000017EA 6400                       		bcc.s	loc_1818
000017EC 5346                       		subq.w	#1,d6
000017EE 0D05                       		btst	d6,d5
000017F0 6700                       		beq.s	loc_1818
000017F2 0043 1000                  		ori.w	#$1000,d3
000017F6                            
000017F6                            loc_1818:
000017F6 D201                       		add.b	d1,d1
000017F8 6400                       		bcc.s	loc_1826
000017FA 5346                       		subq.w	#1,d6
000017FC 0D05                       		btst	d6,d5
000017FE 6700                       		beq.s	loc_1826
00001800 0043 0800                  		ori.w	#$800,d3
00001804                            
00001804                            loc_1826:
00001804 3205                       		move.w	d5,d1
00001806 3E06                       		move.w	d6,d7
00001808 9E4D                       		sub.w	a5,d7
0000180A 6400                       		bcc.s	loc_1856
0000180C 3C07                       		move.w	d7,d6
0000180E 0646 0010                  		addi.w	#$10,d6
00001812 4447                       		neg.w	d7
00001814 EF69                       		lsl.w	d7,d1
00001816 1A10                       		move.b	(a0),d5
00001818 EF3D                       		rol.b	d7,d5
0000181A DE47                       		add.w	d7,d7
0000181C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001820 D245                       		add.w	d5,d1
00001822                            
00001822                            loc_1844:				; XREF: loc_1868
00001822 300D                       		move.w	a5,d0
00001824 D040                       		add.w	d0,d0
00001826 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000182A D243                       		add.w	d3,d1
0000182C 1A18                       		move.b	(a0)+,d5
0000182E E14D                       		lsl.w	#8,d5
00001830 1A18                       		move.b	(a0)+,d5
00001832 4E75                       		rts	
00001834                            ; ===========================================================================
00001834                            
00001834                            loc_1856:				; XREF: loc_1826
00001834 6700                       		beq.s	loc_1868
00001836 EE69                       		lsr.w	d7,d1
00001838 300D                       		move.w	a5,d0
0000183A D040                       		add.w	d0,d0
0000183C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001840 D243                       		add.w	d3,d1
00001842 300D                       		move.w	a5,d0
00001844 6000                       		bra.s	sub_188C
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_1868:				; XREF: loc_1856
00001846 7C10                       		moveq	#$10,d6
00001848                            
00001848                            loc_186A:
00001848 60D8                       		bra.s	loc_1844
0000184A                            ; ===========================================================================
0000184A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001860 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000186A                            
0000186A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000186A                            
0000186A                            
0000186A                            sub_188C:				; XREF: EniDec
0000186A 9C40                       		sub.w	d0,d6
0000186C 0C46 0009                  		cmpi.w	#9,d6
00001870 6400                       		bcc.s	locret_189A
00001872 5046                       		addq.w	#8,d6
00001874 E145                       		asl.w	#8,d5
00001876 1A18                       		move.b	(a0)+,d5
00001878                            
00001878                            locret_189A:
00001878 4E75                       		rts	
0000187A                            ; End of function sub_188C
0000187A                            
0000187A                            ; ---------------------------------------------------------------------------
0000187A                            ; Kosinski decompression algorithm
0000187A                            ; ---------------------------------------------------------------------------
0000187A                            
0000187A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187A                            
0000187A                            
0000187A                            KosDec:
0000187A                            
0000187A =FFFFFFFE                  var_2		= -2
0000187A =FFFFFFFF                  var_1		= -1
0000187A                            
0000187A 558F                       		subq.l	#2,sp
0000187C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001880 1E98                       		move.b	(a0)+,(sp)
00001882 3A17                       		move.w	(sp),d5
00001884 780F                       		moveq	#$F,d4
00001886                            
00001886                            loc_18A8:
00001886 E24D                       		lsr.w	#1,d5
00001888 40C6                       		move	sr,d6
0000188A 51CC 0000                  		dbf	d4,loc_18BA
0000188E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001892 1E98                       		move.b	(a0)+,(sp)
00001894 3A17                       		move.w	(sp),d5
00001896 780F                       		moveq	#$F,d4
00001898                            
00001898                            loc_18BA:
00001898 44C6                       		move	d6,ccr
0000189A 6400                       		bcc.s	loc_18C2
0000189C 12D8                       		move.b	(a0)+,(a1)+
0000189E 60E6                       		bra.s	loc_18A8
000018A0                            ; ===========================================================================
000018A0                            
000018A0                            loc_18C2:				; XREF: KosDec
000018A0 7600                       		moveq	#0,d3
000018A2 E24D                       		lsr.w	#1,d5
000018A4 40C6                       		move	sr,d6
000018A6 51CC 0000                  		dbf	d4,loc_18D6
000018AA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018AE 1E98                       		move.b	(a0)+,(sp)
000018B0 3A17                       		move.w	(sp),d5
000018B2 780F                       		moveq	#$F,d4
000018B4                            
000018B4                            loc_18D6:
000018B4 44C6                       		move	d6,ccr
000018B6 6500                       		bcs.s	loc_1906
000018B8 E24D                       		lsr.w	#1,d5
000018BA 51CC 0000                  		dbf	d4,loc_18EA
000018BE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018C2 1E98                       		move.b	(a0)+,(sp)
000018C4 3A17                       		move.w	(sp),d5
000018C6 780F                       		moveq	#$F,d4
000018C8                            
000018C8                            loc_18EA:
000018C8 E353                       		roxl.w	#1,d3
000018CA E24D                       		lsr.w	#1,d5
000018CC 51CC 0000                  		dbf	d4,loc_18FC
000018D0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D4 1E98                       		move.b	(a0)+,(sp)
000018D6 3A17                       		move.w	(sp),d5
000018D8 780F                       		moveq	#$F,d4
000018DA                            
000018DA                            loc_18FC:
000018DA E353                       		roxl.w	#1,d3
000018DC 5243                       		addq.w	#1,d3
000018DE 74FF                       		moveq	#-1,d2
000018E0 1418                       		move.b	(a0)+,d2
000018E2 6000                       		bra.s	loc_191C
000018E4                            ; ===========================================================================
000018E4                            
000018E4                            loc_1906:				; XREF: loc_18C2
000018E4 1018                       		move.b	(a0)+,d0
000018E6 1218                       		move.b	(a0)+,d1
000018E8 74FF                       		moveq	#-1,d2
000018EA 1401                       		move.b	d1,d2
000018EC EB4A                       		lsl.w	#5,d2
000018EE 1400                       		move.b	d0,d2
000018F0 0241 0007                  		andi.w	#7,d1
000018F4 6700                       		beq.s	loc_1928
000018F6 1601                       		move.b	d1,d3
000018F8 5243                       		addq.w	#1,d3
000018FA                            
000018FA                            loc_191C:
000018FA 1031 2000                  		move.b	(a1,d2.w),d0
000018FE 12C0                       		move.b	d0,(a1)+
00001900 51CB FFF8                  		dbf	d3,loc_191C
00001904 6080                       		bra.s	loc_18A8
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1928:				; XREF: loc_1906
00001906 1218                       		move.b	(a0)+,d1
00001908 6700                       		beq.s	loc_1938
0000190A 0C01 0001                  		cmpi.b	#1,d1
0000190E 6700 FF76                  		beq.w	loc_18A8
00001912 1601                       		move.b	d1,d3
00001914 60E4                       		bra.s	loc_191C
00001916                            ; ===========================================================================
00001916                            
00001916                            loc_1938:				; XREF: loc_1928
00001916 548F                       		addq.l	#2,sp
00001918 4E75                       		rts	
0000191A                            ; End of function KosDec
0000191A                            
0000191A                            ; ---------------------------------------------------------------------------
0000191A                            ; Pallet cycling routine loading subroutine
0000191A                            ; ---------------------------------------------------------------------------
0000191A                            
0000191A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191A                            
0000191A                            
0000191A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000191A 7400                       		moveq	#0,d2
0000191C 7000                       		moveq	#0,d0
0000191E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001922 D040                       		add.w	d0,d0		; multiply by 2
00001924 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001928 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000192C                            ; End of function PalCycle_Load
0000192C                            
0000192C                            ; ===========================================================================
0000192C                            ; ---------------------------------------------------------------------------
0000192C                            ; Pallet cycling routines
0000192C                            ; ---------------------------------------------------------------------------
0000192C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000192E 0000                       		dc.w PalCycle_LZ-PalCycle
00001930 0000                       		dc.w PalCycle_MZ-PalCycle
00001932 0000                       		dc.w PalCycle_SLZ-PalCycle
00001934 0000                       		dc.w PalCycle_SYZ-PalCycle
00001936 0000                       		dc.w PalCycle_SBZ-PalCycle
00001938 0000                       		dc.w PalCycle_GHZ-PalCycle
0000193A                            
0000193A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193A                            
0000193A                            
0000193A                            PalCycle_Title:				; XREF: TitleScreen
0000193A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001940 6000                       		bra.s	loc_196A
00001942                            ; ===========================================================================
00001942                            
00001942                            PalCycle_GHZ:				; XREF: PalCycle
00001942 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001948                            
00001948                            loc_196A:				; XREF: PalCycle_Title
00001948 5378 F634                  		subq.w	#1,($FFFFF634).w
0000194C 6A00                       		bpl.s	locret_1990
0000194E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001954 3038 F632                  		move.w	($FFFFF632).w,d0
00001958 5278 F632                  		addq.w	#1,($FFFFF632).w
0000195C 0240 0003                  		andi.w	#3,d0
00001960 E748                       		lsl.w	#3,d0
00001962 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001966 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000196A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000196E                            
0000196E                            locret_1990:
0000196E 4E75                       		rts	
00001970                            ; End of function PalCycle_Title
00001970                            
00001970                            
00001970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001970                            
00001970                            
00001970                            PalCycle_LZ:				; XREF: PalCycle
00001970 5378 F634                  		subq.w	#1,($FFFFF634).w
00001974 6A00                       		bpl.s	loc_19D8
00001976 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000197C 3038 F632                  		move.w	($FFFFF632).w,d0
00001980 5278 F632                  		addq.w	#1,($FFFFF632).w
00001984 0240 0003                  		andi.w	#3,d0
00001988 E748                       		lsl.w	#3,d0
0000198A 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001990 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001996 6600                       		bne.s	loc_19C0
00001998 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
0000199E                            
0000199E                            loc_19C0:
0000199E 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019A2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019A6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019AA 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019AE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019B2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019B6                            
000019B6                            loc_19D8:
000019B6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019BA 0240 0007                  		andi.w	#7,d0
000019BE 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019C2 6700                       		beq.s	locret_1A3A
000019C4 7201                       		moveq	#1,d1
000019C6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019CA 6700                       		beq.s	loc_19F0
000019CC 4441                       		neg.w	d1
000019CE                            
000019CE                            loc_19F0:
000019CE 3038 F650                  		move.w	($FFFFF650).w,d0
000019D2 0240 0003                  		andi.w	#3,d0
000019D6 D041                       		add.w	d1,d0
000019D8 0C40 0003                  		cmpi.w	#3,d0
000019DC 6500                       		bcs.s	loc_1A0A
000019DE 3200                       		move.w	d0,d1
000019E0 7000                       		moveq	#0,d0
000019E2 4A41                       		tst.w	d1
000019E4 6A00                       		bpl.s	loc_1A0A
000019E6 7002                       		moveq	#2,d0
000019E8                            
000019E8                            loc_1A0A:
000019E8 31C0 F650                  		move.w	d0,($FFFFF650).w
000019EC D040                       		add.w	d0,d0
000019EE 3200                       		move.w	d0,d1
000019F0 D040                       		add.w	d0,d0
000019F2 D041                       		add.w	d1,d0
000019F4 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000019FA 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019FE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A02 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A06 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A0C 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A10 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A14 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A18                            
00001A18                            locret_1A3A:
00001A18 4E75                       		rts	
00001A1A                            ; End of function PalCycle_LZ
00001A1A                            
00001A1A                            ; ===========================================================================
00001A1A 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A22                            ; ===========================================================================
00001A22                            
00001A22                            PalCycle_MZ:				; XREF: PalCycle
00001A22 4E75                       		rts	
00001A24                            
00001A24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A24                            
00001A24                            
00001A24                            PalCycle_SLZ:				; XREF: PalCycle
00001A24 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A28 6A00                       		bpl.s	locret_1A80
00001A2A 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A30 3038 F632                  		move.w	($FFFFF632).w,d0
00001A34 5240                       		addq.w	#1,d0
00001A36 0C40 0006                  		cmpi.w	#6,d0
00001A3A 6500                       		bcs.s	loc_1A60
00001A3C 7000                       		moveq	#0,d0
00001A3E                            
00001A3E                            loc_1A60:
00001A3E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A42 3200                       		move.w	d0,d1
00001A44 D241                       		add.w	d1,d1
00001A46 D041                       		add.w	d1,d0
00001A48 D040                       		add.w	d0,d0
00001A4A 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A50 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A54 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A58 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A5E                            
00001A5E                            locret_1A80:
00001A5E 4E75                       		rts	
00001A60                            ; End of function PalCycle_SLZ
00001A60                            
00001A60                            
00001A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A60                            
00001A60                            
00001A60                            PalCycle_SYZ:				; XREF: PalCycle
00001A60 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A64 6A00                       		bpl.s	locret_1AC6
00001A66 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A6C 3038 F632                  		move.w	($FFFFF632).w,d0
00001A70 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A74 0240 0003                  		andi.w	#3,d0
00001A78 E548                       		lsl.w	#2,d0
00001A7A 3200                       		move.w	d0,d1
00001A7C D040                       		add.w	d0,d0
00001A7E 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A84 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A88 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A8C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A90 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A96 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A9A 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A9E 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AA4                            
00001AA4                            locret_1AC6:
00001AA4 4E75                       		rts	
00001AA6                            ; End of function PalCycle_SYZ
00001AA6                            
00001AA6                            
00001AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA6                            
00001AA6                            
00001AA6                            PalCycle_SBZ:				; XREF: PalCycle
00001AA6 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001AAC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AB0 6700                       		beq.s	loc_1ADA
00001AB2 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001AB8                            
00001AB8                            loc_1ADA:
00001AB8 43F8 F650                  		lea	($FFFFF650).w,a1
00001ABC 321A                       		move.w	(a2)+,d1
00001ABE                            
00001ABE                            loc_1AE0:
00001ABE 5311                       		subq.b	#1,(a1)
00001AC0 6B00                       		bmi.s	loc_1AEA
00001AC2 5489                       		addq.l	#2,a1
00001AC4 5C8A                       		addq.l	#6,a2
00001AC6 6000                       		bra.s	loc_1B06
00001AC8                            ; ===========================================================================
00001AC8                            
00001AC8                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AC8 12DA                       		move.b	(a2)+,(a1)+
00001ACA 1011                       		move.b	(a1),d0
00001ACC 5200                       		addq.b	#1,d0
00001ACE B01A                       		cmp.b	(a2)+,d0
00001AD0 6500                       		bcs.s	loc_1AF6
00001AD2 7000                       		moveq	#0,d0
00001AD4                            
00001AD4                            loc_1AF6:
00001AD4 12C0                       		move.b	d0,(a1)+
00001AD6 0240 000F                  		andi.w	#$F,d0
00001ADA D040                       		add.w	d0,d0
00001ADC 305A                       		movea.w	(a2)+,a0
00001ADE 365A                       		movea.w	(a2)+,a3
00001AE0 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AE4                            
00001AE4                            loc_1B06:				; XREF: PalCycle_SBZ
00001AE4 51C9 FFD8                  		dbf	d1,loc_1AE0
00001AE8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AEC 6A00                       		bpl.s	locret_1B64
00001AEE 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001AF4 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001AFA 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AFE 6700                       		beq.s	loc_1B2E
00001B00 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B06 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B0C                            
00001B0C                            loc_1B2E:
00001B0C 72FF                       		moveq	#-1,d1
00001B0E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B12 6700                       		beq.s	loc_1B38
00001B14 4441                       		neg.w	d1
00001B16                            
00001B16                            loc_1B38:
00001B16 3038 F632                  		move.w	($FFFFF632).w,d0
00001B1A 0240 0003                  		andi.w	#3,d0
00001B1E D041                       		add.w	d1,d0
00001B20 0C40 0003                  		cmpi.w	#3,d0
00001B24 6500                       		bcs.s	loc_1B52
00001B26 3200                       		move.w	d0,d1
00001B28 7000                       		moveq	#0,d0
00001B2A 4A41                       		tst.w	d1
00001B2C 6A00                       		bpl.s	loc_1B52
00001B2E 7002                       		moveq	#2,d0
00001B30                            
00001B30                            loc_1B52:
00001B30 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B34 D040                       		add.w	d0,d0
00001B36 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B3A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B3E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B42                            
00001B42                            locret_1B64:
00001B42 4E75                       		rts	
00001B44                            ; End of function PalCycle_SBZ
00001B44                            
00001B44                            ; ===========================================================================
00001B44                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B64                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B84                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BA4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BB6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BC8                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C30                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C54                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C74                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C84                            
00001C84                            Pal_SBZCycList:
00001C84                            	include "_inc\SBZ pallet script 1.asm"
00001C84                            ; ---------------------------------------------------------------------------
00001C84                            ; Scrap Brain Zone 1 pallet cycling script
00001C84                            ; ---------------------------------------------------------------------------
00001C84 0008                       	dc.w 8			; number of entries - 1
00001C86 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C88 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C8A FB50                       	dc.w $FB50		; RAM address
00001C8C 0D08                       	dc.b $D, 8
00001C8E 0000                       	dc.w Pal_SBZCyc2
00001C90 FB52                       	dc.w $FB52
00001C92 0E08                       	dc.b $E, 8
00001C94 0000                       	dc.w Pal_SBZCyc3
00001C96 FB6E                       	dc.w $FB6E
00001C98 0B08                       	dc.b $B, 8
00001C9A 0000                       	dc.w Pal_SBZCyc5
00001C9C FB70                       	dc.w $FB70
00001C9E 0708                       	dc.b 7,	8
00001CA0 0000                       	dc.w Pal_SBZCyc6
00001CA2 FB72                       	dc.w $FB72
00001CA4 1C10                       	dc.b $1C, $10
00001CA6 0000                       	dc.w Pal_SBZCyc7
00001CA8 FB7E                       	dc.w $FB7E
00001CAA 0303                       	dc.b 3,	3
00001CAC 0000                       	dc.w Pal_SBZCyc8
00001CAE FB78                       	dc.w $FB78
00001CB0 0303                       	dc.b 3,	3
00001CB2 0000                       	dc.w Pal_SBZCyc8+2
00001CB4 FB7A                       	dc.w $FB7A
00001CB6 0303                       	dc.b 3,	3
00001CB8 0000                       	dc.w Pal_SBZCyc8+4
00001CBA FB7C                       	dc.w $FB7C
00001CBC                            	even
00001CBC                            	even
00001CBC                            
00001CBC                            Pal_SBZCycList2:
00001CBC                            	include "_inc\SBZ pallet script 2.asm"
00001CBC                            ; ---------------------------------------------------------------------------
00001CBC                            ; Scrap Brain Zone 2 pallet cycling script
00001CBC                            ; ---------------------------------------------------------------------------
00001CBC 0006                       	dc.w 6
00001CBE 0708                       	dc.b 7,	8
00001CC0 0000                       	dc.w Pal_SBZCyc1
00001CC2 FB50                       	dc.w $FB50
00001CC4 0D08                       	dc.b $D, 8
00001CC6 0000                       	dc.w Pal_SBZCyc2
00001CC8 FB52                       	dc.w $FB52
00001CCA 0908                       	dc.b 9,	8
00001CCC 0000                       	dc.w Pal_SBZCyc9
00001CCE FB70                       	dc.w $FB70
00001CD0 0708                       	dc.b 7,	8
00001CD2 0000                       	dc.w Pal_SBZCyc6
00001CD4 FB72                       	dc.w $FB72
00001CD6 0303                       	dc.b 3,	3
00001CD8 0000                       	dc.w Pal_SBZCyc8
00001CDA FB78                       	dc.w $FB78
00001CDC 0303                       	dc.b 3,	3
00001CDE 0000                       	dc.w Pal_SBZCyc8+2
00001CE0 FB7A                       	dc.w $FB7A
00001CE2 0303                       	dc.b 3,	3
00001CE4 0000                       	dc.w Pal_SBZCyc8+4
00001CE6 FB7C                       	dc.w $FB7C
00001CE8                            	even
00001CE8                            	even
00001CE8                            
00001CE8                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001CF8                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D08                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D18                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D24                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D34                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D44                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D64                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D6E                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D7E                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D8A                            ; ---------------------------------------------------------------------------
00001D8A                            ; Subroutine to	fade out and fade in
00001D8A                            ; ---------------------------------------------------------------------------
00001D8A                            
00001D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D8A                            
00001D8A                            
00001D8A                            Pal_FadeTo:
00001D8A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D90                            
00001D90                            Pal_FadeTo2:
00001D90 7000                       		moveq	#0,d0
00001D92 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D96 1038 F626                  		move.b	($FFFFF626).w,d0
00001D9A D0C0                       		adda.w	d0,a0
00001D9C 7200                       		moveq	#0,d1
00001D9E 1038 F627                  		move.b	($FFFFF627).w,d0
00001DA2                            
00001DA2                            Pal_ToBlack:
00001DA2 30C1                       		move.w	d1,(a0)+
00001DA4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DA8                            
00001DA8 383C 0015                  		move.w	#$15,d4
00001DAC                            
00001DAC                            loc_1DCE:
00001DAC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DB2 6100 0000                  		bsr.w	DelayProgram
00001DB6 6100                       		bsr.s	Pal_FadeIn
00001DB8 6100 F810                  		bsr.w	RunPLC_RAM
00001DBC 51CC FFEE                  		dbf	d4,loc_1DCE
00001DC0 4E75                       		rts	
00001DC2                            ; End of function Pal_FadeTo
00001DC2                            
00001DC2                            ; ---------------------------------------------------------------------------
00001DC2                            ; Pallet fade-in subroutine
00001DC2                            ; ---------------------------------------------------------------------------
00001DC2                            
00001DC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC2                            
00001DC2                            
00001DC2                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DC2 7000                       		moveq	#0,d0
00001DC4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DC8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DCC 1038 F626                  		move.b	($FFFFF626).w,d0
00001DD0 D0C0                       		adda.w	d0,a0
00001DD2 D2C0                       		adda.w	d0,a1
00001DD4 1038 F627                  		move.b	($FFFFF627).w,d0
00001DD8                            
00001DD8                            loc_1DFA:
00001DD8 6100                       		bsr.s	Pal_AddColor
00001DDA 51C8 FFFC                  		dbf	d0,loc_1DFA
00001DDE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DE4 6600                       		bne.s	locret_1E24
00001DE6 7000                       		moveq	#0,d0
00001DE8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DEC 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001DF0 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF4 D0C0                       		adda.w	d0,a0
00001DF6 D2C0                       		adda.w	d0,a1
00001DF8 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFC                            
00001DFC                            loc_1E1E:
00001DFC 6100                       		bsr.s	Pal_AddColor
00001DFE 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E02                            
00001E02                            locret_1E24:
00001E02 4E75                       		rts	
00001E04                            ; End of function Pal_FadeIn
00001E04                            
00001E04                            
00001E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E04                            
00001E04                            
00001E04                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E04 3419                       		move.w	(a1)+,d2
00001E06 3610                       		move.w	(a0),d3
00001E08 B642                       		cmp.w	d2,d3
00001E0A 6700                       		beq.s	loc_1E4E
00001E0C 3203                       		move.w	d3,d1
00001E0E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E12 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E14 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E16 30C1                       		move.w	d1,(a0)+	; update pallet
00001E18 4E75                       		rts	
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E1A 3203                       		move.w	d3,d1
00001E1C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E20 B242                       		cmp.w	d2,d1
00001E22 6200                       		bhi.s	Pal_AddRed
00001E24 30C1                       		move.w	d1,(a0)+	; update pallet
00001E26 4E75                       		rts	
00001E28                            ; ===========================================================================
00001E28                            
00001E28                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E28 5458                       		addq.w	#2,(a0)+	; increase red value
00001E2A 4E75                       		rts	
00001E2C                            ; ===========================================================================
00001E2C                            
00001E2C                            loc_1E4E:				; XREF: Pal_AddColor
00001E2C 5448                       		addq.w	#2,a0
00001E2E 4E75                       		rts	
00001E30                            ; End of function Pal_AddColor
00001E30                            
00001E30                            
00001E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E30                            
00001E30                            
00001E30                            Pal_FadeFrom:
00001E30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E36 383C 0015                  		move.w	#$15,d4
00001E3A                            
00001E3A                            loc_1E5C:
00001E3A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E40 6100 0000                  		bsr.w	DelayProgram
00001E44 6100                       		bsr.s	Pal_FadeOut
00001E46 6100 F782                  		bsr.w	RunPLC_RAM
00001E4A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E4E 4E75                       		rts	
00001E50                            ; End of function Pal_FadeFrom
00001E50                            
00001E50                            ; ---------------------------------------------------------------------------
00001E50                            ; Pallet fade-out subroutine
00001E50                            ; ---------------------------------------------------------------------------
00001E50                            
00001E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E50                            
00001E50                            
00001E50                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E50 7000                       		moveq	#0,d0
00001E52 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E56 1038 F626                  		move.b	($FFFFF626).w,d0
00001E5A D0C0                       		adda.w	d0,a0
00001E5C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E60                            
00001E60                            loc_1E82:
00001E60 6100                       		bsr.s	Pal_DecColor
00001E62 51C8 FFFC                  		dbf	d0,loc_1E82
00001E66                            
00001E66 7000                       		moveq	#0,d0
00001E68 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E6C 1038 F626                  		move.b	($FFFFF626).w,d0
00001E70 D0C0                       		adda.w	d0,a0
00001E72 1038 F627                  		move.b	($FFFFF627).w,d0
00001E76                            
00001E76                            loc_1E98:
00001E76 6100                       		bsr.s	Pal_DecColor
00001E78 51C8 FFFC                  		dbf	d0,loc_1E98
00001E7C 4E75                       		rts	
00001E7E                            ; End of function Pal_FadeOut
00001E7E                            
00001E7E                            
00001E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E7E                            
00001E7E                            
00001E7E                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E7E 3410                       		move.w	(a0),d2
00001E80 6700                       		beq.s	loc_1ECC
00001E82 3202                       		move.w	d2,d1
00001E84 0241 000E                  		andi.w	#$E,d1
00001E88 6700                       		beq.s	Pal_DecGreen
00001E8A 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E8C 4E75                       		rts	
00001E8E                            ; ===========================================================================
00001E8E                            
00001E8E                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E8E 3202                       		move.w	d2,d1
00001E90 0241 00E0                  		andi.w	#$E0,d1
00001E94 6700                       		beq.s	Pal_DecBlue
00001E96 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001E9A 4E75                       		rts	
00001E9C                            ; ===========================================================================
00001E9C                            
00001E9C                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001E9C 3202                       		move.w	d2,d1
00001E9E 0241 0E00                  		andi.w	#$E00,d1
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001EA8 4E75                       		rts	
00001EAA                            ; ===========================================================================
00001EAA                            
00001EAA                            loc_1ECC:				; XREF: Pal_DecColor
00001EAA 5448                       		addq.w	#2,a0
00001EAC 4E75                       		rts	
00001EAE                            ; End of function Pal_DecColor
00001EAE                            
00001EAE                            ; ---------------------------------------------------------------------------
00001EAE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EAE                            ; ---------------------------------------------------------------------------
00001EAE                            
00001EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAE                            
00001EAE                            
00001EAE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EAE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001EB4 7000                       		moveq	#0,d0
00001EB6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EBA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EBE D0C0                       		adda.w	d0,a0
00001EC0 323C 0EEE                  		move.w	#$EEE,d1
00001EC4 1038 F627                  		move.b	($FFFFF627).w,d0
00001EC8                            
00001EC8                            PalWhite_Loop:
00001EC8 30C1                       		move.w	d1,(a0)+
00001ECA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001ECE 383C 0015                  		move.w	#$15,d4
00001ED2                            
00001ED2                            loc_1EF4:
00001ED2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001ED8 6100 0000                  		bsr.w	DelayProgram
00001EDC 6100                       		bsr.s	Pal_WhiteToBlack
00001EDE 6100 F6EA                  		bsr.w	RunPLC_RAM
00001EE2 51CC FFEE                  		dbf	d4,loc_1EF4
00001EE6 4E75                       		rts	
00001EE8                            ; End of function Pal_MakeWhite
00001EE8                            
00001EE8                            
00001EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EE8                            
00001EE8                            
00001EE8                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001EE8 7000                       		moveq	#0,d0
00001EEA 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EEE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001EF2 1038 F626                  		move.b	($FFFFF626).w,d0
00001EF6 D0C0                       		adda.w	d0,a0
00001EF8 D2C0                       		adda.w	d0,a1
00001EFA 1038 F627                  		move.b	($FFFFF627).w,d0
00001EFE                            
00001EFE                            loc_1F20:
00001EFE 6100                       		bsr.s	Pal_DecColor2
00001F00 51C8 FFFC                  		dbf	d0,loc_1F20
00001F04                            
00001F04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F0A 6600                       		bne.s	locret_1F4A
00001F0C 7000                       		moveq	#0,d0
00001F0E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F12 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F16 1038 F626                  		move.b	($FFFFF626).w,d0
00001F1A D0C0                       		adda.w	d0,a0
00001F1C D2C0                       		adda.w	d0,a1
00001F1E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F22                            
00001F22                            loc_1F44:
00001F22 6100                       		bsr.s	Pal_DecColor2
00001F24 51C8 FFFC                  		dbf	d0,loc_1F44
00001F28                            
00001F28                            locret_1F4A:
00001F28 4E75                       		rts	
00001F2A                            ; End of function Pal_WhiteToBlack
00001F2A                            
00001F2A                            
00001F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F2A                            
00001F2A                            
00001F2A                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F2A 3419                       		move.w	(a1)+,d2
00001F2C 3610                       		move.w	(a0),d3
00001F2E B642                       		cmp.w	d2,d3
00001F30 6700                       		beq.s	loc_1F78
00001F32 3203                       		move.w	d3,d1
00001F34 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F38 6500                       		bcs.s	loc_1F64
00001F3A B242                       		cmp.w	d2,d1
00001F3C 6500                       		bcs.s	loc_1F64
00001F3E 30C1                       		move.w	d1,(a0)+
00001F40 4E75                       		rts	
00001F42                            ; ===========================================================================
00001F42                            
00001F42                            loc_1F64:				; XREF: Pal_DecColor2
00001F42 3203                       		move.w	d3,d1
00001F44 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F48 6500                       		bcs.s	loc_1F74
00001F4A B242                       		cmp.w	d2,d1
00001F4C 6500                       		bcs.s	loc_1F74
00001F4E 30C1                       		move.w	d1,(a0)+
00001F50 4E75                       		rts	
00001F52                            ; ===========================================================================
00001F52                            
00001F52                            loc_1F74:				; XREF: loc_1F64
00001F52 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F54 4E75                       		rts	
00001F56                            ; ===========================================================================
00001F56                            
00001F56                            loc_1F78:				; XREF: Pal_DecColor2
00001F56 5448                       		addq.w	#2,a0
00001F58 4E75                       		rts	
00001F5A                            ; End of function Pal_DecColor2
00001F5A                            
00001F5A                            ; ---------------------------------------------------------------------------
00001F5A                            ; Subroutine to	make a white flash when	you enter a special stage
00001F5A                            ; ---------------------------------------------------------------------------
00001F5A                            
00001F5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F5A                            
00001F5A                            
00001F5A                            Pal_MakeFlash:				; XREF: SpecialStage
00001F5A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F60 383C 0015                  		move.w	#$15,d4
00001F64                            
00001F64                            loc_1F86:
00001F64 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F6A 6100 0000                  		bsr.w	DelayProgram
00001F6E 6100                       		bsr.s	Pal_ToWhite
00001F70 6100 F658                  		bsr.w	RunPLC_RAM
00001F74 51CC FFEE                  		dbf	d4,loc_1F86
00001F78 4E75                       		rts	
00001F7A                            ; End of function Pal_MakeFlash
00001F7A                            
00001F7A                            
00001F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7A                            
00001F7A                            
00001F7A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F7A 7000                       		moveq	#0,d0
00001F7C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F80 1038 F626                  		move.b	($FFFFF626).w,d0
00001F84 D0C0                       		adda.w	d0,a0
00001F86 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8A                            
00001F8A                            loc_1FAC:
00001F8A 6100                       		bsr.s	Pal_AddColor2
00001F8C 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F90 7000                       		moveq	#0,d0
00001F92 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F96 1038 F626                  		move.b	($FFFFF626).w,d0
00001F9A D0C0                       		adda.w	d0,a0
00001F9C 1038 F627                  		move.b	($FFFFF627).w,d0
00001FA0                            
00001FA0                            loc_1FC2:
00001FA0 6100                       		bsr.s	Pal_AddColor2
00001FA2 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FA6 4E75                       		rts	
00001FA8                            ; End of function Pal_ToWhite
00001FA8                            
00001FA8                            
00001FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA8                            
00001FA8                            
00001FA8                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FA8 3410                       		move.w	(a0),d2
00001FAA 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FAE 6700                       		beq.s	loc_2006
00001FB0 3202                       		move.w	d2,d1
00001FB2 0241 000E                  		andi.w	#$E,d1
00001FB6 0C41 000E                  		cmpi.w	#$E,d1
00001FBA 6700                       		beq.s	loc_1FE2
00001FBC 5458                       		addq.w	#2,(a0)+	; increase red value
00001FBE 4E75                       		rts	
00001FC0                            ; ===========================================================================
00001FC0                            
00001FC0                            loc_1FE2:				; XREF: Pal_AddColor2
00001FC0 3202                       		move.w	d2,d1
00001FC2 0241 00E0                  		andi.w	#$E0,d1
00001FC6 0C41 00E0                  		cmpi.w	#$E0,d1
00001FCA 6700                       		beq.s	loc_1FF4
00001FCC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FD0 4E75                       		rts	
00001FD2                            ; ===========================================================================
00001FD2                            
00001FD2                            loc_1FF4:				; XREF: loc_1FE2
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 0E00                  		andi.w	#$E00,d1
00001FD8 0C41 0E00                  		cmpi.w	#$E00,d1
00001FDC 6700                       		beq.s	loc_2006
00001FDE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FE2 4E75                       		rts	
00001FE4                            ; ===========================================================================
00001FE4                            
00001FE4                            loc_2006:				; XREF: Pal_AddColor2
00001FE4 5448                       		addq.w	#2,a0
00001FE6 4E75                       		rts	
00001FE8                            ; End of function Pal_AddColor2
00001FE8                            
00001FE8                            ; ---------------------------------------------------------------------------
00001FE8                            ; Pallet cycling routine - Sega	logo
00001FE8                            ; ---------------------------------------------------------------------------
00001FE8                            
00001FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE8                            
00001FE8                            
00001FE8                            PalCycle_Sega:				; XREF: SegaScreen
00001FE8 4A38 F635                  		tst.b	($FFFFF635).w
00001FEC 6600                       		bne.s	loc_206A
00001FEE 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FF2 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001FF8 7205                       		moveq	#5,d1
00001FFA 3038 F632                  		move.w	($FFFFF632).w,d0
00001FFE                            
00001FFE                            loc_2020:
00001FFE 6A00                       		bpl.s	loc_202A
00002000 5448                       		addq.w	#2,a0
00002002 5341                       		subq.w	#1,d1
00002004 5440                       		addq.w	#2,d0
00002006 60F6                       		bra.s	loc_2020
00002008                            ; ===========================================================================
00002008                            
00002008                            loc_202A:				; XREF: PalCycle_Sega
00002008 3400                       		move.w	d0,d2
0000200A 0242 001E                  		andi.w	#$1E,d2
0000200E 6600                       		bne.s	loc_2034
00002010 5440                       		addq.w	#2,d0
00002012                            
00002012                            loc_2034:
00002012 0C40 0060                  		cmpi.w	#$60,d0
00002016 6400                       		bcc.s	loc_203E
00002018 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000201C                            
0000201C                            loc_203E:
0000201C 5440                       		addq.w	#2,d0
0000201E 51C9 FFE8                  		dbf	d1,loc_202A
00002022 3038 F632                  		move.w	($FFFFF632).w,d0
00002026 5440                       		addq.w	#2,d0
00002028 3400                       		move.w	d0,d2
0000202A 0242 001E                  		andi.w	#$1E,d2
0000202E 6600                       		bne.s	loc_2054
00002030 5440                       		addq.w	#2,d0
00002032                            
00002032                            loc_2054:
00002032 0C40 0064                  		cmpi.w	#$64,d0
00002036 6D00                       		blt.s	loc_2062
00002038 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000203E 70F4                       		moveq	#-$C,d0
00002040                            
00002040                            loc_2062:
00002040 31C0 F632                  		move.w	d0,($FFFFF632).w
00002044 7001                       		moveq	#1,d0
00002046 4E75                       		rts	
00002048                            ; ===========================================================================
00002048                            
00002048                            loc_206A:				; XREF: loc_202A
00002048 5338 F634                  		subq.b	#1,($FFFFF634).w
0000204C 6A00                       		bpl.s	loc_20BC
0000204E 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002054 3038 F632                  		move.w	($FFFFF632).w,d0
00002058 0640 000C                  		addi.w	#$C,d0
0000205C 0C40 0030                  		cmpi.w	#$30,d0
00002060 6500                       		bcs.s	loc_2088
00002062 7000                       		moveq	#0,d0
00002064 4E75                       		rts	
00002066                            ; ===========================================================================
00002066                            
00002066                            loc_2088:				; XREF: loc_206A
00002066 31C0 F632                  		move.w	d0,($FFFFF632).w
0000206A 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002070 41F0 0000                  		lea	(a0,d0.w),a0
00002074 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002078 22D8                       		move.l	(a0)+,(a1)+
0000207A 22D8                       		move.l	(a0)+,(a1)+
0000207C 3298                       		move.w	(a0)+,(a1)
0000207E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002082 7000                       		moveq	#0,d0
00002084 722C                       		moveq	#$2C,d1
00002086                            
00002086                            loc_20A8:
00002086 3400                       		move.w	d0,d2
00002088 0242 001E                  		andi.w	#$1E,d2
0000208C 6600                       		bne.s	loc_20B2
0000208E 5440                       		addq.w	#2,d0
00002090                            
00002090                            loc_20B2:
00002090 3390 0000                  		move.w	(a0),(a1,d0.w)
00002094 5440                       		addq.w	#2,d0
00002096 51C9 FFEE                  		dbf	d1,loc_20A8
0000209A                            
0000209A                            loc_20BC:
0000209A 7001                       		moveq	#1,d0
0000209C 4E75                       		rts	
0000209E                            ; End of function PalCycle_Sega
0000209E                            
0000209E                            ; ===========================================================================
0000209E                            
0000209E                            Pal_Sega1:	incbin	pallet\sega1.bin
000020AA                            Pal_Sega2:	incbin	pallet\sega2.bin
000020DA                            
000020DA                            ; ---------------------------------------------------------------------------
000020DA                            ; Subroutines to load pallets
000020DA                            ; ---------------------------------------------------------------------------
000020DA                            
000020DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DA                            
000020DA                            
000020DA                            PalLoad1:
000020DA 43F9 0000 0000             		lea	(PalPointers).l,a1
000020E0 E748                       		lsl.w	#3,d0
000020E2 D2C0                       		adda.w	d0,a1
000020E4 2459                       		movea.l	(a1)+,a2
000020E6 3659                       		movea.w	(a1)+,a3
000020E8 D6FC 0080                  		adda.w	#$80,a3
000020EC 3E19                       		move.w	(a1)+,d7
000020EE                            
000020EE                            loc_2110:
000020EE 26DA                       		move.l	(a2)+,(a3)+
000020F0 51CF FFFC                  		dbf	d7,loc_2110
000020F4 4E75                       		rts	
000020F6                            ; End of function PalLoad1
000020F6                            
000020F6                            
000020F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F6                            
000020F6                            
000020F6                            PalLoad2:
000020F6 43F9 0000 0000             		lea	(PalPointers).l,a1
000020FC E748                       		lsl.w	#3,d0
000020FE D2C0                       		adda.w	d0,a1
00002100 2459                       		movea.l	(a1)+,a2
00002102 3659                       		movea.w	(a1)+,a3
00002104 3E19                       		move.w	(a1)+,d7
00002106                            
00002106                            loc_2128:
00002106 26DA                       		move.l	(a2)+,(a3)+
00002108 51CF FFFC                  		dbf	d7,loc_2128
0000210C 4E75                       		rts	
0000210E                            ; End of function PalLoad2
0000210E                            
0000210E                            ; ---------------------------------------------------------------------------
0000210E                            ; Underwater pallet loading subroutine
0000210E                            ; ---------------------------------------------------------------------------
0000210E                            
0000210E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210E                            
0000210E                            
0000210E                            PalLoad3_Water:
0000210E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002114 E748                       		lsl.w	#3,d0
00002116 D2C0                       		adda.w	d0,a1
00002118 2459                       		movea.l	(a1)+,a2
0000211A 3659                       		movea.w	(a1)+,a3
0000211C 96FC 0080                  		suba.w	#$80,a3
00002120 3E19                       		move.w	(a1)+,d7
00002122                            
00002122                            loc_2144:
00002122 26DA                       		move.l	(a2)+,(a3)+
00002124 51CF FFFC                  		dbf	d7,loc_2144
00002128 4E75                       		rts	
0000212A                            ; End of function PalLoad3_Water
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            PalLoad4_Water:
0000212A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002130 E748                       		lsl.w	#3,d0
00002132 D2C0                       		adda.w	d0,a1
00002134 2459                       		movea.l	(a1)+,a2
00002136 3659                       		movea.w	(a1)+,a3
00002138 96FC 0100                  		suba.w	#$100,a3
0000213C 3E19                       		move.w	(a1)+,d7
0000213E                            
0000213E                            loc_2160:
0000213E 26DA                       		move.l	(a2)+,(a3)+
00002140 51CF FFFC                  		dbf	d7,loc_2160
00002144 4E75                       		rts	
00002146                            ; End of function PalLoad4_Water
00002146                            
00002146                            ; ===========================================================================
00002146                            ; ---------------------------------------------------------------------------
00002146                            ; Pallet pointers
00002146                            ; ---------------------------------------------------------------------------
00002146                            PalPointers:
00002146                            	include "_inc\Pallet pointers.asm"
00002146                            ; ---------------------------------------------------------------------------
00002146                            ; Pallet pointers
00002146                            ; ---------------------------------------------------------------------------
00002146 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000214A FB00                       	dc.w $FB00		; RAM address
0000214C 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000214E 0000 0000                  	dc.l Pal_Title
00002152 FB00                       	dc.w $FB00
00002154 001F                       	dc.w $1F
00002156 0000 0000                  	dc.l Pal_LevelSel
0000215A FB00                       	dc.w $FB00
0000215C 001F                       	dc.w $1F
0000215E 0000 0000                  	dc.l Pal_Sonic
00002162 FB00                       	dc.w $FB00
00002164 0007                       	dc.w 7
00002166 0000 0000                  	dc.l Pal_GHZ
0000216A FB20                       	dc.w $FB20
0000216C 0017                       	dc.w $17
0000216E 0000 0000                  	dc.l Pal_LZ
00002172 FB20                       	dc.w $FB20
00002174 0017                       	dc.w $17
00002176 0000 0000                  	dc.l Pal_MZ
0000217A FB20                       	dc.w $FB20
0000217C 0017                       	dc.w $17
0000217E 0000 0000                  	dc.l Pal_SLZ
00002182 FB20                       	dc.w $FB20
00002184 0017                       	dc.w $17
00002186 0000 0000                  	dc.l Pal_SYZ
0000218A FB20                       	dc.w $FB20
0000218C 0017                       	dc.w $17
0000218E 0000 0000                  	dc.l Pal_SBZ1
00002192 FB20                       	dc.w $FB20
00002194 0017                       	dc.w $17
00002196 0000 0000                  	dc.l Pal_Special
0000219A FB00                       	dc.w $FB00
0000219C 001F                       	dc.w $1F
0000219E 0000 0000                  	dc.l Pal_LZWater
000021A2 FB00                       	dc.w $FB00
000021A4 001F                       	dc.w $1F
000021A6 0000 0000                  	dc.l Pal_SBZ3
000021AA FB20                       	dc.w $FB20
000021AC 0017                       	dc.w $17
000021AE 0000 0000                  	dc.l Pal_SBZ3Water
000021B2 FB00                       	dc.w $FB00
000021B4 001F                       	dc.w $1F
000021B6 0000 0000                  	dc.l Pal_SBZ2
000021BA FB20                       	dc.w $FB20
000021BC 0017                       	dc.w $17
000021BE 0000 0000                  	dc.l Pal_LZSonWater
000021C2 FB00                       	dc.w $FB00
000021C4 0007                       	dc.w 7
000021C6 0000 0000                  	dc.l Pal_SBZ3SonWat
000021CA FB00                       	dc.w $FB00
000021CC 0007                       	dc.w 7
000021CE 0000 0000                  	dc.l Pal_SpeResult
000021D2 FB00                       	dc.w $FB00
000021D4 001F                       	dc.w $1F
000021D6 0000 0000                  	dc.l Pal_SpeContinue
000021DA FB00                       	dc.w $FB00
000021DC 000F                       	dc.w $F
000021DE 0000 0000                  	dc.l Pal_Ending
000021E2 FB00                       	dc.w $FB00
000021E4 001F                       	dc.w $1F
000021E4 001F                       	dc.w $1F
000021E6                            
000021E6                            ; ---------------------------------------------------------------------------
000021E6                            ; Pallet data
000021E6                            ; ---------------------------------------------------------------------------
000021E6                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002266                            Pal_Title:	incbin	pallet\title.bin
000022E6                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002366                            Pal_Sonic:	incbin	pallet\sonic.bin
00002386                            Pal_GHZ:	incbin	pallet\ghz.bin
000023E6                            Pal_LZ:		incbin	pallet\lz.bin
00002446                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024C6                            Pal_MZ:		incbin	pallet\mz.bin
00002526                            Pal_SLZ:	incbin	pallet\slz.bin
00002586                            Pal_SYZ:	incbin	pallet\syz.bin
000025E6                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002646                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026A6                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002726                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002786                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002806                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002826                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002846                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028C6                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002906                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002986                            
00002986                            ; ---------------------------------------------------------------------------
00002986                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002986                            ; ---------------------------------------------------------------------------
00002986                            
00002986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002986                            
00002986                            
00002986                            DelayProgram:				; XREF: PauseGame
00002986 46FC 2300                  		move	#$2300,sr
0000298A                            
0000298A                            loc_29AC:
0000298A 4A38 F62A                  		tst.b	($FFFFF62A).w
0000298E 66FA                       		bne.s	loc_29AC
00002990 4E75                       		rts	
00002992                            ; End of function DelayProgram
00002992                            
00002992                            ; ---------------------------------------------------------------------------
00002992                            ; Subroutine to	generate a pseudo-random number	in d0
00002992                            ; ---------------------------------------------------------------------------
00002992                            
00002992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002992                            
00002992                            
00002992                            RandomNumber:
00002992 2238 F636                  		move.l	($FFFFF636).w,d1
00002996 6600                       		bne.s	loc_29C0
00002998 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000299E                            
0000299E                            loc_29C0:
0000299E 2001                       		move.l	d1,d0
000029A0 E581                       		asl.l	#2,d1
000029A2 D280                       		add.l	d0,d1
000029A4 E781                       		asl.l	#3,d1
000029A6 D280                       		add.l	d0,d1
000029A8 3001                       		move.w	d1,d0
000029AA 4841                       		swap	d1
000029AC D041                       		add.w	d1,d0
000029AE 3200                       		move.w	d0,d1
000029B0 4841                       		swap	d1
000029B2 21C1 F636                  		move.l	d1,($FFFFF636).w
000029B6 4E75                       		rts	
000029B8                            ; End of function RandomNumber
000029B8                            
000029B8                            
000029B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B8                            
000029B8                            
000029B8                            CalcSine:				; XREF: SS_BGAnimate; et al
000029B8 0240 00FF                  		andi.w	#$FF,d0
000029BC D040                       		add.w	d0,d0
000029BE 0640 0080                  		addi.w	#$80,d0
000029C2 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029C6 0440 0080                  		subi.w	#$80,d0
000029CA 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029CE 4E75                       		rts	
000029D0                            ; End of function CalcSine
000029D0                            
000029D0                            ; ===========================================================================
000029D0                            
000029D0                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C50                            
00002C50                            ; ===========================================================================
00002C50 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C54 3200                       		move.w	d0,d1
00002C56 4841                       		swap	d1
00002C58 7000                       		moveq	#0,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 7407                       		moveq	#7,d2
00002C5E                            
00002C5E                            loc_2C80:
00002C5E E599                       		rol.l	#2,d1
00002C60 D040                       		add.w	d0,d0
00002C62 5240                       		addq.w	#1,d0
00002C64 9240                       		sub.w	d0,d1
00002C66 6400                       		bcc.s	loc_2C9A
00002C68 D240                       		add.w	d0,d1
00002C6A 5340                       		subq.w	#1,d0
00002C6C 51CA FFF0                  		dbf	d2,loc_2C80
00002C70 E248                       		lsr.w	#1,d0
00002C72 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C76 4E75                       		rts	
00002C78                            ; ===========================================================================
00002C78                            
00002C78                            loc_2C9A:
00002C78 5240                       		addq.w	#1,d0
00002C7A 51CA FFE2                  		dbf	d2,loc_2C80
00002C7E E248                       		lsr.w	#1,d0
00002C80 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C84 4E75                       		rts	
00002C86                            
00002C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C86                            
00002C86                            
00002C86                            CalcAngle:
00002C86 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C8A 7600                       		moveq	#0,d3
00002C8C 7800                       		moveq	#0,d4
00002C8E 3601                       		move.w	d1,d3
00002C90 3802                       		move.w	d2,d4
00002C92 8843                       		or.w	d3,d4
00002C94 6700                       		beq.s	loc_2D04
00002C96 3802                       		move.w	d2,d4
00002C98 4A43                       		tst.w	d3
00002C9A 6A00 0000                  		bpl.w	loc_2CC2
00002C9E 4443                       		neg.w	d3
00002CA0                            
00002CA0                            loc_2CC2:
00002CA0 4A44                       		tst.w	d4
00002CA2 6A00 0000                  		bpl.w	loc_2CCA
00002CA6 4444                       		neg.w	d4
00002CA8                            
00002CA8                            loc_2CCA:
00002CA8 B843                       		cmp.w	d3,d4
00002CAA 6400 0000                  		bcc.w	loc_2CDC
00002CAE E18C                       		lsl.l	#8,d4
00002CB0 88C3                       		divu.w	d3,d4
00002CB2 7000                       		moveq	#0,d0
00002CB4 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CB8 6000                       		bra.s	loc_2CE6
00002CBA                            ; ===========================================================================
00002CBA                            
00002CBA                            loc_2CDC:				; XREF: CalcAngle
00002CBA E18B                       		lsl.l	#8,d3
00002CBC 86C4                       		divu.w	d4,d3
00002CBE 7040                       		moveq	#$40,d0
00002CC0 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CC4                            
00002CC4                            loc_2CE6:
00002CC4 4A41                       		tst.w	d1
00002CC6 6A00 0000                  		bpl.w	loc_2CF2
00002CCA 4440                       		neg.w	d0
00002CCC 0640 0080                  		addi.w	#$80,d0
00002CD0                            
00002CD0                            loc_2CF2:
00002CD0 4A42                       		tst.w	d2
00002CD2 6A00 0000                  		bpl.w	loc_2CFE
00002CD6 4440                       		neg.w	d0
00002CD8 0640 0100                  		addi.w	#$100,d0
00002CDC                            
00002CDC                            loc_2CFE:
00002CDC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CE0 4E75                       		rts	
00002CE2                            ; ===========================================================================
00002CE2                            
00002CE2                            loc_2D04:				; XREF: CalcAngle
00002CE2 303C 0040                  		move.w	#$40,d0
00002CE6 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEA 4E75                       		rts	
00002CEC                            ; End of function CalcAngle
00002CEC                            
00002CEC                            ; ===========================================================================
00002CEC                            
00002CEC                            Angle_Data:	incbin	misc\angles.bin
00002DEE                            
00002DEE                            ; ===========================================================================
00002DEE                            
00002DEE                            ; ---------------------------------------------------------------------------
00002DEE                            ; Sega screen
00002DEE                            ; ---------------------------------------------------------------------------
00002DEE                            
00002DEE                            SegaScreen:				; XREF: GameModeArray
00002DEE 103C 00E4                  		move.b	#$E4,d0
00002DF2 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002DF6 6100 E7C4                  		bsr.w	ClearPLC
00002DFA 6100 F034                  		bsr.w	Pal_FadeFrom
00002DFE 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E04 3CBC 8004                  		move.w	#$8004,(a6)
00002E08 3CBC 8230                  		move.w	#$8230,(a6)
00002E0C 3CBC 8407                  		move.w	#$8407,(a6)
00002E10 3CBC 8700                  		move.w	#$8700,(a6)
00002E14 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E18 4238 F64E                  		clr.b	($FFFFF64E).w
00002E1C 46FC 2700                  		move	#$2700,sr
00002E20 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E24 0200 00BF                  		andi.b	#$BF,d0
00002E28 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E2E 6100 E472                  		bsr.w	ClearScreen
00002E32 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E3C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E42 6100 E5DA                  		bsr.w	NemDec
00002E46 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E4C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E52 303C 0000                  		move.w	#0,d0
00002E56 6100 E8A4                  		bsr.w	EniDec
00002E5A 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E60 203C 6510 0003             		move.l	#$65100003,d0
00002E66 7217                       		moveq	#$17,d1
00002E68 7407                       		moveq	#7,d2
00002E6A 6100 E592                  		bsr.w	ShowVDPGraphics
00002E6E 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E74 203C 4000 0003             		move.l	#$40000003,d0
00002E7A 7227                       		moveq	#$27,d1
00002E7C 741B                       		moveq	#$1B,d2
00002E7E 6100 E57E                  		bsr.w	ShowVDPGraphics
00002E82 7000                       		moveq	#0,d0
00002E84 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E88 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E8E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002E94 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002E9A 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EA0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EA4 0000 0040                  		ori.b	#$40,d0
00002EA8 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EAE                            
00002EAE                            Sega_WaitPallet:
00002EAE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EB4 6100 FAD0                  		bsr.w	DelayProgram
00002EB8 6100 F12E                  		bsr.w	PalCycle_Sega
00002EBC 66F0                       		bne.s	Sega_WaitPallet
00002EBE                            
00002EBE 103C 00E1                  		move.b	#$E1,d0
00002EC2 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EC6 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002ECC 6100 FAB8                  		bsr.w	DelayProgram
00002ED0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002ED6                            
00002ED6                            Sega_WaitEnd:
00002ED6 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EDC 6100 FAA8                  		bsr.w	DelayProgram
00002EE0 4A78 F614                  		tst.w	($FFFFF614).w
00002EE4 6700                       		beq.s	Sega_GotoTitle
00002EE6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002EEC 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002EEE                            
00002EEE                            Sega_GotoTitle:
00002EEE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002EF4 4E75                       		rts	
00002EF6                            ; ===========================================================================
00002EF6                            
00002EF6                            ; ---------------------------------------------------------------------------
00002EF6                            ; Title	screen
00002EF6                            ; ---------------------------------------------------------------------------
00002EF6                            
00002EF6                            TitleScreen:				; XREF: GameModeArray
00002EF6 103C 00E4                  		move.b	#$E4,d0
00002EFA 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002EFE 6100 E6BC                  		bsr.w	ClearPLC
00002F02 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F06 46FC 2700                  		move	#$2700,sr
00002F0A 6100 E424                  		bsr.w	SoundDriverLoad
00002F0E 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F14 3CBC 8004                  		move.w	#$8004,(a6)
00002F18 3CBC 8230                  		move.w	#$8230,(a6)
00002F1C 3CBC 8407                  		move.w	#$8407,(a6)
00002F20 3CBC 9001                  		move.w	#$9001,(a6)
00002F24 3CBC 9200                  		move.w	#$9200,(a6)
00002F28 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F2C 3CBC 8720                  		move.w	#$8720,(a6)
00002F30 4238 F64E                  		clr.b	($FFFFF64E).w
00002F34 6100 E36C                  		bsr.w	ClearScreen
00002F38 43F8 D000                  		lea	($FFFFD000).w,a1
00002F3C 7000                       		moveq	#0,d0
00002F3E 323C 07FF                  		move.w	#$7FF,d1
00002F42                            
00002F42                            Title_ClrObjRam:
00002F42 22C0                       		move.l	d0,(a1)+
00002F44 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F48                            
00002F48 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F52 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F58 6100 E4C4                  		bsr.w	NemDec
00002F5C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F66 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F6C 6100 E4B0                  		bsr.w	NemDec
00002F70 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F76 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F7C 303C 0000                  		move.w	#0,d0
00002F80 6100 E77A                  		bsr.w	EniDec
00002F84 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F8A 203C 4000 0003             		move.l	#$40000003,d0
00002F90 7227                       		moveq	#$27,d1
00002F92 741B                       		moveq	#$1B,d2
00002F94 6100 E468                  		bsr.w	ShowVDPGraphics
00002F98 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002F9C 7000                       		moveq	#0,d0
00002F9E 323C 001F                  		move.w	#$1F,d1
00002FA2                            
00002FA2                            Title_ClrPallet:
00002FA2 22C0                       		move.l	d0,(a1)+
00002FA4 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FA8                            
00002FA8 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FAA 6100 F12E                  		bsr.w	PalLoad1
00002FAE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FB4 4EB9 0000 0000             		jsr	ObjectsLoad
00002FBA 4EB9 0000 0000             		jsr	BuildSprites
00002FC0 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FC4 46FC 2700                  		move	#$2700,sr
00002FC8 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FD2 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FD8 6100 E444                  		bsr.w	NemDec
00002FDC 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00002FE6 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002FEC 6100 E430                  		bsr.w	NemDec
00002FF0 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00002FFA 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003000 6100 E41C                  		bsr.w	NemDec
00003004 4DF9 00C0 0000             		lea	($C00000).l,a6
0000300A 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003012 4BF9 0000 05CE             		lea	(Art_Text).l,a5
00003018 323C 028F                  		move.w	#$28F,d1
0000301C                            
0000301C                            Title_LoadText:
0000301C 3C9D                       		move.w	(a5)+,(a6)
0000301E 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003022                            
00003022 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003028 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000302E 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003034 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000303A 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003040 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003046 6100 0000                  		bsr.w	LevelSizeLoad
0000304A 6100 0000                  		bsr.w	DeformBgLayer
0000304E 43F8 B000                  		lea	($FFFFB000).w,a1
00003052 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003058 303C 0000                  		move.w	#0,d0
0000305C 6100 E69E                  		bsr.w	EniDec
00003060 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003066 43F9 00FF 0000             		lea	($FF0000).l,a1
0000306C 6100 E80C                  		bsr.w	KosDec
00003070 6100 0000                  		bsr.w	LevelLayoutLoad
00003074 6100 EDBA                  		bsr.w	Pal_FadeFrom
00003078 46FC 2700                  		move	#$2700,sr
0000307C 6100 E224                  		bsr.w	ClearScreen
00003080 4BF9 00C0 0004             		lea	($C00004).l,a5
00003086 4DF9 00C0 0000             		lea	($C00000).l,a6
0000308C 47F8 F708                  		lea	($FFFFF708).w,a3
00003090 49F8 A440                  		lea	($FFFFA440).w,a4
00003094 343C 6000                  		move.w	#$6000,d2
00003098 6100 0000                  		bsr.w	LoadTilesFromStart2
0000309C 43F9 00FF 0000             		lea	($FF0000).l,a1
000030A2 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030A8 303C 0000                  		move.w	#0,d0
000030AC 6100 E64E                  		bsr.w	EniDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 203C 4206 0003             		move.l	#$42060003,d0
000030BC 7221                       		moveq	#$21,d1
000030BE 7415                       		moveq	#$15,d2
000030C0 6100 E33C                  		bsr.w	ShowVDPGraphics
000030C4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030CE 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030D4 6100 E348                  		bsr.w	NemDec
000030D8 7001                       		moveq	#1,d0		; load title screen pallet
000030DA 6100 EFFE                  		bsr.w	PalLoad1
000030DE 103C 008A                  		move.b	#$8A,d0		; play title screen music
000030E2 6100 E296                  		bsr.w	PlaySound_Special
000030E6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000030EC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000030F2 43F8 D080                  		lea	($FFFFD080).w,a1
000030F6 7000                       		moveq	#0,d0
000030F8 323C 0007                  		move.w	#7,d1
000030FC                            
000030FC                            Title_ClrObjRam2:
000030FC 22C0                       		move.l	d0,(a1)+
000030FE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003102                            
00003102 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003108 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000310E 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003114 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000311A 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003120 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003126 4EB9 0000 0000             		jsr	ObjectsLoad
0000312C 6100 0000                  		bsr.w	DeformBgLayer
00003130 4EB9 0000 0000             		jsr	BuildSprites
00003136 7000                       		moveq	#0,d0
00003138 6100 E456                  		bsr.w	LoadPLC2
0000313C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003142 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003148 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000314C 0000 0040                  		ori.b	#$40,d0
00003150 33C0 00C0 0004             		move.w	d0,($C00004).l
00003156 6100 EC32                  		bsr.w	Pal_FadeTo
0000315A                            
0000315A                            loc_317C:
0000315A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003160 6100 F824                  		bsr.w	DelayProgram
00003164 4EB9 0000 0000             		jsr	ObjectsLoad
0000316A 6100 0000                  		bsr.w	DeformBgLayer
0000316E 4EB9 0000 0000             		jsr	BuildSprites
00003174 6100 E7C4                  		bsr.w	PalCycle_Title
00003178 6100 E450                  		bsr.w	RunPLC_RAM
0000317C 3038 D008                  		move.w	($FFFFD008).w,d0
00003180 5440                       		addq.w	#2,d0
00003182 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003186 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000318A 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000318C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003192 4E75                       		rts	
00003194                            ; ===========================================================================
00003194                            
00003194                            Title_ChkRegion:
00003194 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003198 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000319A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031A0 6000                       		bra.s	Title_EnterCheat
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            Title_RegionJ:				; XREF: Title_ChkRegion
000031A2 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031A8                            
000031A8                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031A8 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031AC D0C0                       		adda.w	d0,a0
000031AE 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031B2 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031B6 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031B8 6600                       		bne.s	loc_3210	; if not, branch
000031BA 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031BE 4A00                       		tst.b	d0
000031C0 6600                       		bne.s	Title_CountC
000031C2 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031C6 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031CA E249                       		lsr.w	#1,d1
000031CC 0241 0003                  		andi.w	#3,d1
000031D0 6700                       		beq.s	Title_PlayRing
000031D2 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031D6 6A00                       		bpl.s	Title_PlayRing
000031D8 7201                       		moveq	#1,d1
000031DA 1181 1001                  		move.b	d1,1(a0,d1.w)
000031DE                            
000031DE                            Title_PlayRing:
000031DE 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000031E4 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000031E8 6100 E190                  		bsr.w	PlaySound_Special
000031EC 6000                       		bra.s	Title_CountC
000031EE                            ; ===========================================================================
000031EE                            
000031EE                            loc_3210:				; XREF: Title_EnterCheat
000031EE 4A00                       		tst.b	d0
000031F0 6700                       		beq.s	Title_CountC
000031F2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000031F8 6700                       		beq.s	Title_CountC
000031FA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003200                            
00003200                            Title_CountC:
00003200 1038 F605                  		move.b	($FFFFF605).w,d0
00003204 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003208 6700                       		beq.s	loc_3230	; if not, branch
0000320A 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
0000320E                            
0000320E                            loc_3230:
0000320E 4A78 F614                  		tst.w	($FFFFF614).w
00003212 6700 0000                  		beq.w	Demo
00003216 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000321C 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003220                            
00003220                            Title_ChkLevSel:
00003220 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003224 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003228 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000322E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003232 7002                       		moveq	#2,d0
00003234 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
00003238 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000323C 7000                       		moveq	#0,d0
0000323E 323C 00DF                  		move.w	#$DF,d1
00003242                            
00003242                            Title_ClrScroll:
00003242 22C0                       		move.l	d0,(a1)+
00003244 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003248                            
00003248 21C0 F616                  		move.l	d0,($FFFFF616).w
0000324C 46FC 2700                  		move	#$2700,sr
00003250 4DF9 00C0 0000             		lea	($C00000).l,a6
00003256 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003260 323C 03FF                  		move.w	#$3FF,d1
00003264                            
00003264                            Title_ClrVram:
00003264 2C80                       		move.l	d0,(a6)
00003266 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000326A                            
0000326A 6100 0000                  		bsr.w	LevSelTextLoad
0000326E                            
0000326E                            ; ---------------------------------------------------------------------------
0000326E                            ; Level	Select
0000326E                            ; ---------------------------------------------------------------------------
0000326E                            
0000326E                            LevelSelect:
0000326E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003274 6100 F710                  		bsr.w	DelayProgram
00003278 6100 0000                  		bsr.w	LevSelControls
0000327C 6100 E34C                  		bsr.w	RunPLC_RAM
00003280 4AB8 F680                  		tst.l	($FFFFF680).w
00003284 66E8                       		bne.s	LevelSelect
00003286 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000328C 67E0                       		beq.s	LevelSelect	; if not, branch
0000328E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003292 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003296 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003298 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000329C 0640 0080                  		addi.w	#$80,d0
000032A0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032A4 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032A6 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032AA 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032AC 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032B0 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032B2                            
000032B2                            LevSel_NoCheat:
000032B2 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032B6 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032B8 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032BC 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032BE                            
000032BE                            LevSel_PlaySnd:
000032BE 6100 E0BA                  		bsr.w	PlaySound_Special
000032C2 60AA                       		bra.s	LevelSelect
000032C4                            ; ===========================================================================
000032C4                            
000032C4                            LevSel_Ending:				; XREF: LevelSelect
000032C4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032CA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032D0 4E75                       		rts	
000032D2                            ; ===========================================================================
000032D2                            
000032D2                            LevSel_Credits:				; XREF: LevelSelect
000032D2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032D8 103C 0091                  		move.b	#$91,d0
000032DC 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
000032E0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000032E6 4E75                       		rts	
000032E8                            ; ===========================================================================
000032E8                            
000032E8                            LevSel_Level_SS:			; XREF: LevelSelect
000032E8 D040                       		add.w	d0,d0
000032EA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000032EE 6B00 FF7E                  		bmi.w	LevelSelect
000032F2 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000032F6 6600                       		bne.s	LevSel_Level	; if not, branch
000032F8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000032FE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003302 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003308 7000                       		moveq	#0,d0
0000330A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000330E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003312 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003316 4E75                       		rts	
00003318                            ; ===========================================================================
00003318                            
00003318                            LevSel_Level:				; XREF: LevSel_Level_SS
00003318 0240 3FFF                  		andi.w	#$3FFF,d0
0000331C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003320                            
00003320                            PlayLevel:				; XREF: ROM:00003246j ...
00003320 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003326 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332C 7000                       		moveq	#0,d0
0000332E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003332 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003336 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000333A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000333E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003342 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003346 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000334A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000334E 103C 00E0                  		move.b	#$E0,d0
00003352 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003356 4E75                       		rts	
00003358                            ; ===========================================================================
00003358                            ; ---------------------------------------------------------------------------
00003358                            ; Level	select - level pointers
00003358                            ; ---------------------------------------------------------------------------
00003358                            LSelectPointers:
00003358                            		incbin	misc\ls_point.bin
00003382                            		even
00003382                            ; ---------------------------------------------------------------------------
00003382                            ; Level	select codes
00003382                            ; ---------------------------------------------------------------------------
00003382                            LevelSelectCode_J:
00003382                            		incbin	misc\ls_jcode.bin
00003388                            		even
00003388                            
00003388                            LevelSelectCode_US:
00003388                            		incbin	misc\ls_ucode.bin
0000338E                            		even
0000338E                            ; ===========================================================================
0000338E                            
0000338E                            ; ---------------------------------------------------------------------------
0000338E                            ; Demo mode
0000338E                            ; ---------------------------------------------------------------------------
0000338E                            
0000338E                            Demo:					; XREF: TitleScreen
0000338E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003394                            
00003394                            loc_33B6:				; XREF: loc_33E4
00003394 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000339A 6100 F5EA                  		bsr.w	DelayProgram
0000339E 6100 0000                  		bsr.w	DeformBgLayer
000033A2 6100 E576                  		bsr.w	PalCycle_Load
000033A6 6100 E222                  		bsr.w	RunPLC_RAM
000033AA 3038 D008                  		move.w	($FFFFD008).w,d0
000033AE 5440                       		addq.w	#2,d0
000033B0 31C0 D008                  		move.w	d0,($FFFFD008).w
000033B4 0C40 1C00                  		cmpi.w	#$1C00,d0
000033B8 6500                       		bcs.s	loc_33E4
000033BA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033C0 4E75                       		rts	
000033C2                            ; ===========================================================================
000033C2                            
000033C2                            loc_33E4:				; XREF: Demo
000033C2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033C8 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033CC 4A78 F614                  		tst.w	($FFFFF614).w
000033D0 6600 FFC2                  		bne.w	loc_33B6
000033D4 103C 00E0                  		move.b	#$E0,d0
000033D8 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033DC 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000033E0 0240 0007                  		andi.w	#7,d0
000033E4 D040                       		add.w	d0,d0
000033E6 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000033EA 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000033EE 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000033F2 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000033F8 6500                       		bcs.s	loc_3422	; if yes, branch
000033FA 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003400                            
00003400                            loc_3422:
00003400 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003406 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000340C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003410 6600                       		bne.s	Demo_Level	; if not, branch
00003412 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003418 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000341C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003420                            
00003420                            Demo_Level:
00003420 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003426 7000                       		moveq	#0,d0
00003428 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000342C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003430 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003434 4E75                       		rts	
00003436                            ; ===========================================================================
00003436                            ; ---------------------------------------------------------------------------
00003436                            ; Levels used in demos
00003436                            ; ---------------------------------------------------------------------------
00003436                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000343E                            		even
0000343E                            
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            ; Subroutine to	change what you're selecting in the level select
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            
0000343E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000343E                            
0000343E                            
0000343E                            LevSelControls:				; XREF: LevelSelect
0000343E 1238 F605                  		move.b	($FFFFF605).w,d1
00003442 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003446 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003448 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000344C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000344E                            
0000344E                            LevSel_UpDown:
0000344E 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003454 1238 F604                  		move.b	($FFFFF604).w,d1
00003458 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000345C 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000345E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003462 0801 0000                  		btst	#0,d1		; is up	pressed?
00003466 6700                       		beq.s	LevSel_Down	; if not, branch
00003468 5340                       		subq.w	#1,d0		; move up 1 selection
0000346A 6400                       		bcc.s	LevSel_Down
0000346C 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000346E                            
0000346E                            LevSel_Down:
0000346E 0801 0001                  		btst	#1,d1		; is down pressed?
00003472 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003474 5240                       		addq.w	#1,d0		; move down 1 selection
00003476 0C40 0015                  		cmpi.w	#$15,d0
0000347A 6500                       		bcs.s	LevSel_Refresh
0000347C 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000347E                            
0000347E                            LevSel_Refresh:
0000347E 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003482 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003486 4E75                       		rts	
00003488                            ; ===========================================================================
00003488                            
00003488                            LevSel_SndTest:				; XREF: LevSelControls
00003488 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
0000348E 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003490 1238 F605                  		move.b	($FFFFF605).w,d1
00003494 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003498 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000349A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000349E 0801 0002                  		btst	#2,d1		; is left pressed?
000034A2 6700                       		beq.s	LevSel_Right	; if not, branch
000034A4 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034A6 6400                       		bcc.s	LevSel_Right
000034A8 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034AA                            
000034AA                            LevSel_Right:
000034AA 0801 0003                  		btst	#3,d1		; is right pressed?
000034AE 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034B0 5240                       		addq.w	#1,d0		; add 1	to sound test
000034B2 0C40 0050                  		cmpi.w	#$50,d0
000034B6 6500                       		bcs.s	LevSel_Refresh2
000034B8 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034BA                            
000034BA                            LevSel_Refresh2:
000034BA 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034BE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034C2                            
000034C2                            LevSel_NoMove:
000034C2 4E75                       		rts	
000034C4                            ; End of function LevSelControls
000034C4                            
000034C4                            ; ---------------------------------------------------------------------------
000034C4                            ; Subroutine to load level select text
000034C4                            ; ---------------------------------------------------------------------------
000034C4                            
000034C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034C4                            
000034C4                            
000034C4                            LevSelTextLoad:				; XREF: TitleScreen
000034C4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034D0 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034D6 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034DA 7214                       		moveq	#$14,d1		; number of lines of text
000034DC                            
000034DC                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034DC 2D44 0004                  		move.l	d4,4(a6)
000034E0 6100 0000                  		bsr.w	LevSel_ChgLine
000034E4 0684 0080 0000             		addi.l	#$800000,d4
000034EA 51C9 FFF0                  		dbf	d1,loc_34FE
000034EE 7000                       		moveq	#0,d0
000034F0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000034F4 3200                       		move.w	d0,d1
000034F6 283C 6210 0003             		move.l	#$62100003,d4
000034FC EF48                       		lsl.w	#7,d0
000034FE 4840                       		swap	d0
00003500 D880                       		add.l	d0,d4
00003502 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003508 E749                       		lsl.w	#3,d1
0000350A 3001                       		move.w	d1,d0
0000350C D241                       		add.w	d1,d1
0000350E D240                       		add.w	d0,d1
00003510 D2C1                       		adda.w	d1,a1
00003512 363C C680                  		move.w	#$C680,d3
00003516 2D44 0004                  		move.l	d4,4(a6)
0000351A 6100 0000                  		bsr.w	LevSel_ChgLine
0000351E 363C E680                  		move.w	#$E680,d3
00003522 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003528 6600                       		bne.s	loc_3550
0000352A 363C C680                  		move.w	#$C680,d3
0000352E                            
0000352E                            loc_3550:
0000352E 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003538 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000353C 0640 0080                  		addi.w	#$80,d0
00003540 1400                       		move.b	d0,d2
00003542 E808                       		lsr.b	#4,d0
00003544 6100 0000                  		bsr.w	LevSel_ChgSnd
00003548 1002                       		move.b	d2,d0
0000354A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000354E 4E75                       		rts	
00003550                            ; End of function LevSelTextLoad
00003550                            
00003550                            
00003550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003550                            
00003550                            
00003550                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003550 0240 000F                  		andi.w	#$F,d0
00003554 0C00 000A                  		cmpi.b	#$A,d0
00003558 6500                       		bcs.s	loc_3580
0000355A 5E00                       		addi.b	#7,d0
0000355C                            
0000355C                            loc_3580:
0000355C D043                       		add.w	d3,d0
0000355E 3C80                       		move.w	d0,(a6)
00003560 4E75                       		rts	
00003562                            ; End of function LevSel_ChgSnd
00003562                            
00003562                            
00003562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003562                            
00003562                            
00003562                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003562 7417                       		moveq	#$17,d2		; number of characters per line
00003564                            
00003564                            loc_3588:
00003564 7000                       		moveq	#0,d0
00003566 1019                       		move.b	(a1)+,d0
00003568 6A00                       		bpl.s	loc_3598
0000356A 3CBC 0000                  		move.w	#0,(a6)
0000356E 51CA FFF4                  		dbf	d2,loc_3588
00003572 4E75                       		rts	
00003574                            ; ===========================================================================
00003574                            
00003574                            loc_3598:				; XREF: LevSel_ChgLine
00003574 D043                       		add.w	d3,d0
00003576 3C80                       		move.w	d0,(a6)
00003578 51CA FFEA                  		dbf	d2,loc_3588
0000357C 4E75                       		rts	
0000357E                            ; End of function LevSel_ChgLine
0000357E                            
0000357E                            ; ===========================================================================
0000357E                            ; ---------------------------------------------------------------------------
0000357E                            ; Level	select menu text
0000357E                            ; ---------------------------------------------------------------------------
0000357E                            LevelMenuText:	incbin	misc\menutext.bin
00003776                            		even
00003776                            ; ---------------------------------------------------------------------------
00003776                            ; Music	playlist
00003776                            ; ---------------------------------------------------------------------------
00003776                            MusicList:	incbin	misc\muslist1.bin
0000377E                            		even
0000377E                            ; ===========================================================================
0000377E                            
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            ; Level
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            
0000377E                            Level:					; XREF: GameModeArray
0000377E 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003784 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003788 6B00                       		bmi.s	loc_37B6
0000378A 103C 00E0                  		move.b	#$E0,d0
0000378E 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
00003792                            
00003792                            loc_37B6:
00003792 6100 DE28                  		bsr.w	ClearPLC
00003796 6100 E698                  		bsr.w	Pal_FadeFrom
0000379A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000379E 6B00                       		bmi.s	Level_ClrRam
000037A0 46FC 2700                  		move	#$2700,sr
000037A4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037AE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037B4 6100 DC68                  		bsr.w	NemDec
000037B8 46FC 2300                  		move	#$2300,sr
000037BC 7000                       		moveq	#0,d0
000037BE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037C2 E948                       		lsl.w	#4,d0
000037C4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037CA 45F2 0000                  		lea	(a2,d0.w),a2
000037CE 7000                       		moveq	#0,d0
000037D0 1012                       		move.b	(a2),d0
000037D2 6700                       		beq.s	loc_37FC
000037D4 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037D8                            
000037D8                            loc_37FC:
000037D8 7001                       		moveq	#1,d0
000037DA 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
000037DE                            
000037DE                            Level_ClrRam:
000037DE 43F8 D000                  		lea	($FFFFD000).w,a1
000037E2 7000                       		moveq	#0,d0
000037E4 323C 07FF                  		move.w	#$7FF,d1
000037E8                            
000037E8                            Level_ClrObjRam:
000037E8 22C0                       		move.l	d0,(a1)+
000037EA 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000037EE                            
000037EE 43F8 F628                  		lea	($FFFFF628).w,a1
000037F2 7000                       		moveq	#0,d0
000037F4 323C 0015                  		move.w	#$15,d1
000037F8                            
000037F8                            Level_ClrVars:
000037F8 22C0                       		move.l	d0,(a1)+
000037FA 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000037FE                            
000037FE 43F8 F700                  		lea	($FFFFF700).w,a1
00003802 7000                       		moveq	#0,d0
00003804 323C 003F                  		move.w	#$3F,d1
00003808                            
00003808                            Level_ClrVars2:
00003808 22C0                       		move.l	d0,(a1)+
0000380A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000380E                            
0000380E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003812 7000                       		moveq	#0,d0
00003814 323C 0047                  		move.w	#$47,d1
00003818                            
00003818                            Level_ClrVars3:
00003818 22C0                       		move.l	d0,(a1)+
0000381A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000381E                            
0000381E 46FC 2700                  		move	#$2700,sr
00003822 6100 DA7E                  		bsr.w	ClearScreen
00003826 4DF9 00C0 0004             		lea	($C00004).l,a6
0000382C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003830 3CBC 8230                  		move.w	#$8230,(a6)
00003834 3CBC 8407                  		move.w	#$8407,(a6)
00003838 3CBC 857C                  		move.w	#$857C,(a6)
0000383C 3CBC 9001                  		move.w	#$9001,(a6)
00003840 3CBC 8004                  		move.w	#$8004,(a6)
00003844 3CBC 8720                  		move.w	#$8720,(a6)
00003848 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000384E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003852 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003858 6600                       		bne.s	Level_LoadPal	; if not, branch
0000385A 3CBC 8014                  		move.w	#$8014,(a6)
0000385E 7000                       		moveq	#0,d0
00003860 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003864 D040                       		add.w	d0,d0
00003866 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000386C 3031 0000                  		move.w	(a1,d0.w),d0
00003870 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003874 31C0 F648                  		move.w	d0,($FFFFF648).w
00003878 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000387C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003880 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003884 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000388A                            
0000388A                            Level_LoadPal:
0000388A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003890 46FC 2300                  		move	#$2300,sr
00003894 7003                       		moveq	#3,d0
00003896 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
0000389A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038A0 6600                       		bne.s	Level_GetBgm	; if not, branch
000038A2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038A4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038AA 6600                       		bne.s	Level_WaterPal	; if not, branch
000038AC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038AE                            
000038AE                            Level_WaterPal:
000038AE 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038B2 4A38 FE30                  		tst.b	($FFFFFE30).w
000038B6 6700                       		beq.s	Level_GetBgm
000038B8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038BE                            
000038BE                            Level_GetBgm:
000038BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038C2 6B00                       		bmi.s	loc_3946
000038C4 7000                       		moveq	#0,d0
000038C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038CA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038D0 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038D2 7005                       		moveq	#5,d0		; move 5 to d0
000038D4                            
000038D4                            Level_BgmNotLZ4:
000038D4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038DA 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038DC 7006                       		moveq	#6,d0		; move 6 to d0
000038DE                            
000038DE                            Level_PlayBgm:
000038DE 43F9 0000 3776             		lea	(MusicList).l,a1 ; load	music playlist
000038E4 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
000038E8 6100 DA8A                  		bsr.w	PlaySound	; play music
000038EC 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000038F2                            
000038F2                            Level_TtlCard:
000038F2 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000038F8 6100 F08C                  		bsr.w	DelayProgram
000038FC 4EB9 0000 0000             		jsr	ObjectsLoad
00003902 4EB9 0000 0000             		jsr	BuildSprites
00003908 6100 DCC0                  		bsr.w	RunPLC_RAM
0000390C 3038 D108                  		move.w	($FFFFD108).w,d0
00003910 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003914 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003916 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000391A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000391C 4EB9 0000 0000             		jsr	Hud_Base
00003922                            
00003922                            loc_3946:
00003922 7003                       		moveq	#3,d0
00003924 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003928 6100 0000                  		bsr.w	LevelSizeLoad
0000392C 6100 0000                  		bsr.w	DeformBgLayer
00003930 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003936 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000393A 6100 0000                  		bsr.w	LoadTilesFromStart
0000393E 4EB9 0000 0000             		jsr	FloorLog_Unk
00003944 6100 0000                  		bsr.w	ColIndexLoad
00003948 6100 0000                  		bsr.w	LZWaterEffects
0000394C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003952 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003956 6B00                       		bmi.s	Level_ChkDebug
00003958 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000395E                            
0000395E                            Level_ChkDebug:
0000395E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003962 6700                       		beq.s	Level_ChkWater	; if not, branch
00003964 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000396A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000396C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003972                            
00003972                            Level_ChkWater:
00003972 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003978 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000397E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003984 6600                       		bne.s	Level_LoadObj	; if not, branch
00003986 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000398C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003992 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003998 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000399E                            
0000399E                            Level_LoadObj:
0000399E 4EB9 0000 0000             		jsr	ObjPosLoad
000039A4 4EB9 0000 0000             		jsr	ObjectsLoad
000039AA 4EB9 0000 0000             		jsr	BuildSprites
000039B0 7000                       		moveq	#0,d0
000039B2 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039B6 6600                       		bne.s	loc_39E8	; if yes, branch
000039B8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039BC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039C0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039C4                            
000039C4                            loc_39E8:
000039C4 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039C8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039CC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039D0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039D4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000039D8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000039DC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000039E0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000039E4 6100 0000                  		bsr.w	OscillateNumInit
000039E8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000039EE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000039F4 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000039FA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A00 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A06 7000                       		moveq	#0,d0
00003A08 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A0C E548                       		lsl.w	#2,d0
00003A0E 2271 0000                  		movea.l	(a1,d0.w),a1
00003A12 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A16 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A18 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A1E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A22 5340                       		subq.w	#1,d0
00003A24 E548                       		lsl.w	#2,d0
00003A26 2271 0000                  		movea.l	(a1,d0.w),a1
00003A2A                            
00003A2A                            Level_Demo:
00003A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A30 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A34 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A3A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A3E 6A00                       		bpl.s	Level_ChkWaterPal
00003A40 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A46 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A4C 6600                       		bne.s	Level_ChkWaterPal
00003A4E 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A54                            
00003A54                            Level_ChkWaterPal:
00003A54 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A5A 6600                       		bne.s	Level_Delay	; if not, branch
00003A5C 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A5E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A64 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A66 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A68                            
00003A68                            Level_WaterPal2:
00003A68 6100 E6C0                  		bsr.w	PalLoad4_Water
00003A6C                            
00003A6C                            Level_Delay:
00003A6C 323C 0003                  		move.w	#3,d1
00003A70                            
00003A70                            Level_DelayLoop:
00003A70 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A76 6100 EF0E                  		bsr.w	DelayProgram
00003A7A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003A7E                            
00003A7E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003A84 6100 E30A                  		bsr.w	Pal_FadeTo2
00003A88 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A8C 6B00                       		bmi.s	Level_ClrCardArt
00003A8E 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003A92 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003A96 5838 D124                  		addq.b	#4,($FFFFD124).w
00003A9A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003A9E 6000                       		bra.s	Level_StartGame
00003AA0                            ; ===========================================================================
00003AA0                            
00003AA0                            Level_ClrCardArt:
00003AA0 7002                       		moveq	#2,d0
00003AA2 4EB9 0000 155E             		jsr	(LoadPLC).l	; load explosion patterns
00003AA8 7000                       		moveq	#0,d0
00003AAA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AAE 0640 0015                  		addi.w	#$15,d0
00003AB2 4EB9 0000 155E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003AB8                            
00003AB8                            Level_StartGame:
00003AB8 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003ABE                            
00003ABE                            ; ---------------------------------------------------------------------------
00003ABE                            ; Main level loop (when	all title card and loading sequences are finished)
00003ABE                            ; ---------------------------------------------------------------------------
00003ABE                            
00003ABE                            Level_MainLoop:
00003ABE 6100 D8C6                  		bsr.w	PauseGame
00003AC2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AC8 6100 EEBC                  		bsr.w	DelayProgram
00003ACC 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AD0 6100 0000                  		bsr.w	MoveSonicInDemo
00003AD4 6100 0000                  		bsr.w	LZWaterEffects
00003AD8 4EB9 0000 0000             		jsr	ObjectsLoad
00003ADE 4A78 FE08                  		tst.w	($FFFFFE08).w
00003AE2 6600                       		bne.s	loc_3B10
00003AE4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003AEA 6400                       		bcc.s	loc_3B14
00003AEC                            
00003AEC                            loc_3B10:
00003AEC 6100 0000                  		bsr.w	DeformBgLayer
00003AF0                            
00003AF0                            loc_3B14:
00003AF0 4EB9 0000 0000             		jsr	BuildSprites
00003AF6 4EB9 0000 0000             		jsr	ObjPosLoad
00003AFC 6100 DE1C                  		bsr.w	PalCycle_Load
00003B00 6100 DAC8                  		bsr.w	RunPLC_RAM
00003B04 6100 0000                  		bsr.w	OscillateNumDo
00003B08 6100 0000                  		bsr.w	ChangeRingFrame
00003B0C 6100 0000                  		bsr.w	SignpostArtLoad
00003B10 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B16 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B18 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B1C 6600 FC60                  		bne.w	Level		; if yes, branch
00003B20 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B26 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B2A 4E75                       		rts	
00003B2C                            ; ===========================================================================
00003B2C                            
00003B2C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B2C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B30 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B32 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B36 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B38 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B3E 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B42 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B48 4E75                       		rts	
00003B4A                            ; ===========================================================================
00003B4A                            
00003B4A                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B4A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B50 6600                       		bne.s	loc_3B88	; if not, branch
00003B52 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B58 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B5C 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B5E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B64                            
00003B64                            loc_3B88:
00003B64 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B6A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B70 4278 F794                  		clr.w	($FFFFF794).w
00003B74                            
00003B74                            loc_3B98:
00003B74 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B7A 6100 EE0A                  		bsr.w	DelayProgram
00003B7E 6100 0000                  		bsr.w	MoveSonicInDemo
00003B82 4EB9 0000 0000             		jsr	ObjectsLoad
00003B88 4EB9 0000 0000             		jsr	BuildSprites
00003B8E 4EB9 0000 0000             		jsr	ObjPosLoad
00003B94 5378 F794                  		subq.w	#1,($FFFFF794).w
00003B98 6A00                       		bpl.s	loc_3BC8
00003B9A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BA0 6100 E2AE                  		bsr.w	Pal_FadeOut
00003BA4                            
00003BA4                            loc_3BC8:
00003BA4 4A78 F614                  		tst.w	($FFFFF614).w
00003BA8 66CA                       		bne.s	loc_3B98
00003BAA 4E75                       		rts	
00003BAC                            ; ===========================================================================
00003BAC                            ; ---------------------------------------------------------------------------
00003BAC                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BAC                            ; ---------------------------------------------------------------------------
00003BAC                            
00003BAC                            LZWaterEffects:				; XREF: Level
00003BAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BB2 6600                       		bne.s	locret_3C28	; if not, branch
00003BB4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BBA 6400                       		bcc.s	LZMoveWater
00003BBC 6100 0000                  		bsr.w	LZWindTunnels
00003BC0 6100 0000                  		bsr.w	LZWaterSlides
00003BC4 6100 0000                  		bsr.w	LZDynamicWater
00003BC8                            
00003BC8                            LZMoveWater:
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w
00003BCC 7000                       		moveq	#0,d0
00003BCE 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BD2 E248                       		lsr.w	#1,d0
00003BD4 D078 F648                  		add.w	($FFFFF648).w,d0
00003BD8 31C0 F646                  		move.w	d0,($FFFFF646).w
00003BDC 3038 F646                  		move.w	($FFFFF646).w,d0
00003BE0 9078 F704                  		sub.w	($FFFFF704).w,d0
00003BE4 6400                       		bcc.s	loc_3C1A
00003BE6 4A40                       		tst.w	d0
00003BE8 6A00                       		bpl.s	loc_3C1A
00003BEA 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003BF0 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003BF6                            
00003BF6                            loc_3C1A:
00003BF6 0C40 00DF                  		cmpi.w	#$DF,d0
00003BFA 6500                       		bcs.s	loc_3C24
00003BFC 303C 00DF                  		move.w	#$DF,d0
00003C00                            
00003C00                            loc_3C24:
00003C00 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C04                            
00003C04                            locret_3C28:
00003C04 4E75                       		rts	
00003C06                            ; ===========================================================================
00003C06                            ; ---------------------------------------------------------------------------
00003C06                            ; Labyrinth default water heights
00003C06                            ; ---------------------------------------------------------------------------
00003C06                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C0E                            		even
00003C0E                            ; ===========================================================================
00003C0E                            
00003C0E                            ; ---------------------------------------------------------------------------
00003C0E                            ; Labyrinth dynamic water routines
00003C0E                            ; ---------------------------------------------------------------------------
00003C0E                            
00003C0E                            LZDynamicWater:				; XREF: LZWaterEffects
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C14 D040                       		add.w	d0,d0
00003C16 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C1A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C1E 7200                       		moveq	#0,d1
00003C20 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C24 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C28 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C2C 6700                       		beq.s	locret_3C5A
00003C2E 6400                       		bcc.s	loc_3C56
00003C30 4441                       		neg.w	d1
00003C32                            
00003C32                            loc_3C56:
00003C32 D378 F648                  		add.w	d1,($FFFFF648).w
00003C36                            
00003C36                            locret_3C5A:
00003C36 4E75                       		rts	
00003C38                            ; ===========================================================================
00003C38 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C3A 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C3C 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C3E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C40                            ; ===========================================================================
00003C40                            
00003C40                            DynWater_LZ1:				; XREF: DynWater_Index
00003C40 3038 F700                  		move.w	($FFFFF700).w,d0
00003C44 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C48 6600                       		bne.s	loc_3CD0
00003C4A 323C 00B8                  		move.w	#$B8,d1
00003C4E 0C40 0600                  		cmpi.w	#$600,d0
00003C52 6500                       		bcs.s	loc_3CB4
00003C54 323C 0108                  		move.w	#$108,d1
00003C58 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C5E 6500                       		bcs.s	loc_3CBA
00003C60 0C40 0C00                  		cmpi.w	#$C00,d0
00003C64 6500                       		bcs.s	loc_3CB4
00003C66 323C 0318                  		move.w	#$318,d1
00003C6A 0C40 1080                  		cmpi.w	#$1080,d0
00003C6E 6500                       		bcs.s	loc_3CB4
00003C70 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C76 323C 05C8                  		move.w	#$5C8,d1
00003C7A 0C40 1380                  		cmpi.w	#$1380,d0
00003C7E 6500                       		bcs.s	loc_3CB4
00003C80 323C 03A8                  		move.w	#$3A8,d1
00003C84 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003C88 6600                       		bne.s	loc_3CB4
00003C8A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003C90                            
00003C90                            loc_3CB4:
00003C90 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C94 4E75                       		rts	
00003C96                            ; ===========================================================================
00003C96                            
00003C96                            loc_3CBA:				; XREF: DynWater_LZ1
00003C96 0C40 0C80                  		cmpi.w	#$C80,d0
00003C9A 65F4                       		bcs.s	loc_3CB4
00003C9C 323C 00E8                  		move.w	#$E8,d1
00003CA0 0C40 1500                  		cmpi.w	#$1500,d0
00003CA4 65EA                       		bcs.s	loc_3CB4
00003CA6 323C 0108                  		move.w	#$108,d1
00003CAA 60E4                       		bra.s	loc_3CB4
00003CAC                            ; ===========================================================================
00003CAC                            
00003CAC                            loc_3CD0:				; XREF: DynWater_LZ1
00003CAC 5302                       		subq.b	#1,d2
00003CAE 6600                       		bne.s	locret_3CF4
00003CB0 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CB6 6400                       		bcc.s	locret_3CF4
00003CB8 323C 03A8                  		move.w	#$3A8,d1
00003CBC 0C40 1300                  		cmpi.w	#$1300,d0
00003CC0 6500                       		bcs.s	loc_3CF0
00003CC2 323C 0108                  		move.w	#$108,d1
00003CC6 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CCC                            
00003CCC                            loc_3CF0:
00003CCC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CD0                            
00003CD0                            locret_3CF4:
00003CD0 4E75                       		rts	
00003CD2                            ; ===========================================================================
00003CD2                            
00003CD2                            DynWater_LZ2:				; XREF: DynWater_Index
00003CD2 3038 F700                  		move.w	($FFFFF700).w,d0
00003CD6 323C 0328                  		move.w	#$328,d1
00003CDA 0C40 0500                  		cmpi.w	#$500,d0
00003CDE 6500                       		bcs.s	loc_3D12
00003CE0 323C 03C8                  		move.w	#$3C8,d1
00003CE4 0C40 0B00                  		cmpi.w	#$B00,d0
00003CE8 6500                       		bcs.s	loc_3D12
00003CEA 323C 0428                  		move.w	#$428,d1
00003CEE                            
00003CEE                            loc_3D12:
00003CEE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF2 4E75                       		rts	
00003CF4                            ; ===========================================================================
00003CF4                            
00003CF4                            DynWater_LZ3:				; XREF: DynWater_Index
00003CF4 3038 F700                  		move.w	($FFFFF700).w,d0
00003CF8 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003CFC 6600                       		bne.s	loc_3D5E
00003CFE 323C 0900                  		move.w	#$900,d1
00003D02 0C40 0600                  		cmpi.w	#$600,d0
00003D06 6500                       		bcs.s	loc_3D54
00003D08 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D0E 6500                       		bcs.s	loc_3D54
00003D10 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D16 6400                       		bcc.s	loc_3D54
00003D18 323C 04C8                  		move.w	#$4C8,d1
00003D1C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D22 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D28 303C 00B7                  		move.w	#$B7,d0
00003D2C 6100 D64C                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D30                            
00003D30                            loc_3D54:
00003D30 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D34 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D38 4E75                       		rts	
00003D3A                            ; ===========================================================================
00003D3A                            
00003D3A                            loc_3D5E:				; XREF: DynWater_LZ3
00003D3A 5302                       		subq.b	#1,d2
00003D3C 6600                       		bne.s	loc_3DA8
00003D3E 323C 04C8                  		move.w	#$4C8,d1
00003D42 0C40 0770                  		cmpi.w	#$770,d0
00003D46 6500                       		bcs.s	loc_3DA2
00003D48 323C 0308                  		move.w	#$308,d1
00003D4C 0C40 1400                  		cmpi.w	#$1400,d0
00003D50 6500                       		bcs.s	loc_3DA2
00003D52 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D58 6700                       		beq.s	loc_3D8E
00003D5A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D60 6400                       		bcc.s	loc_3D8E
00003D62 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D68 6400                       		bcc.s	loc_3DA2
00003D6A                            
00003D6A                            loc_3D8E:
00003D6A 323C 0508                  		move.w	#$508,d1
00003D6E 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D72 0C40 1770                  		cmpi.w	#$1770,d0
00003D76 6500                       		bcs.s	loc_3DA2
00003D78 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003D7E                            
00003D7E                            loc_3DA2:
00003D7E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D82 4E75                       		rts	
00003D84                            ; ===========================================================================
00003D84                            
00003D84                            loc_3DA8:
00003D84 5302                       		subq.b	#1,d2
00003D86 6600                       		bne.s	loc_3DD2
00003D88 323C 0508                  		move.w	#$508,d1
00003D8C 0C40 1860                  		cmpi.w	#$1860,d0
00003D90 6500                       		bcs.s	loc_3DCC
00003D92 323C 0188                  		move.w	#$188,d1
00003D96 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003D9A 6400                       		bcc.s	loc_3DC6
00003D9C B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DA0 6600                       		bne.s	loc_3DCC
00003DA2                            
00003DA2                            loc_3DC6:
00003DA2 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DA8                            
00003DA8                            loc_3DCC:
00003DA8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DAC 4E75                       		rts	
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            loc_3DD2:
00003DAE 5302                       		subq.b	#1,d2
00003DB0 6600                       		bne.s	loc_3E0E
00003DB2 323C 0188                  		move.w	#$188,d1
00003DB6 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBA 6500                       		bcs.s	loc_3E04
00003DBC 323C 0900                  		move.w	#$900,d1
00003DC0 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DC4 6500                       		bcs.s	loc_3E04
00003DC6 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DCC 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DD2 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DD8 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003DDE 4E75                       		rts	
00003DE0                            ; ===========================================================================
00003DE0                            
00003DE0                            loc_3E04:
00003DE0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DE4 31C1 F648                  		move.w	d1,($FFFFF648).w
00003DE8 4E75                       		rts	
00003DEA                            ; ===========================================================================
00003DEA                            
00003DEA                            loc_3E0E:
00003DEA 0C40 1E00                  		cmpi.w	#$1E00,d0
00003DEE 6500                       		bcs.s	locret_3E1A
00003DF0 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003DF6                            
00003DF6                            locret_3E1A:
00003DF6 4E75                       		rts	
00003DF8                            ; ===========================================================================
00003DF8                            
00003DF8                            DynWater_SBZ3:				; XREF: DynWater_Index
00003DF8 323C 0228                  		move.w	#$228,d1
00003DFC 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E02 6500                       		bcs.s	loc_3E2C
00003E04 323C 04C8                  		move.w	#$4C8,d1
00003E08                            
00003E08                            loc_3E2C:
00003E08 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E0C 4E75                       		rts
00003E0E                            
00003E0E                            ; ---------------------------------------------------------------------------
00003E0E                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E0E                            ; ---------------------------------------------------------------------------
00003E0E                            
00003E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E0E                            
00003E0E                            
00003E0E                            LZWindTunnels:				; XREF: LZWaterEffects
00003E0E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E12 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E16 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E1C 7000                       		moveq	#0,d0
00003E1E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E22 E748                       		lsl.w	#3,d0
00003E24 D4C0                       		adda.w	d0,a2
00003E26 7200                       		moveq	#0,d1
00003E28 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E2C 6600                       		bne.s	loc_3E56
00003E2E 7201                       		moveq	#1,d1
00003E30 514A                       		subq.w	#8,a2
00003E32                            
00003E32                            loc_3E56:
00003E32 43F8 D000                  		lea	($FFFFD000).w,a1
00003E36                            
00003E36                            LZWind_Loop:
00003E36 3029 0008                  		move.w	8(a1),d0
00003E3A B052                       		cmp.w	(a2),d0
00003E3C 6500 0000                  		bcs.w	loc_3EF4
00003E40 B06A 0004                  		cmp.w	4(a2),d0
00003E44 6400 0000                  		bcc.w	loc_3EF4
00003E48 3429 000C                  		move.w	$C(a1),d2
00003E4C B46A 0002                  		cmp.w	2(a2),d2
00003E50 6500                       		bcs.s	loc_3EF4
00003E52 B46A 0006                  		cmp.w	6(a2),d2
00003E56 6400                       		bcc.s	loc_3EF4
00003E58 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E5C 0200 003F                  		andi.b	#$3F,d0
00003E60 6600                       		bne.s	loc_3E90
00003E62 303C 00D0                  		move.w	#$D0,d0
00003E66 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E6C                            
00003E6C                            loc_3E90:
00003E6C 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E70 6600 0000                  		bne.w	locret_3F0A
00003E74 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E7A 6400                       		bcc.s	loc_3F06
00003E7C 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003E82 0440 0080                  		subi.w	#$80,d0
00003E86 B052                       		cmp.w	(a2),d0
00003E88 6400                       		bcc.s	LZWind_Move
00003E8A 7002                       		moveq	#2,d0
00003E8C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003E92 6600                       		bne.s	loc_3EBA
00003E94 4440                       		neg.w	d0
00003E96                            
00003E96                            loc_3EBA:
00003E96 D169 000C                  		add.w	d0,$C(a1)
00003E9A                            
00003E9A                            LZWind_Move:
00003E9A 5869 0008                  		addq.w	#4,8(a1)
00003E9E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EA4 337C 0000 0012             		move.w	#0,$12(a1)
00003EAA 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003EB0 08E9 0001 0022             		bset	#1,$22(a1)
00003EB6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EBC 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EBE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EC2                            
00003EC2                            LZWind_MoveDown:
00003EC2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EC8 6700                       		beq.s	locret_3EF2	; if not, branch
00003ECA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003ECE                            
00003ECE                            locret_3EF2:
00003ECE 4E75                       		rts	
00003ED0                            ; ===========================================================================
00003ED0                            
00003ED0                            loc_3EF4:				; XREF: LZWindTunnels
00003ED0 504A                       		addq.w	#8,a2
00003ED2 51C9 FF62                  		dbf	d1,LZWind_Loop
00003ED6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EDA 6700                       		beq.s	locret_3F0A
00003EDC 137C 0000 001C             		move.b	#0,$1C(a1)
00003EE2                            
00003EE2                            loc_3F06:
00003EE2 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003EE6                            
00003EE6                            locret_3F0A:
00003EE6 4E75                       		rts	
00003EE8                            ; End of function LZWindTunnels
00003EE8                            
00003EE8                            ; ===========================================================================
00003EE8 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003EF0 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F02 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F10                            					; XREF: LZWindTunnels
00003F10                            		even
00003F10                            
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            ; Labyrinth Zone water slide subroutine
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            
00003F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F10                            
00003F10                            
00003F10                            LZWaterSlides:				; XREF: LZWaterEffects
00003F10 43F8 D000                  		lea	($FFFFD000).w,a1
00003F14 0829 0001 0022             		btst	#1,$22(a1)
00003F1A 6600                       		bne.s	loc_3F6A
00003F1C 3029 000C                  		move.w	$C(a1),d0
00003F20 E248                       		lsr.w	#1,d0
00003F22 0240 0380                  		andi.w	#$380,d0
00003F26 1229 0008                  		move.b	8(a1),d1
00003F2A 0241 007F                  		andi.w	#$7F,d1
00003F2E D041                       		add.w	d1,d0
00003F30 45F8 A400                  		lea	($FFFFA400).w,a2
00003F34 1032 0000                  		move.b	(a2,d0.w),d0
00003F38 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F3C 7206                       		moveq	#6,d1
00003F3E                            
00003F3E                            loc_3F62:
00003F3E B022                       		cmp.b	-(a2),d0
00003F40 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F44 6700                       		beq.s	LZSlide_Move
00003F46                            
00003F46                            loc_3F6A:
00003F46 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F4A 6700                       		beq.s	locret_3F7A
00003F4C 337C 0005 003E             		move.w	#5,$3E(a1)
00003F52 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F56                            
00003F56                            locret_3F7A:
00003F56 4E75                       		rts	
00003F58                            ; ===========================================================================
00003F58                            
00003F58                            LZSlide_Move:				; XREF: LZWaterSlides
00003F58 0C41 0003                  		cmpi.w	#3,d1
00003F5C 6400                       		bcc.s	loc_3F84
00003F5E 4E71                       		nop	
00003F60                            
00003F60                            loc_3F84:
00003F60 08A9 0000 0022             		bclr	#0,$22(a1)
00003F66 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F6A 1340 0014                  		move.b	d0,$14(a1)
00003F6E 6A00                       		bpl.s	loc_3F9A
00003F70 08E9 0000 0022             		bset	#0,$22(a1)
00003F76                            
00003F76                            loc_3F9A:
00003F76 4229 0015                  		clr.b	$15(a1)
00003F7A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003F80 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003F86 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F8A 0200 001F                  		andi.b	#$1F,d0
00003F8E 6600                       		bne.s	locret_3FBE
00003F90 303C 00D0                  		move.w	#$D0,d0
00003F94 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play water sound
00003F9A                            
00003F9A                            locret_3FBE:
00003F9A 4E75                       		rts	
00003F9C                            ; End of function LZWaterSlides
00003F9C                            
00003F9C                            ; ===========================================================================
00003F9C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FAB 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FAC                            		even
00003FAC                            
00003FAC                            ; ---------------------------------------------------------------------------
00003FAC                            ; Subroutine to	move Sonic in demo mode
00003FAC                            ; ---------------------------------------------------------------------------
00003FAC                            
00003FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FAC                            
00003FAC                            
00003FAC                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FB0 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FB2 4E75                       		rts	
00003FB4                            ; ===========================================================================
00003FB4                            
00003FB4                            ; This is an unused subroutine for recording a demo
00003FB4                            
00003FB4                            MoveDemo_Record:
00003FB4 43F9 0008 0000             		lea	($80000).l,a1
00003FBA 3038 F790                  		move.w	($FFFFF790).w,d0
00003FBE D2C0                       		adda.w	d0,a1
00003FC0 1038 F604                  		move.b	($FFFFF604).w,d0
00003FC4 B011                       		cmp.b	(a1),d0
00003FC6 6600                       		bne.s	loc_3FFA
00003FC8 5229 0001                  		addq.b	#1,1(a1)
00003FCC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FD2 6700                       		beq.s	loc_3FFA
00003FD4 4E75                       		rts	
00003FD6                            ; ===========================================================================
00003FD6                            
00003FD6                            loc_3FFA:				; XREF: MoveDemo_Record
00003FD6 1340 0002                  		move.b	d0,2(a1)
00003FDA 137C 0000 0003             		move.b	#0,3(a1)
00003FE0 5478 F790                  		addq.w	#2,($FFFFF790).w
00003FE4 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00003FEA 4E75                       		rts	
00003FEC                            ; ===========================================================================
00003FEC                            
00003FEC                            MoveDemo_On:				; XREF: MoveSonicInDemo
00003FEC 4A38 F604                  		tst.b	($FFFFF604).w
00003FF0 6A00                       		bpl.s	loc_4022
00003FF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FF6 6B00                       		bmi.s	loc_4022
00003FF8 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00003FFE                            
00003FFE                            loc_4022:
00003FFE 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004004 7000                       		moveq	#0,d0
00004006 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000400A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004010 6600                       		bne.s	loc_4038
00004012 7006                       		moveq	#6,d0
00004014                            
00004014                            loc_4038:
00004014 E548                       		lsl.w	#2,d0
00004016 2271 0000                  		movea.l	(a1,d0.w),a1
0000401A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000401E 6A00                       		bpl.s	loc_4056
00004020 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004026 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000402A 5340                       		subq.w	#1,d0
0000402C E548                       		lsl.w	#2,d0
0000402E 2271 0000                  		movea.l	(a1,d0.w),a1
00004032                            
00004032                            loc_4056:
00004032 3038 F790                  		move.w	($FFFFF790).w,d0
00004036 D2C0                       		adda.w	d0,a1
00004038 1011                       		move.b	(a1),d0
0000403A 41F8 F604                  		lea	($FFFFF604).w,a0
0000403E 1200                       		move.b	d0,d1
00004040 1410                       		move.b	(a0),d2
00004042 B500                       		eor.b	d2,d0
00004044 10C1                       		move.b	d1,(a0)+
00004046 C001                       		and.b	d1,d0
00004048 10C0                       		move.b	d0,(a0)+
0000404A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000404E 6400                       		bcc.s	locret_407E
00004050 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004056 5478 F790                  		addq.w	#2,($FFFFF790).w
0000405A                            
0000405A                            locret_407E:
0000405A 4E75                       		rts	
0000405C                            ; End of function MoveSonicInDemo
0000405C                            
0000405C                            ; ===========================================================================
0000405C                            ; ---------------------------------------------------------------------------
0000405C                            ; Demo sequence	pointers
0000405C                            ; ---------------------------------------------------------------------------
0000405C                            Demo_Index:
0000405C                            	include "_inc\Demo pointers for intro.asm"
0000405C                            ; ---------------------------------------------------------------------------
0000405C                            ; Demo sequence	pointers
0000405C                            ; ---------------------------------------------------------------------------
0000405C 0000 0000                  	dc.l Demo_GHZ
00004060 0000 0000                  	dc.l Demo_GHZ
00004064 0000 0000                  	dc.l Demo_MZ
00004068 0000 0000                  	dc.l Demo_MZ
0000406C 0000 0000                  	dc.l Demo_SYZ
00004070 0000 0000                  	dc.l Demo_SYZ
00004074 0000 0000                  	dc.l Demo_SS
00004078 0000 0000                  	dc.l Demo_SS
00004078 0000 0000                  	dc.l Demo_SS
0000407C                            
0000407C                            Demo_EndIndex:
0000407C                            	include "_inc\Demo pointers for ending.asm"
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            ; Demo (ending) sequence pointers
0000407C                            ; ---------------------------------------------------------------------------
0000407C 0000 0000                  	dc.l Demo_EndGHZ1
00004080 0000 0000                  	dc.l Demo_EndMZ
00004084 0000 0000                  	dc.l Demo_EndSYZ
00004088 0000 0000                  	dc.l Demo_EndLZ
0000408C 0000 0000                  	dc.l Demo_EndSLZ
00004090 0000 0000                  	dc.l Demo_EndSBZ1
00004094 0000 0000                  	dc.l Demo_EndSBZ2
00004098 0000 0000                  	dc.l Demo_EndGHZ2
00004098 0000 0000                  	dc.l Demo_EndGHZ2
0000409C                            
0000409C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040AC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040BC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040CC                            		even
000040CC                            
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            ; Collision index loading subroutine
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            
000040CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040CC                            
000040CC                            
000040CC                            ColIndexLoad:				; XREF: Level
000040CC 7000                       		moveq	#0,d0
000040CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040D2 E548                       		lsl.w	#2,d0
000040D4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040DA 4E75                       		rts	
000040DC                            ; End of function ColIndexLoad
000040DC                            
000040DC                            ; ===========================================================================
000040DC                            ; ---------------------------------------------------------------------------
000040DC                            ; Collision index pointers
000040DC                            ; ---------------------------------------------------------------------------
000040DC                            ColPointers:
000040DC                            	include "_inc\Collision index pointers.asm"
000040DC                            ; ---------------------------------------------------------------------------
000040DC                            ; Collision index pointers
000040DC                            ; ---------------------------------------------------------------------------
000040DC 0000 0000                  	dc.l Col_GHZ
000040E0 0000 0000                  	dc.l Col_LZ
000040E4 0000 0000                  	dc.l Col_MZ
000040E8 0000 0000                  	dc.l Col_SLZ
000040EC 0000 0000                  	dc.l Col_SYZ
000040F0 0000 0000                  	dc.l Col_SBZ
000040F0 0000 0000                  	dc.l Col_SBZ
000040F4                            
000040F4                            ; ---------------------------------------------------------------------------
000040F4                            ; Oscillating number subroutine
000040F4                            ; ---------------------------------------------------------------------------
000040F4                            
000040F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F4                            
000040F4                            
000040F4                            OscillateNumInit:			; XREF: Level
000040F4 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000040F8 45F9 0000 0000             		lea	(Osc_Data).l,a2
000040FE 7220                       		moveq	#$20,d1
00004100                            
00004100                            Osc_Loop:
00004100 32DA                       		move.w	(a2)+,(a1)+
00004102 51C9 FFFC                  		dbf	d1,Osc_Loop
00004106 4E75                       		rts	
00004108                            ; End of function OscillateNumInit
00004108                            
00004108                            ; ===========================================================================
00004108 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000410C 0000 0080                  		dc.w 0,	$80
00004110 0000 0080                  		dc.w 0,	$80
00004114 0000 0080                  		dc.w 0,	$80
00004118 0000 0080                  		dc.w 0,	$80
0000411C 0000 0080                  		dc.w 0,	$80
00004120 0000 0080                  		dc.w 0,	$80
00004124 0000 0080                  		dc.w 0,	$80
00004128 0000 0080                  		dc.w 0,	$80
0000412C 0000 50F0                  		dc.w 0,	$50F0
00004130 011E 2080                  		dc.w $11E, $2080
00004134 00B4 3080                  		dc.w $B4, $3080
00004138 010E 5080                  		dc.w $10E, $5080
0000413C 01C2 7080                  		dc.w $1C2, $7080
00004140 0276 0080                  		dc.w $276, $80
00004144 0000 0080                  		dc.w 0,	$80
00004148 0000                       		dc.w 0
0000414A                            		even
0000414A                            
0000414A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000414A                            
0000414A                            
0000414A                            OscillateNumDo:				; XREF: Level
0000414A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004150 6400                       		bcc.s	locret_41C4
00004152 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004156 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000415C 3619                       		move.w	(a1)+,d3
0000415E 720F                       		moveq	#$F,d1
00004160                            
00004160                            loc_4184:
00004160 341A                       		move.w	(a2)+,d2
00004162 381A                       		move.w	(a2)+,d4
00004164 0303                       		btst	d1,d3
00004166 6600                       		bne.s	loc_41A4
00004168 3029 0002                  		move.w	2(a1),d0
0000416C D042                       		add.w	d2,d0
0000416E 3340 0002                  		move.w	d0,2(a1)
00004172 D151                       		add.w	d0,0(a1)
00004174 B811                       		cmp.b	0(a1),d4
00004176 6200                       		bhi.s	loc_41BA
00004178 03C3                       		bset	d1,d3
0000417A 6000                       		bra.s	loc_41BA
0000417C                            ; ===========================================================================
0000417C                            
0000417C                            loc_41A4:				; XREF: OscillateNumDo
0000417C 3029 0002                  		move.w	2(a1),d0
00004180 9042                       		sub.w	d2,d0
00004182 3340 0002                  		move.w	d0,2(a1)
00004186 D151                       		add.w	d0,0(a1)
00004188 B811                       		cmp.b	0(a1),d4
0000418A 6300                       		bls.s	loc_41BA
0000418C 0383                       		bclr	d1,d3
0000418E                            
0000418E                            loc_41BA:
0000418E 5849                       		addq.w	#4,a1
00004190 51C9 FFCE                  		dbf	d1,loc_4184
00004194 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004198                            
00004198                            locret_41C4:
00004198 4E75                       		rts	
0000419A                            ; End of function OscillateNumDo
0000419A                            
0000419A                            ; ===========================================================================
0000419A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000419E 0002 0018                  		dc.w 2,	$18
000041A2 0002 0020                  		dc.w 2,	$20
000041A6 0002 0030                  		dc.w 2,	$30
000041AA 0004 0020                  		dc.w 4,	$20
000041AE 0008 0008                  		dc.w 8,	8
000041B2 0008 0040                  		dc.w 8,	$40
000041B6 0004 0040                  		dc.w 4,	$40
000041BA 0002 0050                  		dc.w 2,	$50
000041BE 0002 0050                  		dc.w 2,	$50
000041C2 0002 0020                  		dc.w 2,	$20
000041C6 0003 0030                  		dc.w 3,	$30
000041CA 0005 0050                  		dc.w 5,	$50
000041CE 0007 0070                  		dc.w 7,	$70
000041D2 0002 0010                  		dc.w 2,	$10
000041D6 0002 0010                  		dc.w 2,	$10
000041DA                            		even
000041DA                            
000041DA                            ; ---------------------------------------------------------------------------
000041DA                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041DA                            ; ---------------------------------------------------------------------------
000041DA                            
000041DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041DA                            
000041DA                            
000041DA                            ChangeRingFrame:			; XREF: Level
000041DA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000041DE 6A00                       		bpl.s	loc_421C
000041E0 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000041E6 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000041EA 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000041F0                            
000041F0                            loc_421C:
000041F0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000041F4 6A00                       		bpl.s	loc_4232
000041F6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000041FC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004200 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004206                            
00004206                            loc_4232:
00004206 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000420A 6A00                       		bpl.s	loc_4250
0000420C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004212 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004216 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000421C 6500                       		bcs.s	loc_4250
0000421E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004224                            
00004224                            loc_4250:
00004224 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004228 6700                       		beq.s	locret_4272
0000422A 7000                       		moveq	#0,d0
0000422C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004230 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004234 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004238 EF58                       		rol.w	#7,d0
0000423A 0240 0003                  		andi.w	#3,d0
0000423E 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004242 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004246                            
00004246                            locret_4272:
00004246 4E75                       		rts	
00004248                            ; End of function ChangeRingFrame
00004248                            
00004248                            ; ---------------------------------------------------------------------------
00004248                            ; End-of-act signpost pattern loading subroutine
00004248                            ; ---------------------------------------------------------------------------
00004248                            
00004248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004248                            
00004248                            
00004248                            SignpostArtLoad:			; XREF: Level
00004248 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000424C 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004250 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004256 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004258 3038 F700                  		move.w	($FFFFF700).w,d0
0000425C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004260 0441 0100                  		subi.w	#$100,d1
00004264 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004266 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004268 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000426C 6700                       		beq.s	Signpost_Exit
0000426E B278 F728                  		cmp.w	($FFFFF728).w,d1
00004272 6700                       		beq.s	Signpost_Exit
00004274 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004278 7012                       		moveq	#$12,d0
0000427A 6000 D314                  		bra.w	LoadPLC2	; load signpost	patterns
0000427E                            ; ===========================================================================
0000427E                            
0000427E                            Signpost_Exit:
0000427E 4E75                       		rts	
00004280                            ; End of function SignpostArtLoad
00004280                            
00004280                            ; ===========================================================================
00004280                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004300                            Demo_MZ:	incbin	demodata\i_mz.bin
00004430                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044B0                            Demo_SS:	incbin	demodata\i_ss.bin
000045B0                            ; ===========================================================================
000045B0                            
000045B0                            ; ---------------------------------------------------------------------------
000045B0                            ; Special Stage
000045B0                            ; ---------------------------------------------------------------------------
000045B0                            
000045B0                            SpecialStage:				; XREF: GameModeArray
000045B0 303C 00CA                  		move.w	#$CA,d0
000045B4 6100 CDC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045B8 6100 D9A0                  		bsr.w	Pal_MakeFlash
000045BC 46FC 2700                  		move	#$2700,sr
000045C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000045C6 3CBC 8B03                  		move.w	#$8B03,(a6)
000045CA 3CBC 8004                  		move.w	#$8004,(a6)
000045CE 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045D4 3CBC 9011                  		move.w	#$9011,(a6)
000045D8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000045DC 0200 00BF                  		andi.b	#$BF,d0
000045E0 33C0 00C0 0004             		move.w	d0,($C00004).l
000045E6 6100 CCBA                  		bsr.w	ClearScreen
000045EA 46FC 2300                  		move	#$2300,sr
000045EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000045F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000045F8 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000045FE 3ABC 9780                  		move.w	#$9780,(a5)
00004602 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004608 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004610                            
00004610                            loc_463C:
00004610 3215                       		move.w	(a5),d1
00004612 0801 0001                  		btst	#1,d1
00004616 66F8                       		bne.s	loc_463C
00004618 3ABC 8F02                  		move.w	#$8F02,(a5)
0000461C 6100 0000                  		bsr.w	SS_BGLoad
00004620 7014                       		moveq	#$14,d0
00004622 6100 D0A6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004626 43F8 D000                  		lea	($FFFFD000).w,a1
0000462A 7000                       		moveq	#0,d0
0000462C 323C 07FF                  		move.w	#$7FF,d1
00004630                            
00004630                            SS_ClrObjRam:
00004630 22C0                       		move.l	d0,(a1)+
00004632 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004636                            
00004636 43F8 F700                  		lea	($FFFFF700).w,a1
0000463A 7000                       		moveq	#0,d0
0000463C 323C 003F                  		move.w	#$3F,d1
00004640                            
00004640                            SS_ClrRam:
00004640 22C0                       		move.l	d0,(a1)+
00004642 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004646                            
00004646 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000464A 7000                       		moveq	#0,d0
0000464C 323C 0027                  		move.w	#$27,d1
00004650                            
00004650                            SS_ClrRam2:
00004650 22C0                       		move.l	d0,(a1)+
00004652 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004656                            
00004656 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000465A 7000                       		moveq	#0,d0
0000465C 323C 007F                  		move.w	#$7F,d1
00004660                            
00004660                            SS_ClrNemRam:
00004660 22C0                       		move.l	d0,(a1)+
00004662 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004666                            
00004666 4238 F64E                  		clr.b	($FFFFF64E).w
0000466A 4278 FE02                  		clr.w	($FFFFFE02).w
0000466E 700A                       		moveq	#$A,d0
00004670 6100 DA68                  		bsr.w	PalLoad1	; load special stage pallet
00004674 4EB9 0000 0000             		jsr	SS_Load
0000467A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004682 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000468A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004690 6100 0000                  		bsr.w	PalCycle_SS
00004694 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004698 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000469E 303C 0089                  		move.w	#$89,d0
000046A2 6100 CCD0                  		bsr.w	PlaySound	; play special stage BG	music
000046A6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046AC 43F9 0000 405C             		lea	(Demo_Index).l,a1
000046B2 7006                       		moveq	#6,d0
000046B4 E548                       		lsl.w	#2,d0
000046B6 2271 0000                  		movea.l	(a1,d0.w),a1
000046BA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046C0 5338 F792                  		subq.b	#1,($FFFFF792).w
000046C4 4278 FE20                  		clr.w	($FFFFFE20).w
000046C8 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046CC 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046D2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046D8 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046DC 6700                       		beq.s	SS_NoDebug	; if not, branch
000046DE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000046E4 6700                       		beq.s	SS_NoDebug	; if not, branch
000046E6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000046EC                            
000046EC                            SS_NoDebug:
000046EC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046F0 0000 0040                  		ori.b	#$40,d0
000046F4 33C0 00C0 0004             		move.w	d0,($C00004).l
000046FA 6100 D7B2                  		bsr.w	Pal_MakeWhite
000046FE                            
000046FE                            ; ---------------------------------------------------------------------------
000046FE                            ; Main Special Stage loop
000046FE                            ; ---------------------------------------------------------------------------
000046FE                            
000046FE                            SS_MainLoop:
000046FE 6100 CC86                  		bsr.w	PauseGame
00004702 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004708 6100 E27C                  		bsr.w	DelayProgram
0000470C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004710 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004716 4EB9 0000 0000             		jsr	ObjectsLoad
0000471C 4EB9 0000 0000             		jsr	BuildSprites
00004722 4EB9 0000 0000             		jsr	SS_ShowLayout
00004728 6100 0000                  		bsr.w	SS_BGAnimate
0000472C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004730 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004732 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004736 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000473A                            
0000473A                            SS_ChkEnd:
0000473A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004740 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004744                            
00004744 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004748 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000474C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004752 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004758 6500                       		bcs.s	SS_End		; if not, branch
0000475A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000475E                            
0000475E                            SS_End:
0000475E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004764 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000476A 4278 F794                  		clr.w	($FFFFF794).w
0000476E                            
0000476E                            SS_EndLoop:
0000476E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004774 6100 E210                  		bsr.w	DelayProgram
00004778 6100 F832                  		bsr.w	MoveSonicInDemo
0000477C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004782 4EB9 0000 0000             		jsr	ObjectsLoad
00004788 4EB9 0000 0000             		jsr	BuildSprites
0000478E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004794 6100 0000                  		bsr.w	SS_BGAnimate
00004798 5378 F794                  		subq.w	#1,($FFFFF794).w
0000479C 6A00                       		bpl.s	loc_47D4
0000479E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047A4 6100 D7D4                  		bsr.w	Pal_ToWhite
000047A8                            
000047A8                            loc_47D4:
000047A8 4A78 F614                  		tst.w	($FFFFF614).w
000047AC 66C0                       		bne.s	SS_EndLoop
000047AE                            
000047AE 46FC 2700                  		move	#$2700,sr
000047B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000047B8 3CBC 8230                  		move.w	#$8230,(a6)
000047BC 3CBC 8407                  		move.w	#$8407,(a6)
000047C0 3CBC 9001                  		move.w	#$9001,(a6)
000047C4 6100 CADC                  		bsr.w	ClearScreen
000047C8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047D2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047D8 6100 CC44                  		bsr.w	NemDec
000047DC 4EB9 0000 0000             		jsr	Hud_Base
000047E2 46FC 2300                  		move	#$2300,sr
000047E6 7011                       		moveq	#$11,d0
000047E8 6100 D90C                  		bsr.w	PalLoad2	; load results screen pallet
000047EC 7000                       		moveq	#0,d0
000047EE 6100 CDA0                  		bsr.w	LoadPLC2
000047F2 701B                       		moveq	#$1B,d0
000047F4 6100 CD68                  		bsr.w	LoadPLC		; load results screen patterns
000047F8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000047FE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004804 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004808 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000480C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004810 303C 008E                  		move.w	#$8E,d0
00004814 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000481A 43F8 D000                  		lea	($FFFFD000).w,a1
0000481E 7000                       		moveq	#0,d0
00004820 323C 07FF                  		move.w	#$7FF,d1
00004824                            
00004824                            SS_EndClrObjRam:
00004824 22C0                       		move.l	d0,(a1)+
00004826 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000482A                            
0000482A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004830                            
00004830                            SS_NormalExit:
00004830 6100 CB54                  		bsr.w	PauseGame
00004834 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000483A 6100 E14A                  		bsr.w	DelayProgram
0000483E 4EB9 0000 0000             		jsr	ObjectsLoad
00004844 4EB9 0000 0000             		jsr	BuildSprites
0000484A 6100 CD7E                  		bsr.w	RunPLC_RAM
0000484E 4A78 FE02                  		tst.w	($FFFFFE02).w
00004852 67DC                       		beq.s	SS_NormalExit
00004854 4AB8 F680                  		tst.l	($FFFFF680).w
00004858 66D6                       		bne.s	SS_NormalExit
0000485A 303C 00CA                  		move.w	#$CA,d0
0000485E 6100 CB1A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004862 6100 D6F6                  		bsr.w	Pal_MakeFlash
00004866 4E75                       		rts	
00004868                            ; ===========================================================================
00004868                            
00004868                            SS_ToSegaScreen:
00004868 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000486E 4E75                       		rts
00004870                            
00004870                            ; ---------------------------------------------------------------------------
00004870                            ; Special stage	background loading subroutine
00004870                            ; ---------------------------------------------------------------------------
00004870                            
00004870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004870                            
00004870                            
00004870                            SS_BGLoad:				; XREF: SpecialStage
00004870 43F9 00FF 0000             		lea	($FF0000).l,a1
00004876 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000487C 303C 4051                  		move.w	#$4051,d0
00004880 6100 CE7A                  		bsr.w	EniDec
00004884 263C 5000 0001             		move.l	#$50000001,d3
0000488A 45F9 00FF 0080             		lea	($FF0080).l,a2
00004890 7E06                       		moveq	#6,d7
00004892                            
00004892                            loc_48BE:
00004892 2003                       		move.l	d3,d0
00004894 7C03                       		moveq	#3,d6
00004896 7800                       		moveq	#0,d4
00004898 0C47 0003                  		cmpi.w	#3,d7
0000489C 6400                       		bcc.s	loc_48CC
0000489E 7801                       		moveq	#1,d4
000048A0                            
000048A0                            loc_48CC:
000048A0 7A07                       		moveq	#7,d5
000048A2                            
000048A2                            loc_48CE:
000048A2 224A                       		movea.l	a2,a1
000048A4 0A04 0001                  		eori.b	#1,d4
000048A8 6600                       		bne.s	loc_48E2
000048AA 0C47 0006                  		cmpi.w	#6,d7
000048AE 6600                       		bne.s	loc_48F2
000048B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000048B6                            
000048B6                            loc_48E2:
000048B6 48E7 F800                  		movem.l	d0-d4,-(sp)
000048BA 7207                       		moveq	#7,d1
000048BC 7407                       		moveq	#7,d2
000048BE 6100 CB3E                  		bsr.w	ShowVDPGraphics
000048C2 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048C6                            
000048C6                            loc_48F2:
000048C6 0680 0010 0000             		addi.l	#$100000,d0
000048CC 51CD FFD4                  		dbf	d5,loc_48CE
000048D0 0680 0380 0000             		addi.l	#$3800000,d0
000048D6 0A04 0001                  		eori.b	#1,d4
000048DA 51CE FFC4                  		dbf	d6,loc_48CC
000048DE 0683 1000 0000             		addi.l	#$10000000,d3
000048E4 6A00                       		bpl.s	loc_491C
000048E6 4843                       		swap	d3
000048E8 0683 0000 C000             		addi.l	#$C000,d3
000048EE 4843                       		swap	d3
000048F0                            
000048F0                            loc_491C:
000048F0 D4FC 0080                  		adda.w	#$80,a2
000048F4 51CF FF9C                  		dbf	d7,loc_48BE
000048F8 43F9 00FF 0000             		lea	($FF0000).l,a1
000048FE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004904 303C 4000                  		move.w	#$4000,d0
00004908 6100 CDF2                  		bsr.w	EniDec
0000490C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004912 203C 4000 0003             		move.l	#$40000003,d0
00004918 723F                       		moveq	#$3F,d1
0000491A 741F                       		moveq	#$1F,d2
0000491C 6100 CAE0                  		bsr.w	ShowVDPGraphics
00004920 43F9 00FF 0000             		lea	($FF0000).l,a1
00004926 203C 5000 0003             		move.l	#$50000003,d0
0000492C 723F                       		moveq	#$3F,d1
0000492E 743F                       		moveq	#$3F,d2
00004930 6100 CACC                  		bsr.w	ShowVDPGraphics
00004934 4E75                       		rts	
00004936                            ; End of function SS_BGLoad
00004936                            
00004936                            ; ---------------------------------------------------------------------------
00004936                            ; Pallet cycling routine - special stage
00004936                            ; ---------------------------------------------------------------------------
00004936                            
00004936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004936                            
00004936                            
00004936                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004936 4A78 F63A                  		tst.w	($FFFFF63A).w
0000493A 6600                       		bne.s	locret_49E6
0000493C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004940 6A00                       		bpl.s	locret_49E6
00004942 4DF9 00C0 0004             		lea	($C00004).l,a6
00004948 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000494C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004950 0240 001F                  		andi.w	#$1F,d0
00004954 E548                       		lsl.w	#2,d0
00004956 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000495C D0C0                       		adda.w	d0,a0
0000495E 1018                       		move.b	(a0)+,d0
00004960 6A00                       		bpl.s	loc_4992
00004962 303C 01FF                  		move.w	#$1FF,d0
00004966                            
00004966                            loc_4992:
00004966 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000496A 7000                       		moveq	#0,d0
0000496C 1018                       		move.b	(a0)+,d0
0000496E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004972 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004978 43F1 0000                  		lea	(a1,d0.w),a1
0000497C 303C 8200                  		move.w	#-$7E00,d0
00004980 1019                       		move.b	(a1)+,d0
00004982 3C80                       		move.w	d0,(a6)
00004984 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004988 303C 8400                  		move.w	#-$7C00,d0
0000498C 1018                       		move.b	(a0)+,d0
0000498E 3C80                       		move.w	d0,(a6)
00004990 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000499A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049A2 7000                       		moveq	#0,d0
000049A4 1018                       		move.b	(a0)+,d0
000049A6 6B00                       		bmi.s	loc_49E8
000049A8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049AE D2C0                       		adda.w	d0,a1
000049B0 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049B4 24D9                       		move.l	(a1)+,(a2)+
000049B6 24D9                       		move.l	(a1)+,(a2)+
000049B8 24D9                       		move.l	(a1)+,(a2)+
000049BA                            
000049BA                            locret_49E6:
000049BA 4E75                       		rts	
000049BC                            ; ===========================================================================
000049BC                            
000049BC                            loc_49E8:				; XREF: PalCycle_SS
000049BC 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049C0 0C40 008A                  		cmpi.w	#$8A,d0
000049C4 6500                       		bcs.s	loc_49F4
000049C6 5241                       		addq.w	#1,d1
000049C8                            
000049C8                            loc_49F4:
000049C8 C2FC 002A                  		mulu.w	#$2A,d1
000049CC 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049D2 D2C1                       		adda.w	d1,a1
000049D4 0240 007F                  		andi.w	#$7F,d0
000049D8 0880 0000                  		bclr	#0,d0
000049DC 6700                       		beq.s	loc_4A18
000049DE 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000049E2 24D1                       		move.l	(a1),(a2)+
000049E4 24E9 0004                  		move.l	4(a1),(a2)+
000049E8 24E9 0008                  		move.l	8(a1),(a2)+
000049EC                            
000049EC                            loc_4A18:
000049EC D2FC 000C                  		adda.w	#$C,a1
000049F0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000049F4 0C40 000A                  		cmpi.w	#$A,d0
000049F8 6500                       		bcs.s	loc_4A2E
000049FA 0440 000A                  		subi.w	#$A,d0
000049FE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A02                            
00004A02                            loc_4A2E:
00004A02 3200                       		move.w	d0,d1
00004A04 D040                       		add.w	d0,d0
00004A06 D041                       		add.w	d1,d0
00004A08 D2C0                       		adda.w	d0,a1
00004A0A 24D9                       		move.l	(a1)+,(a2)+
00004A0C 34D9                       		move.w	(a1)+,(a2)+
00004A0E 4E75                       		rts	
00004A10                            ; End of function PalCycle_SS
00004A10                            
00004A10                            ; ===========================================================================
00004A10 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A20                            					; XREF: PalCycle_SS
00004A20 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A30 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A40 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A50 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A60 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A70 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004A80 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004A90                            		even
00004A90 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004A9E                            					; XREF: PalCycle_SS
00004A9E                            		even
00004A9E                            
00004A9E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004AE6                            		even
00004AE6                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BB8                            		even
00004BB8                            
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            ; Subroutine to	make the special stage background animated
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            
00004BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BB8                            
00004BB8                            
00004BB8                            SS_BGAnimate:				; XREF: SpecialStage
00004BB8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BBC 6600                       		bne.s	loc_4BF6
00004BBE 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BC4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BCA                            
00004BCA                            loc_4BF6:
00004BCA 0C40 0008                  		cmpi.w	#8,d0
00004BCE 6400                       		bcc.s	loc_4C4E
00004BD0 0C40 0006                  		cmpi.w	#6,d0
00004BD4 6600                       		bne.s	loc_4C10
00004BD6 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BDA 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004BDE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BE4                            
00004BE4                            loc_4C10:
00004BE4 7000                       		moveq	#0,d0
00004BE6 3038 F708                  		move.w	($FFFFF708).w,d0
00004BEA 4440                       		neg.w	d0
00004BEC 4840                       		swap	d0
00004BEE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004BF4 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004BF8 7609                       		moveq	#9,d3
00004BFA                            
00004BFA                            loc_4C26:
00004BFA 302B 0002                  		move.w	2(a3),d0
00004BFE 6100 DDB8                  		bsr.w	CalcSine
00004C02 7400                       		moveq	#0,d2
00004C04 1419                       		move.b	(a1)+,d2
00004C06 C1C2                       		muls.w	d2,d0
00004C08 E080                       		asr.l	#8,d0
00004C0A 36C0                       		move.w	d0,(a3)+
00004C0C 1419                       		move.b	(a1)+,d2
00004C0E 4882                       		ext.w	d2
00004C10 D55B                       		add.w	d2,(a3)+
00004C12 51CB FFE6                  		dbf	d3,loc_4C26
00004C16 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C20 6000                       		bra.s	loc_4C7E
00004C22                            ; ===========================================================================
00004C22                            
00004C22                            loc_4C4E:				; XREF: SS_BGAnimate
00004C22 0C40 000C                  		cmpi.w	#$C,d0
00004C26 6600                       		bne.s	loc_4C74
00004C28 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C2C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C30 243C 0001 8000             		move.l	#$18000,d2
00004C36 7206                       		moveq	#6,d1
00004C38                            
00004C38                            loc_4C64:
00004C38 2013                       		move.l	(a3),d0
00004C3A 9082                       		sub.l	d2,d0
00004C3C 26C0                       		move.l	d0,(a3)+
00004C3E 0482 0000 2000             		subi.l	#$2000,d2
00004C44 51C9 FFF2                  		dbf	d1,loc_4C64
00004C48                            
00004C48                            loc_4C74:
00004C48 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C4C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C52                            
00004C52                            loc_4C7E:
00004C52 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C56 3038 F718                  		move.w	($FFFFF718).w,d0
00004C5A 4440                       		neg.w	d0
00004C5C 4840                       		swap	d0
00004C5E 7600                       		moveq	#0,d3
00004C60 161A                       		move.b	(a2)+,d3
00004C62 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C66 4442                       		neg.w	d2
00004C68 0242 00FF                  		andi.w	#$FF,d2
00004C6C E54A                       		lsl.w	#2,d2
00004C6E                            
00004C6E                            loc_4C9A:
00004C6E 301B                       		move.w	(a3)+,d0
00004C70 544B                       		addq.w	#2,a3
00004C72 7200                       		moveq	#0,d1
00004C74 121A                       		move.b	(a2)+,d1
00004C76 5341                       		subq.w	#1,d1
00004C78                            
00004C78                            loc_4CA4:
00004C78 2380 2000                  		move.l	d0,(a1,d2.w)
00004C7C 5842                       		addq.w	#4,d2
00004C7E 0242 03FC                  		andi.w	#$3FC,d2
00004C82 51C9 FFF4                  		dbf	d1,loc_4CA4
00004C86 51CB FFE6                  		dbf	d3,loc_4C9A
00004C8A 4E75                       		rts	
00004C8C                            ; End of function SS_BGAnimate
00004C8C                            
00004C8C                            ; ===========================================================================
00004C8C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004C98                            		even
00004C98 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CA0                            		even
00004CA0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CB4                            		even
00004CB4                            					; XREF: SS_BGAnimate
00004CB4                            ; ===========================================================================
00004CB4                            
00004CB4                            ; ---------------------------------------------------------------------------
00004CB4                            ; Continue screen
00004CB4                            ; ---------------------------------------------------------------------------
00004CB4                            
00004CB4                            ContinueScreen:				; XREF: GameModeArray
00004CB4 6100 D17A                  		bsr.w	Pal_FadeFrom
00004CB8 46FC 2700                  		move	#$2700,sr
00004CBC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CC0 0200 00BF                  		andi.b	#$BF,d0
00004CC4 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CCA 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CD0 3CBC 8004                  		move.w	#$8004,(a6)
00004CD4 3CBC 8700                  		move.w	#$8700,(a6)
00004CD8 6100 C5C8                  		bsr.w	ClearScreen
00004CDC 43F8 D000                  		lea	($FFFFD000).w,a1
00004CE0 7000                       		moveq	#0,d0
00004CE2 323C 07FF                  		move.w	#$7FF,d1
00004CE6                            
00004CE6                            Cont_ClrObjRam:
00004CE6 22C0                       		move.l	d0,(a1)+
00004CE8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004CEC                            
00004CEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004CF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004CFC 6100 C720                  		bsr.w	NemDec
00004D00 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D0A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D10 6100 C70C                  		bsr.w	NemDec
00004D14 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D1E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D24 6100 C6F8                  		bsr.w	NemDec
00004D28 720A                       		moveq	#10,d1
00004D2A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D30 7012                       		moveq	#$12,d0
00004D32 6100 D3A6                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D36 103C 0090                  		move.b	#$90,d0
00004D3A 6100 C638                  		bsr.w	PlaySound	; play continue	music
00004D3E 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D44 42B8 F700                  		clr.l	($FFFFF700).w
00004D48 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D50 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D56 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D5C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D62 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D68 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D6E 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D74 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D7A 4EB9 0000 0000             		jsr	ObjectsLoad
00004D80 4EB9 0000 0000             		jsr	BuildSprites
00004D86 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D8A 0000 0040                  		ori.b	#$40,d0
00004D8E 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D94 6100 CFF4                  		bsr.w	Pal_FadeTo
00004D98                            
00004D98                            ; ---------------------------------------------------------------------------
00004D98                            ; Continue screen main loop
00004D98                            ; ---------------------------------------------------------------------------
00004D98                            
00004D98                            Cont_MainLoop:
00004D98 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004D9E 6100 DBE6                  		bsr.w	DelayProgram
00004DA2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DA8 6400                       		bcc.s	loc_4DF2
00004DAA 46FC 2700                  		move	#$2700,sr
00004DAE 3238 F614                  		move.w	($FFFFF614).w,d1
00004DB2 82FC 003C                  		divu.w	#$3C,d1
00004DB6 0281 0000 000F             		andi.l	#$F,d1
00004DBC 4EB9 0000 0000             		jsr	ContScrCounter
00004DC2 46FC 2300                  		move	#$2300,sr
00004DC6                            
00004DC6                            loc_4DF2:
00004DC6 4EB9 0000 0000             		jsr	ObjectsLoad
00004DCC 4EB9 0000 0000             		jsr	BuildSprites
00004DD2 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DD8 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DE0 64B6                       		bcc.s	Cont_MainLoop
00004DE2 4A78 F614                  		tst.w	($FFFFF614).w
00004DE6 6600 FFB0                  		bne.w	Cont_MainLoop
00004DEA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004DF0 4E75                       		rts	
00004DF2                            ; ===========================================================================
00004DF2                            
00004DF2                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004DF2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DF8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004DFE 7000                       		moveq	#0,d0
00004E00 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E04 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E08 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E0C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E10 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E14 4E75                       		rts	
00004E16                            ; ===========================================================================
00004E16                            
00004E16                            ; ---------------------------------------------------------------------------
00004E16                            ; Object 80 - Continue screen elements
00004E16                            ; ---------------------------------------------------------------------------
00004E16                            
00004E16                            Obj80:					; XREF: Obj_Index
00004E16 7000                       		moveq	#0,d0
00004E18 1028 0024                  		move.b	$24(a0),d0
00004E1C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E20 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E24                            ; ===========================================================================
00004E24 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E26 0000                       		dc.w Obj80_Display-Obj80_Index
00004E28 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E2A 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E2C                            ; ===========================================================================
00004E2C                            
00004E2C                            Obj80_Main:				; XREF: Obj80_Index
00004E2C 5428 0024                  		addq.b	#2,$24(a0)
00004E30 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E38 317C 8500 0002             		move.w	#$8500,2(a0)
00004E3E 117C 0000 0001             		move.b	#0,1(a0)
00004E44 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E4A 317C 0120 0008             		move.w	#$120,8(a0)
00004E50 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E56 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E5C                            
00004E5C                            Obj80_Display:				; XREF: Obj80_Index
00004E5C 4EF9 0000 0000             		jmp	DisplaySprite
00004E62                            ; ===========================================================================
00004E62                            Obj80_MiniSonicPos:
00004E62 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E74 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004E80                            ; ===========================================================================
00004E80                            
00004E80                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004E80 2248                       		movea.l	a0,a1
00004E82 45F9 0000 4E62             		lea	(Obj80_MiniSonicPos).l,a2
00004E88 7200                       		moveq	#0,d1
00004E8A 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004E8E 5501                       		subq.b	#2,d1
00004E90 6400                       		bcc.s	loc_4EC4
00004E92 4EF9 0000 0000             		jmp	DeleteObject
00004E98                            ; ===========================================================================
00004E98                            
00004E98                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004E98 7601                       		moveq	#1,d3
00004E9A 0C01 000E                  		cmpi.b	#$E,d1
00004E9E 6500                       		bcs.s	loc_4ED0
00004EA0 7600                       		moveq	#0,d3
00004EA2 720E                       		moveq	#$E,d1
00004EA4                            
00004EA4                            loc_4ED0:
00004EA4 1401                       		move.b	d1,d2
00004EA6 0202 0001                  		andi.b	#1,d2
00004EAA                            
00004EAA                            Obj80_MiniSonLoop:
00004EAA 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004EAE 335A 0008                  		move.w	(a2)+,8(a1)
00004EB2 4A02                       		tst.b	d2
00004EB4 6700                       		beq.s	loc_4EEA
00004EB6 0469 000A 0008             		subi.w	#$A,8(a1)
00004EBC                            
00004EBC                            loc_4EEA:
00004EBC 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EC2 137C 0006 001A             		move.b	#6,$1A(a1)
00004EC8 137C 0006 0024             		move.b	#6,$24(a1)
00004ECE 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004ED6 337C 8551 0002             		move.w	#$8551,2(a1)
00004EDC 137C 0000 0001             		move.b	#0,1(a1)
00004EE2 43E9 0040                  		lea	$40(a1),a1
00004EE6 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004EEA 43E9 FFC0                  		lea	-$40(a1),a1
00004EEE 1343 0028                  		move.b	d3,$28(a1)
00004EF2                            
00004EF2                            Obj80_ChkType:				; XREF: Obj80_Index
00004EF2 4A28 0028                  		tst.b	$28(a0)
00004EF6 6700                       		beq.s	loc_4F40
00004EF8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004EFE 6500                       		bcs.s	loc_4F40
00004F00 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F04 0200 0001                  		andi.b	#1,d0
00004F08 6600                       		bne.s	loc_4F40
00004F0A 4A78 D010                  		tst.w	($FFFFD010).w
00004F0E 6600                       		bne.s	Obj80_Delete
00004F10 4E75                       		rts	
00004F12                            ; ===========================================================================
00004F12                            
00004F12                            loc_4F40:				; XREF: Obj80_ChkType
00004F12 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F16 0200 000F                  		andi.b	#$F,d0
00004F1A 6600                       		bne.s	Obj80_Display2
00004F1C 0868 0000 001A             		bchg	#0,$1A(a0)
00004F22                            
00004F22                            Obj80_Display2:
00004F22 4EF9 0000 0000             		jmp	DisplaySprite
00004F28                            ; ===========================================================================
00004F28                            
00004F28                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F28 4EF9 0000 0000             		jmp	DeleteObject
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            ; ---------------------------------------------------------------------------
00004F2E                            ; Object 81 - Sonic on the continue screen
00004F2E                            ; ---------------------------------------------------------------------------
00004F2E                            
00004F2E                            Obj81:					; XREF: Obj_Index
00004F2E 7000                       		moveq	#0,d0
00004F30 1028 0024                  		move.b	$24(a0),d0
00004F34 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F38 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F3C 4EF9 0000 0000             		jmp	DisplaySprite
00004F42                            ; ===========================================================================
00004F42 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F44 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F46 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F48 0000                       		dc.w Obj81_Run-Obj81_Index
00004F4A                            ; ===========================================================================
00004F4A                            
00004F4A                            Obj81_Main:				; XREF: Obj81_Index
00004F4A 5428 0024                  		addq.b	#2,$24(a0)
00004F4E 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F54 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F5A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F62 317C 0780 0002             		move.w	#$780,2(a0)
00004F68 117C 0004 0001             		move.b	#4,1(a0)
00004F6E 117C 0002 0018             		move.b	#2,$18(a0)
00004F74 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F7A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004F80                            
00004F80                            Obj81_ChkLand:				; XREF: Obj81_Index
00004F80 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004F86 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004F88 5428 0024                  		addq.b	#2,$24(a0)
00004F8C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004F90 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004F98 317C 8500 0002             		move.w	#$8500,2(a0)
00004F9E 117C 0000 001C             		move.b	#0,$1C(a0)
00004FA4 6000                       		bra.s	Obj81_Animate
00004FA6                            ; ===========================================================================
00004FA6                            
00004FA6                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FA6 4EB9 0000 0000             		jsr	SpeedToPos
00004FAC 4EB9 0000 0000             		jsr	Sonic_Animate
00004FB2 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            Obj81_Animate:				; XREF: Obj81_Index
00004FB8 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FBC 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FBE 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FC4 4EF9 0000 0000             		jmp	AnimateSprite
00004FCA                            ; ===========================================================================
00004FCA                            
00004FCA                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FCA 5428 0024                  		addq.b	#2,$24(a0)
00004FCE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FD6 317C 0780 0002             		move.w	#$780,2(a0)
00004FDC 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00004FE2 4268 0014                  		clr.w	$14(a0)
00004FE6 5168 000C                  		subq.w	#8,$C(a0)
00004FEA 103C 00E0                  		move.b	#$E0,d0
00004FEE 6100 C38A                  		bsr.w	PlaySound_Special ; fade out music
00004FF2                            
00004FF2                            Obj81_Run:				; XREF: Obj81_Index
00004FF2 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00004FF8 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00004FFA 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005000 6000                       		bra.s	Obj81_ShowRun
00005002                            ; ===========================================================================
00005002                            
00005002                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005002 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005008                            
00005008                            Obj81_ShowRun:				; XREF: Obj81_Run
00005008 4EB9 0000 0000             		jsr	SpeedToPos
0000500E 4EB9 0000 0000             		jsr	Sonic_Animate
00005014 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000501A                            ; ===========================================================================
0000501A                            Ani_obj81:
0000501A                            	include "_anim\obj81.asm"
0000501A                            ; ---------------------------------------------------------------------------
0000501A                            ; Animation script - Sonic on the continue screen
0000501A                            ; ---------------------------------------------------------------------------
0000501A 0000                       		dc.w byte_504A-Ani_obj81
0000501C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005028 00                         		even
00005028 00                         		even
00005028                            
00005028                            ; ---------------------------------------------------------------------------
00005028                            ; Sprite mappings - Continue screen
00005028                            ; ---------------------------------------------------------------------------
00005028                            Map_obj80:
00005028                            	include "_maps\obj80.asm"
00005028                            ; ---------------------------------------------------------------------------
00005028                            ; Sprite mappings - Continue screen
00005028                            ; ---------------------------------------------------------------------------
00005028 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000502C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005030 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005034 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005038 0B                         byte_5066:	dc.b $B
00005039 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000503E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005043 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005048 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000504D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005052 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005057 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000505C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005061 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005066 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000506B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005070 03                         byte_509E:	dc.b 3
00005071 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005076 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000507B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005080 03                         byte_50AE:	dc.b 3
00005081 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005086 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000508B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005090 03                         byte_50BE:	dc.b 3
00005091 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005096 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A0 02                         byte_50CE:	dc.b 2
000050A1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050A6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050AB 01                         byte_50D9:	dc.b 1
000050AC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050B1 01                         byte_50DF:	dc.b 1
000050B2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050B8 00                         		even
000050B8 00                         		even
000050B8                            
000050B8                            ; ===========================================================================
000050B8                            ; ---------------------------------------------------------------------------
000050B8                            ; Ending sequence in Green Hill	Zone
000050B8                            ; ---------------------------------------------------------------------------
000050B8                            
000050B8                            EndingSequence:				; XREF: GameModeArray
000050B8 103C 00E4                  		move.b	#$E4,d0
000050BC 6100 C2BC                  		bsr.w	PlaySound_Special ; stop music
000050C0 6100 CD6E                  		bsr.w	Pal_FadeFrom
000050C4 43F8 D000                  		lea	($FFFFD000).w,a1
000050C8 7000                       		moveq	#0,d0
000050CA 323C 07FF                  		move.w	#$7FF,d1
000050CE                            
000050CE                            End_ClrObjRam:
000050CE 22C0                       		move.l	d0,(a1)+
000050D0 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050D4                            
000050D4 43F8 F628                  		lea	($FFFFF628).w,a1
000050D8 7000                       		moveq	#0,d0
000050DA 323C 0015                  		move.w	#$15,d1
000050DE                            
000050DE                            End_ClrRam:
000050DE 22C0                       		move.l	d0,(a1)+
000050E0 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000050E4                            
000050E4 43F8 F700                  		lea	($FFFFF700).w,a1
000050E8 7000                       		moveq	#0,d0
000050EA 323C 003F                  		move.w	#$3F,d1
000050EE                            
000050EE                            End_ClrRam2:
000050EE 22C0                       		move.l	d0,(a1)+
000050F0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000050F4                            
000050F4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050F8 7000                       		moveq	#0,d0
000050FA 323C 0047                  		move.w	#$47,d1
000050FE                            
000050FE                            End_ClrRam3:
000050FE 22C0                       		move.l	d0,(a1)+
00005100 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005104                            
00005104 46FC 2700                  		move	#$2700,sr
00005108 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000510C 0200 00BF                  		andi.b	#$BF,d0
00005110 33C0 00C0 0004             		move.w	d0,($C00004).l
00005116 6100 C18A                  		bsr.w	ClearScreen
0000511A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005120 3CBC 8B03                  		move.w	#$8B03,(a6)
00005124 3CBC 8230                  		move.w	#$8230,(a6)
00005128 3CBC 8407                  		move.w	#$8407,(a6)
0000512C 3CBC 857C                  		move.w	#$857C,(a6)
00005130 3CBC 9001                  		move.w	#$9001,(a6)
00005134 3CBC 8004                  		move.w	#$8004,(a6)
00005138 3CBC 8720                  		move.w	#$8720,(a6)
0000513C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005142 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005146 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000514C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005152 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005158 6700                       		beq.s	End_LoadData	; if yes, branch
0000515A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005160                            
00005160                            End_LoadData:
00005160 701C                       		moveq	#$1C,d0
00005162 6100 C566                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005166 4EB9 0000 0000             		jsr	Hud_Base
0000516C 6100 0000                  		bsr.w	LevelSizeLoad
00005170 6100 0000                  		bsr.w	DeformBgLayer
00005174 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000517A 6100 0000                  		bsr.w	MainLoadBlockLoad
0000517E 6100 0000                  		bsr.w	LoadTilesFromStart
00005182 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000518A 46FC 2300                  		move	#$2300,sr
0000518E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005194 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005198 6100 C6E0                  		bsr.w	KosDec
0000519C 7003                       		moveq	#3,d0
0000519E 6100 CF3A                  		bsr.w	PalLoad1	; load Sonic's pallet
000051A2 303C 008B                  		move.w	#$8B,d0
000051A6 6100 C1CC                  		bsr.w	PlaySound	; play ending sequence music
000051AA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051B0 6700                       		beq.s	End_LoadSonic	; if not, branch
000051B2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051B8                            
000051B8                            End_LoadSonic:
000051B8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051BE 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051CA 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051D0 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051D6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000051DC 4EB9 0000 0000             		jsr	ObjPosLoad
000051E2 4EB9 0000 0000             		jsr	ObjectsLoad
000051E8 4EB9 0000 0000             		jsr	BuildSprites
000051EE 7000                       		moveq	#0,d0
000051F0 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000051F4 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000051F8 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000051FC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005200 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005204 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005208 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000520C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005210 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005214 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005218 6100 EEDA                  		bsr.w	OscillateNumInit
0000521C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005222 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005228 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000522E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005234 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000523A 6100 D74A                  		bsr.w	DelayProgram
0000523E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005242 0000 0040                  		ori.b	#$40,d0
00005246 33C0 00C0 0004             		move.w	d0,($C00004).l
0000524C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005252 6100 CB36                  		bsr.w	Pal_FadeTo
00005256                            
00005256                            ; ---------------------------------------------------------------------------
00005256                            ; Main ending sequence loop
00005256                            ; ---------------------------------------------------------------------------
00005256                            
00005256                            End_MainLoop:
00005256 6100 C12E                  		bsr.w	PauseGame
0000525A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005260 6100 D724                  		bsr.w	DelayProgram
00005264 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005268 6100 0000                  		bsr.w	End_MoveSonic
0000526C 4EB9 0000 0000             		jsr	ObjectsLoad
00005272 6100 0000                  		bsr.w	DeformBgLayer
00005276 4EB9 0000 0000             		jsr	BuildSprites
0000527C 4EB9 0000 0000             		jsr	ObjPosLoad
00005282 6100 C696                  		bsr.w	PalCycle_Load
00005286 6100 EEC2                  		bsr.w	OscillateNumDo
0000528A 6100 EF4E                  		bsr.w	ChangeRingFrame
0000528E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005294 6700                       		beq.s	loc_52DA	; if yes, branch
00005296 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000529C 103C 0091                  		move.b	#$91,d0
000052A0 6100 C0D8                  		bsr.w	PlaySound_Special ; play credits music
000052A4 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052AA 4E75                       		rts	
000052AC                            ; ===========================================================================
000052AC                            
000052AC                            loc_52DA:
000052AC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052B0 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052B4                            
000052B4 4278 FE02                  		clr.w	($FFFFFE02).w
000052B8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052BE 4278 F794                  		clr.w	($FFFFF794).w
000052C2                            
000052C2                            End_AllEmlds:				; XREF: loc_5334
000052C2 6100 C0C2                  		bsr.w	PauseGame
000052C6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052CC 6100 D6B8                  		bsr.w	DelayProgram
000052D0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052D4 6100 0000                  		bsr.w	End_MoveSonic
000052D8 4EB9 0000 0000             		jsr	ObjectsLoad
000052DE 6100 0000                  		bsr.w	DeformBgLayer
000052E2 4EB9 0000 0000             		jsr	BuildSprites
000052E8 4EB9 0000 0000             		jsr	ObjPosLoad
000052EE 6100 EE5A                  		bsr.w	OscillateNumDo
000052F2 6100 EEE6                  		bsr.w	ChangeRingFrame
000052F6 5378 F794                  		subq.w	#1,($FFFFF794).w
000052FA 6A00                       		bpl.s	loc_5334
000052FC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005302 6100 CC76                  		bsr.w	Pal_ToWhite
00005306                            
00005306                            loc_5334:
00005306 4A78 FE02                  		tst.w	($FFFFFE02).w
0000530A 6700 FFB6                  		beq.w	End_AllEmlds
0000530E 4278 FE02                  		clr.w	($FFFFFE02).w
00005312 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000531E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005324 47F8 F700                  		lea	($FFFFF700).w,a3
00005328 49F8 A400                  		lea	($FFFFA400).w,a4
0000532C 343C 4000                  		move.w	#$4000,d2
00005330 6100 0000                  		bsr.w	LoadTilesFromStart2
00005334 7013                       		moveq	#$13,d0
00005336 6100 CDA2                  		bsr.w	PalLoad1	; load ending pallet
0000533A 6100 CB72                  		bsr.w	Pal_MakeWhite
0000533E 6000 FF16                  		bra.w	End_MainLoop
00005342                            
00005342                            ; ---------------------------------------------------------------------------
00005342                            ; Subroutine controlling Sonic on the ending sequence
00005342                            ; ---------------------------------------------------------------------------
00005342                            
00005342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005342                            
00005342                            
00005342                            End_MoveSonic:				; XREF: End_MainLoop
00005342 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005346 6600                       		bne.s	End_MoveSonic2
00005348 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000534E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005350 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005354 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000535A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005360 4E75                       		rts	
00005362                            ; ===========================================================================
00005362                            
00005362                            End_MoveSonic2:				; XREF: End_MoveSonic
00005362 5500                       		subq.b	#2,d0
00005364 6600                       		bne.s	End_MoveSonic3
00005366 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000536C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000536E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005372 7000                       		moveq	#0,d0
00005374 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005378 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000537C 31C0 D014                  		move.w	d0,($FFFFD014).w
00005380 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005386 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000538C 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005392 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005398 4E75                       		rts	
0000539A                            ; ===========================================================================
0000539A                            
0000539A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000539A 5500                       		subq.b	#2,d0
0000539C 6600                       		bne.s	End_MoveSonExit
0000539E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053A2 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053A8 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053AE 4278 D024                  		clr.w	($FFFFD024).w
000053B2                            
000053B2                            End_MoveSonExit:
000053B2 4E75                       		rts	
000053B4                            ; End of function End_MoveSonic
000053B4                            
000053B4                            ; ===========================================================================
000053B4                            ; ---------------------------------------------------------------------------
000053B4                            ; Object 87 - Sonic on ending sequence
000053B4                            ; ---------------------------------------------------------------------------
000053B4                            
000053B4                            Obj87:					; XREF: Obj_Index
000053B4 7000                       		moveq	#0,d0
000053B6 1028 0025                  		move.b	$25(a0),d0
000053BA 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053BE 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053C2 4EF9 0000 0000             		jmp	DisplaySprite
000053C8                            ; ===========================================================================
000053C8 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053CC 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053D0 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053D4 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053D8 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000053DC                            ; ===========================================================================
000053DC                            
000053DC                            Obj87_Main:				; XREF: Obj87_Index
000053DC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000053E2 6700                       		beq.s	Obj87_Main2	; if yes, branch
000053E4 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000053EA 317C 00D8 0030             		move.w	#$D8,$30(a0)
000053F0 4E75                       		rts	
000053F2                            ; ===========================================================================
000053F2                            
000053F2                            Obj87_Main2:				; XREF: Obj87_Main
000053F2 5428 0025                  		addq.b	#2,$25(a0)
000053F6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000053FE 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005404 117C 0004 0001             		move.b	#4,1(a0)
0000540A 4228 0022                  		clr.b	$22(a0)
0000540E 117C 0002 0018             		move.b	#2,$18(a0)
00005414 117C 0000 001A             		move.b	#0,$1A(a0)
0000541A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005420                            
00005420                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005420 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005424 6600                       		bne.s	Obj87_Wait
00005426 5428 0025                  		addq.b	#2,$25(a0)
0000542A 317C 0001 001C             		move.w	#1,$1C(a0)
00005430 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005436                            
00005436                            Obj87_Wait:
00005436 4E75                       		rts	
00005438                            ; ===========================================================================
00005438                            
00005438                            Obj87_LookUp:				; XREF: Obj87_Index
00005438 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005440 6600                       		bne.s	locret_5480
00005442 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005448 317C 005A 0030             		move.w	#$5A,$30(a0)
0000544E 5428 0025                  		addq.b	#2,$25(a0)
00005452                            
00005452                            locret_5480:
00005452 4E75                       		rts	
00005454                            ; ===========================================================================
00005454                            
00005454                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005454 5368 0030                  		subq.w	#1,$30(a0)
00005458 6600                       		bne.s	Obj87_Wait2
0000545A 43F8 D400                  		lea	($FFFFD400).w,a1
0000545E 323C 00FF                  		move.w	#$FF,d1
00005462                            
00005462                            Obj87_ClrLoop:
00005462 4299                       		clr.l	(a1)+
00005464 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005468 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000546E 5428 0025                  		addq.b	#2,$25(a0)
00005472 117C 0001 001C             		move.b	#1,$1C(a0)
00005478 317C 003C 0030             		move.w	#$3C,$30(a0)
0000547E                            
0000547E                            Obj87_Wait2:
0000547E 4E75                       		rts	
00005480                            ; ===========================================================================
00005480                            
00005480                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005480 5368 0030                  		subq.w	#1,$30(a0)
00005484 6600                       		bne.s	Obj87_Wait3
00005486 5428 0025                  		addq.b	#2,$25(a0)
0000548A 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005490 117C 0002 001C             		move.b	#2,$1C(a0)
00005496 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000549C                            
0000549C                            Obj87_Wait3:
0000549C 4E75                       		rts	
0000549E                            ; ===========================================================================
0000549E                            
0000549E                            Obj87_Animate:				; XREF: Obj87_Index
0000549E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054A4 4EF9 0000 0000             		jmp	AnimateSprite
000054AA                            ; ===========================================================================
000054AA                            
000054AA                            Obj87_Leap:				; XREF: Obj87_Index
000054AA 5368 0030                  		subq.w	#1,$30(a0)
000054AE 6600                       		bne.s	Obj87_Wait4
000054B0 5428 0025                  		addq.b	#2,$25(a0)
000054B4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054BC 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054C2 117C 0004 0001             		move.b	#4,1(a0)
000054C8 4228 0022                  		clr.b	$22(a0)
000054CC 117C 0002 0018             		move.b	#2,$18(a0)
000054D2 117C 0005 001A             		move.b	#5,$1A(a0)
000054D8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000054DE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054E4 60B8                       		bra.s	Obj87_Animate
000054E6                            ; ===========================================================================
000054E6                            
000054E6                            Obj87_Wait4:				; XREF: Obj87_Leap
000054E6 4E75                       		rts	
000054E8                            ; ===========================================================================
000054E8                            Ani_obj87:
000054E8                            	include "_anim\obj87.asm"
000054E8                            ; ---------------------------------------------------------------------------
000054E8                            ; Animation script - Sonic on the ending sequence
000054E8                            ; ---------------------------------------------------------------------------
000054E8 0000                       		dc.w byte_551C-Ani_obj87
000054EA 0000                       		dc.w byte_552A-Ani_obj87
000054EC 0000                       		dc.w byte_5534-Ani_obj87
000054EE 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000054FC 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005506 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000550E                            		even
0000550E                            		even
0000550E                            
0000550E                            ; ===========================================================================
0000550E                            ; ---------------------------------------------------------------------------
0000550E                            ; Object 88 - chaos emeralds on	the ending sequence
0000550E                            ; ---------------------------------------------------------------------------
0000550E                            
0000550E                            Obj88:					; XREF: Obj_Index
0000550E 7000                       		moveq	#0,d0
00005510 1028 0024                  		move.b	$24(a0),d0
00005514 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005518 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000551C 4EF9 0000 0000             		jmp	DisplaySprite
00005522                            ; ===========================================================================
00005522 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005524 0000                       		dc.w Obj88_Move-Obj88_Index
00005526                            ; ===========================================================================
00005526                            
00005526                            Obj88_Main:				; XREF: Obj88_Index
00005526 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000552C 6700                       		beq.s	Obj88_Main2
0000552E 588F                       		addq.l	#4,sp
00005530 4E75                       		rts	
00005532                            ; ===========================================================================
00005532                            
00005532                            Obj88_Main2:				; XREF: Obj88_Main
00005532 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005538 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000553E 2248                       		movea.l	a0,a1
00005540 7600                       		moveq	#0,d3
00005542 7401                       		moveq	#1,d2
00005544 7205                       		moveq	#5,d1
00005546                            
00005546                            Obj88_MainLoop:
00005546 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000554A 5429 0024                  		addq.b	#2,$24(a1)
0000554E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005556 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000555C 137C 0004 0001             		move.b	#4,1(a1)
00005562 137C 0001 0018             		move.b	#1,$18(a1)
00005568 3368 0008 0038             		move.w	8(a0),$38(a1)
0000556E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005574 1342 001C                  		move.b	d2,$1C(a1)
00005578 1342 001A                  		move.b	d2,$1A(a1)
0000557C 5202                       		addq.b	#1,d2
0000557E 1343 0026                  		move.b	d3,$26(a1)
00005582 0603 002A                  		addi.b	#$2A,d3
00005586 43E9 0040                  		lea	$40(a1),a1
0000558A 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000558E                            
0000558E                            Obj88_Move:				; XREF: Obj88_Index
0000558E 3028 003E                  		move.w	$3E(a0),d0
00005592 D168 0026                  		add.w	d0,$26(a0)
00005596 1028 0026                  		move.b	$26(a0),d0
0000559A 4EB9 0000 29B8             		jsr	(CalcSine).l
000055A0 7800                       		moveq	#0,d4
000055A2 1828 003C                  		move.b	$3C(a0),d4
000055A6 C3C4                       		muls.w	d4,d1
000055A8 E081                       		asr.l	#8,d1
000055AA C1C4                       		muls.w	d4,d0
000055AC E080                       		asr.l	#8,d0
000055AE D268 0038                  		add.w	$38(a0),d1
000055B2 D068 003A                  		add.w	$3A(a0),d0
000055B6 3141 0008                  		move.w	d1,8(a0)
000055BA 3140 000C                  		move.w	d0,$C(a0)
000055BE 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055C4 6700                       		beq.s	loc_55FA
000055C6 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055CC                            
000055CC                            loc_55FA:
000055CC 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055D2 6700                       		beq.s	loc_5608
000055D4 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055DA                            
000055DA                            loc_5608:
000055DA 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000055E0 6700                       		beq.s	locret_5614
000055E2 5368 003A                  		subq.w	#1,$3A(a0)
000055E6                            
000055E6                            locret_5614:
000055E6 4E75                       		rts	
000055E8                            ; ===========================================================================
000055E8                            ; ---------------------------------------------------------------------------
000055E8                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000055E8                            ; ---------------------------------------------------------------------------
000055E8                            
000055E8                            Obj89:					; XREF: Obj_Index
000055E8 7000                       		moveq	#0,d0
000055EA 1028 0024                  		move.b	$24(a0),d0
000055EE 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000055F2 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000055F6                            ; ===========================================================================
000055F6 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000055F8 0000                       		dc.w Obj89_Move-Obj89_Index
000055FA 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000055FC                            ; ===========================================================================
000055FC                            
000055FC                            Obj89_Main:				; XREF: Obj89_Index
000055FC 5428 0024                  		addq.b	#2,$24(a0)
00005600 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005606 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000560C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005614 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000561A 117C 0000 0001             		move.b	#0,1(a0)
00005620 117C 0000 0018             		move.b	#0,$18(a0)
00005626                            
00005626                            Obj89_Move:				; XREF: Obj89_Index
00005626 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000562C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000562E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005634 6000 0000                  		bra.w	DisplaySprite
00005638                            ; ===========================================================================
00005638                            
00005638                            Obj89_Delay:				; XREF: Obj89_Move
00005638 5428 0024                  		addq.b	#2,$24(a0)
0000563C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005642                            
00005642                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005642 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005646 6A00                       		bpl.s	Obj89_Display
00005648 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000564E                            
0000564E                            Obj89_Display:
0000564E 6000 0000                  		bra.w	DisplaySprite
00005652                            ; ===========================================================================
00005652                            ; ---------------------------------------------------------------------------
00005652                            ; Sprite mappings - Sonic on the ending	sequence
00005652                            ; ---------------------------------------------------------------------------
00005652                            Map_obj87:
00005652                            	include "_maps\obj87.asm"
00005652                            ; ---------------------------------------------------------------------------
00005652                            ; Sprite mappings - Sonic on the ending	sequence
00005652                            ; ---------------------------------------------------------------------------
00005652 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005656 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000565A 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000565E 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005662 02                         byte_5690:	dc.b 2
00005663 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005668 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000566D 03                         byte_569B:	dc.b 3
0000566E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005673 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005678 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000567D 02                         byte_56AB:	dc.b 2
0000567E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005683 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005688 02                         byte_56B6:	dc.b 2
00005689 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000568E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005693 02                         byte_56C1:	dc.b 2
00005694 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005699 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000569E 03                         byte_56CC:	dc.b 3
0000569F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056A4 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056A9 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056AE 07                         byte_56DC:	dc.b 7
000056AF B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056B4 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056B9 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056BE CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056C3 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056C8 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056CD EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056D2 18                         byte_5700:	dc.b $18
000056D3 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000056D8 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000056DD 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000056E2 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000056E7 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000056EC 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000056F1 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000056F6 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000056FB B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005700 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005705 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000570A C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000570F C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005714 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005719 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000571E D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005723 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005728 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000572D E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005732 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005737 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000573C E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005741 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005746 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000574C 00                         		even
0000574C 00                         		even
0000574C                            
0000574C                            ; ---------------------------------------------------------------------------
0000574C                            ; Sprite mappings - chaos emeralds on the ending sequence
0000574C                            ; ---------------------------------------------------------------------------
0000574C                            Map_obj88:
0000574C                            	include "_maps\obj88.asm"
0000574C                            ; ---------------------------------------------------------------------------
0000574C                            ; Sprite mappings - chaos emeralds on the ending sequence
0000574C                            ; ---------------------------------------------------------------------------
0000574C 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005750 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005754 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005758 0000                       		dc.w byte_57AC-Map_obj88
0000575A 01                         byte_5788:	dc.b 1
0000575B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005760 01                         byte_578E:	dc.b 1
00005761 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005766 01                         byte_5794:	dc.b 1
00005767 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000576C 01                         byte_579A:	dc.b 1
0000576D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005772 01                         byte_57A0:	dc.b 1
00005773 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005778 01                         byte_57A6:	dc.b 1
00005779 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000577E 01                         byte_57AC:	dc.b 1
0000577F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005784                            		even
00005784                            		even
00005784                            
00005784                            ; ---------------------------------------------------------------------------
00005784                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005784                            ; ---------------------------------------------------------------------------
00005784                            Map_obj89:
00005784                            	include "_maps\obj89.asm"
00005784                            ; ---------------------------------------------------------------------------
00005784                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005784                            ; ---------------------------------------------------------------------------
00005784 0000                       		dc.w byte_57B4-Map_obj89
00005786 03                         byte_57B4:	dc.b 3
00005787 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000578C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005791 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005796                            		even
00005796                            		even
00005796                            
00005796                            ; ===========================================================================
00005796                            ; ---------------------------------------------------------------------------
00005796                            ; Credits ending sequence
00005796                            ; ---------------------------------------------------------------------------
00005796                            
00005796                            Credits:				; XREF: GameModeArray
00005796 6100 BE24                  		bsr.w	ClearPLC
0000579A 6100 C694                  		bsr.w	Pal_FadeFrom
0000579E 4DF9 00C0 0004             		lea	($C00004).l,a6
000057A4 3CBC 8004                  		move.w	#$8004,(a6)
000057A8 3CBC 8230                  		move.w	#$8230,(a6)
000057AC 3CBC 8407                  		move.w	#$8407,(a6)
000057B0 3CBC 9001                  		move.w	#$9001,(a6)
000057B4 3CBC 9200                  		move.w	#$9200,(a6)
000057B8 3CBC 8B03                  		move.w	#$8B03,(a6)
000057BC 3CBC 8720                  		move.w	#$8720,(a6)
000057C0 4238 F64E                  		clr.b	($FFFFF64E).w
000057C4 6100 BADC                  		bsr.w	ClearScreen
000057C8 43F8 D000                  		lea	($FFFFD000).w,a1
000057CC 7000                       		moveq	#0,d0
000057CE 323C 07FF                  		move.w	#$7FF,d1
000057D2                            
000057D2                            Cred_ClrObjRam:
000057D2 22C0                       		move.l	d0,(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000057D8                            
000057D8 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000057E2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000057E8 6100 BC34                  		bsr.w	NemDec
000057EC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000057F0 7000                       		moveq	#0,d0
000057F2 323C 001F                  		move.w	#$1F,d1
000057F6                            
000057F6                            Cred_ClrPallet:
000057F6 22C0                       		move.l	d0,(a1)+
000057F8 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000057FC                            
000057FC 7003                       		moveq	#3,d0
000057FE 6100 C8DA                  		bsr.w	PalLoad1	; load Sonic's pallet
00005802 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005808 4EB9 0000 0000             		jsr	ObjectsLoad
0000580E 4EB9 0000 0000             		jsr	BuildSprites
00005814 6100 0000                  		bsr.w	EndingDemoLoad
00005818 7000                       		moveq	#0,d0
0000581A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000581E E948                       		lsl.w	#4,d0
00005820 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005826 45F2 0000                  		lea	(a2,d0.w),a2
0000582A 7000                       		moveq	#0,d0
0000582C 1012                       		move.b	(a2),d0
0000582E 6700                       		beq.s	loc_5862
00005830 6100 BD2C                  		bsr.w	LoadPLC		; load level patterns
00005834                            
00005834                            loc_5862:
00005834 7001                       		moveq	#1,d0
00005836 6100 BD26                  		bsr.w	LoadPLC		; load standard	level patterns
0000583A 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005840 6100 C548                  		bsr.w	Pal_FadeTo
00005844                            
00005844                            Cred_WaitLoop:
00005844 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000584A 6100 D13A                  		bsr.w	DelayProgram
0000584E 6100 BD7A                  		bsr.w	RunPLC_RAM
00005852 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005856 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005858 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000585C 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000585E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005864 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005868 4E75                       		rts	
0000586A                            
0000586A                            ; ---------------------------------------------------------------------------
0000586A                            ; Ending sequence demo loading subroutine
0000586A                            ; ---------------------------------------------------------------------------
0000586A                            
0000586A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000586A                            
0000586A                            
0000586A                            EndingDemoLoad:				; XREF: Credits
0000586A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000586E 0240 000F                  		andi.w	#$F,d0
00005872 D040                       		add.w	d0,d0
00005874 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005878 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000587C 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005880 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005886 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005888 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000588E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005894 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000589A 7000                       		moveq	#0,d0
0000589C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058A0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058A4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058A8 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058AC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058B2 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058B4 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058BA 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058BE 303C 0008                  		move.w	#8,d0
000058C2                            
000058C2                            EndDemo_LampLoad:
000058C2 24D9                       		move.l	(a1)+,(a2)+
000058C4 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058C8                            
000058C8                            EndDemo_Exit:
000058C8 4E75                       		rts	
000058CA                            ; End of function EndingDemoLoad
000058CA                            
000058CA                            ; ===========================================================================
000058CA                            ; ---------------------------------------------------------------------------
000058CA                            ; Levels used in the end sequence demos
000058CA                            ; ---------------------------------------------------------------------------
000058CA                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
000058DA                            
000058DA                            ; ---------------------------------------------------------------------------
000058DA                            ; Lamppost variables in the end sequence demo (Star Light Zone)
000058DA                            ; ---------------------------------------------------------------------------
000058DA                            EndDemo_LampVar:
000058DA 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
000058DC 0A00 062C 000D             		dc.w $A00, $62C, $D
000058E2 0000 0000                  		dc.l 0
000058E6 0000                       		dc.b 0,	0
000058E8 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
000058FC 0101                       		dc.b 1,	1
000058FE                            ; ===========================================================================
000058FE                            ; ---------------------------------------------------------------------------
000058FE                            ; "TRY AGAIN" and "END"	screens
000058FE                            ; ---------------------------------------------------------------------------
000058FE                            
000058FE                            TryAgainEnd:				; XREF: Credits
000058FE 6100 BCBC                  		bsr.w	ClearPLC
00005902 6100 C52C                  		bsr.w	Pal_FadeFrom
00005906 4DF9 00C0 0004             		lea	($C00004).l,a6
0000590C 3CBC 8004                  		move.w	#$8004,(a6)
00005910 3CBC 8230                  		move.w	#$8230,(a6)
00005914 3CBC 8407                  		move.w	#$8407,(a6)
00005918 3CBC 9001                  		move.w	#$9001,(a6)
0000591C 3CBC 9200                  		move.w	#$9200,(a6)
00005920 3CBC 8B03                  		move.w	#$8B03,(a6)
00005924 3CBC 8720                  		move.w	#$8720,(a6)
00005928 4238 F64E                  		clr.b	($FFFFF64E).w
0000592C 6100 B974                  		bsr.w	ClearScreen
00005930 43F8 D000                  		lea	($FFFFD000).w,a1
00005934 7000                       		moveq	#0,d0
00005936 323C 07FF                  		move.w	#$7FF,d1
0000593A                            
0000593A                            TryAg_ClrObjRam:
0000593A 22C0                       		move.l	d0,(a1)+
0000593C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005940                            
00005940 701D                       		moveq	#$1D,d0
00005942 6100 BD86                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005946 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000594A 7000                       		moveq	#0,d0
0000594C 323C 001F                  		move.w	#$1F,d1
00005950                            
00005950                            TryAg_ClrPallet:
00005950 22C0                       		move.l	d0,(a1)+
00005952 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005956                            
00005956 7013                       		moveq	#$13,d0
00005958 6100 C780                  		bsr.w	PalLoad1	; load ending pallet
0000595C 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005960 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005966 4EB9 0000 0000             		jsr	ObjectsLoad
0000596C 4EB9 0000 0000             		jsr	BuildSprites
00005972 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005978 6100 C410                  		bsr.w	Pal_FadeTo
0000597C                            
0000597C                            ; ---------------------------------------------------------------------------
0000597C                            ; "TRY AGAIN" and "END"	screen main loop
0000597C                            ; ---------------------------------------------------------------------------
0000597C                            TryAg_MainLoop:
0000597C 6100 BA08                  		bsr.w	PauseGame
00005980 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005986 6100 CFFE                  		bsr.w	DelayProgram
0000598A 4EB9 0000 0000             		jsr	ObjectsLoad
00005990 4EB9 0000 0000             		jsr	BuildSprites
00005996 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000599C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000599E 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059A2 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059A4 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059AA 67D0                       		beq.s	TryAg_MainLoop
000059AC                            
000059AC                            TryAg_Exit:
000059AC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059B2 4E75                       		rts	
000059B4                            
000059B4                            ; ===========================================================================
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            
000059B4                            Obj8B:					; XREF: Obj_Index
000059B4 7000                       		moveq	#0,d0
000059B6 1028 0024                  		move.b	$24(a0),d0
000059BA 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059BE 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059C2 4EF9 0000 0000             		jmp	DisplaySprite
000059C8                            ; ===========================================================================
000059C8 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059CA 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059CC 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059CE 0000                       		dc.w loc_5A8E-Obj8B_Index
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            Obj8B_Main:				; XREF: Obj8B_Index
000059D0 5428 0024                  		addq.b	#2,$24(a0)
000059D4 317C 0120 0008             		move.w	#$120,8(a0)
000059DA 317C 00F4 000A             		move.w	#$F4,$A(a0)
000059E0 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000059E8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000059EE 117C 0000 0001             		move.b	#0,1(a0)
000059F4 117C 0002 0018             		move.b	#2,$18(a0)
000059FA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A00 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A06 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A08 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A0E 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A14 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A1A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A20                            
00005A20                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A20 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A26 4EF9 0000 0000             		jmp	AnimateSprite
00005A2C                            ; ===========================================================================
00005A2C                            
00005A2C                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A2C 5428 0024                  		addq.b	#2,$24(a0)
00005A30 7002                       		moveq	#2,d0
00005A32 0828 0000 001C             		btst	#0,$1C(a0)
00005A38 6700                       		beq.s	loc_5A6A
00005A3A 4440                       		neg.w	d0
00005A3C                            
00005A3C                            loc_5A6A:
00005A3C 43F8 D800                  		lea	($FFFFD800).w,a1
00005A40 7205                       		moveq	#5,d1
00005A42                            
00005A42                            loc_5A70:
00005A42 1340 003E                  		move.b	d0,$3E(a1)
00005A46 3400                       		move.w	d0,d2
00005A48 E742                       		asl.w	#3,d2
00005A4A D529 0026                  		add.b	d2,$26(a1)
00005A4E 43E9 0040                  		lea	$40(a1),a1
00005A52 51C9 FFEE                  		dbf	d1,loc_5A70
00005A56 5228 001A                  		addq.b	#1,$1A(a0)
00005A5A 317C 0070 0030             		move.w	#112,$30(a0)
00005A60                            
00005A60                            loc_5A8E:				; XREF: Obj8B_Index
00005A60 5368 0030                  		subq.w	#1,$30(a0)
00005A64 6A00                       		bpl.s	locret_5AA0
00005A66 0868 0000 001C             		bchg	#0,$1C(a0)
00005A6C 117C 0002 0024             		move.b	#2,$24(a0)
00005A72                            
00005A72                            locret_5AA0:
00005A72 4E75                       		rts	
00005A74                            ; ===========================================================================
00005A74                            Ani_obj8B:
00005A74                            	include "_anim\obj8B.asm"
00005A74                            ; ---------------------------------------------------------------------------
00005A74                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A74                            ; ---------------------------------------------------------------------------
00005A74 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A76 0000                       		dc.w byte_5AAC-Ani_obj8B
00005A78 0000                       		dc.w byte_5AB0-Ani_obj8B
00005A7A 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005A7E 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005A82 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005A94                            		even
00005A94                            		even
00005A94                            
00005A94                            ; ===========================================================================
00005A94                            ; ---------------------------------------------------------------------------
00005A94                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005A94                            ; ---------------------------------------------------------------------------
00005A94                            
00005A94                            Obj8C:					; XREF: Obj_Index
00005A94 7000                       		moveq	#0,d0
00005A96 1028 0024                  		move.b	$24(a0),d0
00005A9A 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005A9E 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005AA2 4EF9 0000 0000             		jmp	DisplaySprite
00005AA8                            ; ===========================================================================
00005AA8 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AAA 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AAC                            ; ===========================================================================
00005AAC                            
00005AAC                            Obj8C_Main:				; XREF: Obj8C_Index
00005AAC 2248                       		movea.l	a0,a1
00005AAE 7400                       		moveq	#0,d2
00005AB0 7600                       		moveq	#0,d3
00005AB2 7205                       		moveq	#5,d1
00005AB4 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005AB8                            
00005AB8                            Obj8C_MakeEms:				; XREF: loc_5B42
00005AB8 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005ABC 5429 0024                  		addq.b	#2,$24(a1)
00005AC0 237C 0000 574C 0004        		move.l	#Map_obj88,4(a1)
00005AC8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005ACE 137C 0000 0001             		move.b	#0,1(a1)
00005AD4 137C 0001 0018             		move.b	#1,$18(a1)
00005ADA 337C 0104 0008             		move.w	#$104,8(a1)
00005AE0 337C 0120 0038             		move.w	#$120,$38(a1)
00005AE6 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005AEC 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005AF2 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005AF8 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005AFC                            
00005AFC                            Obj8C_ChkEms:
00005AFC 7000                       		moveq	#0,d0
00005AFE 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B02 5340                       		subq.w	#1,d0
00005B04 6500                       		bcs.s	loc_5B42
00005B06                            
00005B06                            Obj8C_ChkEmLoop:
00005B06 B433 0000                  		cmp.b	(a3,d0.w),d2
00005B0A 6600                       		bne.s	loc_5B3E
00005B0C 5202                       		addq.b	#1,d2
00005B0E 60EC                       		bra.s	Obj8C_ChkEms
00005B10                            ; ===========================================================================
00005B10                            
00005B10                            loc_5B3E:
00005B10 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B14                            
00005B14                            loc_5B42:
00005B14 1342 001A                  		move.b	d2,$1A(a1)
00005B18 5229 001A                  		addq.b	#1,$1A(a1)
00005B1C 5202                       		addq.b	#1,d2
00005B1E 137C 0080 0026             		move.b	#$80,$26(a1)
00005B24 1343 001E                  		move.b	d3,$1E(a1)
00005B28 1343 001F                  		move.b	d3,$1F(a1)
00005B2C 0643 000A                  		addi.w	#$A,d3
00005B30 43E9 0040                  		lea	$40(a1),a1
00005B34 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B38                            
00005B38                            Obj8C_Move:				; XREF: Obj8C_Index
00005B38 4A68 003E                  		tst.w	$3E(a0)
00005B3C 6700                       		beq.s	locret_5BBA
00005B3E 4A28 001E                  		tst.b	$1E(a0)
00005B42 6700                       		beq.s	loc_5B78
00005B44 5328 001E                  		subq.b	#1,$1E(a0)
00005B48 6600                       		bne.s	loc_5B80
00005B4A                            
00005B4A                            loc_5B78:
00005B4A 3028 003E                  		move.w	$3E(a0),d0
00005B4E D168 0026                  		add.w	d0,$26(a0)
00005B52                            
00005B52                            loc_5B80:
00005B52 1028 0026                  		move.b	$26(a0),d0
00005B56 6700                       		beq.s	loc_5B8C
00005B58 0C00 0080                  		cmpi.b	#$80,d0
00005B5C 6600                       		bne.s	loc_5B96
00005B5E                            
00005B5E                            loc_5B8C:
00005B5E 4268 003E                  		clr.w	$3E(a0)
00005B62 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B68                            
00005B68                            loc_5B96:
00005B68 4EB9 0000 29B8             		jsr	(CalcSine).l
00005B6E 7800                       		moveq	#0,d4
00005B70 1828 003C                  		move.b	$3C(a0),d4
00005B74 C3C4                       		muls.w	d4,d1
00005B76 E081                       		asr.l	#8,d1
00005B78 C1C4                       		muls.w	d4,d0
00005B7A E080                       		asr.l	#8,d0
00005B7C D268 0038                  		add.w	$38(a0),d1
00005B80 D068 003A                  		add.w	$3A(a0),d0
00005B84 3141 0008                  		move.w	d1,8(a0)
00005B88 3140 000A                  		move.w	d0,$A(a0)
00005B8C                            
00005B8C                            locret_5BBA:
00005B8C 4E75                       		rts	
00005B8E                            ; ===========================================================================
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E                            Map_obj8B:
00005B8E                            	include "_maps\obj8B.asm"
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005B92 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005B96 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005B9A 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005B9E 08                         byte_5BCC:	dc.b 8
00005B9F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BA4 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BA9 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BAE F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BB3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BB8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BBD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BC2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BC7 08                         byte_5BF5:	dc.b 8
00005BC8 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BCD F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BD2 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BD7 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005BDC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005BE1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005BE6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BEB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BF0 08                         byte_5C1E:	dc.b 8
00005BF1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005BF6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005BFB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C00 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C05 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C0A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C0F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C14 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C19 08                         byte_5C47:	dc.b 8
00005C1A E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C1F F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C24 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C29 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C2E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C33 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C38 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C3D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C42 0C                         byte_5C70:	dc.b $C
00005C43 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C48 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C4D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C52 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C57 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C5C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C61 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C66 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C6B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C70 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C75 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005C7A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005C7F 0A                         byte_5CAD:	dc.b $A
00005C80 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005C85 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005C8A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005C8F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005C94 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005C99 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005C9E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CA3 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CA8 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CAD 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CB2 0A                         byte_5CE0:	dc.b $A
00005CB3 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CB8 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CBD EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CC2 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CC7 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CCC EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CD1 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CD6 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CDB 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005CE0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005CE5 0C                         byte_5D13:	dc.b $C
00005CE6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005CEB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005CF0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005CF5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005CFA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005CFF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D04 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D09 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D0E 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D13 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D18 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D1D 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D22                            		even
00005D22                            		even
00005D22                            
00005D22                            ; ---------------------------------------------------------------------------
00005D22                            ; Ending sequence demos
00005D22                            ; ---------------------------------------------------------------------------
00005D22                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D50                            		even
00005D50                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005D90                            		even
00005D90                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DC0                            		even
00005DC0                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005DF0                            		even
00005DF0                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E10                            		even
00005E10                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E30                            		even
00005E30                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E60                            		even
00005E60                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005E90                            		even
00005E90                            
00005E90                            ; ---------------------------------------------------------------------------
00005E90                            ; Subroutine to	load level boundaries and start	locations
00005E90                            ; ---------------------------------------------------------------------------
00005E90                            
00005E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E90                            
00005E90                            
00005E90                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005E90 7000                       		moveq	#0,d0
00005E92 11C0 F740                  		move.b	d0,($FFFFF740).w
00005E96 11C0 F741                  		move.b	d0,($FFFFF741).w
00005E9A 11C0 F746                  		move.b	d0,($FFFFF746).w
00005E9E 11C0 F748                  		move.b	d0,($FFFFF748).w
00005EA2 11C0 F742                  		move.b	d0,($FFFFF742).w
00005EA6 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005EAA ED08                       		lsl.b	#6,d0
00005EAC E848                       		lsr.w	#4,d0
00005EAE 3200                       		move.w	d0,d1
00005EB0 D040                       		add.w	d0,d0
00005EB2 D041                       		add.w	d1,d0
00005EB4 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EB8 3018                       		move.w	(a0)+,d0
00005EBA 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EBE 2018                       		move.l	(a0)+,d0
00005EC0 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EC4 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EC8 2018                       		move.l	(a0)+,d0
00005ECA 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005ECE 21C0 F724                  		move.l	d0,($FFFFF724).w
00005ED2 3038 F728                  		move.w	($FFFFF728).w,d0
00005ED6 0640 0240                  		addi.w	#$240,d0
00005EDA 31C0 F732                  		move.w	d0,($FFFFF732).w
00005EDE 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005EE4 3018                       		move.w	(a0)+,d0
00005EE6 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005EEA 6000 0000                  		bra.w	LevSz_ChkLamp
00005EEE                            ; ===========================================================================
00005EEE                            ; ---------------------------------------------------------------------------
00005EEE                            ; Level size array and ending start location array
00005EEE                            ; ---------------------------------------------------------------------------
00005EEE                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000603E                            		even
0000603E                            
0000603E                            EndingStLocArray:
0000603E                            		incbin	misc\sloc_end.bin
0000605E                            		even
0000605E                            
0000605E                            ; ===========================================================================
0000605E                            
0000605E                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000605E 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006062 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006064 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000606A 3238 D008                  		move.w	($FFFFD008).w,d1
0000606E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006072 6000                       		bra.s	loc_60D0
00006074                            ; ===========================================================================
00006074                            
00006074                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006074 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006078 ED08                       		lsl.b	#6,d0
0000607A E848                       		lsr.w	#4,d0
0000607C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006080 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006084 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006086 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000608A 5340                       		subq.w	#1,d0
0000608C E548                       		lsl.w	#2,d0
0000608E 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006092                            
00006092                            LevSz_SonicPos:
00006092 7200                       		moveq	#0,d1
00006094 3219                       		move.w	(a1)+,d1
00006096 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000609A 7000                       		moveq	#0,d0
0000609C 3011                       		move.w	(a1),d0
0000609E 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060A2                            
000060A2                            loc_60D0:				; XREF: LevSz_ChkLamp
000060A2 0441 00A0                  		subi.w	#$A0,d1
000060A6 6400                       		bcc.s	loc_60D8
000060A8 7200                       		moveq	#0,d1
000060AA                            
000060AA                            loc_60D8:
000060AA 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060AE B242                       		cmp.w	d2,d1
000060B0 6500                       		bcs.s	loc_60E2
000060B2 3202                       		move.w	d2,d1
000060B4                            
000060B4                            loc_60E2:
000060B4 31C1 F700                  		move.w	d1,($FFFFF700).w
000060B8 0440 0060                  		subi.w	#$60,d0
000060BC 6400                       		bcc.s	loc_60EE
000060BE 7000                       		moveq	#0,d0
000060C0                            
000060C0                            loc_60EE:
000060C0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060C4 6D00                       		blt.s	loc_60F8
000060C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060CA                            
000060CA                            loc_60F8:
000060CA 31C0 F704                  		move.w	d0,($FFFFF704).w
000060CE 6100 0000                  		bsr.w	BgScrollSpeed
000060D2 7000                       		moveq	#0,d0
000060D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000060D8 E508                       		lsl.b	#2,d0
000060DA 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000060E0 6000 0000                  		bra.w	LevSz_Unk
000060E4                            ; ===========================================================================
000060E4                            ; ---------------------------------------------------------------------------
000060E4                            ; Sonic	start location array
000060E4                            ; ---------------------------------------------------------------------------
000060E4                            StartLocArray:	incbin	misc\sloc_lev.bin
00006154                            		even
00006154                            
00006154                            ; ---------------------------------------------------------------------------
00006154                            ; Which	256x256	tiles contain loops or roll-tunnels
00006154                            ; ---------------------------------------------------------------------------
00006154                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006154                            ; loop,	loop, tunnel, tunnel
00006154                            ; ---------------------------------------------------------------------------
00006154                            LoopTileNums:	incbin	misc\loopnums.bin
00006170                            		even
00006170                            
00006170                            ; ===========================================================================
00006170                            
00006170                            LevSz_Unk:				; XREF: LevelSizeLoad
00006170 7000                       		moveq	#0,d0
00006172 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006176 E748                       		lsl.w	#3,d0
00006178 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000617C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006180 24D9                       		move.l	(a1)+,(a2)+
00006182 24D9                       		move.l	(a1)+,(a2)+
00006184 4E75                       		rts	
00006186                            ; End of function LevelSizeLoad
00006186                            
00006186                            ; ===========================================================================
00006186 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000618E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006196 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000619E 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061A6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061AE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061B6 0070 0100 0100 0100        		dc.l $700100, $1000100
000061BE                            
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            ; Subroutine to	set scroll speed of some backgrounds
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            
000061BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061BE                            
000061BE                            
000061BE                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061BE 4A38 FE30                  		tst.b	($FFFFFE30).w
000061C2 6600                       		bne.s	loc_6206
000061C4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061C8 31C0 F714                  		move.w	d0,($FFFFF714).w
000061CC 31C1 F708                  		move.w	d1,($FFFFF708).w
000061D0 31C1 F710                  		move.w	d1,($FFFFF710).w
000061D4 31C1 F718                  		move.w	d1,($FFFFF718).w
000061D8                            
000061D8                            loc_6206:
000061D8 7400                       		moveq	#0,d2
000061DA 1438 FE10                  		move.b	($FFFFFE10).w,d2
000061DE D442                       		add.w	d2,d2
000061E0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000061E4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000061E8                            ; End of function BgScrollSpeed
000061E8                            
000061E8                            ; ===========================================================================
000061E8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000061EC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000061F0 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000061F4 0000                       		dc.w BgScroll_End-BgScroll_Index
000061F6                            ; ===========================================================================
000061F6                            
000061F6                            BgScroll_GHZ:				; XREF: BgScroll_Index
000061F6 6000 0000                  		bra.w	Deform_GHZ
000061FA                            ; ===========================================================================
000061FA                            
000061FA                            BgScroll_LZ:				; XREF: BgScroll_Index
000061FA E280                       		asr.l	#1,d0
000061FC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006200 4E75                       		rts	
00006202                            ; ===========================================================================
00006202                            
00006202                            BgScroll_MZ:				; XREF: BgScroll_Index
00006202 4E75                       		rts	
00006204                            ; ===========================================================================
00006204                            
00006204                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006204 E280                       		asr.l	#1,d0
00006206 0640 00C0                  		addi.w	#$C0,d0
0000620A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000620E 4E75                       		rts	
00006210                            ; ===========================================================================
00006210                            
00006210                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006210 E980                       		asl.l	#4,d0
00006212 2400                       		move.l	d0,d2
00006214 E380                       		asl.l	#1,d0
00006216 D082                       		add.l	d2,d0
00006218 E080                       		asr.l	#8,d0
0000621A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000621E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006222 4E75                       		rts	
00006224                            ; ===========================================================================
00006224                            
00006224                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006224 E980                       		asl.l	#4,d0
00006226 E380                       		asl.l	#1,d0
00006228 E080                       		asr.l	#8,d0
0000622A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000622E 4E75                       		rts	
00006230                            ; ===========================================================================
00006230                            
00006230                            BgScroll_End:				; XREF: BgScroll_Index
00006230 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006236 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000623C 4E75                       		rts	
0000623E                            ; ===========================================================================
0000623E 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006244 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000624A 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006250 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006256 4E75                       		rts
00006258                            
00006258                            ; ---------------------------------------------------------------------------
00006258                            ; Background layer deformation subroutines
00006258                            ; ---------------------------------------------------------------------------
00006258                            
00006258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006258                            
00006258                            
00006258                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006258 4A38 F744                  		tst.b	($FFFFF744).w
0000625C 6700                       		beq.s	loc_628E
0000625E 4E75                       		rts	
00006260                            ; ===========================================================================
00006260                            
00006260                            loc_628E:
00006260 4278 F754                  		clr.w	($FFFFF754).w
00006264 4278 F756                  		clr.w	($FFFFF756).w
00006268 4278 F758                  		clr.w	($FFFFF758).w
0000626C 4278 F75A                  		clr.w	($FFFFF75A).w
00006270 6100 0000                  		bsr.w	ScrollHoriz
00006274 6100 0000                  		bsr.w	ScrollVertical
00006278 6100 0000                  		bsr.w	DynScrResizeLoad
0000627C 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006282 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006288 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000628E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006294 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000629A 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062A0 7000                       		moveq	#0,d0
000062A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062A6 D040                       		add.w	d0,d0
000062A8 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062AC 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062B0                            ; End of function DeformBgLayer
000062B0                            
000062B0                            ; ===========================================================================
000062B0                            ; ---------------------------------------------------------------------------
000062B0                            ; Offset index for background layer deformation	code
000062B0                            ; ---------------------------------------------------------------------------
000062B0 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062B4 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062B8 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062BC 0000                       		dc.w Deform_GHZ-Deform_Index
000062BE                            ; ---------------------------------------------------------------------------
000062BE                            ; Green	Hill Zone background layer deformation code
000062BE                            ; ---------------------------------------------------------------------------
000062BE                            
000062BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062BE                            
000062BE                            
000062BE                            Deform_GHZ:				; XREF: Deform_Index
000062BE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062C2 48C4                       		ext.l	d4
000062C4 EB84                       		asl.l	#5,d4
000062C6 2204                       		move.l	d4,d1
000062C8 E384                       		asl.l	#1,d4
000062CA D881                       		add.l	d1,d4
000062CC 7A00                       		moveq	#0,d5
000062CE 6100 0000                  		bsr.w	ScrollBlock1
000062D2 6100 0000                  		bsr.w	ScrollBlock4
000062D6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000062DA 3038 F704                  		move.w	($FFFFF704).w,d0
000062DE 0240 07FF                  		andi.w	#$7FF,d0
000062E2 EA48                       		lsr.w	#5,d0
000062E4 4440                       		neg.w	d0
000062E6 0640 0026                  		addi.w	#$26,d0
000062EA 31C0 F714                  		move.w	d0,($FFFFF714).w
000062EE 3800                       		move.w	d0,d4
000062F0 6100 0000                  		bsr.w	ScrollBlock3
000062F4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062FA 323C 006F                  		move.w	#$6F,d1
000062FE 9244                       		sub.w	d4,d1
00006300 3038 F700                  		move.w	($FFFFF700).w,d0
00006304 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000630A 6600                       		bne.s	loc_633C
0000630C 7000                       		moveq	#0,d0
0000630E                            
0000630E                            loc_633C:
0000630E 4440                       		neg.w	d0
00006310 4840                       		swap	d0
00006312 3038 F708                  		move.w	($FFFFF708).w,d0
00006316 4440                       		neg.w	d0
00006318                            
00006318                            loc_6346:
00006318 22C0                       		move.l	d0,(a1)+
0000631A 51C9 FFFC                  		dbf	d1,loc_6346
0000631E 323C 0027                  		move.w	#$27,d1
00006322 3038 F710                  		move.w	($FFFFF710).w,d0
00006326 4440                       		neg.w	d0
00006328                            
00006328                            loc_6356:
00006328 22C0                       		move.l	d0,(a1)+
0000632A 51C9 FFFC                  		dbf	d1,loc_6356
0000632E 3038 F710                  		move.w	($FFFFF710).w,d0
00006332 0640 0000                  		addi.w	#0,d0
00006336 3438 F700                  		move.w	($FFFFF700).w,d2
0000633A 0642 FE00                  		addi.w	#-$200,d2
0000633E 9440                       		sub.w	d0,d2
00006340 48C2                       		ext.l	d2
00006342 E182                       		asl.l	#8,d2
00006344 85FC 0068                  		divs.w	#$68,d2
00006348 48C2                       		ext.l	d2
0000634A E182                       		asl.l	#8,d2
0000634C 7600                       		moveq	#0,d3
0000634E 3600                       		move.w	d0,d3
00006350 323C 0047                  		move.w	#$47,d1
00006354 D244                       		add.w	d4,d1
00006356                            
00006356                            loc_6384:
00006356 3003                       		move.w	d3,d0
00006358 4440                       		neg.w	d0
0000635A 22C0                       		move.l	d0,(a1)+
0000635C 4843                       		swap	d3
0000635E D682                       		add.l	d2,d3
00006360 4843                       		swap	d3
00006362 51C9 FFF2                  		dbf	d1,loc_6384
00006366 4E75                       		rts	
00006368                            ; End of function Deform_GHZ
00006368                            
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Labyrinth Zone background layer deformation code
00006368                            ; ---------------------------------------------------------------------------
00006368                            
00006368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006368                            
00006368                            
00006368                            Deform_LZ:				; XREF: Deform_Index
00006368 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000636C 48C4                       		ext.l	d4
0000636E EF84                       		asl.l	#7,d4
00006370 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006374 48C5                       		ext.l	d5
00006376 EF85                       		asl.l	#7,d5
00006378 6100 0000                  		bsr.w	ScrollBlock1
0000637C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006382 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006386 323C 00DF                  		move.w	#$DF,d1
0000638A 3038 F700                  		move.w	($FFFFF700).w,d0
0000638E 4440                       		neg.w	d0
00006390 4840                       		swap	d0
00006392 3038 F708                  		move.w	($FFFFF708).w,d0
00006396 4440                       		neg.w	d0
00006398                            
00006398                            loc_63C6:
00006398 22C0                       		move.l	d0,(a1)+
0000639A 51C9 FFFC                  		dbf	d1,loc_63C6
0000639E 3038 F646                  		move.w	($FFFFF646).w,d0
000063A2 9078 F704                  		sub.w	($FFFFF704).w,d0
000063A6 4E75                       		rts	
000063A8                            ; End of function Deform_LZ
000063A8                            
000063A8                            ; ---------------------------------------------------------------------------
000063A8                            ; Marble Zone background layer deformation code
000063A8                            ; ---------------------------------------------------------------------------
000063A8                            
000063A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063A8                            
000063A8                            
000063A8                            Deform_MZ:				; XREF: Deform_Index
000063A8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063AC 48C4                       		ext.l	d4
000063AE ED84                       		asl.l	#6,d4
000063B0 2204                       		move.l	d4,d1
000063B2 E384                       		asl.l	#1,d4
000063B4 D881                       		add.l	d1,d4
000063B6 7A00                       		moveq	#0,d5
000063B8 6100 0000                  		bsr.w	ScrollBlock1
000063BC 303C 0200                  		move.w	#$200,d0
000063C0 3238 F704                  		move.w	($FFFFF704).w,d1
000063C4 0441 01C8                  		subi.w	#$1C8,d1
000063C8 6500                       		bcs.s	loc_6402
000063CA 3401                       		move.w	d1,d2
000063CC D241                       		add.w	d1,d1
000063CE D242                       		add.w	d2,d1
000063D0 E441                       		asr.w	#2,d1
000063D2 D041                       		add.w	d1,d0
000063D4                            
000063D4                            loc_6402:
000063D4 31C0 F714                  		move.w	d0,($FFFFF714).w
000063D8 6100 0000                  		bsr.w	ScrollBlock3
000063DC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063E2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063E6 323C 00DF                  		move.w	#$DF,d1
000063EA 3038 F700                  		move.w	($FFFFF700).w,d0
000063EE 4440                       		neg.w	d0
000063F0 4840                       		swap	d0
000063F2 3038 F708                  		move.w	($FFFFF708).w,d0
000063F6 4440                       		neg.w	d0
000063F8                            
000063F8                            loc_6426:
000063F8 22C0                       		move.l	d0,(a1)+
000063FA 51C9 FFFC                  		dbf	d1,loc_6426
000063FE 4E75                       		rts	
00006400                            ; End of function Deform_MZ
00006400                            
00006400                            ; ---------------------------------------------------------------------------
00006400                            ; Star Light Zone background layer deformation code
00006400                            ; ---------------------------------------------------------------------------
00006400                            
00006400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006400                            
00006400                            
00006400                            Deform_SLZ:				; XREF: Deform_Index
00006400 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006404 48C4                       		ext.l	d4
00006406 EF84                       		asl.l	#7,d4
00006408 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000640C 48C5                       		ext.l	d5
0000640E EF85                       		asl.l	#7,d5
00006410 6100 0000                  		bsr.w	ScrollBlock2
00006414 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000641A 6100 0000                  		bsr.w	Deform_SLZ_2
0000641E 45F8 A800                  		lea	($FFFFA800).w,a2
00006422 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006426 3400                       		move.w	d0,d2
00006428 0440 00C0                  		subi.w	#$C0,d0
0000642C 0240 03F0                  		andi.w	#$3F0,d0
00006430 E648                       		lsr.w	#3,d0
00006432 45F2 0000                  		lea	(a2,d0.w),a2
00006436 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000643A 323C 000E                  		move.w	#$E,d1
0000643E 3038 F700                  		move.w	($FFFFF700).w,d0
00006442 4440                       		neg.w	d0
00006444 4840                       		swap	d0
00006446 0242 000F                  		andi.w	#$F,d2
0000644A D442                       		add.w	d2,d2
0000644C 301A                       		move.w	(a2)+,d0
0000644E 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006452                            ; ===========================================================================
00006452                            
00006452                            loc_6480:				; XREF: Deform_SLZ
00006452 301A                       		move.w	(a2)+,d0
00006454                            
00006454                            loc_6482:
00006454 22C0                       		move.l	d0,(a1)+
00006456 22C0                       		move.l	d0,(a1)+
00006458 22C0                       		move.l	d0,(a1)+
0000645A 22C0                       		move.l	d0,(a1)+
0000645C 22C0                       		move.l	d0,(a1)+
0000645E 22C0                       		move.l	d0,(a1)+
00006460 22C0                       		move.l	d0,(a1)+
00006462 22C0                       		move.l	d0,(a1)+
00006464 22C0                       		move.l	d0,(a1)+
00006466 22C0                       		move.l	d0,(a1)+
00006468 22C0                       		move.l	d0,(a1)+
0000646A 22C0                       		move.l	d0,(a1)+
0000646C 22C0                       		move.l	d0,(a1)+
0000646E 22C0                       		move.l	d0,(a1)+
00006470 22C0                       		move.l	d0,(a1)+
00006472 22C0                       		move.l	d0,(a1)+
00006474 51C9 FFDC                  		dbf	d1,loc_6480
00006478 4E75                       		rts	
0000647A                            ; End of function Deform_SLZ
0000647A                            
0000647A                            
0000647A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000647A                            
0000647A                            
0000647A                            Deform_SLZ_2:				; XREF: Deform_SLZ
0000647A 43F8 A800                  		lea	($FFFFA800).w,a1
0000647E 3438 F700                  		move.w	($FFFFF700).w,d2
00006482 4442                       		neg.w	d2
00006484 3002                       		move.w	d2,d0
00006486 E640                       		asr.w	#3,d0
00006488 9042                       		sub.w	d2,d0
0000648A 48C0                       		ext.l	d0
0000648C E980                       		asl.l	#4,d0
0000648E 81FC 001C                  		divs.w	#$1C,d0
00006492 48C0                       		ext.l	d0
00006494 E980                       		asl.l	#4,d0
00006496 E180                       		asl.l	#8,d0
00006498 7600                       		moveq	#0,d3
0000649A 3602                       		move.w	d2,d3
0000649C 323C 001B                  		move.w	#$1B,d1
000064A0                            
000064A0                            loc_64CE:
000064A0 32C3                       		move.w	d3,(a1)+
000064A2 4843                       		swap	d3
000064A4 D680                       		add.l	d0,d3
000064A6 4843                       		swap	d3
000064A8 51C9 FFF6                  		dbf	d1,loc_64CE
000064AC 3002                       		move.w	d2,d0
000064AE E640                       		asr.w	#3,d0
000064B0 323C 0004                  		move.w	#4,d1
000064B4                            
000064B4                            loc_64E2:
000064B4 32C0                       		move.w	d0,(a1)+
000064B6 51C9 FFFC                  		dbf	d1,loc_64E2
000064BA 3002                       		move.w	d2,d0
000064BC E440                       		asr.w	#2,d0
000064BE 323C 0004                  		move.w	#4,d1
000064C2                            
000064C2                            loc_64F0:
000064C2 32C0                       		move.w	d0,(a1)+
000064C4 51C9 FFFC                  		dbf	d1,loc_64F0
000064C8 3002                       		move.w	d2,d0
000064CA E240                       		asr.w	#1,d0
000064CC 323C 001D                  		move.w	#$1D,d1
000064D0                            
000064D0                            loc_64FE:
000064D0 32C0                       		move.w	d0,(a1)+
000064D2 51C9 FFFC                  		dbf	d1,loc_64FE
000064D6 4E75                       		rts	
000064D8                            ; End of function Deform_SLZ_2
000064D8                            
000064D8                            ; ---------------------------------------------------------------------------
000064D8                            ; Spring Yard Zone background layer deformation	code
000064D8                            ; ---------------------------------------------------------------------------
000064D8                            
000064D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064D8                            
000064D8                            
000064D8                            Deform_SYZ:				; XREF: Deform_Index
000064D8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000064DC 48C4                       		ext.l	d4
000064DE ED84                       		asl.l	#6,d4
000064E0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000064E4 48C5                       		ext.l	d5
000064E6 E985                       		asl.l	#4,d5
000064E8 2205                       		move.l	d5,d1
000064EA E385                       		asl.l	#1,d5
000064EC DA81                       		add.l	d1,d5
000064EE 6100 0000                  		bsr.w	ScrollBlock1
000064F2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064F8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000064FC 323C 00DF                  		move.w	#$DF,d1
00006500 3038 F700                  		move.w	($FFFFF700).w,d0
00006504 4440                       		neg.w	d0
00006506 4840                       		swap	d0
00006508 3038 F708                  		move.w	($FFFFF708).w,d0
0000650C 4440                       		neg.w	d0
0000650E                            
0000650E                            loc_653C:
0000650E 22C0                       		move.l	d0,(a1)+
00006510 51C9 FFFC                  		dbf	d1,loc_653C
00006514 4E75                       		rts	
00006516                            ; End of function Deform_SYZ
00006516                            
00006516                            ; ---------------------------------------------------------------------------
00006516                            ; Scrap	Brain Zone background layer deformation	code
00006516                            ; ---------------------------------------------------------------------------
00006516                            
00006516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006516                            
00006516                            
00006516                            Deform_SBZ:				; XREF: Deform_Index
00006516 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000651A 48C4                       		ext.l	d4
0000651C ED84                       		asl.l	#6,d4
0000651E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006522 48C5                       		ext.l	d5
00006524 E985                       		asl.l	#4,d5
00006526 E385                       		asl.l	#1,d5
00006528 6100 0000                  		bsr.w	ScrollBlock1
0000652C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006532 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006536 323C 00DF                  		move.w	#$DF,d1
0000653A 3038 F700                  		move.w	($FFFFF700).w,d0
0000653E 4440                       		neg.w	d0
00006540 4840                       		swap	d0
00006542 3038 F708                  		move.w	($FFFFF708).w,d0
00006546 4440                       		neg.w	d0
00006548                            
00006548                            loc_6576:
00006548 22C0                       		move.l	d0,(a1)+
0000654A 51C9 FFFC                  		dbf	d1,loc_6576
0000654E 4E75                       		rts	
00006550                            ; End of function Deform_SBZ
00006550                            
00006550                            ; ---------------------------------------------------------------------------
00006550                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006550                            ; ---------------------------------------------------------------------------
00006550                            
00006550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006550                            
00006550                            
00006550                            ScrollHoriz:				; XREF: DeformBgLayer
00006550 3838 F700                  		move.w	($FFFFF700).w,d4
00006554 6100                       		bsr.s	ScrollHoriz2
00006556 3038 F700                  		move.w	($FFFFF700).w,d0
0000655A 0240 0010                  		andi.w	#$10,d0
0000655E 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006562 B300                       		eor.b	d1,d0
00006564 6600                       		bne.s	locret_65B0
00006566 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000656C 3038 F700                  		move.w	($FFFFF700).w,d0
00006570 9044                       		sub.w	d4,d0
00006572 6A00                       		bpl.s	loc_65AA
00006574 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000657A 4E75                       		rts	
0000657C                            ; ===========================================================================
0000657C                            
0000657C                            loc_65AA:
0000657C 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006582                            
00006582                            locret_65B0:
00006582 4E75                       		rts	
00006584                            ; End of function ScrollHoriz
00006584                            
00006584                            
00006584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006584                            
00006584                            
00006584                            ScrollHoriz2:				; XREF: ScrollHoriz
00006584 3038 D008                  		move.w	($FFFFD008).w,d0
00006588 9078 F700                  		sub.w	($FFFFF700).w,d0
0000658C 0440 0090                  		subi.w	#$90,d0
00006590 6500                       		bcs.s	loc_65F6
00006592 0440 0010                  		subi.w	#$10,d0
00006596 6400                       		bcc.s	loc_65CC
00006598 4278 F73A                  		clr.w	($FFFFF73A).w
0000659C 4E75                       		rts	
0000659E                            ; ===========================================================================
0000659E                            
0000659E                            loc_65CC:
0000659E 0C40 0010                  		cmpi.w	#$10,d0
000065A2 6500                       		bcs.s	loc_65D6
000065A4 303C 0010                  		move.w	#$10,d0
000065A8                            
000065A8                            loc_65D6:
000065A8 D078 F700                  		add.w	($FFFFF700).w,d0
000065AC B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000065B0 6D00                       		blt.s	loc_65E4
000065B2 3038 F72A                  		move.w	($FFFFF72A).w,d0
000065B6                            
000065B6                            loc_65E4:
000065B6 3200                       		move.w	d0,d1
000065B8 9278 F700                  		sub.w	($FFFFF700).w,d1
000065BC E141                       		asl.w	#8,d1
000065BE 31C0 F700                  		move.w	d0,($FFFFF700).w
000065C2 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000065C6 4E75                       		rts	
000065C8                            ; ===========================================================================
000065C8                            
000065C8                            loc_65F6:				; XREF: ScrollHoriz2
000065C8 D078 F700                  		add.w	($FFFFF700).w,d0
000065CC B078 F728                  		cmp.w	($FFFFF728).w,d0
000065D0 6EE4                       		bgt.s	loc_65E4
000065D2 3038 F728                  		move.w	($FFFFF728).w,d0
000065D6 60DE                       		bra.s	loc_65E4
000065D8                            ; End of function ScrollHoriz2
000065D8                            
000065D8                            ; ===========================================================================
000065D8 4A40                       		tst.w	d0
000065DA 6A00                       		bpl.s	loc_6610
000065DC 303C FFFE                  		move.w	#-2,d0
000065E0 60E6                       		bra.s	loc_65F6
000065E2                            ; ===========================================================================
000065E2                            
000065E2                            loc_6610:
000065E2 303C 0002                  		move.w	#2,d0
000065E6 60B6                       		bra.s	loc_65CC
000065E8                            
000065E8                            ; ---------------------------------------------------------------------------
000065E8                            ; Subroutine to	scroll the level vertically as Sonic moves
000065E8                            ; ---------------------------------------------------------------------------
000065E8                            
000065E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065E8                            
000065E8                            
000065E8                            ScrollVertical:				; XREF: DeformBgLayer
000065E8 7200                       		moveq	#0,d1
000065EA 3038 D00C                  		move.w	($FFFFD00C).w,d0	; d0 -> SonY
000065EE 9078 F704                  		sub.w	($FFFFF704).w,d0	; d0 -> SonY - CamY (distance from the top of screen)
000065F2 0838 0002 D022             		btst	#2,($FFFFD022).w	; is Sonic rolling?
000065F8 6700                       		beq.s	loc_662A		; if yes, branch
000065FA 5B40                       		subq.w	#5,d0
000065FC                            
000065FC                            loc_662A:
000065FC 0838 0001 D022             		btst	#1,($FFFFD022).w	; is Sonic in the air?
00006602 6700                       		beq.s	loc_664A		; if not, branch
00006604 0640 0020                  		addi.w	#$20,d0
00006608 9078 F73E                  		sub.w	($FFFFF73E).w,d0	; apply screen shift
0000660C 6500                       		bcs.s	loc_6696		; if dist from top is negative, branch
0000660E 0440 0040                  		subi.w	#$40,d0
00006612 6400                       		bcc.s	loc_6696
00006614 4A38 F75C                  		tst.b	($FFFFF75C).w
00006618 6600                       		bne.s	loc_66A8
0000661A 6000                       		bra.s	loc_6656
0000661C                            ; ===========================================================================
0000661C                            
0000661C                            loc_664A:
0000661C 9078 F73E                  		sub.w	($FFFFF73E).w,d0	; apply screen shift
00006620 6600                       		bne.s	loc_665C
00006622 4A38 F75C                  		tst.b	($FFFFF75C).w
00006626 6600                       		bne.s	loc_66A8
00006628                            
00006628                            loc_6656:
00006628 4278 F73C                  		clr.w	($FFFFF73C).w
0000662C 4E75                       		rts	
0000662E                            ; ===========================================================================
0000662E                            
0000662E                            loc_665C:
0000662E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006634 6600                       		bne.s	loc_6684
00006636 3238 D014                  		move.w	($FFFFD014).w,d1	; d1 -> Sonic's velocity
0000663A 6A00                       		bpl.s	loc_666C
0000663C 4441                       		neg.w	d1
0000663E                            
0000663E                            loc_666C:
0000663E 0C41 0800                  		cmpi.w	#$800,d1		; is velocity $800?
00006642 6400                       		bcc.s	loc_6696		; if greater or equal, branch
00006644 323C 0600                  		move.w	#$600,d1
00006648 0C40 0006                  		cmpi.w	#6,d0			; is dist from top > 6?
0000664C 6E00                       		bgt.s	loc_66F6		; if yes, branch
0000664E 0C40 FFFA                  		cmpi.w	#-6,d0			; is dist from top < -6?
00006652 6D00                       		blt.s	loc_66C0		; if yes, branch
00006654 6000                       		bra.s	loc_66AE
00006656                            ; ===========================================================================
00006656                            
00006656                            loc_6684:
00006656 323C 0200                  		move.w	#$200,d1
0000665A 0C40 0002                  		cmpi.w	#2,d0
0000665E 6E00                       		bgt.s	loc_66F6
00006660 0C40 FFFE                  		cmpi.w	#-2,d0
00006664 6D00                       		blt.s	loc_66C0
00006666 6000                       		bra.s	loc_66AE
00006668                            ; ===========================================================================
00006668                            
00006668                            loc_6696:
00006668 323C 1000                  		move.w	#$1000,d1
0000666C 0C40 0010                  		cmpi.w	#$10,d0			; is dist from top > 16?
00006670 6E00                       		bgt.s	loc_66F6		; if yes, branch
00006672 0C40 FFF0                  		cmpi.w	#-$10,d0		; is dist from top < -16?
00006676 6D00                       		blt.s	loc_66C0		; if yes, branch
00006678 6000                       		bra.s	loc_66AE
0000667A                            ; ===========================================================================
0000667A                            
0000667A                            loc_66A8:
0000667A 7000                       		moveq	#0,d0
0000667C 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006680                            
00006680                            loc_66AE:
00006680 7200                       		moveq	#0,d1
00006682 3200                       		move.w	d0,d1
00006684 D278 F704                  		add.w	($FFFFF704).w,d1
00006688 4A40                       		tst.w	d0
0000668A 6A00 0000                  		bpl.w	loc_6700
0000668E 6000 0000                  		bra.w	loc_66CC
00006692                            ; ===========================================================================
00006692                            
00006692                            loc_66C0:
00006692 4441                       		neg.w	d1
00006694 48C1                       		ext.l	d1
00006696 E181                       		asl.l	#8,d1
00006698 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000669C 4841                       		swap	d1
0000669E                            
0000669E                            loc_66CC:
0000669E B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000066A2 6E00                       		bgt.s	loc_6724
000066A4 0C41 FF00                  		cmpi.w	#-$100,d1
000066A8 6E00                       		bgt.s	loc_66F0
000066AA 0241 07FF                  		andi.w	#$7FF,d1
000066AE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000066B4 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000066BA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000066C0 6000                       		bra.s	loc_6724
000066C2                            ; ===========================================================================
000066C2                            
000066C2                            loc_66F0:
000066C2 3238 F72C                  		move.w	($FFFFF72C).w,d1
000066C6 6000                       		bra.s	loc_6724
000066C8                            ; ===========================================================================
000066C8                            
000066C8                            loc_66F6:
000066C8 48C1                       		ext.l	d1
000066CA E181                       		asl.l	#8,d1
000066CC D2B8 F704                  		add.l	($FFFFF704).w,d1
000066D0 4841                       		swap	d1
000066D2                            
000066D2                            loc_6700:
000066D2 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000066D6 6D00                       		blt.s	loc_6724
000066D8 0441 0800                  		subi.w	#$800,d1
000066DC 6500                       		bcs.s	loc_6720
000066DE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000066E4 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000066EA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000066F0 6000                       		bra.s	loc_6724
000066F2                            ; ===========================================================================
000066F2                            
000066F2                            loc_6720:
000066F2 3238 F72E                  		move.w	($FFFFF72E).w,d1
000066F6                            
000066F6                            loc_6724:
000066F6 3838 F704                  		move.w	($FFFFF704).w,d4
000066FA 4841                       		swap	d1
000066FC 2601                       		move.l	d1,d3
000066FE 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006702 E09B                       		ror.l	#8,d3
00006704 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006708 21C1 F704                  		move.l	d1,($FFFFF704).w
0000670C 3038 F704                  		move.w	($FFFFF704).w,d0
00006710 0240 0010                  		andi.w	#$10,d0
00006714 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006718 B300                       		eor.b	d1,d0
0000671A 6600                       		bne.s	locret_6766
0000671C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006722 3038 F704                  		move.w	($FFFFF704).w,d0
00006726 9044                       		sub.w	d4,d0
00006728 6A00                       		bpl.s	loc_6760
0000672A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006730 4E75                       		rts	
00006732                            ; ===========================================================================
00006732                            
00006732                            loc_6760:
00006732 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006738                            
00006738                            locret_6766:
00006738 4E75                       		rts	
0000673A                            ; End of function ScrollVertical
0000673A                            
0000673A                            
0000673A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000673A                            
0000673A                            
0000673A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000673A 2438 F708                  		move.l	($FFFFF708).w,d2
0000673E 2002                       		move.l	d2,d0
00006740 D084                       		add.l	d4,d0
00006742 21C0 F708                  		move.l	d0,($FFFFF708).w
00006746 2200                       		move.l	d0,d1
00006748 4841                       		swap	d1
0000674A 0241 0010                  		andi.w	#$10,d1
0000674E 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006752 B701                       		eor.b	d3,d1
00006754 6600                       		bne.s	loc_679C
00006756 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000675C 9082                       		sub.l	d2,d0
0000675E 6A00                       		bpl.s	loc_6796
00006760 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006766 6000                       		bra.s	loc_679C
00006768                            ; ===========================================================================
00006768                            
00006768                            loc_6796:
00006768 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000676E                            
0000676E                            loc_679C:
0000676E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006772 2003                       		move.l	d3,d0
00006774 D085                       		add.l	d5,d0
00006776 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000677A 2200                       		move.l	d0,d1
0000677C 4841                       		swap	d1
0000677E 0241 0010                  		andi.w	#$10,d1
00006782 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006786 B501                       		eor.b	d2,d1
00006788 6600                       		bne.s	locret_67D0
0000678A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006790 9083                       		sub.l	d3,d0
00006792 6A00                       		bpl.s	loc_67CA
00006794 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000679A 4E75                       		rts	
0000679C                            ; ===========================================================================
0000679C                            
0000679C                            loc_67CA:
0000679C 08F8 0001 F756             		bset	#1,($FFFFF756).w
000067A2                            
000067A2                            locret_67D0:
000067A2 4E75                       		rts	
000067A4                            ; End of function ScrollBlock1
000067A4                            
000067A4                            
000067A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067A4                            
000067A4                            
000067A4                            ScrollBlock2:				; XREF: Deform_SLZ
000067A4 2438 F708                  		move.l	($FFFFF708).w,d2
000067A8 2002                       		move.l	d2,d0
000067AA D084                       		add.l	d4,d0
000067AC 21C0 F708                  		move.l	d0,($FFFFF708).w
000067B0 2638 F70C                  		move.l	($FFFFF70C).w,d3
000067B4 2003                       		move.l	d3,d0
000067B6 D085                       		add.l	d5,d0
000067B8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000067BC 2200                       		move.l	d0,d1
000067BE 4841                       		swap	d1
000067C0 0241 0010                  		andi.w	#$10,d1
000067C4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067C8 B501                       		eor.b	d2,d1
000067CA 6600                       		bne.s	locret_6812
000067CC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000067D2 9083                       		sub.l	d3,d0
000067D4 6A00                       		bpl.s	loc_680C
000067D6 08F8 0000 F756             		bset	#0,($FFFFF756).w
000067DC 4E75                       		rts	
000067DE                            ; ===========================================================================
000067DE                            
000067DE                            loc_680C:
000067DE 08F8 0001 F756             		bset	#1,($FFFFF756).w
000067E4                            
000067E4                            locret_6812:
000067E4 4E75                       		rts	
000067E6                            ; End of function ScrollBlock2
000067E6                            
000067E6                            
000067E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067E6                            
000067E6                            
000067E6                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000067E6 3638 F70C                  		move.w	($FFFFF70C).w,d3
000067EA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000067EE 3200                       		move.w	d0,d1
000067F0 0241 0010                  		andi.w	#$10,d1
000067F4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067F8 B501                       		eor.b	d2,d1
000067FA 6600                       		bne.s	locret_6842
000067FC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006802 9043                       		sub.w	d3,d0
00006804 6A00                       		bpl.s	loc_683C
00006806 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000680C 4E75                       		rts	
0000680E                            ; ===========================================================================
0000680E                            
0000680E                            loc_683C:
0000680E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006814                            
00006814                            locret_6842:
00006814 4E75                       		rts	
00006816                            ; End of function ScrollBlock3
00006816                            
00006816                            
00006816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006816                            
00006816                            
00006816                            ScrollBlock4:				; XREF: Deform_GHZ
00006816 3438 F710                  		move.w	($FFFFF710).w,d2
0000681A 3638 F714                  		move.w	($FFFFF714).w,d3
0000681E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006822 48C0                       		ext.l	d0
00006824 EF80                       		asl.l	#7,d0
00006826 D1B8 F710                  		add.l	d0,($FFFFF710).w
0000682A 3038 F710                  		move.w	($FFFFF710).w,d0
0000682E 0240 0010                  		andi.w	#$10,d0
00006832 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006836 B300                       		eor.b	d1,d0
00006838 6600                       		bne.s	locret_6884
0000683A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006840 3038 F710                  		move.w	($FFFFF710).w,d0
00006844 9042                       		sub.w	d2,d0
00006846 6A00                       		bpl.s	loc_687E
00006848 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000684E 6000                       		bra.s	locret_6884
00006850                            ; ===========================================================================
00006850                            
00006850                            loc_687E:
00006850 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006856                            
00006856                            locret_6884:
00006856 4E75                       		rts	
00006858                            ; End of function ScrollBlock4
00006858                            
00006858                            
00006858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006858                            
00006858                            
00006858                            sub_6886:				; XREF: loc_C44
00006858 4BF9 00C0 0004             		lea	($C00004).l,a5
0000685E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006864 45F8 F756                  		lea	($FFFFF756).w,a2
00006868 47F8 F708                  		lea	($FFFFF708).w,a3
0000686C 49F8 A440                  		lea	($FFFFA440).w,a4
00006870 343C 6000                  		move.w	#$6000,d2
00006874 6100 0000                  		bsr.w	sub_6954
00006878 45F8 F758                  		lea	($FFFFF758).w,a2
0000687C 47F8 F710                  		lea	($FFFFF710).w,a3
00006880 6000 0000                  		bra.w	sub_69F4
00006884                            ; End of function sub_6886
00006884                            
00006884                            ; ---------------------------------------------------------------------------
00006884                            ; Subroutine to	display	correct	tiles as you move
00006884                            ; ---------------------------------------------------------------------------
00006884                            
00006884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006884                            
00006884                            
00006884                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006884 4BF9 00C0 0004             		lea	($C00004).l,a5
0000688A 4DF9 00C0 0000             		lea	($C00000).l,a6
00006890 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006894 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006898 49F8 A440                  		lea	($FFFFA440).w,a4
0000689C 343C 6000                  		move.w	#$6000,d2
000068A0 6100 0000                  		bsr.w	sub_6954
000068A4 45F8 FF34                  		lea	($FFFFFF34).w,a2
000068A8 47F8 FF20                  		lea	($FFFFFF20).w,a3
000068AC 6100 0000                  		bsr.w	sub_69F4
000068B0 45F8 FF30                  		lea	($FFFFFF30).w,a2
000068B4 47F8 FF10                  		lea	($FFFFFF10).w,a3
000068B8 49F8 A400                  		lea	($FFFFA400).w,a4
000068BC 343C 4000                  		move.w	#$4000,d2
000068C0 4A12                       		tst.b	(a2)
000068C2 6700                       		beq.s	locret_6952
000068C4 0892 0000                  		bclr	#0,(a2)
000068C8 6700                       		beq.s	loc_6908
000068CA 78F0                       		moveq	#-$10,d4
000068CC 7AF0                       		moveq	#-$10,d5
000068CE 6100 0000                  		bsr.w	sub_6C20
000068D2 78F0                       		moveq	#-$10,d4
000068D4 7AF0                       		moveq	#-$10,d5
000068D6 6100 0000                  		bsr.w	sub_6AD8
000068DA                            
000068DA                            loc_6908:
000068DA 0892 0001                  		bclr	#1,(a2)
000068DE 6700                       		beq.s	loc_6922
000068E0 383C 00E0                  		move.w	#$E0,d4
000068E4 7AF0                       		moveq	#-$10,d5
000068E6 6100 0000                  		bsr.w	sub_6C20
000068EA 383C 00E0                  		move.w	#$E0,d4
000068EE 7AF0                       		moveq	#-$10,d5
000068F0 6100 0000                  		bsr.w	sub_6AD8
000068F4                            
000068F4                            loc_6922:
000068F4 0892 0002                  		bclr	#2,(a2)
000068F8 6700                       		beq.s	loc_6938
000068FA 78F0                       		moveq	#-$10,d4
000068FC 7AF0                       		moveq	#-$10,d5
000068FE 6100 0000                  		bsr.w	sub_6C20
00006902 78F0                       		moveq	#-$10,d4
00006904 7AF0                       		moveq	#-$10,d5
00006906 6100 0000                  		bsr.w	sub_6B04
0000690A                            
0000690A                            loc_6938:
0000690A 0892 0003                  		bclr	#3,(a2)
0000690E 6700                       		beq.s	locret_6952
00006910 78F0                       		moveq	#-$10,d4
00006912 3A3C 0140                  		move.w	#$140,d5
00006916 6100 0000                  		bsr.w	sub_6C20
0000691A 78F0                       		moveq	#-$10,d4
0000691C 3A3C 0140                  		move.w	#$140,d5
00006920 6100 0000                  		bsr.w	sub_6B04
00006924                            
00006924                            locret_6952:
00006924 4E75                       		rts	
00006926                            ; End of function LoadTilesAsYouMove
00006926                            
00006926                            
00006926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006926                            
00006926                            
00006926                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006926 4A12                       		tst.b	(a2)
00006928 6700 0000                  		beq.w	locret_69F2
0000692C 0892 0000                  		bclr	#0,(a2)
00006930 6700                       		beq.s	loc_6972
00006932 78F0                       		moveq	#-$10,d4
00006934 7AF0                       		moveq	#-$10,d5
00006936 6100 0000                  		bsr.w	sub_6C20
0000693A 78F0                       		moveq	#-$10,d4
0000693C 7AF0                       		moveq	#-$10,d5
0000693E 7C1F                       		moveq	#$1F,d6
00006940 6100 0000                  		bsr.w	sub_6ADA
00006944                            
00006944                            loc_6972:
00006944 0892 0001                  		bclr	#1,(a2)
00006948 6700                       		beq.s	loc_698E
0000694A 383C 00E0                  		move.w	#$E0,d4
0000694E 7AF0                       		moveq	#-$10,d5
00006950 6100 0000                  		bsr.w	sub_6C20
00006954 383C 00E0                  		move.w	#$E0,d4
00006958 7AF0                       		moveq	#-$10,d5
0000695A 7C1F                       		moveq	#$1F,d6
0000695C 6100 0000                  		bsr.w	sub_6ADA
00006960                            
00006960                            loc_698E:
00006960 0892 0002                  		bclr	#2,(a2)
00006964 6700                       		beq.s	loc_69BE
00006966 78F0                       		moveq	#-$10,d4
00006968 7AF0                       		moveq	#-$10,d5
0000696A 6100 0000                  		bsr.w	sub_6C20
0000696E 78F0                       		moveq	#-$10,d4
00006970 7AF0                       		moveq	#-$10,d5
00006972 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006976 322B 0004                  		move.w	4(a3),d1
0000697A 0241 FFF0                  		andi.w	#-$10,d1
0000697E 9C41                       		sub.w	d1,d6
00006980 6D00                       		blt.s	loc_69BE
00006982 E84E                       		lsr.w	#4,d6
00006984 0C46 000F                  		cmpi.w	#$F,d6
00006988 6500                       		bcs.s	loc_69BA
0000698A 7C0F                       		moveq	#$F,d6
0000698C                            
0000698C                            loc_69BA:
0000698C 6100 0000                  		bsr.w	sub_6B06
00006990                            
00006990                            loc_69BE:
00006990 0892 0003                  		bclr	#3,(a2)
00006994 6700                       		beq.s	locret_69F2
00006996 78F0                       		moveq	#-$10,d4
00006998 3A3C 0140                  		move.w	#$140,d5
0000699C 6100 0000                  		bsr.w	sub_6C20
000069A0 78F0                       		moveq	#-$10,d4
000069A2 3A3C 0140                  		move.w	#$140,d5
000069A6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069AA 322B 0004                  		move.w	4(a3),d1
000069AE 0241 FFF0                  		andi.w	#-$10,d1
000069B2 9C41                       		sub.w	d1,d6
000069B4 6D00                       		blt.s	locret_69F2
000069B6 E84E                       		lsr.w	#4,d6
000069B8 0C46 000F                  		cmpi.w	#$F,d6
000069BC 6500                       		bcs.s	loc_69EE
000069BE 7C0F                       		moveq	#$F,d6
000069C0                            
000069C0                            loc_69EE:
000069C0 6100 0000                  		bsr.w	sub_6B06
000069C4                            
000069C4                            locret_69F2:
000069C4 4E75                       		rts	
000069C6                            ; End of function sub_6954
000069C6                            
000069C6                            
000069C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C6                            
000069C6                            
000069C6                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000069C6 4A12                       		tst.b	(a2)
000069C8 6700 0000                  		beq.w	locret_6A80
000069CC 0892 0002                  		bclr	#2,(a2)
000069D0 6700                       		beq.s	loc_6A3E
000069D2 0C53 0010                  		cmpi.w	#$10,(a3)
000069D6 6500                       		bcs.s	loc_6A3E
000069D8 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000069DC 322B 0004                  		move.w	4(a3),d1
000069E0 0241 FFF0                  		andi.w	#-$10,d1
000069E4 9841                       		sub.w	d1,d4
000069E6 3F04                       		move.w	d4,-(sp)
000069E8 7AF0                       		moveq	#-$10,d5
000069EA 6100 0000                  		bsr.w	sub_6C20
000069EE 381F                       		move.w	(sp)+,d4
000069F0 7AF0                       		moveq	#-$10,d5
000069F2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069F6 322B 0004                  		move.w	4(a3),d1
000069FA 0241 FFF0                  		andi.w	#-$10,d1
000069FE 9C41                       		sub.w	d1,d6
00006A00 6D00                       		blt.s	loc_6A3E
00006A02 E84E                       		lsr.w	#4,d6
00006A04 0446 000E                  		subi.w	#$E,d6
00006A08 6400                       		bcc.s	loc_6A3E
00006A0A 4446                       		neg.w	d6
00006A0C 6100 0000                  		bsr.w	sub_6B06
00006A10                            
00006A10                            loc_6A3E:
00006A10 0892 0003                  		bclr	#3,(a2)
00006A14 6700                       		beq.s	locret_6A80
00006A16 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A1A 322B 0004                  		move.w	4(a3),d1
00006A1E 0241 FFF0                  		andi.w	#-$10,d1
00006A22 9841                       		sub.w	d1,d4
00006A24 3F04                       		move.w	d4,-(sp)
00006A26 3A3C 0140                  		move.w	#$140,d5
00006A2A 6100 0000                  		bsr.w	sub_6C20
00006A2E 381F                       		move.w	(sp)+,d4
00006A30 3A3C 0140                  		move.w	#$140,d5
00006A34 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A38 322B 0004                  		move.w	4(a3),d1
00006A3C 0241 FFF0                  		andi.w	#-$10,d1
00006A40 9C41                       		sub.w	d1,d6
00006A42 6D00                       		blt.s	locret_6A80
00006A44 E84E                       		lsr.w	#4,d6
00006A46 0446 000E                  		subi.w	#$E,d6
00006A4A 6400                       		bcc.s	locret_6A80
00006A4C 4446                       		neg.w	d6
00006A4E 6100 0000                  		bsr.w	sub_6B06
00006A52                            
00006A52                            locret_6A80:
00006A52 4E75                       		rts	
00006A54                            ; End of function sub_69F4
00006A54                            
00006A54                            ; ===========================================================================
00006A54 4A12                       		tst.b	(a2)
00006A56 6700                       		beq.s	locret_6AD6
00006A58 0892 0002                  		bclr	#2,(a2)
00006A5C 6700                       		beq.s	loc_6AAC
00006A5E 383C 00D0                  		move.w	#$D0,d4
00006A62 322B 0004                  		move.w	4(a3),d1
00006A66 0241 FFF0                  		andi.w	#-$10,d1
00006A6A 9841                       		sub.w	d1,d4
00006A6C 3F04                       		move.w	d4,-(sp)
00006A6E 7AF0                       		moveq	#-$10,d5
00006A70 6100 0000                  		bsr.w	sub_6C3C
00006A74 381F                       		move.w	(sp)+,d4
00006A76 7AF0                       		moveq	#-$10,d5
00006A78 7C02                       		moveq	#2,d6
00006A7A 6100 0000                  		bsr.w	sub_6B06
00006A7E                            
00006A7E                            loc_6AAC:
00006A7E 0892 0003                  		bclr	#3,(a2)
00006A82 6700                       		beq.s	locret_6AD6
00006A84 383C 00D0                  		move.w	#$D0,d4
00006A88 322B 0004                  		move.w	4(a3),d1
00006A8C 0241 FFF0                  		andi.w	#-$10,d1
00006A90 9841                       		sub.w	d1,d4
00006A92 3F04                       		move.w	d4,-(sp)
00006A94 3A3C 0140                  		move.w	#$140,d5
00006A98 6100 0000                  		bsr.w	sub_6C3C
00006A9C 381F                       		move.w	(sp)+,d4
00006A9E 3A3C 0140                  		move.w	#$140,d5
00006AA2 7C02                       		moveq	#2,d6
00006AA4 6100 0000                  		bsr.w	sub_6B06
00006AA8                            
00006AA8                            locret_6AD6:
00006AA8 4E75                       		rts	
00006AAA                            
00006AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AAA                            
00006AAA                            
00006AAA                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006AAA 7C15                       		moveq	#$15,d6
00006AAC                            ; End of function sub_6AD8
00006AAC                            
00006AAC                            
00006AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AAC                            
00006AAC                            
00006AAC                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006AAC 2E3C 0080 0000             		move.l	#$800000,d7
00006AB2 2200                       		move.l	d0,d1
00006AB4                            
00006AB4                            loc_6AE2:
00006AB4 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006AB8 6100 0000                  		bsr.w	sub_6BD6
00006ABC 2001                       		move.l	d1,d0
00006ABE 6100 0000                  		bsr.w	sub_6B32
00006AC2 5801                       		addq.b	#4,d1
00006AC4 0201 007F                  		andi.b	#$7F,d1
00006AC8 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006ACC 0645 0010                  		addi.w	#$10,d5
00006AD0 51CE FFE2                  		dbf	d6,loc_6AE2
00006AD4 4E75                       		rts	
00006AD6                            ; End of function sub_6ADA
00006AD6                            
00006AD6                            
00006AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD6                            
00006AD6                            
00006AD6                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006AD6 7C0F                       		moveq	#$F,d6
00006AD8                            ; End of function sub_6B04
00006AD8                            
00006AD8                            
00006AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD8                            
00006AD8                            
00006AD8                            sub_6B06:				; XREF: sub_6954
00006AD8 2E3C 0080 0000             		move.l	#$800000,d7
00006ADE 2200                       		move.l	d0,d1
00006AE0                            
00006AE0                            loc_6B0E:
00006AE0 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006AE4 6100 0000                  		bsr.w	sub_6BD6
00006AE8 2001                       		move.l	d1,d0
00006AEA 6100 0000                  		bsr.w	sub_6B32
00006AEE 0641 0100                  		addi.w	#$100,d1
00006AF2 0241 0FFF                  		andi.w	#$FFF,d1
00006AF6 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006AFA 0644 0010                  		addi.w	#$10,d4
00006AFE 51CE FFE0                  		dbf	d6,loc_6B0E
00006B02 4E75                       		rts	
00006B04                            ; End of function sub_6B06
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006B04 8042                       		or.w	d2,d0
00006B06 4840                       		swap	d0
00006B08 0810 0004                  		btst	#4,(a0)
00006B0C 6600                       		bne.s	loc_6B6E
00006B0E 0810 0003                  		btst	#3,(a0)
00006B12 6600                       		bne.s	loc_6B4E
00006B14 2A80                       		move.l	d0,(a5)
00006B16 2C99                       		move.l	(a1)+,(a6)
00006B18 D087                       		add.l	d7,d0
00006B1A 2A80                       		move.l	d0,(a5)
00006B1C 2C99                       		move.l	(a1)+,(a6)
00006B1E 4E75                       		rts	
00006B20                            ; ===========================================================================
00006B20                            
00006B20                            loc_6B4E:
00006B20 2A80                       		move.l	d0,(a5)
00006B22 2819                       		move.l	(a1)+,d4
00006B24 0A84 0800 0800             		eori.l	#$8000800,d4
00006B2A 4844                       		swap	d4
00006B2C 2C84                       		move.l	d4,(a6)
00006B2E D087                       		add.l	d7,d0
00006B30 2A80                       		move.l	d0,(a5)
00006B32 2819                       		move.l	(a1)+,d4
00006B34 0A84 0800 0800             		eori.l	#$8000800,d4
00006B3A 4844                       		swap	d4
00006B3C 2C84                       		move.l	d4,(a6)
00006B3E 4E75                       		rts	
00006B40                            ; ===========================================================================
00006B40                            
00006B40                            loc_6B6E:
00006B40 0810 0003                  		btst	#3,(a0)
00006B44 6600                       		bne.s	loc_6B90
00006B46 2A80                       		move.l	d0,(a5)
00006B48 2A19                       		move.l	(a1)+,d5
00006B4A 2819                       		move.l	(a1)+,d4
00006B4C 0A84 1000 1000             		eori.l	#$10001000,d4
00006B52 2C84                       		move.l	d4,(a6)
00006B54 D087                       		add.l	d7,d0
00006B56 2A80                       		move.l	d0,(a5)
00006B58 0A85 1000 1000             		eori.l	#$10001000,d5
00006B5E 2C85                       		move.l	d5,(a6)
00006B60 4E75                       		rts	
00006B62                            ; ===========================================================================
00006B62                            
00006B62                            loc_6B90:
00006B62 2A80                       		move.l	d0,(a5)
00006B64 2A19                       		move.l	(a1)+,d5
00006B66 2819                       		move.l	(a1)+,d4
00006B68 0A84 1800 1800             		eori.l	#$18001800,d4
00006B6E 4844                       		swap	d4
00006B70 2C84                       		move.l	d4,(a6)
00006B72 D087                       		add.l	d7,d0
00006B74 2A80                       		move.l	d0,(a5)
00006B76 0A85 1800 1800             		eori.l	#$18001800,d5
00006B7C 4845                       		swap	d5
00006B7E 2C85                       		move.l	d5,(a6)
00006B80 4E75                       		rts	
00006B82                            ; End of function sub_6B32
00006B82                            
00006B82                            ; ===========================================================================
00006B82 4E75                       		rts	
00006B84                            ; ===========================================================================
00006B84 2A80                       		move.l	d0,(a5)
00006B86 3A3C 2000                  		move.w	#$2000,d5
00006B8A 3819                       		move.w	(a1)+,d4
00006B8C D845                       		add.w	d5,d4
00006B8E 3C84                       		move.w	d4,(a6)
00006B90 3819                       		move.w	(a1)+,d4
00006B92 D845                       		add.w	d5,d4
00006B94 3C84                       		move.w	d4,(a6)
00006B96 D087                       		add.l	d7,d0
00006B98 2A80                       		move.l	d0,(a5)
00006B9A 3819                       		move.w	(a1)+,d4
00006B9C D845                       		add.w	d5,d4
00006B9E 3C84                       		move.w	d4,(a6)
00006BA0 3819                       		move.w	(a1)+,d4
00006BA2 D845                       		add.w	d5,d4
00006BA4 3C84                       		move.w	d4,(a6)
00006BA6 4E75                       		rts	
00006BA8                            
00006BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA8                            
00006BA8                            
00006BA8                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006BA8 43F8 B000                  		lea	($FFFFB000).w,a1
00006BAC D86B 0004                  		add.w	4(a3),d4
00006BB0 DA53                       		add.w	(a3),d5
00006BB2 3604                       		move.w	d4,d3
00006BB4 E24B                       		lsr.w	#1,d3
00006BB6 0243 0380                  		andi.w	#$380,d3
00006BBA E64D                       		lsr.w	#3,d5
00006BBC 3005                       		move.w	d5,d0
00006BBE EA48                       		lsr.w	#5,d0
00006BC0 0240 007F                  		andi.w	#$7F,d0
00006BC4 D043                       		add.w	d3,d0
00006BC6 76FF                       		moveq	#-1,d3
00006BC8 1634 0000                  		move.b	(a4,d0.w),d3
00006BCC 6700                       		beq.s	locret_6C1E
00006BCE 5303                       		subq.b	#1,d3
00006BD0 0243 007F                  		andi.w	#$7F,d3
00006BD4 EE5B                       		ror.w	#7,d3
00006BD6 D844                       		add.w	d4,d4
00006BD8 0244 01E0                  		andi.w	#$1E0,d4
00006BDC 0245 001E                  		andi.w	#$1E,d5
00006BE0 D644                       		add.w	d4,d3
00006BE2 D645                       		add.w	d5,d3
00006BE4 2043                       		movea.l	d3,a0
00006BE6 3610                       		move.w	(a0),d3
00006BE8 0243 03FF                  		andi.w	#$3FF,d3
00006BEC E74B                       		lsl.w	#3,d3
00006BEE D2C3                       		adda.w	d3,a1
00006BF0                            
00006BF0                            locret_6C1E:
00006BF0 4E75                       		rts	
00006BF2                            ; End of function sub_6BD6
00006BF2                            
00006BF2                            
00006BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BF2                            
00006BF2                            
00006BF2                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006BF2 D86B 0004                  		add.w	4(a3),d4
00006BF6 DA53                       		add.w	(a3),d5
00006BF8 0244 00F0                  		andi.w	#$F0,d4
00006BFC 0245 01F0                  		andi.w	#$1F0,d5
00006C00 E94C                       		lsl.w	#4,d4
00006C02 E44D                       		lsr.w	#2,d5
00006C04 D845                       		add.w	d5,d4
00006C06 7003                       		moveq	#3,d0
00006C08 4840                       		swap	d0
00006C0A 3004                       		move.w	d4,d0
00006C0C 4E75                       		rts	
00006C0E                            ; End of function sub_6C20
00006C0E                            
00006C0E                            
00006C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C0E                            ; not used
00006C0E                            
00006C0E                            
00006C0E                            sub_6C3C:
00006C0E D86B 0004                  		add.w	4(a3),d4
00006C12 DA53                       		add.w	(a3),d5
00006C14 0244 00F0                  		andi.w	#$F0,d4
00006C18 0245 01F0                  		andi.w	#$1F0,d5
00006C1C E94C                       		lsl.w	#4,d4
00006C1E E44D                       		lsr.w	#2,d5
00006C20 D845                       		add.w	d5,d4
00006C22 7002                       		moveq	#2,d0
00006C24 4840                       		swap	d0
00006C26 3004                       		move.w	d4,d0
00006C28 4E75                       		rts	
00006C2A                            ; End of function sub_6C3C
00006C2A                            
00006C2A                            ; ---------------------------------------------------------------------------
00006C2A                            ; Subroutine to	load tiles as soon as the level	appears
00006C2A                            ; ---------------------------------------------------------------------------
00006C2A                            
00006C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2A                            
00006C2A                            
00006C2A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006C2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00006C30 4DF9 00C0 0000             		lea	($C00000).l,a6
00006C36 47F8 F700                  		lea	($FFFFF700).w,a3
00006C3A 49F8 A400                  		lea	($FFFFA400).w,a4
00006C3E 343C 4000                  		move.w	#$4000,d2
00006C42 6100                       		bsr.s	LoadTilesFromStart2
00006C44 47F8 F708                  		lea	($FFFFF708).w,a3
00006C48 49F8 A440                  		lea	($FFFFA440).w,a4
00006C4C 343C 6000                  		move.w	#$6000,d2
00006C50                            ; End of function LoadTilesFromStart
00006C50                            
00006C50                            
00006C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C50                            
00006C50                            
00006C50                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006C50 78F0                       		moveq	#-$10,d4
00006C52 7C0F                       		moveq	#$F,d6
00006C54                            
00006C54                            loc_6C82:
00006C54 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006C58 7A00                       		moveq	#0,d5
00006C5A 3204                       		move.w	d4,d1
00006C5C 6100 FF94                  		bsr.w	sub_6C20
00006C60 3801                       		move.w	d1,d4
00006C62 7A00                       		moveq	#0,d5
00006C64 7C1F                       		moveq	#$1F,d6
00006C66 6100 FE44                  		bsr.w	sub_6ADA
00006C6A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006C6E 0644 0010                  		addi.w	#$10,d4
00006C72 51CE FFE0                  		dbf	d6,loc_6C82
00006C76 4E75                       		rts	
00006C78                            ; End of function LoadTilesFromStart2
00006C78                            
00006C78                            ; ---------------------------------------------------------------------------
00006C78                            ; Main Load Block loading subroutine
00006C78                            ; ---------------------------------------------------------------------------
00006C78                            
00006C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C78                            
00006C78                            
00006C78                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006C78 7000                       		moveq	#0,d0
00006C7A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C7E E948                       		lsl.w	#4,d0
00006C80 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006C86 45F2 0000                  		lea	(a2,d0.w),a2
00006C8A 2F0A                       		move.l	a2,-(sp)
00006C8C 588A                       		addq.l	#4,a2
00006C8E 205A                       		movea.l	(a2)+,a0
00006C90 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006C94 303C 0000                  		move.w	#0,d0
00006C98 6100 AA62                  		bsr.w	EniDec
00006C9C 205A                       		movea.l	(a2)+,a0
00006C9E 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006CA4 6100 ABD4                  		bsr.w	KosDec
00006CA8 6100 0000                  		bsr.w	LevelLayoutLoad
00006CAC 301A                       		move.w	(a2)+,d0
00006CAE 3012                       		move.w	(a2),d0
00006CB0 0240 00FF                  		andi.w	#$FF,d0
00006CB4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006CBA 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006CBC 700C                       		moveq	#$C,d0		; use SB3 pallet
00006CBE                            
00006CBE                            MLB_ChkSBZPal:
00006CBE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006CC4 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006CC6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006CCC 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006CCE                            
00006CCE                            MLB_UsePal0E:
00006CCE 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006CD0                            
00006CD0                            MLB_NormalPal:
00006CD0 6100 B408                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006CD4 245F                       		movea.l	(sp)+,a2
00006CD6 584A                       		addq.w	#4,a2
00006CD8 7000                       		moveq	#0,d0
00006CDA 1012                       		move.b	(a2),d0
00006CDC 6700                       		beq.s	locret_6D10
00006CDE 6100 A87E                  		bsr.w	LoadPLC		; load pattern load cues
00006CE2                            
00006CE2                            locret_6D10:
00006CE2 4E75                       		rts	
00006CE4                            ; End of function MainLoadBlockLoad
00006CE4                            
00006CE4                            ; ---------------------------------------------------------------------------
00006CE4                            ; Level	layout loading subroutine
00006CE4                            ; ---------------------------------------------------------------------------
00006CE4                            
00006CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE4                            
00006CE4                            
00006CE4                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006CE4 47F8 A400                  		lea	($FFFFA400).w,a3
00006CE8 323C 01FF                  		move.w	#$1FF,d1
00006CEC 7000                       		moveq	#0,d0
00006CEE                            
00006CEE                            LevLoad_ClrRam:
00006CEE 26C0                       		move.l	d0,(a3)+
00006CF0 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006CF4                            
00006CF4 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006CF8 7200                       		moveq	#0,d1
00006CFA 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006CFE 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006D02 7202                       		moveq	#2,d1
00006D04                            ; End of function LevelLayoutLoad
00006D04                            
00006D04                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006D04                            
00006D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D04                            
00006D04                            
00006D04                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006D04 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006D08 ED08                       		lsl.b	#6,d0
00006D0A EA48                       		lsr.w	#5,d0
00006D0C 3400                       		move.w	d0,d2
00006D0E D040                       		add.w	d0,d0
00006D10 D042                       		add.w	d2,d0
00006D12 D041                       		add.w	d1,d0
00006D14 43F9 0000 0000             		lea	(Level_Index).l,a1
00006D1A 3031 0000                  		move.w	(a1,d0.w),d0
00006D1E 43F1 0000                  		lea	(a1,d0.w),a1
00006D22 7200                       		moveq	#0,d1
00006D24 3401                       		move.w	d1,d2
00006D26 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006D28 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006D2A                            
00006D2A                            LevLoad_NumRows:
00006D2A 3001                       		move.w	d1,d0
00006D2C 204B                       		movea.l	a3,a0
00006D2E                            
00006D2E                            LevLoad_Row:
00006D2E 10D9                       		move.b	(a1)+,(a0)+
00006D30 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006D34 47EB 0080                  		lea	$80(a3),a3	; do next row
00006D38 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006D3C 4E75                       		rts	
00006D3E                            ; End of function LevelLayoutLoad2
00006D3E                            
00006D3E                            ; ---------------------------------------------------------------------------
00006D3E                            ; Dynamic screen resize	loading	subroutine
00006D3E                            ; ---------------------------------------------------------------------------
00006D3E                            
00006D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D3E                            
00006D3E                            
00006D3E                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006D3E 7000                       		moveq	#0,d0
00006D40 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D44 D040                       		add.w	d0,d0
00006D46 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006D4A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006D4E 7202                       		moveq	#2,d1
00006D50 3038 F726                  		move.w	($FFFFF726).w,d0
00006D54 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006D58 6700                       		beq.s	locret_6DAA
00006D5A 6400                       		bcc.s	loc_6DAC
00006D5C 4441                       		neg.w	d1
00006D5E 3038 F704                  		move.w	($FFFFF704).w,d0
00006D62 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006D66 6300                       		bls.s	loc_6DA0
00006D68 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006D6C 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006D72                            
00006D72                            loc_6DA0:
00006D72 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006D76 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006D7C                            
00006D7C                            locret_6DAA:
00006D7C 4E75                       		rts	
00006D7E                            ; ===========================================================================
00006D7E                            
00006D7E                            loc_6DAC:				; XREF: DynScrResizeLoad
00006D7E 3038 F704                  		move.w	($FFFFF704).w,d0
00006D82 5040                       		addq.w	#8,d0
00006D84 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006D88 6500                       		bcs.s	loc_6DC4
00006D8A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006D90 6700                       		beq.s	loc_6DC4
00006D92 D241                       		add.w	d1,d1
00006D94 D241                       		add.w	d1,d1
00006D96                            
00006D96                            loc_6DC4:
00006D96 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006D9A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006DA0 4E75                       		rts	
00006DA2                            ; End of function DynScrResizeLoad
00006DA2                            
00006DA2                            ; ===========================================================================
00006DA2                            ; ---------------------------------------------------------------------------
00006DA2                            ; Offset index for dynamic screen resizing
00006DA2                            ; ---------------------------------------------------------------------------
00006DA2 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006DA6 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006DAA 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006DAE 0000                       		dc.w Resize_Ending-Resize_Index
00006DB0                            ; ===========================================================================
00006DB0                            ; ---------------------------------------------------------------------------
00006DB0                            ; Green	Hill Zone dynamic screen resizing
00006DB0                            ; ---------------------------------------------------------------------------
00006DB0                            
00006DB0                            Resize_GHZ:				; XREF: Resize_Index
00006DB0 7000                       		moveq	#0,d0
00006DB2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006DB6 D040                       		add.w	d0,d0
00006DB8 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006DBC 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006DC0                            ; ===========================================================================
00006DC0 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006DC2 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006DC4 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006DC6                            ; ===========================================================================
00006DC6                            
00006DC6                            Resize_GHZ1:
00006DC6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006DCC 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006DD2 6500                       		bcs.s	locret_6E08	; if not, branch
00006DD4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006DDA                            
00006DDA                            locret_6E08:
00006DDA 4E75                       		rts	
00006DDC                            ; ===========================================================================
00006DDC                            
00006DDC                            Resize_GHZ2:
00006DDC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006DE2 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006DE8 6500                       		bcs.s	locret_6E3A
00006DEA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006DF0 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006DF6 6500                       		bcs.s	locret_6E3A
00006DF8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006DFE 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006E04 6500                       		bcs.s	locret_6E3A
00006E06 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E0C                            
00006E0C                            locret_6E3A:
00006E0C 4E75                       		rts	
00006E0E                            ; ===========================================================================
00006E0E                            
00006E0E                            Resize_GHZ3:
00006E0E 7000                       		moveq	#0,d0
00006E10 1038 F742                  		move.b	($FFFFF742).w,d0
00006E14 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006E18 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006E1C                            ; ===========================================================================
00006E1C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006E1E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006E20 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006E22                            ; ===========================================================================
00006E22                            
00006E22                            Resize_GHZ3main:
00006E22 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E28 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006E2E 6500                       		bcs.s	locret_6E96
00006E30 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006E36 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006E3C 6500                       		bcs.s	locret_6E96
00006E3E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006E44 6500                       		bcs.s	loc_6E98
00006E46 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E4C 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006E52 6400                       		bcc.s	loc_6E8E
00006E54 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006E5A 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006E60                            
00006E60                            loc_6E8E:
00006E60 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006E66 6400                       		bcc.s	loc_6E98
00006E68                            
00006E68                            locret_6E96:
00006E68 4E75                       		rts	
00006E6A                            ; ===========================================================================
00006E6A                            
00006E6A                            loc_6E98:
00006E6A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E70 5438 F742                  		addq.b	#2,($FFFFF742).w
00006E74 4E75                       		rts	
00006E76                            ; ===========================================================================
00006E76                            
00006E76                            Resize_GHZ3boss:
00006E76 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006E7C 6400                       		bcc.s	loc_6EB0
00006E7E 5538 F742                  		subq.b	#2,($FFFFF742).w
00006E82                            
00006E82                            loc_6EB0:
00006E82 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006E88 6500                       		bcs.s	locret_6EE8
00006E8A 6100 0000                  		bsr.w	SingleObjLoad
00006E8E 6600                       		bne.s	loc_6ED0
00006E90 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006E94 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006E9A 337C 0280 000C             		move.w	#$280,$C(a1)
00006EA0                            
00006EA0                            loc_6ED0:
00006EA0 303C 008C                  		move.w	#$8C,d0
00006EA4 6100 A4CE                  		bsr.w	PlaySound	; play boss music
00006EA8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006EAE 5438 F742                  		addq.b	#2,($FFFFF742).w
00006EB2 7011                       		moveq	#$11,d0
00006EB4 6000 A6A8                  		bra.w	LoadPLC		; load boss patterns
00006EB8                            ; ===========================================================================
00006EB8                            
00006EB8                            locret_6EE8:
00006EB8 4E75                       		rts	
00006EBA                            ; ===========================================================================
00006EBA                            
00006EBA                            Resize_GHZ3end:
00006EBA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006EC0 4E75                       		rts	
00006EC2                            ; ===========================================================================
00006EC2                            ; ---------------------------------------------------------------------------
00006EC2                            ; Labyrinth Zone dynamic screen	resizing
00006EC2                            ; ---------------------------------------------------------------------------
00006EC2                            
00006EC2                            Resize_LZ:				; XREF: Resize_Index
00006EC2 7000                       		moveq	#0,d0
00006EC4 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EC8 D040                       		add.w	d0,d0
00006ECA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00006ECE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00006ED2                            ; ===========================================================================
00006ED2 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00006ED4 0000                       		dc.w Resize_LZ12-Resize_LZx
00006ED6 0000                       		dc.w Resize_LZ3-Resize_LZx
00006ED8 0000                       		dc.w Resize_SBZ3-Resize_LZx
00006EDA                            ; ===========================================================================
00006EDA                            
00006EDA                            Resize_LZ12:
00006EDA 4E75                       		rts	
00006EDC                            ; ===========================================================================
00006EDC                            
00006EDC                            Resize_LZ3:
00006EDC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00006EE0 6700                       		beq.s	loc_6F28	; if not, branch
00006EE2 43F8 A506                  		lea	($FFFFA506).w,a1
00006EE6 0C11 0007                  		cmpi.b	#7,(a1)
00006EEA 6700                       		beq.s	loc_6F28
00006EEC 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00006EF0 303C 00B7                  		move.w	#$B7,d0
00006EF4 6100 A484                  		bsr.w	PlaySound_Special ; play rumbling sound
00006EF8                            
00006EF8                            loc_6F28:
00006EF8 4A38 F742                  		tst.b	($FFFFF742).w
00006EFC 6600                       		bne.s	locret_6F64
00006EFE 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00006F04 6500                       		bcs.s	locret_6F62
00006F06 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00006F0C 6400                       		bcc.s	locret_6F62
00006F0E 6100 0000                  		bsr.w	SingleObjLoad
00006F12 6600                       		bne.s	loc_6F4A
00006F14 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00006F18                            
00006F18                            loc_6F4A:
00006F18 303C 008C                  		move.w	#$8C,d0
00006F1C 6100 A456                  		bsr.w	PlaySound	; play boss music
00006F20 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006F26 5438 F742                  		addq.b	#2,($FFFFF742).w
00006F2A 7011                       		moveq	#$11,d0
00006F2C 6000 A630                  		bra.w	LoadPLC		; load boss patterns
00006F30                            ; ===========================================================================
00006F30                            
00006F30                            locret_6F62:
00006F30 4E75                       		rts	
00006F32                            ; ===========================================================================
00006F32                            
00006F32                            locret_6F64:
00006F32 4E75                       		rts	
00006F34                            ; ===========================================================================
00006F34                            
00006F34                            Resize_SBZ3:
00006F34 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006F3A 6500                       		bcs.s	locret_6F8C
00006F3C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00006F42 6400                       		bcc.s	locret_6F8C	; if not, branch
00006F44 4238 FE30                  		clr.b	($FFFFFE30).w
00006F48 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00006F4E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00006F54 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00006F5A                            
00006F5A                            locret_6F8C:
00006F5A 4E75                       		rts	
00006F5C                            ; ===========================================================================
00006F5C                            ; ---------------------------------------------------------------------------
00006F5C                            ; Marble Zone dynamic screen resizing
00006F5C                            ; ---------------------------------------------------------------------------
00006F5C                            
00006F5C                            Resize_MZ:				; XREF: Resize_Index
00006F5C 7000                       		moveq	#0,d0
00006F5E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006F62 D040                       		add.w	d0,d0
00006F64 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00006F68 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00006F6C                            ; ===========================================================================
00006F6C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00006F6E 0000                       		dc.w Resize_MZ2-Resize_MZx
00006F70 0000                       		dc.w Resize_MZ3-Resize_MZx
00006F72                            ; ===========================================================================
00006F72                            
00006F72                            Resize_MZ1:
00006F72 7000                       		moveq	#0,d0
00006F74 1038 F742                  		move.b	($FFFFF742).w,d0
00006F78 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00006F7C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00006F80                            ; ===========================================================================
00006F80 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00006F82 0000                       		dc.w loc_6FEA-off_6FB2
00006F84 0000                       		dc.w loc_702E-off_6FB2
00006F86 0000                       		dc.w loc_7050-off_6FB2
00006F88                            ; ===========================================================================
00006F88                            
00006F88                            loc_6FBA:
00006F88 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00006F8E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00006F94 6500                       		bcs.s	locret_6FE8
00006F96 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00006F9C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006FA2 6500                       		bcs.s	locret_6FE8
00006FA4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00006FAA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FB0 6500                       		bcs.s	locret_6FE8
00006FB2 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FB6                            
00006FB6                            locret_6FE8:
00006FB6 4E75                       		rts	
00006FB8                            ; ===========================================================================
00006FB8                            
00006FB8                            loc_6FEA:
00006FB8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FBE 6400                       		bcc.s	loc_6FF8
00006FC0 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FC4 4E75                       		rts	
00006FC6                            ; ===========================================================================
00006FC6                            
00006FC6                            loc_6FF8:
00006FC6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00006FCC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00006FD2 6400                       		bcc.s	locret_702C
00006FD4 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00006FDA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00006FE0 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00006FE6 6400                       		bcc.s	locret_702C
00006FE8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00006FEE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00006FF4 6500                       		bcs.s	locret_702C
00006FF6 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FFA                            
00006FFA                            locret_702C:
00006FFA 4E75                       		rts	
00006FFC                            ; ===========================================================================
00006FFC                            
00006FFC                            loc_702E:
00006FFC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007002 6400                       		bcc.s	loc_703C
00007004 5538 F742                  		subq.b	#2,($FFFFF742).w
00007008 4E75                       		rts	
0000700A                            ; ===========================================================================
0000700A                            
0000700A                            loc_703C:
0000700A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007010 6500                       		bcs.s	locret_704E
00007012 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007018 5438 F742                  		addq.b	#2,($FFFFF742).w
0000701C                            
0000701C                            locret_704E:
0000701C 4E75                       		rts	
0000701E                            ; ===========================================================================
0000701E                            
0000701E                            loc_7050:
0000701E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007024 6500                       		bcs.s	locret_7072
00007026 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000702C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007032 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007038 6500                       		bcs.s	locret_7072
0000703A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007040                            
00007040                            locret_7072:
00007040 4E75                       		rts	
00007042                            ; ===========================================================================
00007042                            
00007042                            Resize_MZ2:
00007042 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007048 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000704E 6500                       		bcs.s	locret_7088
00007050 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007056                            
00007056                            locret_7088:
00007056 4E75                       		rts	
00007058                            ; ===========================================================================
00007058                            
00007058                            Resize_MZ3:
00007058 7000                       		moveq	#0,d0
0000705A 1038 F742                  		move.b	($FFFFF742).w,d0
0000705E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007062 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007066                            ; ===========================================================================
00007066 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007068 0000                       		dc.w Resize_MZ3end-off_7098
0000706A                            ; ===========================================================================
0000706A                            
0000706A                            Resize_MZ3boss:
0000706A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007070 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007076 6500                       		bcs.s	locret_70E8
00007078 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000707E 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007084 6500                       		bcs.s	locret_70E8
00007086 6100 0000                  		bsr.w	SingleObjLoad
0000708A 6600                       		bne.s	loc_70D0
0000708C 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007090 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007096 337C 022C 000C             		move.w	#$22C,$C(a1)
0000709C                            
0000709C                            loc_70D0:
0000709C 303C 008C                  		move.w	#$8C,d0
000070A0 6100 A2D2                  		bsr.w	PlaySound	; play boss music
000070A4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000070AA 5438 F742                  		addq.b	#2,($FFFFF742).w
000070AE 7011                       		moveq	#$11,d0
000070B0 6000 A4AC                  		bra.w	LoadPLC		; load boss patterns
000070B4                            ; ===========================================================================
000070B4                            
000070B4                            locret_70E8:
000070B4 4E75                       		rts	
000070B6                            ; ===========================================================================
000070B6                            
000070B6                            Resize_MZ3end:
000070B6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000070BC 4E75                       		rts	
000070BE                            ; ===========================================================================
000070BE                            ; ---------------------------------------------------------------------------
000070BE                            ; Star Light Zone dynamic screen resizing
000070BE                            ; ---------------------------------------------------------------------------
000070BE                            
000070BE                            Resize_SLZ:				; XREF: Resize_Index
000070BE 7000                       		moveq	#0,d0
000070C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070C4 D040                       		add.w	d0,d0
000070C6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000070CA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000070CE                            ; ===========================================================================
000070CE 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000070D0 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000070D2 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000070D4                            ; ===========================================================================
000070D4                            
000070D4                            Resize_SLZ12:
000070D4 4E75                       		rts	
000070D6                            ; ===========================================================================
000070D6                            
000070D6                            Resize_SLZ3:
000070D6 7000                       		moveq	#0,d0
000070D8 1038 F742                  		move.b	($FFFFF742).w,d0
000070DC 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000070E0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000070E4                            ; ===========================================================================
000070E4 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000070E6 0000                       		dc.w Resize_SLZ3boss-off_7118
000070E8 0000                       		dc.w Resize_SLZ3end-off_7118
000070EA                            ; ===========================================================================
000070EA                            
000070EA                            Resize_SLZ3main:
000070EA 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000070F0 6500                       		bcs.s	locret_7130
000070F2 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000070F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000070FC                            
000070FC                            locret_7130:
000070FC 4E75                       		rts	
000070FE                            ; ===========================================================================
000070FE                            
000070FE                            Resize_SLZ3boss:
000070FE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007104 6500                       		bcs.s	locret_715C
00007106 6100 0000                  		bsr.w	SingleObjLoad
0000710A 6600                       		bne.s	loc_7144
0000710C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007110                            
00007110                            loc_7144:
00007110 303C 008C                  		move.w	#$8C,d0
00007114 6100 A25E                  		bsr.w	PlaySound	; play boss music
00007118 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000711E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007122 7011                       		moveq	#$11,d0
00007124 6000 A438                  		bra.w	LoadPLC		; load boss patterns
00007128                            ; ===========================================================================
00007128                            
00007128                            locret_715C:
00007128 4E75                       		rts	
0000712A                            ; ===========================================================================
0000712A                            
0000712A                            Resize_SLZ3end:
0000712A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007130 4E75                       		rts
00007132 4E75                       		rts
00007134                            ; ===========================================================================
00007134                            ; ---------------------------------------------------------------------------
00007134                            ; Spring Yard Zone dynamic screen resizing
00007134                            ; ---------------------------------------------------------------------------
00007134                            
00007134                            Resize_SYZ:				; XREF: Resize_Index
00007134 7000                       		moveq	#0,d0
00007136 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000713A D040                       		add.w	d0,d0
0000713C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007140 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007144                            ; ===========================================================================
00007144 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007146 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007148 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000714A                            ; ===========================================================================
0000714A                            
0000714A                            Resize_SYZ1:
0000714A 4E75                       		rts	
0000714C                            ; ===========================================================================
0000714C                            
0000714C                            Resize_SYZ2:
0000714C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007152 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007158 6500                       		bcs.s	locret_71A2
0000715A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007160 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007166 6500                       		bcs.s	locret_71A2
00007168 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000716E                            
0000716E                            locret_71A2:
0000716E 4E75                       		rts	
00007170                            ; ===========================================================================
00007170                            
00007170                            Resize_SYZ3:
00007170 7000                       		moveq	#0,d0
00007172 1038 F742                  		move.b	($FFFFF742).w,d0
00007176 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000717A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000717E                            ; ===========================================================================
0000717E 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007180 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007182 0000                       		dc.w Resize_SYZ3end-off_71B2
00007184                            ; ===========================================================================
00007184                            
00007184                            Resize_SYZ3main:
00007184 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000718A 6500                       		bcs.s	locret_71CE
0000718C 6100 0000                  		bsr.w	SingleObjLoad
00007190 6600                       		bne.s	locret_71CE
00007192 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007196 5438 F742                  		addq.b	#2,($FFFFF742).w
0000719A                            
0000719A                            locret_71CE:
0000719A 4E75                       		rts	
0000719C                            ; ===========================================================================
0000719C                            
0000719C                            Resize_SYZ3boss:
0000719C 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000071A2 6500                       		bcs.s	locret_7200
000071A4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000071AA 6100 0000                  		bsr.w	SingleObjLoad
000071AE 6600                       		bne.s	loc_71EC
000071B0 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000071B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000071B8                            
000071B8                            loc_71EC:
000071B8 303C 008C                  		move.w	#$8C,d0
000071BC 6100 A1B6                  		bsr.w	PlaySound	; play boss music
000071C0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071C6 7011                       		moveq	#$11,d0
000071C8 6000 A394                  		bra.w	LoadPLC		; load boss patterns
000071CC                            ; ===========================================================================
000071CC                            
000071CC                            locret_7200:
000071CC 4E75                       		rts	
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            Resize_SYZ3end:
000071CE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071D4 4E75                       		rts	
000071D6                            ; ===========================================================================
000071D6                            ; ---------------------------------------------------------------------------
000071D6                            ; Scrap	Brain Zone dynamic screen resizing
000071D6                            ; ---------------------------------------------------------------------------
000071D6                            
000071D6                            Resize_SBZ:				; XREF: Resize_Index
000071D6 7000                       		moveq	#0,d0
000071D8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000071DC D040                       		add.w	d0,d0
000071DE 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000071E2 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000071E6                            ; ===========================================================================
000071E6 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000071E8 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000071EA 0000                       		dc.w Resize_FZ-Resize_SBZx
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            Resize_SBZ1:
000071EC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071F2 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000071F8 6500                       		bcs.s	locret_7242
000071FA 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007200 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007206 6500                       		bcs.s	locret_7242
00007208 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000720E                            
0000720E                            locret_7242:
0000720E 4E75                       		rts	
00007210                            ; ===========================================================================
00007210                            
00007210                            Resize_SBZ2:
00007210 7000                       		moveq	#0,d0
00007212 1038 F742                  		move.b	($FFFFF742).w,d0
00007216 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000721A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000721E                            ; ===========================================================================
0000721E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007220 0000                       		dc.w Resize_SBZ2boss-off_7252
00007222 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007224 0000                       		dc.w Resize_SBZ2end-off_7252
00007226                            ; ===========================================================================
00007226                            
00007226                            Resize_SBZ2main:
00007226 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000722C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007232 6500                       		bcs.s	locret_727A
00007234 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000723A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007240 6500                       		bcs.s	locret_727A
00007242 5438 F742                  		addq.b	#2,($FFFFF742).w
00007246                            
00007246                            locret_727A:
00007246 4E75                       		rts	
00007248                            ; ===========================================================================
00007248                            
00007248                            Resize_SBZ2boss:
00007248 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000724E 6500                       		bcs.s	locret_7298
00007250 6100 0000                  		bsr.w	SingleObjLoad
00007254 6600                       		bne.s	locret_7298
00007256 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000725A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000725E 701E                       		moveq	#$1E,d0
00007260 6000 A2FC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007264                            ; ===========================================================================
00007264                            
00007264                            locret_7298:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_SBZ2boss2:
00007266 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000726C 6500                       		bcs.s	loc_72B6
0000726E 6100 0000                  		bsr.w	SingleObjLoad
00007272 6600                       		bne.s	loc_72B0
00007274 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007278 5438 F742                  		addq.b	#2,($FFFFF742).w
0000727C                            
0000727C                            loc_72B0:
0000727C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007282                            
00007282                            loc_72B6:
00007282 6000                       		bra.s	loc_72C2
00007284                            ; ===========================================================================
00007284                            
00007284                            Resize_SBZ2end:
00007284 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000728A 6500                       		bcs.s	loc_72C2
0000728C 4E75                       		rts	
0000728E                            ; ===========================================================================
0000728E                            
0000728E                            loc_72C2:
0000728E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007294 4E75                       		rts	
00007296                            ; ===========================================================================
00007296                            
00007296                            Resize_FZ:
00007296 7000                       		moveq	#0,d0
00007298 1038 F742                  		move.b	($FFFFF742).w,d0
0000729C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000072A0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000072A4                            ; ===========================================================================
000072A4 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000072A8 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000072AC 0000                       		dc.w Resize_FZend2-off_72D8
000072AE                            ; ===========================================================================
000072AE                            
000072AE                            Resize_FZmain:
000072AE 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000072B4 6500                       		bcs.s	loc_72F4
000072B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000072BA 701F                       		moveq	#$1F,d0
000072BC 6100 A2A0                  		bsr.w	LoadPLC		; load FZ boss patterns
000072C0                            
000072C0                            loc_72F4:
000072C0 60CC                       		bra.s	loc_72C2
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_FZboss:
000072C2 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000072C8 6500                       		bcs.s	loc_7312
000072CA 6100 0000                  		bsr.w	SingleObjLoad
000072CE 6600                       		bne.s	loc_7312
000072D0 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000072D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000072D8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000072DE                            
000072DE                            loc_7312:
000072DE 60AE                       		bra.s	loc_72C2
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            Resize_FZend:
000072E0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000072E6 6500                       		bcs.s	loc_7320
000072E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000072EC                            
000072EC                            loc_7320:
000072EC 60A0                       		bra.s	loc_72C2
000072EE                            ; ===========================================================================
000072EE                            
000072EE                            locret_7322:
000072EE 4E75                       		rts	
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            Resize_FZend2:
000072F0 609C                       		bra.s	loc_72C2
000072F2                            ; ===========================================================================
000072F2                            ; ---------------------------------------------------------------------------
000072F2                            ; Ending sequence dynamic screen resizing (empty)
000072F2                            ; ---------------------------------------------------------------------------
000072F2                            
000072F2                            Resize_Ending:				; XREF: Resize_Index
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            ; Object 11 - GHZ bridge
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            
000072F4                            Obj11:					; XREF: Obj_Index
000072F4 7000                       		moveq	#0,d0
000072F6 1028 0024                  		move.b	$24(a0),d0
000072FA 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000072FE 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007302                            ; ===========================================================================
00007302 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007306 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000730A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000730E                            ; ===========================================================================
0000730E                            
0000730E                            Obj11_Main:				; XREF: Obj11_Index
0000730E 5428 0024                  		addq.b	#2,$24(a0)
00007312 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000731A 317C 438E 0002             		move.w	#$438E,2(a0)
00007320 117C 0004 0001             		move.b	#4,1(a0)
00007326 117C 0003 0018             		move.b	#3,$18(a0)
0000732C 117C 0080 0019             		move.b	#$80,$19(a0)
00007332 3428 000C                  		move.w	$C(a0),d2
00007336 3628 0008                  		move.w	8(a0),d3
0000733A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000733C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007340 7200                       		moveq	#0,d1
00007342 1212                       		move.b	(a2),d1		; copy a2 to d1
00007344 14FC 0000                  		move.b	#0,(a2)+
00007348 3001                       		move.w	d1,d0
0000734A E248                       		lsr.w	#1,d0
0000734C E948                       		lsl.w	#4,d0
0000734E 9640                       		sub.w	d0,d3
00007350 5501                       		subq.b	#2,d1
00007352 6500                       		bcs.s	Obj11_Action
00007354                            
00007354                            Obj11_MakeBdg:
00007354 6100 0000                  		bsr.w	SingleObjLoad
00007358 6600                       		bne.s	Obj11_Action
0000735A 5228 0028                  		addq.b	#1,$28(a0)
0000735E B668 0008                  		cmp.w	8(a0),d3
00007362 6600                       		bne.s	loc_73B8
00007364 0643 0010                  		addi.w	#$10,d3
00007368 3142 000C                  		move.w	d2,$C(a0)
0000736C 3142 003C                  		move.w	d2,$3C(a0)
00007370 3A08                       		move.w	a0,d5
00007372 0445 D000                  		subi.w	#-$3000,d5
00007376 EC4D                       		lsr.w	#6,d5
00007378 0245 007F                  		andi.w	#$7F,d5
0000737C 14C5                       		move.b	d5,(a2)+
0000737E 5228 0028                  		addq.b	#1,$28(a0)
00007382                            
00007382                            loc_73B8:				; XREF: ROM:00007398j
00007382 3A09                       		move.w	a1,d5
00007384 0445 D000                  		subi.w	#-$3000,d5
00007388 EC4D                       		lsr.w	#6,d5
0000738A 0245 007F                  		andi.w	#$7F,d5
0000738E 14C5                       		move.b	d5,(a2)+
00007390 137C 000A 0024             		move.b	#$A,$24(a1)
00007396 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007398 3342 000C                  		move.w	d2,$C(a1)
0000739C 3342 003C                  		move.w	d2,$3C(a1)
000073A0 3343 0008                  		move.w	d3,8(a1)
000073A4 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000073AC 337C 438E 0002             		move.w	#$438E,2(a1)
000073B2 137C 0004 0001             		move.b	#4,1(a1)
000073B8 137C 0003 0018             		move.b	#3,$18(a1)
000073BE 137C 0008 0019             		move.b	#8,$19(a1)
000073C4 0643 0010                  		addi.w	#$10,d3
000073C8 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000073CC                            
000073CC                            Obj11_Action:				; XREF: Obj11_Index
000073CC 6100                       		bsr.s	Obj11_Solid
000073CE 4A28 003E                  		tst.b	$3E(a0)
000073D2 6700                       		beq.s	Obj11_Display
000073D4 5928 003E                  		subq.b	#4,$3E(a0)
000073D8 6100 0000                  		bsr.w	Obj11_Bend
000073DC                            
000073DC                            Obj11_Display:
000073DC 6100 0000                  		bsr.w	DisplaySprite
000073E0 6000 0000                  		bra.w	Obj11_ChkDel
000073E4                            
000073E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E4                            
000073E4                            
000073E4                            Obj11_Solid:				; XREF: Obj11_Action
000073E4 7200                       		moveq	#0,d1
000073E6 1228 0028                  		move.b	$28(a0),d1
000073EA E749                       		lsl.w	#3,d1
000073EC 3401                       		move.w	d1,d2
000073EE 5041                       		addq.w	#8,d1
000073F0 D442                       		add.w	d2,d2
000073F2 43F8 D000                  		lea	($FFFFD000).w,a1
000073F6 4A69 0012                  		tst.w	$12(a1)
000073FA 6B00 0000                  		bmi.w	locret_751E
000073FE 3029 0008                  		move.w	8(a1),d0
00007402 9068 0008                  		sub.w	8(a0),d0
00007406 D041                       		add.w	d1,d0
00007408 6B00 0000                  		bmi.w	locret_751E
0000740C B042                       		cmp.w	d2,d0
0000740E 6400 0000                  		bcc.w	locret_751E
00007412 6000                       		bra.s	Platform2
00007414                            ; End of function Obj11_Solid
00007414                            
00007414                            ; ---------------------------------------------------------------------------
00007414                            ; Platform subroutine
00007414                            ; ---------------------------------------------------------------------------
00007414                            
00007414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007414                            
00007414                            
00007414                            PlatformObject:
00007414 43F8 D000                  		lea	($FFFFD000).w,a1
00007418 4A69 0012                  		tst.w	$12(a1)
0000741C 6B00 0000                  		bmi.w	locret_751E
00007420 3029 0008                  		move.w	8(a1),d0
00007424 9068 0008                  		sub.w	8(a0),d0
00007428 D041                       		add.w	d1,d0
0000742A 6B00 0000                  		bmi.w	locret_751E
0000742E D241                       		add.w	d1,d1
00007430 B041                       		cmp.w	d1,d0
00007432 6400 0000                  		bcc.w	locret_751E
00007436                            
00007436                            Platform2:
00007436 3028 000C                  		move.w	$C(a0),d0
0000743A 5140                       		subq.w	#8,d0
0000743C                            
0000743C                            Platform3:
0000743C 3429 000C                  		move.w	$C(a1),d2
00007440 1229 0016                  		move.b	$16(a1),d1
00007444 4881                       		ext.w	d1
00007446 D242                       		add.w	d2,d1
00007448 5841                       		addq.w	#4,d1
0000744A 9041                       		sub.w	d1,d0
0000744C 6200 0000                  		bhi.w	locret_751E
00007450 0C40 FFF0                  		cmpi.w	#-$10,d0
00007454 6500 0000                  		bcs.w	locret_751E
00007458 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000745C 6B00 0000                  		bmi.w	locret_751E
00007460 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007466 6400 0000                  		bcc.w	locret_751E
0000746A D440                       		add.w	d0,d2
0000746C 5642                       		addq.w	#3,d2
0000746E 3342 000C                  		move.w	d2,$C(a1)
00007472 5428 0024                  		addq.b	#2,$24(a0)
00007476                            
00007476                            loc_74AE:
00007476 0829 0003 0022             		btst	#3,$22(a1)
0000747C 6700                       		beq.s	loc_74DC
0000747E 7000                       		moveq	#0,d0
00007480 1029 003D                  		move.b	$3D(a1),d0
00007484 ED48                       		lsl.w	#6,d0
00007486 0680 00FF D000             		addi.l	#$FFD000,d0
0000748C 2440                       		movea.l	d0,a2
0000748E 08AA 0003 0022             		bclr	#3,$22(a2)
00007494 422A 0025                  		clr.b	$25(a2)
00007498 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000749E 6600                       		bne.s	loc_74DC
000074A0 552A 0024                  		subq.b	#2,$24(a2)
000074A4                            
000074A4                            loc_74DC:
000074A4 3008                       		move.w	a0,d0
000074A6 0440 D000                  		subi.w	#-$3000,d0
000074AA EC48                       		lsr.w	#6,d0
000074AC 0240 007F                  		andi.w	#$7F,d0
000074B0 1340 003D                  		move.b	d0,$3D(a1)
000074B4 137C 0000 0026             		move.b	#0,$26(a1)
000074BA 337C 0000 0012             		move.w	#0,$12(a1)
000074C0 3369 0010 0014             		move.w	$10(a1),$14(a1)
000074C6 0829 0001 0022             		btst	#1,$22(a1)
000074CC 6700                       		beq.s	loc_7512
000074CE 2F08                       		move.l	a0,-(sp)
000074D0 2049                       		movea.l	a1,a0
000074D2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000074D8 205F                       		movea.l	(sp)+,a0
000074DA                            
000074DA                            loc_7512:
000074DA 08E9 0003 0022             		bset	#3,$22(a1)
000074E0 08E8 0003 0022             		bset	#3,$22(a0)
000074E6                            
000074E6                            locret_751E:
000074E6 4E75                       		rts	
000074E8                            ; End of function PlatformObject
000074E8                            
000074E8                            ; ---------------------------------------------------------------------------
000074E8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000074E8                            ; ---------------------------------------------------------------------------
000074E8                            
000074E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074E8                            
000074E8                            
000074E8                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000074E8 43F8 D000                  		lea	($FFFFD000).w,a1
000074EC 4A69 0012                  		tst.w	$12(a1)
000074F0 6B00 FFF4                  		bmi.w	locret_751E
000074F4 3029 0008                  		move.w	8(a1),d0
000074F8 9068 0008                  		sub.w	8(a0),d0
000074FC D041                       		add.w	d1,d0
000074FE 6BE6                       		bmi.s	locret_751E
00007500 D241                       		add.w	d1,d1
00007502 B041                       		cmp.w	d1,d0
00007504 64E0                       		bcc.s	locret_751E
00007506 0828 0000 0001             		btst	#0,1(a0)
0000750C 6700                       		beq.s	loc_754A
0000750E 4640                       		not.w	d0
00007510 D041                       		add.w	d1,d0
00007512                            
00007512                            loc_754A:
00007512 E248                       		lsr.w	#1,d0
00007514 7600                       		moveq	#0,d3
00007516 1632 0000                  		move.b	(a2,d0.w),d3
0000751A 3028 000C                  		move.w	$C(a0),d0
0000751E 9043                       		sub.w	d3,d0
00007520 6000 FF1A                  		bra.w	Platform3
00007524                            ; End of function SlopeObject
00007524                            
00007524                            
00007524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007524                            
00007524                            
00007524                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007524 43F8 D000                  		lea	($FFFFD000).w,a1
00007528 4A69 0012                  		tst.w	$12(a1)
0000752C 6B00 FFB8                  		bmi.w	locret_751E
00007530 3029 0008                  		move.w	8(a1),d0
00007534 9068 0008                  		sub.w	8(a0),d0
00007538 D041                       		add.w	d1,d0
0000753A 6B00 FFAA                  		bmi.w	locret_751E
0000753E D241                       		add.w	d1,d1
00007540 B041                       		cmp.w	d1,d0
00007542 6400 FFA2                  		bcc.w	locret_751E
00007546 3028 000C                  		move.w	$C(a0),d0
0000754A 9043                       		sub.w	d3,d0
0000754C 6000 FEEE                  		bra.w	Platform3
00007550                            ; End of function Obj15_Solid
00007550                            
00007550                            ; ===========================================================================
00007550                            
00007550                            Obj11_Action2:				; XREF: Obj11_Index
00007550 6100                       		bsr.s	Obj11_WalkOff
00007552 6100 0000                  		bsr.w	DisplaySprite
00007556 6000 0000                  		bra.w	Obj11_ChkDel
0000755A                            
0000755A                            ; ---------------------------------------------------------------------------
0000755A                            ; Subroutine allowing Sonic to walk off a bridge
0000755A                            ; ---------------------------------------------------------------------------
0000755A                            
0000755A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000755A                            
0000755A                            
0000755A                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000755A 7200                       		moveq	#0,d1
0000755C 1228 0028                  		move.b	$28(a0),d1
00007560 E749                       		lsl.w	#3,d1
00007562 3401                       		move.w	d1,d2
00007564 5041                       		addq.w	#8,d1
00007566 6100                       		bsr.s	ExitPlatform2
00007568 6400                       		bcc.s	locret_75BE
0000756A E848                       		lsr.w	#4,d0
0000756C 1140 003F                  		move.b	d0,$3F(a0)
00007570 1028 003E                  		move.b	$3E(a0),d0
00007574 0C00 0040                  		cmpi.b	#$40,d0
00007578 6700                       		beq.s	loc_75B6
0000757A 5828 003E                  		addq.b	#4,$3E(a0)
0000757E                            
0000757E                            loc_75B6:
0000757E 6100 0000                  		bsr.w	Obj11_Bend
00007582 6100 0000                  		bsr.w	Obj11_MoveSonic
00007586                            
00007586                            locret_75BE:
00007586 4E75                       		rts	
00007588                            ; End of function Obj11_WalkOff
00007588                            
00007588                            ; ---------------------------------------------------------------------------
00007588                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007588                            ; ---------------------------------------------------------------------------
00007588                            
00007588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007588                            
00007588                            
00007588                            ExitPlatform:
00007588 3401                       		move.w	d1,d2
0000758A                            
0000758A                            ExitPlatform2:
0000758A D442                       		add.w	d2,d2
0000758C 43F8 D000                  		lea	($FFFFD000).w,a1
00007590 0829 0001 0022             		btst	#1,$22(a1)
00007596 6600                       		bne.s	loc_75E0
00007598 3029 0008                  		move.w	8(a1),d0
0000759C 9068 0008                  		sub.w	8(a0),d0
000075A0 D041                       		add.w	d1,d0
000075A2 6B00                       		bmi.s	loc_75E0
000075A4 B042                       		cmp.w	d2,d0
000075A6 6500                       		bcs.s	locret_75F2
000075A8                            
000075A8                            loc_75E0:
000075A8 08A9 0003 0022             		bclr	#3,$22(a1)
000075AE 117C 0002 0024             		move.b	#2,$24(a0)
000075B4 08A8 0003 0022             		bclr	#3,$22(a0)
000075BA                            
000075BA                            locret_75F2:
000075BA 4E75                       		rts	
000075BC                            ; End of function ExitPlatform
000075BC                            
000075BC                            
000075BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075BC                            
000075BC                            
000075BC                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000075BC 7000                       		moveq	#0,d0
000075BE 1028 003F                  		move.b	$3F(a0),d0
000075C2 1030 0029                  		move.b	$29(a0,d0.w),d0
000075C6 ED48                       		lsl.w	#6,d0
000075C8 0680 00FF D000             		addi.l	#$FFD000,d0
000075CE 2440                       		movea.l	d0,a2
000075D0 43F8 D000                  		lea	($FFFFD000).w,a1
000075D4 302A 000C                  		move.w	$C(a2),d0
000075D8 5140                       		subq.w	#8,d0
000075DA 7200                       		moveq	#0,d1
000075DC 1229 0016                  		move.b	$16(a1),d1
000075E0 9041                       		sub.w	d1,d0
000075E2 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000075E6 4E75                       		rts	
000075E8                            ; End of function Obj11_MoveSonic
000075E8                            
000075E8                            
000075E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E8                            
000075E8                            
000075E8                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000075E8 1028 003E                  		move.b	$3E(a0),d0
000075EC 6100 B3CA                  		bsr.w	CalcSine
000075F0 3800                       		move.w	d0,d4
000075F2 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000075F8 7000                       		moveq	#0,d0
000075FA 1028 0028                  		move.b	$28(a0),d0
000075FE E948                       		lsl.w	#4,d0
00007600 7600                       		moveq	#0,d3
00007602 1628 003F                  		move.b	$3F(a0),d3
00007606 3403                       		move.w	d3,d2
00007608 D640                       		add.w	d0,d3
0000760A 7A00                       		moveq	#0,d5
0000760C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007612 1A35 3000                  		move.b	(a5,d3.w),d5
00007616 0243 000F                  		andi.w	#$F,d3
0000761A E94B                       		lsl.w	#4,d3
0000761C 47F4 3000                  		lea	(a4,d3.w),a3
00007620 45E8 0029                  		lea	$29(a0),a2
00007624                            
00007624                            loc_765C:
00007624 7000                       		moveq	#0,d0
00007626 101A                       		move.b	(a2)+,d0
00007628 ED48                       		lsl.w	#6,d0
0000762A 0680 00FF D000             		addi.l	#$FFD000,d0
00007630 2240                       		movea.l	d0,a1
00007632 7000                       		moveq	#0,d0
00007634 101B                       		move.b	(a3)+,d0
00007636 5240                       		addq.w	#1,d0
00007638 C0C5                       		mulu.w	d5,d0
0000763A C0C4                       		mulu.w	d4,d0
0000763C 4840                       		swap	d0
0000763E D069 003C                  		add.w	$3C(a1),d0
00007642 3340 000C                  		move.w	d0,$C(a1)
00007646 51CA FFDC                  		dbf	d2,loc_765C
0000764A 7000                       		moveq	#0,d0
0000764C 1028 0028                  		move.b	$28(a0),d0
00007650 7600                       		moveq	#0,d3
00007652 1628 003F                  		move.b	$3F(a0),d3
00007656 5203                       		addq.b	#1,d3
00007658 9600                       		sub.b	d0,d3
0000765A 4403                       		neg.b	d3
0000765C 6B00                       		bmi.s	locret_76CA
0000765E 3403                       		move.w	d3,d2
00007660 E94B                       		lsl.w	#4,d3
00007662 47F4 3000                  		lea	(a4,d3.w),a3
00007666 D6C2                       		adda.w	d2,a3
00007668 5342                       		subq.w	#1,d2
0000766A 6500                       		bcs.s	locret_76CA
0000766C                            
0000766C                            loc_76A4:
0000766C 7000                       		moveq	#0,d0
0000766E 101A                       		move.b	(a2)+,d0
00007670 ED48                       		lsl.w	#6,d0
00007672 0680 00FF D000             		addi.l	#$FFD000,d0
00007678 2240                       		movea.l	d0,a1
0000767A 7000                       		moveq	#0,d0
0000767C 1023                       		move.b	-(a3),d0
0000767E 5240                       		addq.w	#1,d0
00007680 C0C5                       		mulu.w	d5,d0
00007682 C0C4                       		mulu.w	d4,d0
00007684 4840                       		swap	d0
00007686 D069 003C                  		add.w	$3C(a1),d0
0000768A 3340 000C                  		move.w	d0,$C(a1)
0000768E 51CA FFDC                  		dbf	d2,loc_76A4
00007692                            
00007692                            locret_76CA:
00007692 4E75                       		rts	
00007694                            ; End of function Obj11_Bend
00007694                            
00007694                            ; ===========================================================================
00007694                            ; ---------------------------------------------------------------------------
00007694                            ; GHZ bridge-bending data
00007694                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007694                            ; ---------------------------------------------------------------------------
00007694                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000077A4                            		even
000077A4                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000078A4                            		even
000078A4                            
000078A4                            ; ===========================================================================
000078A4                            
000078A4                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000078A4 3028 0008                  		move.w	8(a0),d0
000078A8 0240 FF80                  		andi.w	#$FF80,d0
000078AC 3238 F700                  		move.w	($FFFFF700).w,d1
000078B0 0441 0080                  		subi.w	#$80,d1
000078B4 0241 FF80                  		andi.w	#$FF80,d1
000078B8 9041                       		sub.w	d1,d0
000078BA 0C40 0280                  		cmpi.w	#$280,d0
000078BE 6200 0000                  		bhi.w	Obj11_DelAll
000078C2 4E75                       		rts	
000078C4                            ; ===========================================================================
000078C4                            
000078C4                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000078C4 7400                       		moveq	#0,d2
000078C6 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000078CA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000078CC 5302                       		subq.b	#1,d2		; subtract 1
000078CE 6500                       		bcs.s	Obj11_Delete
000078D0                            
000078D0                            Obj11_DelLoop:
000078D0 7000                       		moveq	#0,d0
000078D2 101A                       		move.b	(a2)+,d0
000078D4 ED48                       		lsl.w	#6,d0
000078D6 0680 00FF D000             		addi.l	#$FFD000,d0
000078DC 2240                       		movea.l	d0,a1
000078DE B048                       		cmp.w	a0,d0
000078E0 6700                       		beq.s	loc_791E
000078E2 6100 0000                  		bsr.w	DeleteObject2
000078E6                            
000078E6                            loc_791E:
000078E6 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000078EA                            
000078EA                            Obj11_Delete:
000078EA 6100 0000                  		bsr.w	DeleteObject
000078EE 4E75                       		rts	
000078F0                            ; ===========================================================================
000078F0                            
000078F0                            Obj11_Delete2:				; XREF: Obj11_Index
000078F0 6100 0000                  		bsr.w	DeleteObject
000078F4 4E75                       		rts	
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Obj11_Display2:				; XREF: Obj11_Index
000078F6 6100 0000                  		bsr.w	DisplaySprite
000078FA 4E75                       		rts	
000078FC                            ; ===========================================================================
000078FC                            ; ---------------------------------------------------------------------------
000078FC                            ; Sprite mappings - GHZ	bridge
000078FC                            ; ---------------------------------------------------------------------------
000078FC                            Map_obj11:
000078FC                            	include "_maps\obj11.asm"
000078FC                            ; ---------------------------------------------------------------------------
000078FC                            ; Sprite mappings - GHZ	bridge
000078FC                            ; ---------------------------------------------------------------------------
000078FC 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007900 0000                       		dc.w byte_794B-Map_obj11
00007902 01                         byte_793A:	dc.b 1
00007903 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007908 02                         byte_7940:	dc.b 2
00007909 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000790E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007913 01                         byte_794B:	dc.b 1
00007914 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000791A 00                         		even
0000791A 00                         		even
0000791A                            
0000791A                            ; ===========================================================================
0000791A                            ; ---------------------------------------------------------------------------
0000791A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000791A                            ;	    - spiked ball on a chain (SBZ)
0000791A                            ; ---------------------------------------------------------------------------
0000791A                            
0000791A                            Obj15:					; XREF: Obj_Index
0000791A 7000                       		moveq	#0,d0
0000791C 1028 0024                  		move.b	$24(a0),d0
00007920 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007924 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007928                            ; ===========================================================================
00007928 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000792C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007930 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007934 0000                       		dc.w Obj15_Action-Obj15_Index
00007936                            ; ===========================================================================
00007936                            
00007936                            Obj15_Main:				; XREF: Obj15_Index
00007936 5428 0024                  		addq.b	#2,$24(a0)
0000793A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007942 317C 4380 0002             		move.w	#$4380,2(a0)
00007948 117C 0004 0001             		move.b	#4,1(a0)
0000794E 117C 0003 0018             		move.b	#3,$18(a0)
00007954 117C 0018 0019             		move.b	#$18,$19(a0)
0000795A 117C 0008 0016             		move.b	#8,$16(a0)
00007960 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007966 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000796C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007972 6600                       		bne.s	Obj15_NotSLZ
00007974 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000797C 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007982 117C 0020 0019             		move.b	#$20,$19(a0)
00007988 117C 0010 0016             		move.b	#$10,$16(a0)
0000798E 117C 0099 0020             		move.b	#$99,$20(a0)
00007994                            
00007994                            Obj15_NotSLZ:
00007994 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000799A 6600                       		bne.s	Obj15_SetLength
0000799C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000079A4 317C 0391 0002             		move.w	#$391,2(a0)
000079AA 117C 0018 0019             		move.b	#$18,$19(a0)
000079B0 117C 0018 0016             		move.b	#$18,$16(a0)
000079B6 117C 0086 0020             		move.b	#$86,$20(a0)
000079BC 117C 000C 0024             		move.b	#$C,$24(a0)
000079C2                            
000079C2                            Obj15_SetLength:
000079C2 1810                       		move.b	0(a0),d4
000079C4 7200                       		moveq	#0,d1
000079C6 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000079CA 1212                       		move.b	(a2),d1		; move a2 to d1
000079CC 3F01                       		move.w	d1,-(sp)
000079CE 0241 000F                  		andi.w	#$F,d1
000079D2 14FC 0000                  		move.b	#0,(a2)+
000079D6 3601                       		move.w	d1,d3
000079D8 E94B                       		lsl.w	#4,d3
000079DA 5003                       		addq.b	#8,d3
000079DC 1143 003C                  		move.b	d3,$3C(a0)
000079E0 5103                       		subq.b	#8,d3
000079E2 4A28 001A                  		tst.b	$1A(a0)
000079E6 6700                       		beq.s	Obj15_MakeChain
000079E8 5003                       		addq.b	#8,d3
000079EA 5341                       		subq.w	#1,d1
000079EC                            
000079EC                            Obj15_MakeChain:
000079EC 6100 0000                  		bsr.w	SingleObjLoad
000079F0 6600                       		bne.s	loc_7A92
000079F2 5228 0028                  		addq.b	#1,$28(a0)
000079F6 3A09                       		move.w	a1,d5
000079F8 0445 D000                  		subi.w	#-$3000,d5
000079FC EC4D                       		lsr.w	#6,d5
000079FE 0245 007F                  		andi.w	#$7F,d5
00007A02 14C5                       		move.b	d5,(a2)+
00007A04 137C 000A 0024             		move.b	#$A,$24(a1)
00007A0A 1284                       		move.b	d4,0(a1)	; load swinging	object
00007A0C 2368 0004 0004             		move.l	4(a0),4(a1)
00007A12 3368 0002 0002             		move.w	2(a0),2(a1)
00007A18 08A9 0006 0002             		bclr	#6,2(a1)
00007A1E 137C 0004 0001             		move.b	#4,1(a1)
00007A24 137C 0004 0018             		move.b	#4,$18(a1)
00007A2A 137C 0008 0019             		move.b	#8,$19(a1)
00007A30 137C 0001 001A             		move.b	#1,$1A(a1)
00007A36 1343 003C                  		move.b	d3,$3C(a1)
00007A3A 0403 0010                  		subi.b	#$10,d3
00007A3E 6400                       		bcc.s	loc_7A8E
00007A40 137C 0002 001A             		move.b	#2,$1A(a1)
00007A46 137C 0003 0018             		move.b	#3,$18(a1)
00007A4C 08E9 0006 0002             		bset	#6,2(a1)
00007A52                            
00007A52                            loc_7A8E:
00007A52 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007A56                            
00007A56                            loc_7A92:
00007A56 3A08                       		move.w	a0,d5
00007A58 0445 D000                  		subi.w	#-$3000,d5
00007A5C EC4D                       		lsr.w	#6,d5
00007A5E 0245 007F                  		andi.w	#$7F,d5
00007A62 14C5                       		move.b	d5,(a2)+
00007A64 317C 4080 0026             		move.w	#$4080,$26(a0)
00007A6A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007A70 321F                       		move.w	(sp)+,d1
00007A72 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007A76 6700                       		beq.s	loc_7AD4	; if not, branch
00007A78 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007A80 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007A86 117C 0001 001A             		move.b	#1,$1A(a0)
00007A8C 117C 0002 0018             		move.b	#2,$18(a0)
00007A92 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007A98                            
00007A98                            loc_7AD4:
00007A98 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007A9E 6700                       		beq.s	Obj15_Action	; if yes, branch
00007AA0                            
00007AA0                            Obj15_SetSolid:				; XREF: Obj15_Index
00007AA0 7200                       		moveq	#0,d1
00007AA2 1228 0019                  		move.b	$19(a0),d1
00007AA6 7600                       		moveq	#0,d3
00007AA8 1628 0016                  		move.b	$16(a0),d3
00007AAC 6100 FA76                  		bsr.w	Obj15_Solid
00007AB0                            
00007AB0                            Obj15_Action:				; XREF: Obj15_Index
00007AB0 6100 0000                  		bsr.w	Obj15_Move
00007AB4 6100 0000                  		bsr.w	DisplaySprite
00007AB8 6000 0000                  		bra.w	Obj15_ChkDel
00007ABC                            ; ===========================================================================
00007ABC                            
00007ABC                            Obj15_Action2:				; XREF: Obj15_Index
00007ABC 7200                       		moveq	#0,d1
00007ABE 1228 0019                  		move.b	$19(a0),d1
00007AC2 6100 FAC4                  		bsr.w	ExitPlatform
00007AC6 3F28 0008                  		move.w	8(a0),-(sp)
00007ACA 6100 0000                  		bsr.w	Obj15_Move
00007ACE 341F                       		move.w	(sp)+,d2
00007AD0 7600                       		moveq	#0,d3
00007AD2 1628 0016                  		move.b	$16(a0),d3
00007AD6 5203                       		addq.b	#1,d3
00007AD8 6100 0000                  		bsr.w	MvSonicOnPtfm
00007ADC 6100 0000                  		bsr.w	DisplaySprite
00007AE0 6000 0000                  		bra.w	Obj15_ChkDel
00007AE4                            
00007AE4 4E75                       		rts
00007AE6                            
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            ; Subroutine to	change Sonic's position with a platform
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            
00007AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AE6                            
00007AE6                            
00007AE6                            MvSonicOnPtfm:
00007AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00007AEA 3028 000C                  		move.w	$C(a0),d0
00007AEE 9043                       		sub.w	d3,d0
00007AF0 6000                       		bra.s	MvSonic2
00007AF2                            ; End of function MvSonicOnPtfm
00007AF2                            
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            ; Subroutine to	change Sonic's position with a platform
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            
00007AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AF2                            
00007AF2                            
00007AF2                            MvSonicOnPtfm2:
00007AF2 43F8 D000                  		lea	($FFFFD000).w,a1
00007AF6 3028 000C                  		move.w	$C(a0),d0
00007AFA 0440 0009                  		subi.w	#9,d0
00007AFE                            
00007AFE                            MvSonic2:
00007AFE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007B02 6B00                       		bmi.s	locret_7B62
00007B04 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007B0A 6400                       		bcc.s	locret_7B62
00007B0C 4A78 FE08                  		tst.w	($FFFFFE08).w
00007B10 6600                       		bne.s	locret_7B62
00007B12 7200                       		moveq	#0,d1
00007B14 1229 0016                  		move.b	$16(a1),d1
00007B18 9041                       		sub.w	d1,d0
00007B1A 3340 000C                  		move.w	d0,$C(a1)
00007B1E 9468 0008                  		sub.w	8(a0),d2
00007B22 9569 0008                  		sub.w	d2,8(a1)
00007B26                            
00007B26                            locret_7B62:
00007B26 4E75                       		rts	
00007B28                            ; End of function MvSonicOnPtfm2
00007B28                            
00007B28                            
00007B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B28                            
00007B28                            
00007B28                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007B28 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007B2C 323C 0080                  		move.w	#$80,d1
00007B30 0828 0000 0022             		btst	#0,$22(a0)
00007B36 6700                       		beq.s	loc_7B78
00007B38 4440                       		neg.w	d0
00007B3A D041                       		add.w	d1,d0
00007B3C                            
00007B3C                            loc_7B78:
00007B3C 6000                       		bra.s	Obj15_Move2
00007B3E                            ; End of function Obj15_Move
00007B3E                            
00007B3E                            
00007B3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B3E                            
00007B3E                            
00007B3E                            Obj48_Move:				; XREF: Obj48_Display2
00007B3E 4A28 003D                  		tst.b	$3D(a0)
00007B42 6600                       		bne.s	loc_7B9C
00007B44 3028 003E                  		move.w	$3E(a0),d0
00007B48 5040                       		addq.w	#8,d0
00007B4A 3140 003E                  		move.w	d0,$3E(a0)
00007B4E D168 0026                  		add.w	d0,$26(a0)
00007B52 0C40 0200                  		cmpi.w	#$200,d0
00007B56 6600                       		bne.s	loc_7BB6
00007B58 117C 0001 003D             		move.b	#1,$3D(a0)
00007B5E 6000                       		bra.s	loc_7BB6
00007B60                            ; ===========================================================================
00007B60                            
00007B60                            loc_7B9C:
00007B60 3028 003E                  		move.w	$3E(a0),d0
00007B64 5140                       		subq.w	#8,d0
00007B66 3140 003E                  		move.w	d0,$3E(a0)
00007B6A D168 0026                  		add.w	d0,$26(a0)
00007B6E 0C40 FE00                  		cmpi.w	#-$200,d0
00007B72 6600                       		bne.s	loc_7BB6
00007B74 117C 0000 003D             		move.b	#0,$3D(a0)
00007B7A                            
00007B7A                            loc_7BB6:
00007B7A 1028 0026                  		move.b	$26(a0),d0
00007B7E                            ; End of function Obj48_Move
00007B7E                            
00007B7E                            
00007B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B7E                            
00007B7E                            
00007B7E                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007B7E 6100 AE38                  		bsr.w	CalcSine
00007B82 3428 0038                  		move.w	$38(a0),d2
00007B86 3628 003A                  		move.w	$3A(a0),d3
00007B8A 45E8 0028                  		lea	$28(a0),a2
00007B8E 7C00                       		moveq	#0,d6
00007B90 1C1A                       		move.b	(a2)+,d6
00007B92                            
00007B92                            loc_7BCE:
00007B92 7800                       		moveq	#0,d4
00007B94 181A                       		move.b	(a2)+,d4
00007B96 ED4C                       		lsl.w	#6,d4
00007B98 0684 00FF D000             		addi.l	#$FFD000,d4
00007B9E 2244                       		movea.l	d4,a1
00007BA0 7800                       		moveq	#0,d4
00007BA2 1829 003C                  		move.b	$3C(a1),d4
00007BA6 2A04                       		move.l	d4,d5
00007BA8 C9C0                       		muls.w	d0,d4
00007BAA E084                       		asr.l	#8,d4
00007BAC CBC1                       		muls.w	d1,d5
00007BAE E085                       		asr.l	#8,d5
00007BB0 D842                       		add.w	d2,d4
00007BB2 DA43                       		add.w	d3,d5
00007BB4 3344 000C                  		move.w	d4,$C(a1)
00007BB8 3345 0008                  		move.w	d5,8(a1)
00007BBC 51CE FFD4                  		dbf	d6,loc_7BCE
00007BC0 4E75                       		rts	
00007BC2                            ; End of function Obj15_Move2
00007BC2                            
00007BC2                            ; ===========================================================================
00007BC2                            
00007BC2                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007BC2 3028 003A                  		move.w	$3A(a0),d0
00007BC6 0240 FF80                  		andi.w	#$FF80,d0
00007BCA 3238 F700                  		move.w	($FFFFF700).w,d1
00007BCE 0441 0080                  		subi.w	#$80,d1
00007BD2 0241 FF80                  		andi.w	#$FF80,d1
00007BD6 9041                       		sub.w	d1,d0
00007BD8 0C40 0280                  		cmpi.w	#$280,d0
00007BDC 6200 0000                  		bhi.w	Obj15_DelAll
00007BE0 4E75                       		rts	
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007BE2 7400                       		moveq	#0,d2
00007BE4 45E8 0028                  		lea	$28(a0),a2
00007BE8 141A                       		move.b	(a2)+,d2
00007BEA                            
00007BEA                            Obj15_DelLoop:
00007BEA 7000                       		moveq	#0,d0
00007BEC 101A                       		move.b	(a2)+,d0
00007BEE ED48                       		lsl.w	#6,d0
00007BF0 0680 00FF D000             		addi.l	#$FFD000,d0
00007BF6 2240                       		movea.l	d0,a1
00007BF8 6100 0000                  		bsr.w	DeleteObject2
00007BFC 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007C00 4E75                       		rts	
00007C02                            ; ===========================================================================
00007C02                            
00007C02                            Obj15_Delete:				; XREF: Obj15_Index
00007C02 6100 0000                  		bsr.w	DeleteObject
00007C06 4E75                       		rts	
00007C08                            ; ===========================================================================
00007C08                            
00007C08                            Obj15_Display:				; XREF: Obj15_Index
00007C08 6000 0000                  		bra.w	DisplaySprite
00007C0C                            ; ===========================================================================
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C                            Map_obj15:
00007C0C                            	include "_maps\obj15ghz.asm"
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C 0000                       		dc.w byte_7C4E-Map_obj15
00007C0E 0000                       		dc.w byte_7C59-Map_obj15
00007C10 0000                       		dc.w byte_7C5F-Map_obj15
00007C12 02                         byte_7C4E:	dc.b 2
00007C13 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007C18 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007C1D 01                         byte_7C59:	dc.b 1
00007C1E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007C23 01                         byte_7C5F:	dc.b 1
00007C24 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007C2A 00                         		even
00007C2A 00                         		even
00007C2A                            
00007C2A                            ; ---------------------------------------------------------------------------
00007C2A                            ; Sprite mappings - SLZ	swinging platforms
00007C2A                            ; ---------------------------------------------------------------------------
00007C2A                            Map_obj15a:
00007C2A                            	include "_maps\obj15slz.asm"
00007C2A                            ; ---------------------------------------------------------------------------
00007C2A                            ; Sprite mappings - SLZ	swinging platforms
00007C2A                            ; ---------------------------------------------------------------------------
00007C2A 0000                       		dc.w byte_7C6C-Map_obj15a
00007C2C 0000                       		dc.w byte_7C95-Map_obj15a
00007C2E 0000                       		dc.w byte_7C9B-Map_obj15a
00007C30 08                         byte_7C6C:	dc.b 8
00007C31 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007C36 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007C3B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007C40 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007C45 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007C4A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007C4F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007C54 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007C59 01                         byte_7C95:	dc.b 1
00007C5A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007C5F 01                         byte_7C9B:	dc.b 1
00007C60 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007C66 00                         		even
00007C66 00                         		even
00007C66                            
00007C66                            ; ===========================================================================
00007C66                            ; ---------------------------------------------------------------------------
00007C66                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007C66                            ; ---------------------------------------------------------------------------
00007C66                            
00007C66                            Obj17:					; XREF: Obj_Index
00007C66 7000                       		moveq	#0,d0
00007C68 1028 0024                  		move.b	$24(a0),d0
00007C6C 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007C70 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007C74                            ; ===========================================================================
00007C74 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007C76 0000                       		dc.w Obj17_Action-Obj17_Index
00007C78 0000                       		dc.w Obj17_Action-Obj17_Index
00007C7A 0000                       		dc.w Obj17_Delete-Obj17_Index
00007C7C 0000                       		dc.w Obj17_Display-Obj17_Index
00007C7E                            ; ===========================================================================
00007C7E                            
00007C7E                            Obj17_Main:				; XREF: Obj17_Index
00007C7E 5428 0024                  		addq.b	#2,$24(a0)
00007C82 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007C8A 317C 4398 0002             		move.w	#$4398,2(a0)
00007C90 117C 0007 0022             		move.b	#7,$22(a0)
00007C96 117C 0004 0001             		move.b	#4,1(a0)
00007C9C 117C 0003 0018             		move.b	#3,$18(a0)
00007CA2 117C 0008 0019             		move.b	#8,$19(a0)
00007CA8 3428 000C                  		move.w	$C(a0),d2
00007CAC 3628 0008                  		move.w	8(a0),d3
00007CB0 1810                       		move.b	0(a0),d4
00007CB2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007CB6 7200                       		moveq	#0,d1
00007CB8 1212                       		move.b	(a2),d1		; move a2 to d1
00007CBA 14FC 0000                  		move.b	#0,(a2)+
00007CBE 3001                       		move.w	d1,d0
00007CC0 E248                       		lsr.w	#1,d0
00007CC2 E948                       		lsl.w	#4,d0
00007CC4 9640                       		sub.w	d0,d3
00007CC6 5501                       		subq.b	#2,d1
00007CC8 6500                       		bcs.s	Obj17_Action
00007CCA 7C00                       		moveq	#0,d6
00007CCC                            
00007CCC                            Obj17_MakeHelix:
00007CCC 6100 0000                  		bsr.w	SingleObjLoad
00007CD0 6600                       		bne.s	Obj17_Action
00007CD2 5228 0028                  		addq.b	#1,$28(a0)
00007CD6 3A09                       		move.w	a1,d5
00007CD8 0445 D000                  		subi.w	#$D000,d5
00007CDC EC4D                       		lsr.w	#6,d5
00007CDE 0245 007F                  		andi.w	#$7F,d5
00007CE2 14C5                       		move.b	d5,(a2)+
00007CE4 137C 0008 0024             		move.b	#8,$24(a1)
00007CEA 1284                       		move.b	d4,0(a1)
00007CEC 3342 000C                  		move.w	d2,$C(a1)
00007CF0 3343 0008                  		move.w	d3,8(a1)
00007CF4 2368 0004 0004             		move.l	4(a0),4(a1)
00007CFA 337C 4398 0002             		move.w	#$4398,2(a1)
00007D00 137C 0004 0001             		move.b	#4,1(a1)
00007D06 137C 0003 0018             		move.b	#3,$18(a1)
00007D0C 137C 0008 0019             		move.b	#8,$19(a1)
00007D12 1346 003E                  		move.b	d6,$3E(a1)
00007D16 5206                       		addq.b	#1,d6
00007D18 0206 0007                  		andi.b	#7,d6
00007D1C 0643 0010                  		addi.w	#$10,d3
00007D20 B668 0008                  		cmp.w	8(a0),d3
00007D24 6600                       		bne.s	loc_7D78
00007D26 1146 003E                  		move.b	d6,$3E(a0)
00007D2A 5206                       		addq.b	#1,d6
00007D2C 0206 0007                  		andi.b	#7,d6
00007D30 0643 0010                  		addi.w	#$10,d3
00007D34 5228 0028                  		addq.b	#1,$28(a0)
00007D38                            
00007D38                            loc_7D78:
00007D38 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007D3C                            
00007D3C                            Obj17_Action:				; XREF: Obj17_Index
00007D3C 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007D40 6100 0000                  		bsr.w	DisplaySprite
00007D44 6000 0000                  		bra.w	Obj17_ChkDel
00007D48                            
00007D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D48                            
00007D48                            
00007D48                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007D48 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007D4C 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007D52 D028 003E                  		add.b	$3E(a0),d0
00007D56 0200 0007                  		andi.b	#7,d0
00007D5A 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007D5E 6600                       		bne.s	locret_7DA6
00007D60 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007D66                            
00007D66                            locret_7DA6:
00007D66 4E75                       		rts	
00007D68                            ; End of function Obj17_RotateSpikes
00007D68                            
00007D68                            ; ===========================================================================
00007D68                            
00007D68                            Obj17_ChkDel:				; XREF: Obj17_Action
00007D68 3028 0008                  		move.w	8(a0),d0
00007D6C 0240 FF80                  		andi.w	#$FF80,d0
00007D70 3238 F700                  		move.w	($FFFFF700).w,d1
00007D74 0441 0080                  		subi.w	#$80,d1
00007D78 0241 FF80                  		andi.w	#$FF80,d1
00007D7C 9041                       		sub.w	d1,d0
00007D7E 0C40 0280                  		cmpi.w	#$280,d0
00007D82 6200 0000                  		bhi.w	Obj17_DelAll
00007D86 4E75                       		rts	
00007D88                            ; ===========================================================================
00007D88                            
00007D88                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007D88 7400                       		moveq	#0,d2
00007D8A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007D8E 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007D90 5502                       		subq.b	#2,d2
00007D92 6500                       		bcs.s	Obj17_Delete
00007D94                            
00007D94                            Obj17_DelLoop:
00007D94 7000                       		moveq	#0,d0
00007D96 101A                       		move.b	(a2)+,d0
00007D98 ED48                       		lsl.w	#6,d0
00007D9A 0680 00FF D000             		addi.l	#$FFD000,d0
00007DA0 2240                       		movea.l	d0,a1
00007DA2 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007DA6 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007DAA                            
00007DAA                            Obj17_Delete:				; XREF: Obj17_Index
00007DAA 6100 0000                  		bsr.w	DeleteObject
00007DAE 4E75                       		rts	
00007DB0                            ; ===========================================================================
00007DB0                            
00007DB0                            Obj17_Display:				; XREF: Obj17_Index
00007DB0 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007DB4 6000 0000                  		bra.w	DisplaySprite
00007DB8                            ; ===========================================================================
00007DB8                            ; ---------------------------------------------------------------------------
00007DB8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DB8                            ; ---------------------------------------------------------------------------
00007DB8                            Map_obj17:
00007DB8                            	include "_maps\obj17.asm"
00007DB8                            ; ---------------------------------------------------------------------------
00007DB8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DB8                            ; ---------------------------------------------------------------------------
00007DB8 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007DBC 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007DC0 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007DC4 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007DC8 01                         byte_7E08:	dc.b 1
00007DC9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007DCE 01                         byte_7E0E:	dc.b 1
00007DCF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007DD4 01                         byte_7E14:	dc.b 1
00007DD5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007DDA 01                         byte_7E1A:	dc.b 1
00007DDB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007DE0 01                         byte_7E20:	dc.b 1
00007DE1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007DE6 01                         byte_7E26:	dc.b 1
00007DE7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007DEC 01                         byte_7E2C:	dc.b 1
00007DED F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007DF2                            		even
00007DF2                            		even
00007DF2                            
00007DF2                            ; ===========================================================================
00007DF2                            ; ---------------------------------------------------------------------------
00007DF2                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007DF2                            ; ---------------------------------------------------------------------------
00007DF2                            
00007DF2                            Obj18:					; XREF: Obj_Index
00007DF2 7000                       		moveq	#0,d0
00007DF4 1028 0024                  		move.b	$24(a0),d0
00007DF8 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007DFC 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007E00                            ; ===========================================================================
00007E00 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007E02 0000                       		dc.w Obj18_Solid-Obj18_Index
00007E04 0000                       		dc.w Obj18_Action2-Obj18_Index
00007E06 0000                       		dc.w Obj18_Delete-Obj18_Index
00007E08 0000                       		dc.w Obj18_Action-Obj18_Index
00007E0A                            ; ===========================================================================
00007E0A                            
00007E0A                            Obj18_Main:				; XREF: Obj18_Index
00007E0A 5428 0024                  		addq.b	#2,$24(a0)
00007E0E 317C 4000 0002             		move.w	#$4000,2(a0)
00007E14 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007E1C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E22 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007E28 6600                       		bne.s	Obj18_NotSYZ
00007E2A 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007E32 117C 0020 0019             		move.b	#$20,$19(a0)
00007E38                            
00007E38                            Obj18_NotSYZ:
00007E38 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E3E 6600                       		bne.s	Obj18_NotSLZ
00007E40 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007E48 117C 0020 0019             		move.b	#$20,$19(a0)
00007E4E 317C 4000 0002             		move.w	#$4000,2(a0)
00007E54 117C 0003 0028             		move.b	#3,$28(a0)
00007E5A                            
00007E5A                            Obj18_NotSLZ:
00007E5A 117C 0004 0001             		move.b	#4,1(a0)
00007E60 117C 0004 0018             		move.b	#4,$18(a0)
00007E66 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007E6C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007E72 3168 0008 0032             		move.w	8(a0),$32(a0)
00007E78 317C 0080 0026             		move.w	#$80,$26(a0)
00007E7E 7200                       		moveq	#0,d1
00007E80 1028 0028                  		move.b	$28(a0),d0
00007E84 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007E88 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007E8A 5201                       		addq.b	#1,d1		; use frame #1
00007E8C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007E92                            
00007E92                            Obj18_SetFrame:
00007E92 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007E96                            
00007E96                            Obj18_Solid:				; XREF: Obj18_Index
00007E96 4A28 0038                  		tst.b	$38(a0)
00007E9A 6700                       		beq.s	loc_7EE0
00007E9C 5928 0038                  		subq.b	#4,$38(a0)
00007EA0                            
00007EA0                            loc_7EE0:
00007EA0 7200                       		moveq	#0,d1
00007EA2 1228 0019                  		move.b	$19(a0),d1
00007EA6 6100 F56C                  		bsr.w	PlatformObject
00007EAA                            
00007EAA                            Obj18_Action:				; XREF: Obj18_Index
00007EAA 6100 0000                  		bsr.w	Obj18_Move
00007EAE 6100 0000                  		bsr.w	Obj18_Nudge
00007EB2 6100 0000                  		bsr.w	DisplaySprite
00007EB6 6000 0000                  		bra.w	Obj18_ChkDel
00007EBA                            ; ===========================================================================
00007EBA                            
00007EBA                            Obj18_Action2:				; XREF: Obj18_Index
00007EBA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007EC0 6700                       		beq.s	loc_7F06
00007EC2 5828 0038                  		addq.b	#4,$38(a0)
00007EC6                            
00007EC6                            loc_7F06:
00007EC6 7200                       		moveq	#0,d1
00007EC8 1228 0019                  		move.b	$19(a0),d1
00007ECC 6100 F6BA                  		bsr.w	ExitPlatform
00007ED0 3F28 0008                  		move.w	8(a0),-(sp)
00007ED4 6100 0000                  		bsr.w	Obj18_Move
00007ED8 6100 0000                  		bsr.w	Obj18_Nudge
00007EDC 341F                       		move.w	(sp)+,d2
00007EDE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00007EE2 6100 0000                  		bsr.w	DisplaySprite
00007EE6 6000 0000                  		bra.w	Obj18_ChkDel
00007EEA                            
00007EEA 4E75                       		rts
00007EEC                            
00007EEC                            ; ---------------------------------------------------------------------------
00007EEC                            ; Subroutine to	move platform slightly when you	stand on it
00007EEC                            ; ---------------------------------------------------------------------------
00007EEC                            
00007EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EEC                            
00007EEC                            
00007EEC                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00007EEC 1028 0038                  		move.b	$38(a0),d0
00007EF0 6100 AAC6                  		bsr.w	CalcSine
00007EF4 323C 0400                  		move.w	#$400,d1
00007EF8 C1C1                       		muls.w	d1,d0
00007EFA 4840                       		swap	d0
00007EFC D068 002C                  		add.w	$2C(a0),d0
00007F00 3140 000C                  		move.w	d0,$C(a0)
00007F04 4E75                       		rts	
00007F06                            ; End of function Obj18_Nudge
00007F06                            
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            ; Subroutine to	move platforms
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            
00007F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F06                            
00007F06                            
00007F06                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00007F06 7000                       		moveq	#0,d0
00007F08 1028 0028                  		move.b	$28(a0),d0
00007F0C 0240 000F                  		andi.w	#$F,d0
00007F10 D040                       		add.w	d0,d0
00007F12 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00007F16 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00007F1A                            ; End of function Obj18_Move
00007F1A                            
00007F1A                            ; ===========================================================================
00007F1A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00007F1E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00007F22 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00007F26 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00007F2A 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00007F2E 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00007F32 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00007F34                            ; ===========================================================================
00007F34                            
00007F34                            Obj18_Type00:
00007F34 4E75                       		rts			; platform 00 doesn't move
00007F36                            ; ===========================================================================
00007F36                            
00007F36                            Obj18_Type05:
00007F36 3028 0032                  		move.w	$32(a0),d0
00007F3A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F3E 4401                       		neg.b	d1		; reverse platform-motion
00007F40 0601 0040                  		addi.b	#$40,d1
00007F44 6000                       		bra.s	Obj18_01_Move
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj18_Type01:
00007F46 3028 0032                  		move.w	$32(a0),d0
00007F4A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F4E 0401 0040                  		subi.b	#$40,d1
00007F52                            
00007F52                            Obj18_01_Move:
00007F52 4881                       		ext.w	d1
00007F54 D041                       		add.w	d1,d0
00007F56 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00007F5A 6000 0000                  		bra.w	Obj18_ChgMotion
00007F5E                            ; ===========================================================================
00007F5E                            
00007F5E                            Obj18_Type0C:
00007F5E 3028 0034                  		move.w	$34(a0),d0
00007F62 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007F66 4401                       		neg.b	d1		; reverse platform-motion
00007F68 0601 0030                  		addi.b	#$30,d1
00007F6C 6000                       		bra.s	Obj18_02_Move
00007F6E                            ; ===========================================================================
00007F6E                            
00007F6E                            Obj18_Type0B:
00007F6E 3028 0034                  		move.w	$34(a0),d0
00007F72 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007F76 0401 0030                  		subi.b	#$30,d1
00007F7A 6000                       		bra.s	Obj18_02_Move
00007F7C                            ; ===========================================================================
00007F7C                            
00007F7C                            Obj18_Type06:
00007F7C 3028 0034                  		move.w	$34(a0),d0
00007F80 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F84 4401                       		neg.b	d1		; reverse platform-motion
00007F86 0601 0040                  		addi.b	#$40,d1
00007F8A 6000                       		bra.s	Obj18_02_Move
00007F8C                            ; ===========================================================================
00007F8C                            
00007F8C                            Obj18_Type02:
00007F8C 3028 0034                  		move.w	$34(a0),d0
00007F90 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F94 0401 0040                  		subi.b	#$40,d1
00007F98                            
00007F98                            Obj18_02_Move:
00007F98 4881                       		ext.w	d1
00007F9A D041                       		add.w	d1,d0
00007F9C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00007FA0 6000 0000                  		bra.w	Obj18_ChgMotion
00007FA4                            ; ===========================================================================
00007FA4                            
00007FA4                            Obj18_Type03:
00007FA4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00007FA8 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00007FAA 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00007FB0 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00007FB2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00007FB8                            
00007FB8                            Obj18_03_NoMove:
00007FB8 4E75                       		rts	
00007FBA                            ; ===========================================================================
00007FBA                            
00007FBA                            Obj18_03_Wait:
00007FBA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00007FBE 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00007FC0 317C 0020 003A             		move.w	#32,$3A(a0)
00007FC6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00007FCA 4E75                       		rts	
00007FCC                            ; ===========================================================================
00007FCC                            
00007FCC                            Obj18_Type04:
00007FCC 4A68 003A                  		tst.w	$3A(a0)
00007FD0 6700                       		beq.s	loc_8048
00007FD2 5368 003A                  		subq.w	#1,$3A(a0)
00007FD6 6600                       		bne.s	loc_8048
00007FD8 0828 0003 0022             		btst	#3,$22(a0)
00007FDE 6700                       		beq.s	loc_8042
00007FE0 08E9 0001 0022             		bset	#1,$22(a1)
00007FE6 08A9 0003 0022             		bclr	#3,$22(a1)
00007FEC 137C 0002 0024             		move.b	#2,$24(a1)
00007FF2 08A8 0003 0022             		bclr	#3,$22(a0)
00007FF8 4228 0025                  		clr.b	$25(a0)
00007FFC 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008002                            
00008002                            loc_8042:
00008002 117C 0008 0024             		move.b	#8,$24(a0)
00008008                            
00008008                            loc_8048:
00008008 2628 002C                  		move.l	$2C(a0),d3
0000800C 3028 0012                  		move.w	$12(a0),d0
00008010 48C0                       		ext.l	d0
00008012 E180                       		asl.l	#8,d0
00008014 D680                       		add.l	d0,d3
00008016 2143 002C                  		move.l	d3,$2C(a0)
0000801A 0668 0038 0012             		addi.w	#$38,$12(a0)
00008020 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008024 0640 00E0                  		addi.w	#$E0,d0
00008028 B068 002C                  		cmp.w	$2C(a0),d0
0000802C 6400                       		bcc.s	locret_8074
0000802E 117C 0006 0024             		move.b	#6,$24(a0)
00008034                            
00008034                            locret_8074:
00008034 4E75                       		rts	
00008036                            ; ===========================================================================
00008036                            
00008036                            Obj18_Type07:
00008036 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000803A 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000803C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008040 7000                       		moveq	#0,d0
00008042 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008046 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008048 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000804C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000804E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008054                            
00008054                            Obj18_07_NoMove:
00008054 4E75                       		rts	
00008056                            ; ===========================================================================
00008056                            
00008056                            Obj18_07_Wait:
00008056 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000805A 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000805C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008060 4E75                       		rts	
00008062                            ; ===========================================================================
00008062                            
00008062                            Obj18_Type08:
00008062 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008066 3028 0034                  		move.w	$34(a0),d0
0000806A 0440 0200                  		subi.w	#$200,d0
0000806E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008072 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008074 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008078                            
00008078                            Obj18_08_NoStop:
00008078 4E75                       		rts	
0000807A                            ; ===========================================================================
0000807A                            
0000807A                            Obj18_Type0A:
0000807A 3028 0034                  		move.w	$34(a0),d0
0000807E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008082 0401 0040                  		subi.b	#$40,d1
00008086 4881                       		ext.w	d1
00008088 E241                       		asr.w	#1,d1
0000808A D041                       		add.w	d1,d0
0000808C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008090                            
00008090                            Obj18_ChgMotion:
00008090 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008096 4E75                       		rts	
00008098                            ; ===========================================================================
00008098                            
00008098                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008098 3028 0032                  		move.w	$32(a0),d0
0000809C 0240 FF80                  		andi.w	#$FF80,d0
000080A0 3238 F700                  		move.w	($FFFFF700).w,d1
000080A4 0441 0080                  		subi.w	#$80,d1
000080A8 0241 FF80                  		andi.w	#$FF80,d1
000080AC 9041                       		sub.w	d1,d0
000080AE 0C40 0280                  		cmpi.w	#$280,d0
000080B2 6200                       		bhi.s	Obj18_Delete
000080B4 4E75                       		rts	
000080B6                            ; ===========================================================================
000080B6                            
000080B6                            Obj18_Delete:				; XREF: Obj18_Index
000080B6 6000 0000                  		bra.w	DeleteObject
000080BA                            ; ===========================================================================
000080BA                            ; ---------------------------------------------------------------------------
000080BA                            ; Sprite mappings - unused
000080BA                            ; ---------------------------------------------------------------------------
000080BA                            Map_obj18x:
000080BA                            	include "_maps\obj18x.asm"
000080BA                            ; ---------------------------------------------------------------------------
000080BA                            ; Sprite mappings - unused
000080BA                            ; ---------------------------------------------------------------------------
000080BA 0000                       		dc.w byte_80FE-Map_obj18x
000080BC 0000                       		dc.w byte_8109-Map_obj18x
000080BE 02                         byte_80FE:	dc.b 2
000080BF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000080C4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000080C9 0A                         byte_8109:	dc.b $A
000080CA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000080CF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000080D4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000080D9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000080DE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000080E3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000080E8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000080ED 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000080F2 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000080F7 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000080FC                            		even
000080FC                            		even
000080FC                            
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            ; Sprite mappings - GHZ	platforms
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            Map_obj18:
000080FC                            	include "_maps\obj18ghz.asm"
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            ; Sprite mappings - GHZ	platforms
000080FC                            ; ---------------------------------------------------------------------------
000080FC 0000                       		dc.w byte_8140-Map_obj18
000080FE 0000                       		dc.w byte_8155-Map_obj18
00008100 04                         byte_8140:	dc.b 4
00008101 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008106 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000810B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008110 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008115 0A                         byte_8155:	dc.b $A
00008116 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000811B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008120 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008125 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000812A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000812F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008134 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008139 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000813E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008143 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008148                            		even
00008148                            		even
00008148                            
00008148                            ; ---------------------------------------------------------------------------
00008148                            ; Sprite mappings - SYZ	platforms
00008148                            ; ---------------------------------------------------------------------------
00008148                            Map_obj18a:
00008148                            	include "_maps\obj18syz.asm"
00008148                            ; ---------------------------------------------------------------------------
00008148                            ; Sprite mappings - SYZ	platforms
00008148                            ; ---------------------------------------------------------------------------
00008148 0000                       		dc.w byte_818A-Map_obj18a
0000814A 03                         byte_818A:	dc.b 3
0000814B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008150 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008155 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000815A                            		even
0000815A                            		even
0000815A                            
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            ; Sprite mappings - SLZ	platforms
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            Map_obj18b:
0000815A                            	include "_maps\obj18slz.asm"
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            ; Sprite mappings - SLZ	platforms
0000815A                            ; ---------------------------------------------------------------------------
0000815A 0000                       		dc.w byte_819C-Map_obj18b
0000815C 02                         byte_819C:	dc.b 2
0000815D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008162 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008168 00                         		even
00008168 00                         		even
00008168                            
00008168                            ; ===========================================================================
00008168                            ; ---------------------------------------------------------------------------
00008168                            ; Object 19 - blank
00008168                            ; ---------------------------------------------------------------------------
00008168                            
00008168                            Obj19:					; XREF: Obj_Index
00008168 4E75                       		rts	
0000816A                            ; ===========================================================================
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            Map_obj48:
0000816A                            	include "_maps\obj48.asm"
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000816A                            ; ---------------------------------------------------------------------------
0000816A 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000816E 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008172 06                         byte_81B2:	dc.b 6
00008173 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008178 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000817D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008182 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008187 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000818C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008191 04                         byte_81D1:	dc.b 4
00008192 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008197 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000819C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000081A1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000081A6 04                         byte_81E6:	dc.b 4
000081A7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000081AC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000081B1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000081B6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000081BB 04                         byte_81FB:	dc.b 4
000081BC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000081C1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000081C6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000081CB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000081D0                            		even
000081D0                            		even
000081D0                            
000081D0                            ; ===========================================================================
000081D0                            ; ---------------------------------------------------------------------------
000081D0                            ; Object 1A - GHZ collapsing ledge
000081D0                            ; ---------------------------------------------------------------------------
000081D0                            
000081D0                            Obj1A:					; XREF: Obj_Index
000081D0 7000                       		moveq	#0,d0
000081D2 1028 0024                  		move.b	$24(a0),d0
000081D6 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000081DA 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000081DE                            ; ===========================================================================
000081DE 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000081E2 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000081E6 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000081EA                            ; ===========================================================================
000081EA                            
000081EA                            Obj1A_Main:				; XREF: Obj1A_Index
000081EA 5428 0024                  		addq.b	#2,$24(a0)
000081EE 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000081F6 317C 4000 0002             		move.w	#$4000,2(a0)
000081FC 0028 0004 0001             		ori.b	#4,1(a0)
00008202 117C 0004 0018             		move.b	#4,$18(a0)
00008208 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000820E 117C 0064 0019             		move.b	#$64,$19(a0)
00008214 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000821A 117C 0038 0016             		move.b	#$38,$16(a0)
00008220 08E8 0004 0001             		bset	#4,1(a0)
00008226                            
00008226                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008226 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000822A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000822C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008230 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008234 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008238                            
00008238                            Obj1A_Slope:
00008238 323C 0030                  		move.w	#$30,d1
0000823C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008242 6100 F2A4                  		bsr.w	SlopeObject
00008246 6000 0000                  		bra.w	MarkObjGone
0000824A                            ; ===========================================================================
0000824A                            
0000824A                            Obj1A_Touch:				; XREF: Obj1A_Index
0000824A 4A28 0038                  		tst.b	$38(a0)
0000824E 6700 0000                  		beq.w	loc_847A
00008252 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008258 5328 0038                  		subq.b	#1,$38(a0)
0000825C                            
0000825C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000825C                            
0000825C                            
0000825C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000825C 323C 0030                  		move.w	#$30,d1
00008260 6100 F326                  		bsr.w	ExitPlatform
00008264 323C 0030                  		move.w	#$30,d1
00008268 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000826E 3428 0008                  		move.w	8(a0),d2
00008272 6100 0000                  		bsr.w	SlopeObject2
00008276 6000 0000                  		bra.w	MarkObjGone
0000827A                            ; End of function Obj1A_WalkOff
0000827A                            
0000827A                            ; ===========================================================================
0000827A                            
0000827A                            Obj1A_Display:				; XREF: Obj1A_Index
0000827A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000827E 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008280 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008284 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008288 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000828C 6000 0000                  		bra.w	DisplaySprite
00008290                            ; ===========================================================================
00008290                            
00008290                            loc_82D0:				; XREF: Obj1A_Display
00008290 5328 0038                  		subq.b	#1,$38(a0)
00008294 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008298 43F8 D000                  		lea	($FFFFD000).w,a1
0000829C 0829 0003 0022             		btst	#3,$22(a1)
000082A2 6700                       		beq.s	loc_82FC
000082A4 4A28 0038                  		tst.b	$38(a0)
000082A8 6600                       		bne.s	locret_8308
000082AA 08A9 0003 0022             		bclr	#3,$22(a1)
000082B0 08A9 0005 0022             		bclr	#5,$22(a1)
000082B6 137C 0001 001D             		move.b	#1,$1D(a1)
000082BC                            
000082BC                            loc_82FC:
000082BC 117C 0000 003A             		move.b	#0,$3A(a0)
000082C2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000082C8                            
000082C8                            locret_8308:
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000082CA 6100 0000                  		bsr.w	ObjectFall
000082CE 6100 0000                  		bsr.w	DisplaySprite
000082D2 4A28 0001                  		tst.b	1(a0)
000082D6 6A00                       		bpl.s	Obj1A_Delete
000082D8 4E75                       		rts	
000082DA                            ; ===========================================================================
000082DA                            
000082DA                            Obj1A_Delete:				; XREF: Obj1A_Index
000082DA 6100 0000                  		bsr.w	DeleteObject
000082DE 4E75                       		rts	
000082E0                            ; ===========================================================================
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            
000082E0                            Obj53:					; XREF: Obj_Index
000082E0 7000                       		moveq	#0,d0
000082E2 1028 0024                  		move.b	$24(a0),d0
000082E6 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000082EA 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000082EE                            ; ===========================================================================
000082EE 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000082F2 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000082F6 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000082FA                            ; ===========================================================================
000082FA                            
000082FA                            Obj53_Main:				; XREF: Obj53_Index
000082FA 5428 0024                  		addq.b	#2,$24(a0)
000082FE 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008306 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000830C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008312 6600                       		bne.s	Obj53_NotSLZ
00008314 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000831A 5428 001A                  		addq.b	#2,$1A(a0)
0000831E                            
0000831E                            Obj53_NotSLZ:
0000831E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008324 6600                       		bne.s	Obj53_NotSBZ
00008326 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000832C                            
0000832C                            Obj53_NotSBZ:
0000832C 0028 0004 0001             		ori.b	#4,1(a0)
00008332 117C 0004 0018             		move.b	#4,$18(a0)
00008338 117C 0007 0038             		move.b	#7,$38(a0)
0000833E 117C 0044 0019             		move.b	#$44,$19(a0)
00008344                            
00008344                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008344 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008348 6700                       		beq.s	Obj53_Solid	; if not, branch
0000834A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000834E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008352 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008356                            
00008356                            Obj53_Solid:
00008356 323C 0020                  		move.w	#$20,d1
0000835A 6100 F0B8                  		bsr.w	PlatformObject
0000835E 4A28 0028                  		tst.b	$28(a0)
00008362 6A00                       		bpl.s	Obj53_MarkAsGone
00008364 0829 0003 0022             		btst	#3,$22(a1)
0000836A 6700                       		beq.s	Obj53_MarkAsGone
0000836C 08A8 0000 0001             		bclr	#0,1(a0)
00008372 3029 0008                  		move.w	8(a1),d0
00008376 9068 0008                  		sub.w	8(a0),d0
0000837A 6400                       		bcc.s	Obj53_MarkAsGone
0000837C 08E8 0000 0001             		bset	#0,1(a0)
00008382                            
00008382                            Obj53_MarkAsGone:
00008382 6000 0000                  		bra.w	MarkObjGone
00008386                            ; ===========================================================================
00008386                            
00008386                            Obj53_Touch:				; XREF: Obj53_Index
00008386 4A28 0038                  		tst.b	$38(a0)
0000838A 6700 0000                  		beq.w	loc_8458
0000838E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008394 5328 0038                  		subq.b	#1,$38(a0)
00008398                            
00008398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008398                            
00008398                            
00008398                            Obj53_WalkOff:				; XREF: Obj53_Index
00008398 323C 0020                  		move.w	#$20,d1
0000839C 6100 F1EA                  		bsr.w	ExitPlatform
000083A0 3428 0008                  		move.w	8(a0),d2
000083A4 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000083A8 6000 0000                  		bra.w	MarkObjGone
000083AC                            ; End of function Obj53_WalkOff
000083AC                            
000083AC                            ; ===========================================================================
000083AC                            
000083AC                            Obj53_Display:				; XREF: Obj53_Index
000083AC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083B0 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000083B2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083B6 6600 0000                  		bne.w	loc_8402	; if yes, branch
000083BA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083BE 6000 0000                  		bra.w	DisplaySprite
000083C2                            ; ===========================================================================
000083C2                            
000083C2                            loc_8402:
000083C2 5328 0038                  		subq.b	#1,$38(a0)
000083C6 6100 FFD0                  		bsr.w	Obj53_WalkOff
000083CA 43F8 D000                  		lea	($FFFFD000).w,a1
000083CE 0829 0003 0022             		btst	#3,$22(a1)
000083D4 6700                       		beq.s	loc_842E
000083D6 4A28 0038                  		tst.b	$38(a0)
000083DA 6600                       		bne.s	locret_843A
000083DC 08A9 0003 0022             		bclr	#3,$22(a1)
000083E2 08A9 0005 0022             		bclr	#5,$22(a1)
000083E8 137C 0001 001D             		move.b	#1,$1D(a1)
000083EE                            
000083EE                            loc_842E:
000083EE 117C 0000 003A             		move.b	#0,$3A(a0)
000083F4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000083FA                            
000083FA                            locret_843A:
000083FA 4E75                       		rts	
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Obj53_TimeZero:				; XREF: Obj53_Display
000083FC 6100 0000                  		bsr.w	ObjectFall
00008400 6100 0000                  		bsr.w	DisplaySprite
00008404 4A28 0001                  		tst.b	1(a0)
00008408 6A00                       		bpl.s	Obj53_Delete
0000840A 4E75                       		rts	
0000840C                            ; ===========================================================================
0000840C                            
0000840C                            Obj53_Delete:				; XREF: Obj53_Index
0000840C 6100 0000                  		bsr.w	DeleteObject
00008410 4E75                       		rts	
00008412                            ; ===========================================================================
00008412                            
00008412                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008412 117C 0000 003A             		move.b	#0,$3A(a0)
00008418                            
00008418                            loc_8458:				; XREF: Obj53_Touch
00008418 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000841E 0828 0000 0028             		btst	#0,$28(a0)
00008424 6700                       		beq.s	loc_846C
00008426 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000842C                            
0000842C                            loc_846C:
0000842C 7207                       		moveq	#7,d1
0000842E 5228 001A                  		addq.b	#1,$1A(a0)
00008432 6000                       		bra.s	loc_8486
00008434                            ; ===========================================================================
00008434                            
00008434                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008434 117C 0000 003A             		move.b	#0,$3A(a0)
0000843A                            
0000843A                            loc_847A:				; XREF: Obj1A_Touch
0000843A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008440 7218                       		moveq	#$18,d1
00008442 5428 001A                  		addq.b	#2,$1A(a0)
00008446                            
00008446                            loc_8486:				; XREF: Obj53_Collapse
00008446 7000                       		moveq	#0,d0
00008448 1028 001A                  		move.b	$1A(a0),d0
0000844C D040                       		add.w	d0,d0
0000844E 2668 0004                  		movea.l	4(a0),a3
00008452 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008456 524B                       		addq.w	#1,a3
00008458 08E8 0005 0001             		bset	#5,1(a0)
0000845E 1810                       		move.b	0(a0),d4
00008460 1A28 0001                  		move.b	1(a0),d5
00008464 2248                       		movea.l	a0,a1
00008466 6000                       		bra.s	loc_84B2
00008468                            ; ===========================================================================
00008468                            
00008468                            loc_84AA:
00008468 6100 0000                  		bsr.w	SingleObjLoad
0000846C 6600                       		bne.s	loc_84F2
0000846E 5A4B                       		addq.w	#5,a3
00008470                            
00008470                            loc_84B2:
00008470 137C 0006 0024             		move.b	#6,$24(a1)
00008476 1284                       		move.b	d4,0(a1)
00008478 234B 0004                  		move.l	a3,4(a1)
0000847C 1345 0001                  		move.b	d5,1(a1)
00008480 3368 0008 0008             		move.w	8(a0),8(a1)
00008486 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000848C 3368 0002 0002             		move.w	2(a0),2(a1)
00008492 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008498 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000849E 135C 0038                  		move.b	(a4)+,$38(a1)
000084A2 B3C8                       		cmpa.l	a0,a1
000084A4 6400                       		bcc.s	loc_84EE
000084A6 6100 0000                  		bsr.w	DisplaySprite2
000084AA                            
000084AA                            loc_84EE:
000084AA 51C9 FFBC                  		dbf	d1,loc_84AA
000084AE                            
000084AE                            loc_84F2:
000084AE 6100 0000                  		bsr.w	DisplaySprite
000084B2 303C 00B9                  		move.w	#$B9,d0
000084B6 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000084BC                            ; ===========================================================================
000084BC                            ; ---------------------------------------------------------------------------
000084BC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000084BC                            ; ---------------------------------------------------------------------------
000084BC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000084CC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000084D6 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000084DE 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000084E6                            
000084E6                            ; ---------------------------------------------------------------------------
000084E6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000084E6                            ; ---------------------------------------------------------------------------
000084E6                            
000084E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084E6                            
000084E6                            
000084E6                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000084E6 43F8 D000                  		lea	($FFFFD000).w,a1
000084EA 0829 0003 0022             		btst	#3,$22(a1)
000084F0 6700                       		beq.s	locret_856E
000084F2 3029 0008                  		move.w	8(a1),d0
000084F6 9068 0008                  		sub.w	8(a0),d0
000084FA D041                       		add.w	d1,d0
000084FC E248                       		lsr.w	#1,d0
000084FE 0828 0000 0001             		btst	#0,1(a0)
00008504 6700                       		beq.s	loc_854E
00008506 4640                       		not.w	d0
00008508 D041                       		add.w	d1,d0
0000850A                            
0000850A                            loc_854E:
0000850A 7200                       		moveq	#0,d1
0000850C 1232 0000                  		move.b	(a2,d0.w),d1
00008510 3028 000C                  		move.w	$C(a0),d0
00008514 9041                       		sub.w	d1,d0
00008516 7200                       		moveq	#0,d1
00008518 1229 0016                  		move.b	$16(a1),d1
0000851C 9041                       		sub.w	d1,d0
0000851E 3340 000C                  		move.w	d0,$C(a1)
00008522 9468 0008                  		sub.w	8(a0),d2
00008526 9569 0008                  		sub.w	d2,8(a1)
0000852A                            
0000852A                            locret_856E:
0000852A 4E75                       		rts	
0000852C                            ; End of function SlopeObject2
0000852C                            
0000852C                            ; ===========================================================================
0000852C                            ; ---------------------------------------------------------------------------
0000852C                            ; Collision data for GHZ collapsing ledge
0000852C                            ; ---------------------------------------------------------------------------
0000852C                            Obj1A_SlopeData:
0000852C                            		incbin	misc\ghzledge.bin
0000855C                            		even
0000855C                            
0000855C                            ; ---------------------------------------------------------------------------
0000855C                            ; Sprite mappings - GHZ	collapsing ledge
0000855C                            ; ---------------------------------------------------------------------------
0000855C                            Map_obj1A:
0000855C                            	include "_maps\obj1A.asm"
0000855C                            ; ---------------------------------------------------------------------------
0000855C                            ; Sprite mappings - GHZ	collapsing ledge
0000855C                            ; ---------------------------------------------------------------------------
0000855C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008560 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008564 10                         byte_85A8:	dc.b $10
00008565 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000856A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000856F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008574 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008579 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000857E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008583 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008588 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000858D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008592 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008597 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000859C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000085A1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000085A6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000085AB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000085B0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000085B5 10                         byte_85F9:	dc.b $10
000085B6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000085BB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000085C0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000085C5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000085CA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000085CF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000085D4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000085D9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000085DE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000085E3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000085E8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000085ED 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000085F2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000085F7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000085FC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008601 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008606 19                         byte_864A:	dc.b $19
00008607 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000860C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008611 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008616 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000861B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008620 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008625 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000862A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000862F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008634 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008639 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000863E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008643 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008648 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000864D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008652 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008657 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000865C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008661 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008666 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000866B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008670 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008675 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000867A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000867F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008684 19                         byte_86C8:	dc.b $19
00008685 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000868A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000868F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008694 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008699 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000869E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000086A3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000086A8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000086AD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086B2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000086B7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000086BC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000086C1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000086C6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000086CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086D0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000086D5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000086DA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000086DF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086E4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000086E9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000086EE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000086F3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000086F8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000086FD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008702                            		even
00008702                            		even
00008702                            
00008702                            ; ---------------------------------------------------------------------------
00008702                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008702                            ; ---------------------------------------------------------------------------
00008702                            Map_obj53:
00008702                            	include "_maps\obj53.asm"
00008702                            ; ---------------------------------------------------------------------------
00008702                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008702                            ; ---------------------------------------------------------------------------
00008702 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008706 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000870A 04                         byte_874E:	dc.b 4
0000870B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008710 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008715 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000871A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000871F 08                         byte_8763:	dc.b 8
00008720 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008725 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000872A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000872F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008734 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008739 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000873E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008743 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008748 04                         byte_878C:	dc.b 4
00008749 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000874E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008753 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008758 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000875D 08                         byte_87A1:	dc.b 8
0000875E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008763 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008768 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000876D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008772 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008777 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000877C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008781 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008786                            		even
00008786                            		even
00008786                            
00008786                            ; ===========================================================================
00008786                            ; ---------------------------------------------------------------------------
00008786                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008786                            ; ---------------------------------------------------------------------------
00008786                            
00008786                            Obj1C:					; XREF: Obj_Index
00008786 7000                       		moveq	#0,d0
00008788 1028 0024                  		move.b	$24(a0),d0
0000878C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008790 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008794                            ; ===========================================================================
00008794 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008796 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008798                            ; ===========================================================================
00008798                            
00008798                            Obj1C_Main:				; XREF: Obj1C_Index
00008798 5428 0024                  		addq.b	#2,$24(a0)
0000879C 7000                       		moveq	#0,d0
0000879E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000087A2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000087A6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000087AA 2159 0004                  		move.l	(a1)+,4(a0)
000087AE 3159 0002                  		move.w	(a1)+,2(a0)
000087B2 0028 0004 0001             		ori.b	#4,1(a0)
000087B8 1159 001A                  		move.b	(a1)+,$1A(a0)
000087BC 1159 0019                  		move.b	(a1)+,$19(a0)
000087C0 1159 0018                  		move.b	(a1)+,$18(a0)
000087C4 1159 0020                  		move.b	(a1)+,$20(a0)
000087C8                            
000087C8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000087C8 3028 0008                  		move.w	8(a0),d0
000087CC 0240 FF80                  		andi.w	#$FF80,d0
000087D0 3238 F700                  		move.w	($FFFFF700).w,d1
000087D4 0441 0080                  		subi.w	#$80,d1
000087D8 0241 FF80                  		andi.w	#$FF80,d1
000087DC 9041                       		sub.w	d1,d0
000087DE 0C40 0280                  		cmpi.w	#$280,d0
000087E2 6200 0000                  		bhi.w	DeleteObject
000087E6 6000 0000                  		bra.w	DisplaySprite
000087EA                            ; ===========================================================================
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            ; Variables for	object $1C are stored in an array
000087EA                            ; ---------------------------------------------------------------------------
000087EA 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000087EE 44D8                       		dc.w $44D8		; VRAM setting
000087F0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000087F4 0000 0000                  		dc.l Map_obj1C
000087F8 44D8                       		dc.w $44D8
000087FA 0008 0200                  		dc.b 0,	8, 2, 0
000087FE 0000 0000                  		dc.l Map_obj1C
00008802 44D8                       		dc.w $44D8
00008804 0008 0200                  		dc.b 0,	8, 2, 0
00008808 0000 78FC                  		dc.l Map_obj11
0000880C 438E                       		dc.w $438E
0000880E 0110 0100                  		dc.b 1,	$10, 1,	0
00008812                            ; ---------------------------------------------------------------------------
00008812                            ; Sprite mappings - SLZ	lava thrower
00008812                            ; ---------------------------------------------------------------------------
00008812                            Map_obj1C:
00008812                            	include "_maps\obj1C.asm"
00008812                            ; ---------------------------------------------------------------------------
00008812                            ; Sprite mappings - SLZ	lava thrower
00008812                            ; ---------------------------------------------------------------------------
00008812 0000                       		dc.w byte_8858-Map_obj1C
00008814 01                         byte_8858:	dc.b 1
00008815 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000881A                            		even
0000881A                            		even
0000881A                            
0000881A                            ; ===========================================================================
0000881A                            ; ---------------------------------------------------------------------------
0000881A                            ; Object 1D - switch that activates when Sonic touches it
0000881A                            ; (this	is not used anywhere in	the game)
0000881A                            ; ---------------------------------------------------------------------------
0000881A                            
0000881A                            Obj1D:					; XREF: Obj_Index
0000881A 7000                       		moveq	#0,d0
0000881C 1028 0024                  		move.b	$24(a0),d0
00008820 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008824 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008828                            ; ===========================================================================
00008828 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000882A 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000882C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000882E                            ; ===========================================================================
0000882E                            
0000882E                            Obj1D_Main:				; XREF: Obj1D_Index
0000882E 5428 0024                  		addq.b	#2,$24(a0)
00008832 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000883A 317C 4000 0002             		move.w	#$4000,2(a0)
00008840 117C 0004 0001             		move.b	#4,1(a0)
00008846 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000884C 117C 0010 0019             		move.b	#$10,$19(a0)
00008852 117C 0005 0018             		move.b	#5,$18(a0)
00008858                            
00008858                            Obj1D_Action:				; XREF: Obj1D_Index
00008858 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000885E 323C 0010                  		move.w	#$10,d1
00008862 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008866 6700                       		beq.s	Obj1D_ChkDel
00008868 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000886C 7001                       		moveq	#1,d0
0000886E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008872                            
00008872                            Obj1D_ChkDel:
00008872 6100 0000                  		bsr.w	DisplaySprite
00008876 3028 0008                  		move.w	8(a0),d0
0000887A 0240 FF80                  		andi.w	#$FF80,d0
0000887E 3238 F700                  		move.w	($FFFFF700).w,d1
00008882 0441 0080                  		subi.w	#$80,d1
00008886 0241 FF80                  		andi.w	#$FF80,d1
0000888A 9041                       		sub.w	d1,d0
0000888C 0C40 0280                  		cmpi.w	#$280,d0
00008890 6200 0000                  		bhi.w	Obj1D_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj1D_Delete:				; XREF: Obj1D_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            ; Subroutine to	check if Sonic touches the object
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            
0000889C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000889C                            
0000889C                            
0000889C                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000889C 43F8 D000                  		lea	($FFFFD000).w,a1
000088A0 3029 0008                  		move.w	8(a1),d0
000088A4 9068 0008                  		sub.w	8(a0),d0
000088A8 D041                       		add.w	d1,d0
000088AA 6B00                       		bmi.s	loc_8918
000088AC D241                       		add.w	d1,d1
000088AE B041                       		cmp.w	d1,d0
000088B0 6400                       		bcc.s	loc_8918
000088B2 3429 000C                  		move.w	$C(a1),d2
000088B6 1229 0016                  		move.b	$16(a1),d1
000088BA 4881                       		ext.w	d1
000088BC D242                       		add.w	d2,d1
000088BE 3028 000C                  		move.w	$C(a0),d0
000088C2 0440 0010                  		subi.w	#$10,d0
000088C6 9041                       		sub.w	d1,d0
000088C8 6200                       		bhi.s	loc_8918
000088CA 0C40 FFF0                  		cmpi.w	#-$10,d0
000088CE 6500                       		bcs.s	loc_8918
000088D0 70FF                       		moveq	#-1,d0
000088D2 4E75                       		rts	
000088D4                            ; ===========================================================================
000088D4                            
000088D4                            loc_8918:
000088D4 7000                       		moveq	#0,d0
000088D6 4E75                       		rts	
000088D8                            ; End of function Obj1D_ChkTouch
000088D8                            
000088D8                            ; ===========================================================================
000088D8                            ; ---------------------------------------------------------------------------
000088D8                            ; Sprite mappings - object 1D
000088D8                            ; ---------------------------------------------------------------------------
000088D8                            Map_obj1D:
000088D8                            	include "_maps\obj1D.asm"
000088D8                            ; ---------------------------------------------------------------------------
000088D8                            ; Sprite mappings - object 1D
000088D8                            ; ---------------------------------------------------------------------------
000088D8 0000                       		dc.w byte_891E-Map_obj1D
000088DA 04                         byte_891E:	dc.b 4
000088DB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000088E0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000088E5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000088EA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000088F0 00                         		even
000088F0 00                         		even
000088F0                            
000088F0                            ; ===========================================================================
000088F0                            ; ---------------------------------------------------------------------------
000088F0                            ; Object 2A - doors (SBZ)
000088F0                            ; ---------------------------------------------------------------------------
000088F0                            
000088F0                            Obj2A:					; XREF: Obj_Index
000088F0 7000                       		moveq	#0,d0
000088F2 1028 0024                  		move.b	$24(a0),d0
000088F6 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000088FA 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000088FE                            ; ===========================================================================
000088FE 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008900 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008902                            ; ===========================================================================
00008902                            
00008902                            Obj2A_Main:				; XREF: Obj2A_Index
00008902 5428 0024                  		addq.b	#2,$24(a0)
00008906 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000890E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008914 0028 0004 0001             		ori.b	#4,1(a0)
0000891A 117C 0008 0019             		move.b	#8,$19(a0)
00008920 117C 0004 0018             		move.b	#4,$18(a0)
00008926                            
00008926                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008926 323C 0040                  		move.w	#$40,d1
0000892A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000892E 3038 D008                  		move.w	($FFFFD008).w,d0
00008932 D041                       		add.w	d1,d0
00008934 B068 0008                  		cmp.w	8(a0),d0
00008938 6500                       		bcs.s	Obj2A_Animate
0000893A 9041                       		sub.w	d1,d0
0000893C 9041                       		sub.w	d1,d0
0000893E B068 0008                  		cmp.w	8(a0),d0
00008942 6400                       		bcc.s	Obj2A_Animate
00008944 D041                       		add.w	d1,d0
00008946 B068 0008                  		cmp.w	8(a0),d0
0000894A 6400                       		bcc.s	loc_899A
0000894C 0828 0000 0022             		btst	#0,$22(a0)
00008952 6600                       		bne.s	Obj2A_Animate
00008954 6000                       		bra.s	Obj2A_Open
00008956                            ; ===========================================================================
00008956                            
00008956                            loc_899A:				; XREF: Obj2A_OpenShut
00008956 0828 0000 0022             		btst	#0,$22(a0)
0000895C 6700                       		beq.s	Obj2A_Animate
0000895E                            
0000895E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000895E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008964                            
00008964                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008964 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000896A 6100 0000                  		bsr.w	AnimateSprite
0000896E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008972 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008974 323C 0011                  		move.w	#$11,d1
00008978 343C 0020                  		move.w	#$20,d2
0000897C 3602                       		move.w	d2,d3
0000897E 5243                       		addq.w	#1,d3
00008980 3828 0008                  		move.w	8(a0),d4
00008984 6100 0000                  		bsr.w	SolidObject
00008988                            
00008988                            Obj2A_MarkAsUsed:
00008988 6000 0000                  		bra.w	MarkObjGone
0000898C                            ; ===========================================================================
0000898C                            Ani_obj2A:
0000898C                            	include "_anim\obj2A.asm"
0000898C                            ; ---------------------------------------------------------------------------
0000898C                            ; Animation script - doors (SBZ)
0000898C                            ; ---------------------------------------------------------------------------
0000898C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000898E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008990 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000899C 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000089A8                            		even
000089A8                            		even
000089A8                            
000089A8                            ; ---------------------------------------------------------------------------
000089A8                            ; Sprite mappings - doors (SBZ)
000089A8                            ; ---------------------------------------------------------------------------
000089A8                            Map_obj2A:
000089A8                            	include "_maps\obj2A.asm"
000089A8                            ; ---------------------------------------------------------------------------
000089A8                            ; Sprite mappings - doors (SBZ)
000089A8                            ; ---------------------------------------------------------------------------
000089A8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000089AC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000089B0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000089B4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000089B8 0000                       		dc.w byte_8A56-Map_obj2A
000089BA 02                         byte_89FE:	dc.b 2
000089BB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000089C0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000089C5 02                         byte_8A09:	dc.b 2
000089C6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000089CB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000089D0 02                         byte_8A14:	dc.b 2
000089D1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000089D6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000089DB 02                         byte_8A1F:	dc.b 2
000089DC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000089E1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000089E6 02                         byte_8A2A:	dc.b 2
000089E7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000089EC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000089F1 02                         byte_8A35:	dc.b 2
000089F2 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000089F7 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000089FC 02                         byte_8A40:	dc.b 2
000089FD C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008A02 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008A07 02                         byte_8A4B:	dc.b 2
00008A08 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008A0D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008A12 02                         byte_8A56:	dc.b 2
00008A13 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008A18 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008A1E 00                         		even
00008A1E 00                         		even
00008A1E                            
00008A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A1E                            
00008A1E                            
00008A1E                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008A1E 6100 0000                  		bsr.w	Obj44_SolidWall2
00008A22 6700                       		beq.s	loc_8AA8
00008A24 6B00 0000                  		bmi.w	loc_8AC4
00008A28 4A40                       		tst.w	d0
00008A2A 6700 0000                  		beq.w	loc_8A92
00008A2E 6B00                       		bmi.s	loc_8A7C
00008A30 4A69 0010                  		tst.w	$10(a1)
00008A34 6B00                       		bmi.s	loc_8A92
00008A36 6000                       		bra.s	loc_8A82
00008A38                            ; ===========================================================================
00008A38                            
00008A38                            loc_8A7C:
00008A38 4A69 0010                  		tst.w	$10(a1)
00008A3C 6A00                       		bpl.s	loc_8A92
00008A3E                            
00008A3E                            loc_8A82:
00008A3E 9169 0008                  		sub.w	d0,8(a1)
00008A42 337C 0000 0014             		move.w	#0,$14(a1)
00008A48 337C 0000 0010             		move.w	#0,$10(a1)
00008A4E                            
00008A4E                            loc_8A92:
00008A4E 0829 0001 0022             		btst	#1,$22(a1)
00008A54 6600                       		bne.s	loc_8AB6
00008A56 08E9 0005 0022             		bset	#5,$22(a1)
00008A5C 08E8 0005 0022             		bset	#5,$22(a0)
00008A62 4E75                       		rts	
00008A64                            ; ===========================================================================
00008A64                            
00008A64                            loc_8AA8:
00008A64 0828 0005 0022             		btst	#5,$22(a0)
00008A6A 6700                       		beq.s	locret_8AC2
00008A6C 337C 0001 001C             		move.w	#1,$1C(a1)
00008A72                            
00008A72                            loc_8AB6:
00008A72 08A8 0005 0022             		bclr	#5,$22(a0)
00008A78 08A9 0005 0022             		bclr	#5,$22(a1)
00008A7E                            
00008A7E                            locret_8AC2:
00008A7E 4E75                       		rts	
00008A80                            ; ===========================================================================
00008A80                            
00008A80                            loc_8AC4:
00008A80 4A69 0012                  		tst.w	$12(a1)
00008A84 6A00                       		bpl.s	locret_8AD8
00008A86 4A43                       		tst.w	d3
00008A88 6A00                       		bpl.s	locret_8AD8
00008A8A 9769 000C                  		sub.w	d3,$C(a1)
00008A8E 337C 0000 0012             		move.w	#0,$12(a1)
00008A94                            
00008A94                            locret_8AD8:
00008A94 4E75                       		rts	
00008A96                            ; End of function Obj44_SolidWall
00008A96                            
00008A96                            
00008A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A96                            
00008A96                            
00008A96                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008A96 43F8 D000                  		lea	($FFFFD000).w,a1
00008A9A 3029 0008                  		move.w	8(a1),d0
00008A9E 9068 0008                  		sub.w	8(a0),d0
00008AA2 D041                       		add.w	d1,d0
00008AA4 6B00                       		bmi.s	loc_8B48
00008AA6 3601                       		move.w	d1,d3
00008AA8 D643                       		add.w	d3,d3
00008AAA B043                       		cmp.w	d3,d0
00008AAC 6200                       		bhi.s	loc_8B48
00008AAE 1629 0016                  		move.b	$16(a1),d3
00008AB2 4883                       		ext.w	d3
00008AB4 D443                       		add.w	d3,d2
00008AB6 3629 000C                  		move.w	$C(a1),d3
00008ABA 9668 000C                  		sub.w	$C(a0),d3
00008ABE D642                       		add.w	d2,d3
00008AC0 6B00                       		bmi.s	loc_8B48
00008AC2 3802                       		move.w	d2,d4
00008AC4 D844                       		add.w	d4,d4
00008AC6 B644                       		cmp.w	d4,d3
00008AC8 6400                       		bcc.s	loc_8B48
00008ACA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008ACE 6B00                       		bmi.s	loc_8B48
00008AD0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008AD6 6400                       		bcc.s	loc_8B48
00008AD8 4A78 FE08                  		tst.w	($FFFFFE08).w
00008ADC 6600                       		bne.s	loc_8B48
00008ADE 3A00                       		move.w	d0,d5
00008AE0 B240                       		cmp.w	d0,d1
00008AE2 6400                       		bcc.s	loc_8B30
00008AE4 D241                       		add.w	d1,d1
00008AE6 9041                       		sub.w	d1,d0
00008AE8 3A00                       		move.w	d0,d5
00008AEA 4445                       		neg.w	d5
00008AEC                            
00008AEC                            loc_8B30:
00008AEC 3203                       		move.w	d3,d1
00008AEE B443                       		cmp.w	d3,d2
00008AF0 6400                       		bcc.s	loc_8B3C
00008AF2 9644                       		sub.w	d4,d3
00008AF4 3203                       		move.w	d3,d1
00008AF6 4441                       		neg.w	d1
00008AF8                            
00008AF8                            loc_8B3C:
00008AF8 BA41                       		cmp.w	d1,d5
00008AFA 6200                       		bhi.s	loc_8B44
00008AFC 7801                       		moveq	#1,d4
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            loc_8B44:
00008B00 78FF                       		moveq	#-1,d4
00008B02 4E75                       		rts	
00008B04                            ; ===========================================================================
00008B04                            
00008B04                            loc_8B48:
00008B04 7800                       		moveq	#0,d4
00008B06 4E75                       		rts	
00008B08                            ; End of function Obj44_SolidWall2
00008B08                            
00008B08                            ; ===========================================================================
00008B08                            ; ---------------------------------------------------------------------------
00008B08                            ; Object 1E - Ball Hog enemy (SBZ)
00008B08                            ; ---------------------------------------------------------------------------
00008B08                            
00008B08                            Obj1E:					; XREF: Obj_Index
00008B08 7000                       		moveq	#0,d0
00008B0A 1028 0024                  		move.b	$24(a0),d0
00008B0E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008B12 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008B16                            ; ===========================================================================
00008B16 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008B18 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008B1A                            ; ===========================================================================
00008B1A                            
00008B1A                            Obj1E_Main:				; XREF: Obj1E_Index
00008B1A 117C 0013 0016             		move.b	#$13,$16(a0)
00008B20 117C 0008 0017             		move.b	#8,$17(a0)
00008B26 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008B2E 317C 2302 0002             		move.w	#$2302,2(a0)
00008B34 117C 0004 0001             		move.b	#4,1(a0)
00008B3A 117C 0004 0018             		move.b	#4,$18(a0)
00008B40 117C 0005 0020             		move.b	#5,$20(a0)
00008B46 117C 000C 0019             		move.b	#$C,$19(a0)
00008B4C 6100 0000                  		bsr.w	ObjectFall
00008B50 4EB9 0000 0000             		jsr	ObjHitFloor
00008B56 4A41                       		tst.w	d1
00008B58 6A00                       		bpl.s	locret_8BAC
00008B5A D368 000C                  		add.w	d1,$C(a0)
00008B5E 317C 0000 0012             		move.w	#0,$12(a0)
00008B64 5428 0024                  		addq.b	#2,$24(a0)
00008B68                            
00008B68                            locret_8BAC:
00008B68 4E75                       		rts	
00008B6A                            ; ===========================================================================
00008B6A                            
00008B6A                            Obj1E_Action:				; XREF: Obj1E_Index
00008B6A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008B70 6100 0000                  		bsr.w	AnimateSprite
00008B74 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008B7A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008B7C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008B80 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008B82 6000                       		bra.s	Obj1E_MarkAsGone
00008B84                            ; ===========================================================================
00008B84                            
00008B84                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008B84 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008B88                            
00008B88                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008B88 6000 0000                  		bra.w	MarkObjGone
00008B8C                            ; ===========================================================================
00008B8C                            
00008B8C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008B8C 117C 0001 0032             		move.b	#1,$32(a0)
00008B92 6100 0000                  		bsr.w	SingleObjLoad
00008B96 6600                       		bne.s	loc_8C1A
00008B98 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008B9C 3368 0008 0008             		move.w	8(a0),8(a1)
00008BA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BA8 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008BAE 337C 0000 0012             		move.w	#0,$12(a1)
00008BB4 70FC                       		moveq	#-4,d0
00008BB6 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008BBC 6700                       		beq.s	loc_8C0A	; if not, branch
00008BBE 4440                       		neg.w	d0
00008BC0 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008BC4                            
00008BC4                            loc_8C0A:
00008BC4 D169 0008                  		add.w	d0,8(a1)
00008BC8 0669 000C 000C             		addi.w	#$C,$C(a1)
00008BCE 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008BD4                            
00008BD4                            loc_8C1A:
00008BD4 60B2                       		bra.s	Obj1E_MarkAsGone
00008BD6                            ; ===========================================================================
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            
00008BD6                            Obj20:					; XREF: Obj_Index
00008BD6 7000                       		moveq	#0,d0
00008BD8 1028 0024                  		move.b	$24(a0),d0
00008BDC 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008BE0 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008BE4                            ; ===========================================================================
00008BE4 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008BE6 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008BE8                            ; ===========================================================================
00008BE8                            
00008BE8                            Obj20_Main:				; XREF: Obj20_Index
00008BE8 5428 0024                  		addq.b	#2,$24(a0)
00008BEC 117C 0007 0016             		move.b	#7,$16(a0)
00008BF2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008BFA 317C 2302 0002             		move.w	#$2302,2(a0)
00008C00 117C 0004 0001             		move.b	#4,1(a0)
00008C06 117C 0003 0018             		move.b	#3,$18(a0)
00008C0C 117C 0087 0020             		move.b	#$87,$20(a0)
00008C12 117C 0008 0019             		move.b	#8,$19(a0)
00008C18 7000                       		moveq	#0,d0
00008C1A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008C1E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008C22 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008C26 117C 0004 001A             		move.b	#4,$1A(a0)
00008C2C                            
00008C2C                            Obj20_Bounce:				; XREF: Obj20_Index
00008C2C 4EB9 0000 0000             		jsr	ObjectFall
00008C32 4A68 0012                  		tst.w	$12(a0)
00008C36 6B00                       		bmi.s	Obj20_ChkExplode
00008C38 4EB9 0000 0000             		jsr	ObjHitFloor
00008C3E 4A41                       		tst.w	d1
00008C40 6A00                       		bpl.s	Obj20_ChkExplode
00008C42 D368 000C                  		add.w	d1,$C(a0)
00008C46 317C FD00 0012             		move.w	#-$300,$12(a0)
00008C4C 4A03                       		tst.b	d3
00008C4E 6700                       		beq.s	Obj20_ChkExplode
00008C50 6B00                       		bmi.s	loc_8CA4
00008C52 4A68 0010                  		tst.w	$10(a0)
00008C56 6A00                       		bpl.s	Obj20_ChkExplode
00008C58 4468 0010                  		neg.w	$10(a0)
00008C5C 6000                       		bra.s	Obj20_ChkExplode
00008C5E                            ; ===========================================================================
00008C5E                            
00008C5E                            loc_8CA4:				; XREF: Obj20_Bounce
00008C5E 4A68 0010                  		tst.w	$10(a0)
00008C62 6B00                       		bmi.s	Obj20_ChkExplode
00008C64 4468 0010                  		neg.w	$10(a0)
00008C68                            
00008C68                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008C68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008C6C 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008C6E 10BC 0024                  		move.b	#$24,0(a0)
00008C72 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008C76 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008C7C 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008C80                            ; ===========================================================================
00008C80                            
00008C80                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008C80 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008C84 6A00                       		bpl.s	Obj20_Display
00008C86 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008C8C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008C92                            
00008C92                            Obj20_Display:
00008C92 6100 0000                  		bsr.w	DisplaySprite
00008C96 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008C9A 0640 00E0                  		addi.w	#$E0,d0
00008C9E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008CA2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008CA6 4E75                       		rts	
00008CA8                            ; ===========================================================================
00008CA8                            ; ---------------------------------------------------------------------------
00008CA8                            ; Object 24 - explosion	from a destroyed monitor
00008CA8                            ; ---------------------------------------------------------------------------
00008CA8                            
00008CA8                            Obj24:					; XREF: Obj_Index
00008CA8 7000                       		moveq	#0,d0
00008CAA 1028 0024                  		move.b	$24(a0),d0
00008CAE 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008CB2 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008CB6                            ; ===========================================================================
00008CB6 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008CB8 0000                       		dc.w Obj24_Animate-Obj24_Index
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            Obj24_Main:				; XREF: Obj24_Index
00008CBA 5428 0024                  		addq.b	#2,$24(a0)
00008CBE 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008CC6 317C 041C 0002             		move.w	#$41C,2(a0)
00008CCC 117C 0004 0001             		move.b	#4,1(a0)
00008CD2 117C 0001 0018             		move.b	#1,$18(a0)
00008CD8 117C 0000 0020             		move.b	#0,$20(a0)
00008CDE 117C 000C 0019             		move.b	#$C,$19(a0)
00008CE4 117C 0009 001E             		move.b	#9,$1E(a0)
00008CEA 117C 0000 001A             		move.b	#0,$1A(a0)
00008CF0 303C 00A5                  		move.w	#$A5,d0
00008CF4 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play explosion sound
00008CFA                            
00008CFA                            Obj24_Animate:				; XREF: Obj24_Index
00008CFA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008CFE 6A00                       		bpl.s	Obj24_Display
00008D00 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008D06 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008D0A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008D10 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008D14                            
00008D14                            Obj24_Display:
00008D14 6000 0000                  		bra.w	DisplaySprite
00008D18                            ; ===========================================================================
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            ; Object 27 - explosion	from a destroyed enemy
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            
00008D18                            Obj27:					; XREF: Obj_Index
00008D18 7000                       		moveq	#0,d0
00008D1A 1028 0024                  		move.b	$24(a0),d0
00008D1E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008D22 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008D26                            ; ===========================================================================
00008D26 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008D28 0000                       		dc.w Obj27_Main-Obj27_Index
00008D2A 0000                       		dc.w Obj27_Animate-Obj27_Index
00008D2C                            ; ===========================================================================
00008D2C                            
00008D2C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008D2C 5428 0024                  		addq.b	#2,$24(a0)
00008D30 6100 0000                  		bsr.w	SingleObjLoad
00008D34 6600                       		bne.s	Obj27_Main
00008D36 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008D3A 3368 0008 0008             		move.w	8(a0),8(a1)
00008D40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D46 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008D4C                            
00008D4C                            Obj27_Main:				; XREF: Obj27_Index
00008D4C 5428 0024                  		addq.b	#2,$24(a0)
00008D50 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008D58 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008D5E 117C 0004 0001             		move.b	#4,1(a0)
00008D64 117C 0001 0018             		move.b	#1,$18(a0)
00008D6A 117C 0000 0020             		move.b	#0,$20(a0)
00008D70 117C 000C 0019             		move.b	#$C,$19(a0)
00008D76 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008D7C 117C 0000 001A             		move.b	#0,$1A(a0)
00008D82 303C 00C1                  		move.w	#$C1,d0
00008D86 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008D8C                            
00008D8C                            Obj27_Animate:				; XREF: Obj27_Index
00008D8C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008D90 6A00                       		bpl.s	Obj27_Display
00008D92 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008D98 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008D9C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008DA2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008DA6                            
00008DA6                            Obj27_Display:
00008DA6 6000 0000                  		bra.w	DisplaySprite
00008DAA                            ; ===========================================================================
00008DAA                            ; ---------------------------------------------------------------------------
00008DAA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008DAA                            ; ---------------------------------------------------------------------------
00008DAA                            
00008DAA                            Obj3F:					; XREF: Obj_Index
00008DAA 7000                       		moveq	#0,d0
00008DAC 1028 0024                  		move.b	$24(a0),d0
00008DB0 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008DB4 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008DB8                            ; ===========================================================================
00008DB8 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008DBA FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Obj3F_Main:				; XREF: Obj3F_Index
00008DBC 5428 0024                  		addq.b	#2,$24(a0)
00008DC0 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008DC8 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008DCE 117C 0004 0001             		move.b	#4,1(a0)
00008DD4 117C 0001 0018             		move.b	#1,$18(a0)
00008DDA 117C 0000 0020             		move.b	#0,$20(a0)
00008DE0 117C 000C 0019             		move.b	#$C,$19(a0)
00008DE6 117C 0007 001E             		move.b	#7,$1E(a0)
00008DEC 117C 0000 001A             		move.b	#0,$1A(a0)
00008DF2 303C 00C4                  		move.w	#$C4,d0
00008DF6 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008DFC                            ; ===========================================================================
00008DFC                            Ani_obj1E:
00008DFC                            	include "_anim\obj1E.asm"
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC                            ; Animation script - doors (SBZ)
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC 0000                       		dc.w byte_8E4A-Ani_obj1E
00008DFE 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008E16 00                         		even
00008E16 00                         		even
00008E16                            
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            Map_obj1E:
00008E16                            	include "_maps\obj1E.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008E1A 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008E1E 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008E22 02                         byte_8E6E:	dc.b 2
00008E23 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E28 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008E2D 02                         byte_8E79:	dc.b 2
00008E2E EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E33 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008E38 02                         byte_8E84:	dc.b 2
00008E39 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008E3E 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008E43 02                         byte_8E8F:	dc.b 2
00008E44 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008E49 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008E4E 01                         byte_8E9A:	dc.b 1
00008E4F F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008E54 01                         byte_8EA0:	dc.b 1
00008E55 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008E5A                            		even
00008E5A                            		even
00008E5A                            
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A                            ; Sprite mappings - explosion
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A                            Map_obj24:
00008E5A                            	include "_maps\obj24.asm"
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A                            ; Sprite mappings - explosion
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008E5E 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008E62 01                         byte_8EAE:	dc.b 1
00008E63 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008E68 01                         byte_8EB4:	dc.b 1
00008E69 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008E6E 01                         byte_8EBA:	dc.b 1
00008E6F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008E74 01                         byte_8EC0:	dc.b 1
00008E75 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008E7A                            		even
00008E7A                            		even
00008E7A                            
00008E7A                            ; ---------------------------------------------------------------------------
00008E7A                            ; Sprite mappings - explosion
00008E7A                            ; ---------------------------------------------------------------------------
00008E7A 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008E7E 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008E82 0000                       		dc.w byte_8EF7-Map_obj27
00008E84 01                         byte_8ED0:	dc.b 1
00008E85 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008E8A 01                         byte_8ED6:	dc.b 1
00008E8B F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008E90 01                         byte_8EDC:	dc.b 1
00008E91 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008E96 04                         byte_8EE2:	dc.b 4
00008E97 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008E9C EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008EA1 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008EA6 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008EAB 04                         byte_8EF7:	dc.b 4
00008EAC EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008EB1 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008EB6 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008EBB FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008EC0                            		even
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0                            ; Sprite mappings - explosion from when	a boss is destroyed
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00008EC2 0000                       		dc.w byte_8F16-Map_obj3F
00008EC4 0000                       		dc.w byte_8F1C-Map_obj3F
00008EC6 FFD6                       		dc.w byte_8EE2-Map_obj3F
00008EC8 FFEB                       		dc.w byte_8EF7-Map_obj3F
00008ECA 01                         byte_8F16:	dc.b 1
00008ECB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00008ED0 01                         byte_8F1C:	dc.b 1
00008ED1 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00008ED6                            		even
00008ED6                            ; ===========================================================================
00008ED6                            ; ---------------------------------------------------------------------------
00008ED6                            ; Object 28 - animals
00008ED6                            ; ---------------------------------------------------------------------------
00008ED6                            
00008ED6                            Obj28:					; XREF: Obj_Index
00008ED6 7000                       		moveq	#0,d0
00008ED8 1028 0024                  		move.b	$24(a0),d0
00008EDC 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00008EE0 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00008EE4                            ; ===========================================================================
00008EE4 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00008EE8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008EEC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00008EF0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008EF4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00008EF8 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00008EFC 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00008F00 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F04 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F08 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00008F0C 0000                       		dc.w loc_92D6-Obj28_Index
00008F0E                            
00008F0E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00008F1A                            
00008F1A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00008F1E 0000 0000                  		dc.l Map_obj28
00008F22 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00008F26 0000 0000                  		dc.l Map_obj28a		; mappings address
00008F2A FE80 FD00                  		dc.w $FE80, $FD00
00008F2E 0000 0000                  		dc.l Map_obj28
00008F32 FEC0 FE80                  		dc.w $FEC0, $FE80
00008F36 0000 0000                  		dc.l Map_obj28a
00008F3A FE40 FD00                  		dc.w $FE40, $FD00
00008F3E 0000 0000                  		dc.l Map_obj28b
00008F42 FD00 FC00                  		dc.w $FD00, $FC00
00008F46 0000 0000                  		dc.l Map_obj28a
00008F4A FD80 FC80                  		dc.w $FD80, $FC80
00008F4E 0000 0000                  		dc.l Map_obj28b
00008F52                            
00008F52 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00008F62 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00008F72 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00008F7E                            
00008F7E 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00008F92 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00008FA6 0000 0000                  		dc.l Map_obj28b
00008FAA                            
00008FAA 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00008FBC 0565 05B3                  		dc.w $565, $5B3
00008FC0                            ; ===========================================================================
00008FC0                            
00008FC0                            Obj28_Ending:				; XREF: Obj28_Index
00008FC0 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00008FC4 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00008FC8 7000                       		moveq	#0,d0
00008FCA 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008FCE D040                       		add.w	d0,d0		; multiply d0 by 2
00008FD0 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00008FD4 0440 0014                  		subi.w	#$14,d0
00008FD8 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00008FDE D040                       		add.w	d0,d0
00008FE0 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00008FE6 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00008FEA 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00008FF0 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00008FF6 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00008FFC 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009002 117C 000C 0016             		move.b	#$C,$16(a0)
00009008 117C 0004 0001             		move.b	#4,1(a0)
0000900E 08E8 0000 0001             		bset	#0,1(a0)
00009014 117C 0006 0018             		move.b	#6,$18(a0)
0000901A 117C 0008 0019             		move.b	#8,$19(a0)
00009020 117C 0007 001E             		move.b	#7,$1E(a0)
00009026 6000 0000                  		bra.w	DisplaySprite
0000902A                            ; ===========================================================================
0000902A                            
0000902A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000902A 5428 0024                  		addq.b	#2,$24(a0)
0000902E 6100 9962                  		bsr.w	RandomNumber
00009032 0240 0001                  		andi.w	#1,d0
00009036 7200                       		moveq	#0,d1
00009038 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000903C D241                       		add.w	d1,d1
0000903E D240                       		add.w	d0,d1
00009040 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009044 1031 1000                  		move.b	(a1,d1.w),d0
00009048 1140 0030                  		move.b	d0,$30(a0)
0000904C E748                       		lsl.w	#3,d0
0000904E 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009052 D2C0                       		adda.w	d0,a1
00009054 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009058 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000905C 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009060 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009066 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000906C 6700                       		beq.s	loc_90C0	; if yes, branch
0000906E 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009074                            
00009074                            loc_90C0:
00009074 117C 000C 0016             		move.b	#$C,$16(a0)
0000907A 117C 0004 0001             		move.b	#4,1(a0)
00009080 08E8 0000 0001             		bset	#0,1(a0)
00009086 117C 0006 0018             		move.b	#6,$18(a0)
0000908C 117C 0008 0019             		move.b	#8,$19(a0)
00009092 117C 0007 001E             		move.b	#7,$1E(a0)
00009098 117C 0002 001A             		move.b	#2,$1A(a0)
0000909E 317C FC00 0012             		move.w	#-$400,$12(a0)
000090A4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000090A8 6600                       		bne.s	loc_911C
000090AA 6100 0000                  		bsr.w	SingleObjLoad
000090AE 6600                       		bne.s	Obj28_Display
000090B0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000090B4 3368 0008 0008             		move.w	8(a0),8(a1)
000090BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090C0 3028 003E                  		move.w	$3E(a0),d0
000090C4 E248                       		lsr.w	#1,d0
000090C6 1340 001A                  		move.b	d0,$1A(a1)
000090CA                            
000090CA                            Obj28_Display:
000090CA 6000 0000                  		bra.w	DisplaySprite
000090CE                            ; ===========================================================================
000090CE                            
000090CE                            loc_911C:
000090CE 117C 0012 0024             		move.b	#$12,$24(a0)
000090D4 4268 0010                  		clr.w	$10(a0)
000090D8 6000 0000                  		bra.w	DisplaySprite
000090DC                            ; ===========================================================================
000090DC                            
000090DC                            loc_912A:				; XREF: Obj28_Index
000090DC 4A28 0001                  		tst.b	1(a0)
000090E0 6A00 0000                  		bpl.w	DeleteObject
000090E4 6100 0000                  		bsr.w	ObjectFall
000090E8 4A68 0012                  		tst.w	$12(a0)
000090EC 6B00                       		bmi.s	loc_9180
000090EE 4EB9 0000 0000             		jsr	ObjHitFloor
000090F4 4A41                       		tst.w	d1
000090F6 6A00                       		bpl.s	loc_9180
000090F8 D368 000C                  		add.w	d1,$C(a0)
000090FC 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009102 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009108 117C 0001 001A             		move.b	#1,$1A(a0)
0000910E 1028 0030                  		move.b	$30(a0),d0
00009112 D000                       		add.b	d0,d0
00009114 5800                       		addq.b	#4,d0
00009116 1140 0024                  		move.b	d0,$24(a0)
0000911A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000911E 6700                       		beq.s	loc_9180
00009120 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009126 6700                       		beq.s	loc_9180
00009128 4468 0010                  		neg.w	$10(a0)
0000912C 0868 0000 0001             		bchg	#0,1(a0)
00009132                            
00009132                            loc_9180:
00009132 6000 0000                  		bra.w	DisplaySprite
00009136                            ; ===========================================================================
00009136                            
00009136                            loc_9184:				; XREF: Obj28_Index
00009136 6100 0000                  		bsr.w	ObjectFall
0000913A 117C 0001 001A             		move.b	#1,$1A(a0)
00009140 4A68 0012                  		tst.w	$12(a0)
00009144 6B00                       		bmi.s	loc_91AE
00009146 117C 0000 001A             		move.b	#0,$1A(a0)
0000914C 4EB9 0000 0000             		jsr	ObjHitFloor
00009152 4A41                       		tst.w	d1
00009154 6A00                       		bpl.s	loc_91AE
00009156 D368 000C                  		add.w	d1,$C(a0)
0000915A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009160                            
00009160                            loc_91AE:
00009160 4A28 0028                  		tst.b	$28(a0)
00009164 6600                       		bne.s	loc_9224
00009166 4A28 0001                  		tst.b	1(a0)
0000916A 6A00 0000                  		bpl.w	DeleteObject
0000916E 6000 0000                  		bra.w	DisplaySprite
00009172                            ; ===========================================================================
00009172                            
00009172                            loc_91C0:				; XREF: Obj28_Index
00009172 6100 0000                  		bsr.w	SpeedToPos
00009176 0668 0018 0012             		addi.w	#$18,$12(a0)
0000917C 4A68 0012                  		tst.w	$12(a0)
00009180 6B00                       		bmi.s	loc_91FC
00009182 4EB9 0000 0000             		jsr	ObjHitFloor
00009188 4A41                       		tst.w	d1
0000918A 6A00                       		bpl.s	loc_91FC
0000918C D368 000C                  		add.w	d1,$C(a0)
00009190 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009196 4A28 0028                  		tst.b	$28(a0)
0000919A 6700                       		beq.s	loc_91FC
0000919C 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000091A2 6700                       		beq.s	loc_91FC
000091A4 4468 0010                  		neg.w	$10(a0)
000091A8 0868 0000 0001             		bchg	#0,1(a0)
000091AE                            
000091AE                            loc_91FC:
000091AE 5328 001E                  		subq.b	#1,$1E(a0)
000091B2 6A00                       		bpl.s	loc_9212
000091B4 117C 0001 001E             		move.b	#1,$1E(a0)
000091BA 5228 001A                  		addq.b	#1,$1A(a0)
000091BE 0228 0001 001A             		andi.b	#1,$1A(a0)
000091C4                            
000091C4                            loc_9212:
000091C4 4A28 0028                  		tst.b	$28(a0)
000091C8 6600                       		bne.s	loc_9224
000091CA 4A28 0001                  		tst.b	1(a0)
000091CE 6A00 0000                  		bpl.w	DeleteObject
000091D2 6000 0000                  		bra.w	DisplaySprite
000091D6                            ; ===========================================================================
000091D6                            
000091D6                            loc_9224:				; XREF: Obj28_Index
000091D6 3028 0008                  		move.w	8(a0),d0
000091DA 9078 D008                  		sub.w	($FFFFD008).w,d0
000091DE 6500                       		bcs.s	loc_923C
000091E0 0440 0180                  		subi.w	#$180,d0
000091E4 6A00                       		bpl.s	loc_923C
000091E6 4A28 0001                  		tst.b	1(a0)
000091EA 6A00 0000                  		bpl.w	DeleteObject
000091EE                            
000091EE                            loc_923C:
000091EE 6000 0000                  		bra.w	DisplaySprite
000091F2                            ; ===========================================================================
000091F2                            
000091F2                            loc_9240:				; XREF: Obj28_Index
000091F2 4A28 0001                  		tst.b	1(a0)
000091F6 6A00 0000                  		bpl.w	DeleteObject
000091FA 5368 0036                  		subq.w	#1,$36(a0)
000091FE 6600 0000                  		bne.w	loc_925C
00009202 117C 0002 0024             		move.b	#2,$24(a0)
00009208 117C 0003 0018             		move.b	#3,$18(a0)
0000920E                            
0000920E                            loc_925C:
0000920E 6000 0000                  		bra.w	DisplaySprite
00009212                            ; ===========================================================================
00009212                            
00009212                            loc_9260:				; XREF: Obj28_Index
00009212 6100 0000                  		bsr.w	sub_9404
00009216 6400                       		bcc.s	loc_927C
00009218 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000921E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009224 117C 000E 0024             		move.b	#$E,$24(a0)
0000922A 6000 FF46                  		bra.w	loc_91C0
0000922E                            ; ===========================================================================
0000922E                            
0000922E                            loc_927C:
0000922E 6000 FFA6                  		bra.w	loc_9224
00009232                            ; ===========================================================================
00009232                            
00009232                            loc_9280:				; XREF: Obj28_Index
00009232 6100 0000                  		bsr.w	sub_9404
00009236 6A00                       		bpl.s	loc_92B6
00009238 4268 0010                  		clr.w	$10(a0)
0000923C 4268 0032                  		clr.w	$32(a0)
00009240 6100 0000                  		bsr.w	SpeedToPos
00009244 0668 0018 0012             		addi.w	#$18,$12(a0)
0000924A 6100 0000                  		bsr.w	loc_93C4
0000924E 6100 0000                  		bsr.w	loc_93EC
00009252 5328 001E                  		subq.b	#1,$1E(a0)
00009256 6A00                       		bpl.s	loc_92B6
00009258 117C 0001 001E             		move.b	#1,$1E(a0)
0000925E 5228 001A                  		addq.b	#1,$1A(a0)
00009262 0228 0001 001A             		andi.b	#1,$1A(a0)
00009268                            
00009268                            loc_92B6:
00009268 6000 FF6C                  		bra.w	loc_9224
0000926C                            ; ===========================================================================
0000926C                            
0000926C                            loc_92BA:				; XREF: Obj28_Index
0000926C 6100 0000                  		bsr.w	sub_9404
00009270 6A00                       		bpl.s	loc_9310
00009272 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009278 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000927E 117C 0004 0024             		move.b	#4,$24(a0)
00009284 6000 FEB0                  		bra.w	loc_9184
00009288                            ; ===========================================================================
00009288                            
00009288                            loc_92D6:				; XREF: Obj28_Index
00009288 6100 0000                  		bsr.w	ObjectFall
0000928C 117C 0001 001A             		move.b	#1,$1A(a0)
00009292 4A68 0012                  		tst.w	$12(a0)
00009296 6B00                       		bmi.s	loc_9310
00009298 117C 0000 001A             		move.b	#0,$1A(a0)
0000929E 4EB9 0000 0000             		jsr	ObjHitFloor
000092A4 4A41                       		tst.w	d1
000092A6 6A00                       		bpl.s	loc_9310
000092A8 4628 0029                  		not.b	$29(a0)
000092AC 6600                       		bne.s	loc_9306
000092AE 4468 0010                  		neg.w	$10(a0)
000092B2 0868 0000 0001             		bchg	#0,1(a0)
000092B8                            
000092B8                            loc_9306:
000092B8 D368 000C                  		add.w	d1,$C(a0)
000092BC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092C2                            
000092C2                            loc_9310:
000092C2 6000 FF12                  		bra.w	loc_9224
000092C6                            ; ===========================================================================
000092C6                            
000092C6                            loc_9314:				; XREF: Obj28_Index
000092C6 6100 0000                  		bsr.w	sub_9404
000092CA 6A00                       		bpl.s	loc_932E
000092CC 4268 0010                  		clr.w	$10(a0)
000092D0 4268 0032                  		clr.w	$32(a0)
000092D4 6100 0000                  		bsr.w	ObjectFall
000092D8 6100 0000                  		bsr.w	loc_93C4
000092DC 6100 0000                  		bsr.w	loc_93EC
000092E0                            
000092E0                            loc_932E:
000092E0 6000 FEF4                  		bra.w	loc_9224
000092E4                            ; ===========================================================================
000092E4                            
000092E4                            loc_9332:				; XREF: Obj28_Index
000092E4 6100 0000                  		bsr.w	sub_9404
000092E8 6A00                       		bpl.s	loc_936C
000092EA 6100 0000                  		bsr.w	ObjectFall
000092EE 117C 0001 001A             		move.b	#1,$1A(a0)
000092F4 4A68 0012                  		tst.w	$12(a0)
000092F8 6B00                       		bmi.s	loc_936C
000092FA 117C 0000 001A             		move.b	#0,$1A(a0)
00009300 4EB9 0000 0000             		jsr	ObjHitFloor
00009306 4A41                       		tst.w	d1
00009308 6A00                       		bpl.s	loc_936C
0000930A 4468 0010                  		neg.w	$10(a0)
0000930E 0868 0000 0001             		bchg	#0,1(a0)
00009314 D368 000C                  		add.w	d1,$C(a0)
00009318 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000931E                            
0000931E                            loc_936C:
0000931E 6000 FEB6                  		bra.w	loc_9224
00009322                            ; ===========================================================================
00009322                            
00009322                            loc_9370:				; XREF: Obj28_Index
00009322 6100 0000                  		bsr.w	sub_9404
00009326 6A00                       		bpl.s	loc_93C0
00009328 6100 0000                  		bsr.w	SpeedToPos
0000932C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009332 4A68 0012                  		tst.w	$12(a0)
00009336 6B00                       		bmi.s	loc_93AA
00009338 4EB9 0000 0000             		jsr	ObjHitFloor
0000933E 4A41                       		tst.w	d1
00009340 6A00                       		bpl.s	loc_93AA
00009342 4628 0029                  		not.b	$29(a0)
00009346 6600                       		bne.s	loc_93A0
00009348 4468 0010                  		neg.w	$10(a0)
0000934C 0868 0000 0001             		bchg	#0,1(a0)
00009352                            
00009352                            loc_93A0:
00009352 D368 000C                  		add.w	d1,$C(a0)
00009356 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000935C                            
0000935C                            loc_93AA:
0000935C 5328 001E                  		subq.b	#1,$1E(a0)
00009360 6A00                       		bpl.s	loc_93C0
00009362 117C 0001 001E             		move.b	#1,$1E(a0)
00009368 5228 001A                  		addq.b	#1,$1A(a0)
0000936C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009372                            
00009372                            loc_93C0:
00009372 6000 FE62                  		bra.w	loc_9224
00009376                            ; ===========================================================================
00009376                            
00009376                            loc_93C4:
00009376 117C 0001 001A             		move.b	#1,$1A(a0)
0000937C 4A68 0012                  		tst.w	$12(a0)
00009380 6B00                       		bmi.s	locret_93EA
00009382 117C 0000 001A             		move.b	#0,$1A(a0)
00009388 4EB9 0000 0000             		jsr	ObjHitFloor
0000938E 4A41                       		tst.w	d1
00009390 6A00                       		bpl.s	locret_93EA
00009392 D368 000C                  		add.w	d1,$C(a0)
00009396 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000939C                            
0000939C                            locret_93EA:
0000939C 4E75                       		rts	
0000939E                            ; ===========================================================================
0000939E                            
0000939E                            loc_93EC:
0000939E 08E8 0000 0001             		bset	#0,1(a0)
000093A4 3028 0008                  		move.w	8(a0),d0
000093A8 9078 D008                  		sub.w	($FFFFD008).w,d0
000093AC 6400                       		bcc.s	locret_9402
000093AE 08A8 0000 0001             		bclr	#0,1(a0)
000093B4                            
000093B4                            locret_9402:
000093B4 4E75                       		rts	
000093B6                            
000093B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093B6                            
000093B6                            
000093B6                            sub_9404:
000093B6 3038 D008                  		move.w	($FFFFD008).w,d0
000093BA 9068 0008                  		sub.w	8(a0),d0
000093BE 0440 00B8                  		subi.w	#$B8,d0
000093C2 4E75                       		rts	
000093C4                            ; End of function sub_9404
000093C4                            
000093C4                            ; ===========================================================================
000093C4                            ; ---------------------------------------------------------------------------
000093C4                            ; Object 29 - points that appear when you destroy something
000093C4                            ; ---------------------------------------------------------------------------
000093C4                            
000093C4                            Obj29:					; XREF: Obj_Index
000093C4 7000                       		moveq	#0,d0
000093C6 1028 0024                  		move.b	$24(a0),d0
000093CA 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000093CE 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000093D2 6000 0000                  		bra.w	DisplaySprite
000093D6                            ; ===========================================================================
000093D6 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000093D8 0000                       		dc.w Obj29_Slower-Obj29_Index
000093DA                            ; ===========================================================================
000093DA                            
000093DA                            Obj29_Main:				; XREF: Obj29_Index
000093DA 5428 0024                  		addq.b	#2,$24(a0)
000093DE 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000093E6 317C 2797 0002             		move.w	#$2797,2(a0)
000093EC 117C 0004 0001             		move.b	#4,1(a0)
000093F2 117C 0001 0018             		move.b	#1,$18(a0)
000093F8 117C 0008 0019             		move.b	#8,$19(a0)
000093FE 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009404                            
00009404                            Obj29_Slower:				; XREF: Obj29_Index
00009404 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009408 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000940C 6100 0000                  		bsr.w	SpeedToPos
00009410 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009416 4E75                       		rts	
00009418                            ; ===========================================================================
00009418                            ; ---------------------------------------------------------------------------
00009418                            ; Sprite mappings - animals
00009418                            ; ---------------------------------------------------------------------------
00009418                            Map_obj28:
00009418                            	include "_maps\obj28.asm"
00009418                            ; ---------------------------------------------------------------------------
00009418                            ; Sprite mappings - animals
00009418                            ; ---------------------------------------------------------------------------
00009418 0000                       		dc.w byte_9472-Map_obj28
0000941A 0000                       		dc.w byte_9478-Map_obj28
0000941C 0000                       		dc.w byte_946C-Map_obj28
0000941E 01                         byte_946C:	dc.b 1
0000941F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009424 01                         byte_9472:	dc.b 1
00009425 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000942A 01                         byte_9478:	dc.b 1
0000942B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009430                            		even
00009430                            		even
00009430                            
00009430                            Map_obj28a:
00009430                            	include "_maps\obj28a.asm"
00009430                            ; ---------------------------------------------------------------------------
00009430                            ; Sprite mappings - animals
00009430                            ; ---------------------------------------------------------------------------
00009430 0000                       		dc.w byte_948A-Map_obj28a
00009432 0000                       		dc.w byte_9490-Map_obj28a
00009434 0000                       		dc.w byte_9484-Map_obj28a
00009436 01                         byte_9484:	dc.b 1
00009437 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000943C 01                         byte_948A:	dc.b 1
0000943D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009442 01                         byte_9490:	dc.b 1
00009443 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009448                            		even
00009448                            		even
00009448                            
00009448                            Map_obj28b:
00009448                            	include "_maps\obj28b.asm"
00009448                            ; ---------------------------------------------------------------------------
00009448                            ; Sprite mappings - animals
00009448                            ; ---------------------------------------------------------------------------
00009448 0000                       		dc.w byte_94A2-Map_obj28b
0000944A 0000                       		dc.w byte_94A8-Map_obj28b
0000944C 0000                       		dc.w byte_949C-Map_obj28b
0000944E 01                         byte_949C:	dc.b 1
0000944F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009454 01                         byte_94A2:	dc.b 1
00009455 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000945A 01                         byte_94A8:	dc.b 1
0000945B FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009460                            		even
00009460                            		even
00009460                            
00009460                            ; ---------------------------------------------------------------------------
00009460                            ; Sprite mappings - points that	appear when you	destroy	something
00009460                            ; ---------------------------------------------------------------------------
00009460                            Map_obj29:
00009460                            	include "_maps\obj29.asm"
00009460                            ; ---------------------------------------------------------------------------
00009460                            ; Sprite mappings - points that	appear when you	destroy	something
00009460                            ; ---------------------------------------------------------------------------
00009460 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009464 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009468 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000946C 0000                       		dc.w byte_94E5-Map_obj29
0000946E 01                         byte_94BC:	dc.b 1
0000946F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009474 01                         byte_94C2:	dc.b 1
00009475 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000947A 01                         byte_94C8:	dc.b 1
0000947B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009480 01                         byte_94CE:	dc.b 1
00009481 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009486 01                         byte_94D4:	dc.b 1
00009487 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000948C 02                         byte_94DA:	dc.b 2
0000948D FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009492 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009497 02                         byte_94E5:	dc.b 2
00009498 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000949D FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000094A2                            		even
000094A2                            		even
000094A2                            
000094A2                            ; ===========================================================================
000094A2                            ; ---------------------------------------------------------------------------
000094A2                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000094A2                            ; ---------------------------------------------------------------------------
000094A2                            
000094A2                            Obj1F:					; XREF: Obj_Index
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0024                  		move.b	$24(a0),d0
000094A8 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000094AC 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000094B0                            ; ===========================================================================
000094B0 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000094B2 0000                       		dc.w Obj1F_Action-Obj1F_Index
000094B4 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000094B6 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000094B8 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000094BA                            ; ===========================================================================
000094BA                            
000094BA                            Obj1F_Main:				; XREF: Obj1F_Index
000094BA 117C 0010 0016             		move.b	#$10,$16(a0)
000094C0 117C 0008 0017             		move.b	#8,$17(a0)
000094C6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000094CE 317C 0400 0002             		move.w	#$400,2(a0)
000094D4 117C 0004 0001             		move.b	#4,1(a0)
000094DA 117C 0003 0018             		move.b	#3,$18(a0)
000094E0 117C 0006 0020             		move.b	#6,$20(a0)
000094E6 117C 0015 0019             		move.b	#$15,$19(a0)
000094EC 6100 0000                  		bsr.w	ObjectFall
000094F0 4EB9 0000 0000             		jsr	ObjHitFloor
000094F6 4A41                       		tst.w	d1
000094F8 6A00                       		bpl.s	locret_955A
000094FA D368 000C                  		add.w	d1,$C(a0)
000094FE 1143 0026                  		move.b	d3,$26(a0)
00009502 317C 0000 0012             		move.w	#0,$12(a0)
00009508 5428 0024                  		addq.b	#2,$24(a0)
0000950C                            
0000950C                            locret_955A:
0000950C 4E75                       		rts	
0000950E                            ; ===========================================================================
0000950E                            
0000950E                            Obj1F_Action:				; XREF: Obj1F_Index
0000950E 7000                       		moveq	#0,d0
00009510 1028 0025                  		move.b	$25(a0),d0
00009514 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009518 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000951C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009522 6100 0000                  		bsr.w	AnimateSprite
00009526 6000 0000                  		bra.w	MarkObjGone
0000952A                            ; ===========================================================================
0000952A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000952C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000952E                            ; ===========================================================================
0000952E                            
0000952E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000952E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009532 6A00                       		bpl.s	locret_95B6
00009534 4A28 0001                  		tst.b	1(a0)
00009538 6A00                       		bpl.s	Obj1F_Move
0000953A 0868 0001 0032             		bchg	#1,$32(a0)
00009540 6600                       		bne.s	Obj1F_MakeFire
00009542                            
00009542                            Obj1F_Move:
00009542 5428 0025                  		addq.b	#2,$25(a0)
00009546 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000954C 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009552 6100 0000                  		bsr.w	Obj1F_SetAni
00009556 5600                       		addq.b	#3,d0
00009558 1140 001C                  		move.b	d0,$1C(a0)
0000955C 0868 0000 0022             		bchg	#0,$22(a0)
00009562 6600                       		bne.s	locret_95B6
00009564 4468 0010                  		neg.w	$10(a0)		; change direction
00009568                            
00009568                            locret_95B6:
00009568 4E75                       		rts	
0000956A                            ; ===========================================================================
0000956A                            
0000956A                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000956A 317C 003B 0030             		move.w	#$3B,$30(a0)
00009570 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009576 6100 0000                  		bsr.w	SingleObjLoad
0000957A 6600                       		bne.s	Obj1F_MakeFire2
0000957C 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009580 137C 0006 0024             		move.b	#6,$24(a1)
00009586 3368 0008 0008             		move.w	8(a0),8(a1)
0000958C 0469 0010 0008             		subi.w	#$10,8(a1)
00009592 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009598 337C FF00 0010             		move.w	#-$100,$10(a1)
0000959E                            
0000959E                            Obj1F_MakeFire2:
0000959E 6100 0000                  		bsr.w	SingleObjLoad
000095A2 6600                       		bne.s	locret_9618
000095A4 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000095A8 137C 0006 0024             		move.b	#6,$24(a1)
000095AE 3368 0008 0008             		move.w	8(a0),8(a1)
000095B4 0669 0010 0008             		addi.w	#$10,8(a1)
000095BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095C0 337C 0100 0010             		move.w	#$100,$10(a1)
000095C6                            
000095C6                            locret_9618:
000095C6 4E75                       		rts	
000095C8                            ; ===========================================================================
000095C8                            
000095C8                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000095C8 5368 0030                  		subq.w	#1,$30(a0)
000095CC 6B00                       		bmi.s	loc_966E
000095CE 6100 0000                  		bsr.w	SpeedToPos
000095D2 0868 0000 0032             		bchg	#0,$32(a0)
000095D8 6600                       		bne.s	loc_9654
000095DA 3628 0008                  		move.w	8(a0),d3
000095DE 0643 0010                  		addi.w	#$10,d3
000095E2 0828 0000 0022             		btst	#0,$22(a0)
000095E8 6700                       		beq.s	loc_9640
000095EA 0443 0020                  		subi.w	#$20,d3
000095EE                            
000095EE                            loc_9640:
000095EE 4EB9 0000 0000             		jsr	ObjHitFloor2
000095F4 0C41 FFF8                  		cmpi.w	#-8,d1
000095F8 6D00                       		blt.s	loc_966E
000095FA 0C41 000C                  		cmpi.w	#$C,d1
000095FE 6C00                       		bge.s	loc_966E
00009600 4E75                       		rts	
00009602                            ; ===========================================================================
00009602                            
00009602                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009602 4EB9 0000 0000             		jsr	ObjHitFloor
00009608 D368 000C                  		add.w	d1,$C(a0)
0000960C 1143 0026                  		move.b	d3,$26(a0)
00009610 6100 0000                  		bsr.w	Obj1F_SetAni
00009614 5600                       		addq.b	#3,d0
00009616 1140 001C                  		move.b	d0,$1C(a0)
0000961A 4E75                       		rts	
0000961C                            ; ===========================================================================
0000961C                            
0000961C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000961C 5528 0025                  		subq.b	#2,$25(a0)
00009620 317C 003B 0030             		move.w	#59,$30(a0)
00009626 317C 0000 0010             		move.w	#0,$10(a0)
0000962C 6100 0000                  		bsr.w	Obj1F_SetAni
00009630 1140 001C                  		move.b	d0,$1C(a0)
00009634 4E75                       		rts	
00009636                            ; ---------------------------------------------------------------------------
00009636                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009636                            ; ---------------------------------------------------------------------------
00009636                            
00009636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009636                            
00009636                            
00009636                            Obj1F_SetAni:				; XREF: loc_966E
00009636 7000                       		moveq	#0,d0
00009638 1628 0026                  		move.b	$26(a0),d3
0000963C 6B00                       		bmi.s	loc_96A4
0000963E 0C03 0006                  		cmpi.b	#6,d3
00009642 6500                       		bcs.s	locret_96A2
00009644 7001                       		moveq	#1,d0
00009646 0828 0000 0022             		btst	#0,$22(a0)
0000964C 6600                       		bne.s	locret_96A2
0000964E 7002                       		moveq	#2,d0
00009650                            
00009650                            locret_96A2:
00009650 4E75                       		rts	
00009652                            ; ===========================================================================
00009652                            
00009652                            loc_96A4:				; XREF: Obj1F_SetAni
00009652 0C03 00FA                  		cmpi.b	#-6,d3
00009656 6200                       		bhi.s	locret_96B6
00009658 7002                       		moveq	#2,d0
0000965A 0828 0000 0022             		btst	#0,$22(a0)
00009660 6600                       		bne.s	locret_96B6
00009662 7001                       		moveq	#1,d0
00009664                            
00009664                            locret_96B6:
00009664 4E75                       		rts	
00009666                            ; End of function Obj1F_SetAni
00009666                            
00009666                            ; ===========================================================================
00009666                            
00009666                            Obj1F_Delete:				; XREF: Obj1F_Index
00009666 6100 0000                  		bsr.w	DeleteObject
0000966A 4E75                       		rts	
0000966C                            ; ===========================================================================
0000966C                            ; ---------------------------------------------------------------------------
0000966C                            ; Sub-object - missile that the	Crabmeat throws
0000966C                            ; ---------------------------------------------------------------------------
0000966C                            
0000966C                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000966C 5428 0024                  		addq.b	#2,$24(a0)
00009670 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009678 317C 0400 0002             		move.w	#$400,2(a0)
0000967E 117C 0004 0001             		move.b	#4,1(a0)
00009684 117C 0003 0018             		move.b	#3,$18(a0)
0000968A 117C 0087 0020             		move.b	#$87,$20(a0)
00009690 117C 0008 0019             		move.b	#8,$19(a0)
00009696 317C FC00 0012             		move.w	#-$400,$12(a0)
0000969C 117C 0007 001C             		move.b	#7,$1C(a0)
000096A2                            
000096A2                            Obj1F_BallMove:				; XREF: Obj1F_Index
000096A2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000096A8 6100 0000                  		bsr.w	AnimateSprite
000096AC 6100 0000                  		bsr.w	ObjectFall
000096B0 6100 0000                  		bsr.w	DisplaySprite
000096B4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000096B8 0640 00E0                  		addi.w	#$E0,d0
000096BC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000096C0 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000096C2 4E75                       		rts	
000096C4                            ; ===========================================================================
000096C4                            
000096C4                            Obj1F_Delete2:
000096C4 6000 0000                  		bra.w	DeleteObject
000096C8                            ; ===========================================================================
000096C8                            Ani_obj1F:
000096C8                            	include "_anim\obj1F.asm"
000096C8                            ; ---------------------------------------------------------------------------
000096C8                            ; Animation script - Crabmeat enemy
000096C8                            ; ---------------------------------------------------------------------------
000096C8 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
000096CE 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
000096D4 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
000096D8 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000096DC 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
000096E0 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
000096E4 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000096EA 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000096F0 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
000096F6 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
000096FA 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
000096FE                            		even
000096FE                            		even
000096FE                            
000096FE                            ; ---------------------------------------------------------------------------
000096FE                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000096FE                            ; ---------------------------------------------------------------------------
000096FE                            Map_obj1F:
000096FE                            	include "_maps\obj1F.asm"
000096FE                            ; ---------------------------------------------------------------------------
000096FE                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000096FE                            ; ---------------------------------------------------------------------------
000096FE 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009702 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009706 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000970A 0000                       		dc.w byte_97D7-Map_obj1F
0000970C 04                         byte_975E:	dc.b 4
0000970D F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009712 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009717 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000971C 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009721 04                         byte_9773:	dc.b 4
00009722 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009727 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000972C 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009731 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009736 04                         byte_9788:	dc.b 4
00009737 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000973C EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009741 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009746 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000974B 04                         byte_979D:	dc.b 4
0000974C EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009751 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009756 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000975B FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009760 06                         byte_97B2:	dc.b 6
00009761 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009766 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000976B F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009770 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009775 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000977A 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000977F 01                         byte_97D1:	dc.b 1
00009780 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009785 01                         byte_97D7:	dc.b 1
00009786 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000978C 00                         		even
0000978C 00                         		even
0000978C                            
0000978C                            ; ===========================================================================
0000978C                            ; ---------------------------------------------------------------------------
0000978C                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000978C                            ; ---------------------------------------------------------------------------
0000978C                            
0000978C                            Obj22:					; XREF: Obj_Index
0000978C 7000                       		moveq	#0,d0
0000978E 1028 0024                  		move.b	$24(a0),d0
00009792 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009796 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000979A                            ; ===========================================================================
0000979A 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000979C 0000                       		dc.w Obj22_Action-Obj22_Index
0000979E 0000                       		dc.w Obj22_Delete-Obj22_Index
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            Obj22_Main:				; XREF: Obj22_Index
000097A0 5428 0024                  		addq.b	#2,$24(a0)
000097A4 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000097AC 317C 0444 0002             		move.w	#$444,2(a0)
000097B2 117C 0004 0001             		move.b	#4,1(a0)
000097B8 117C 0003 0018             		move.b	#3,$18(a0)
000097BE 117C 0008 0020             		move.b	#8,$20(a0)
000097C4 117C 0018 0019             		move.b	#$18,$19(a0)
000097CA                            
000097CA                            Obj22_Action:				; XREF: Obj22_Index
000097CA 7000                       		moveq	#0,d0
000097CC 1028 0025                  		move.b	$25(a0),d0
000097D0 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
000097D4 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
000097D8 43F9 0000 0000             		lea	(Ani_obj22).l,a1
000097DE 6100 0000                  		bsr.w	AnimateSprite
000097E2 6000 0000                  		bra.w	MarkObjGone
000097E6                            ; ===========================================================================
000097E6 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000097E8 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000097EA                            ; ===========================================================================
000097EA                            
000097EA                            Obj22_Move:				; XREF: Obj22_Index2
000097EA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000097EE 6A00                       		bpl.s	locret_986C	; if time remains, branch
000097F0 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
000097F6 6600                       		bne.s	Obj22_Fire	; if yes, branch
000097F8 5428 0025                  		addq.b	#2,$25(a0)
000097FC 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009802 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009808 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000980E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009814 6600                       		bne.s	locret_986C	; if not, branch
00009816 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000981A                            
0000981A                            locret_986C:
0000981A 4E75                       		rts	
0000981C                            ; ===========================================================================
0000981C                            
0000981C                            Obj22_Fire:				; XREF: Obj22_Move
0000981C 6100 0000                  		bsr.w	SingleObjLoad
00009820 6600                       		bne.s	locret_98D0
00009822 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009826 3368 0008 0008             		move.w	8(a0),8(a1)
0000982C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009832 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009838 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000983E 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009844 303C 0018                  		move.w	#$18,d0
00009848 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000984E 6600                       		bne.s	loc_98AA	; if not, branch
00009850 4440                       		neg.w	d0
00009852 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009856                            
00009856                            loc_98AA:
00009856 D169 0008                  		add.w	d0,8(a1)
0000985A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009860 337C 000E 0032             		move.w	#$E,$32(a1)
00009866 2348 003C                  		move.l	a0,$3C(a1)
0000986A 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009870 317C 003B 0032             		move.w	#$3B,$32(a0)
00009876 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000987C                            
0000987C                            locret_98D0:
0000987C 4E75                       		rts	
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000987E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009882 6B00                       		bmi.s	Obj22_ChgDir
00009884 6100 0000                  		bsr.w	SpeedToPos
00009888 4A28 0034                  		tst.b	$34(a0)
0000988C 6600                       		bne.s	locret_992A
0000988E 3038 D008                  		move.w	($FFFFD008).w,d0
00009892 9068 0008                  		sub.w	8(a0),d0
00009896 6A00                       		bpl.s	Obj22_SetNrSonic
00009898 4440                       		neg.w	d0
0000989A                            
0000989A                            Obj22_SetNrSonic:
0000989A 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000989E 6400                       		bcc.s	locret_992A	; if not, branch
000098A0 4A28 0001                  		tst.b	1(a0)
000098A4 6A00                       		bpl.s	locret_992A
000098A6 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000098AC 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000098B2 6000                       		bra.s	Obj22_Stop
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000098B4 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000098BA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000098C0 317C 003B 0032             		move.w	#59,$32(a0)
000098C6                            
000098C6                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
000098C6 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
000098CA 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
000098D0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
000098D6                            
000098D6                            locret_992A:
000098D6 4E75                       		rts	
000098D8                            ; ===========================================================================
000098D8                            
000098D8                            Obj22_Delete:				; XREF: Obj22_Index
000098D8 6100 0000                  		bsr.w	DeleteObject
000098DC 4E75                       		rts	
000098DE                            ; ===========================================================================
000098DE                            ; ---------------------------------------------------------------------------
000098DE                            ; Object 23 - missile that Buzz	Bomber throws
000098DE                            ; ---------------------------------------------------------------------------
000098DE                            
000098DE                            Obj23:					; XREF: Obj_Index
000098DE 7000                       		moveq	#0,d0
000098E0 1028 0024                  		move.b	$24(a0),d0
000098E4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000098E8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000098EC                            ; ===========================================================================
000098EC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000098EE 0000                       		dc.w Obj23_Animate-Obj23_Index
000098F0 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000098F2 0000                       		dc.w Obj23_Delete-Obj23_Index
000098F4 0000                       		dc.w Obj23_FromNewt-Obj23_Index
000098F6                            ; ===========================================================================
000098F6                            
000098F6                            Obj23_Main:				; XREF: Obj23_Index
000098F6 5368 0032                  		subq.w	#1,$32(a0)
000098FA 6A00                       		bpl.s	Obj23_ChkCancel
000098FC 5428 0024                  		addq.b	#2,$24(a0)
00009900 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009908 317C 2444 0002             		move.w	#$2444,2(a0)
0000990E 117C 0004 0001             		move.b	#4,1(a0)
00009914 117C 0003 0018             		move.b	#3,$18(a0)
0000991A 117C 0008 0019             		move.b	#8,$19(a0)
00009920 0228 0003 0022             		andi.b	#3,$22(a0)
00009926 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000992A 6700                       		beq.s	Obj23_Animate	; if not, branch
0000992C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009932 117C 0087 0020             		move.b	#$87,$20(a0)
00009938 117C 0001 001C             		move.b	#1,$1C(a0)
0000993E 6000                       		bra.s	Obj23_Animate2
00009940                            ; ===========================================================================
00009940                            
00009940                            Obj23_Animate:				; XREF: Obj23_Index
00009940 6100                       		bsr.s	Obj23_ChkCancel
00009942 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009948 6100 0000                  		bsr.w	AnimateSprite
0000994C 6000 0000                  		bra.w	DisplaySprite
00009950                            ; ---------------------------------------------------------------------------
00009950                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009950                            ; destroyed, and if it has, then cancel	the missile
00009950                            ; ---------------------------------------------------------------------------
00009950                            
00009950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009950                            
00009950                            
00009950                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009950 2268 003C                  		movea.l	$3C(a0),a1
00009954 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009958 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000995A 4E75                       		rts	
0000995C                            ; End of function Obj23_ChkCancel
0000995C                            
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000995C 0828 0007 0022             		btst	#7,$22(a0)
00009962 6600                       		bne.s	Obj23_Explode
00009964 117C 0087 0020             		move.b	#$87,$20(a0)
0000996A 117C 0001 001C             		move.b	#1,$1C(a0)
00009970 6100 0000                  		bsr.w	SpeedToPos
00009974 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000997A 6100 0000                  		bsr.w	AnimateSprite
0000997E 6100 0000                  		bsr.w	DisplaySprite
00009982 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009986 0640 00E0                  		addi.w	#$E0,d0
0000998A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000998E 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009990 4E75                       		rts	
00009992                            ; ===========================================================================
00009992                            
00009992                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009992 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009996 117C 0000 0024             		move.b	#0,$24(a0)
0000999C 6000 F30A                  		bra.w	Obj24
000099A0                            ; ===========================================================================
000099A0                            
000099A0                            Obj23_Delete:				; XREF: Obj23_Index
000099A0 6100 0000                  		bsr.w	DeleteObject
000099A4 4E75                       		rts	
000099A6                            ; ===========================================================================
000099A6                            
000099A6                            Obj23_FromNewt:				; XREF: Obj23_Index
000099A6 4A28 0001                  		tst.b	1(a0)
000099AA 6AF4                       		bpl.s	Obj23_Delete
000099AC 6100 0000                  		bsr.w	SpeedToPos
000099B0                            
000099B0                            Obj23_Animate2:				; XREF: Obj23_Main
000099B0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
000099B6 6100 0000                  		bsr.w	AnimateSprite
000099BA 6100 0000                  		bsr.w	DisplaySprite
000099BE 4E75                       		rts	
000099C0                            ; ===========================================================================
000099C0                            Ani_obj22:
000099C0                            	include "_anim\obj22.asm"
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            ; Animation script - Buzz Bomber enemy
000099C0                            ; ---------------------------------------------------------------------------
000099C0 0000                       		dc.w byte_9A1E-Ani_obj22
000099C2 0000                       		dc.w byte_9A22-Ani_obj22
000099C4 0000                       		dc.w byte_9A26-Ani_obj22
000099C6 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
000099CA 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
000099CE 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000099D2                            		even
000099D2                            		even
000099D2                            
000099D2                            Ani_obj23:
000099D2                            	include "_anim\obj23.asm"
000099D2                            ; ---------------------------------------------------------------------------
000099D2                            ; Animation script - missile that Buzz Bomber throws
000099D2                            ; ---------------------------------------------------------------------------
000099D2 0000                       		dc.w byte_9A2E-Ani_obj23
000099D4 0000                       		dc.w byte_9A32-Ani_obj23
000099D6 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
000099DA 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
000099DE                            		even
000099DE                            		even
000099DE                            
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Sprite mappings - Buzz Bomber	enemy
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            Map_obj22:
000099DE                            	include "_maps\obj22.asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Sprite mappings - Buzz Bomber	enemy
000099DE                            ; ---------------------------------------------------------------------------
000099DE 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
000099E2 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
000099E6 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
000099EA 06                         byte_9A42:	dc.b 6
000099EB F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
000099F0 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
000099F5 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
000099FA 0404 0018 00               		dc.b 4,	4, 0, $18, 0
000099FF F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A04 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A09 06                         byte_9A61:	dc.b 6
00009A0A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A0F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A14 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A19 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A1E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A23 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A28 07                         byte_9A80:	dc.b 7
00009A29 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009A2E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A33 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A38 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A3D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A42 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A47 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A4C 07                         byte_9AA4:	dc.b 7
00009A4D 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009A52 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A57 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A5C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A61 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A66 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A6B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A70 06                         byte_9AC8:	dc.b 6
00009A71 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009A76 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009A7B 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009A80 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009A85 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A8A F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A8F 04                         byte_9AE7:	dc.b 4
00009A90 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009A95 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009A9A 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009A9F 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009AA4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009AA9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009AAE                            		even
00009AAE                            		even
00009AAE                            
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE                            ; Sprite mappings - missile that Buzz Bomber throws
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE                            Map_obj23:
00009AAE                            	include "_maps\obj23.asm"
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE                            ; Sprite mappings - missile that Buzz Bomber throws
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009AB2 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009AB6 01                         byte_9B0E:	dc.b 1
00009AB7 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009ABC 01                         byte_9B14:	dc.b 1
00009ABD F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009AC2 01                         byte_9B1A:	dc.b 1
00009AC3 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009AC8 01                         byte_9B20:	dc.b 1
00009AC9 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009ACE                            		even
00009ACE                            		even
00009ACE                            
00009ACE                            ; ===========================================================================
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE                            ; Object 25 - rings
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE                            
00009ACE                            Obj25:					; XREF: Obj_Index
00009ACE 7000                       		moveq	#0,d0
00009AD0 1028 0024                  		move.b	$24(a0),d0
00009AD4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009AD8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009ADC                            ; ===========================================================================
00009ADC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009ADE 0000                       		dc.w Obj25_Animate-Obj25_Index
00009AE0 0000                       		dc.w Obj25_Collect-Obj25_Index
00009AE2 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009AE4 0000                       		dc.w Obj25_Delete-Obj25_Index
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6                            ; Distances between rings (format: horizontal, vertical)
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009AE8 1800                       		dc.b $18, 0		; horizontal normal
00009AEA 2000                       		dc.b $20, 0		; horizontal wide
00009AEC 0010                       		dc.b 0,	$10		; vertical tight
00009AEE 0018                       		dc.b 0,	$18		; vertical normal
00009AF0 0020                       		dc.b 0,	$20		; vertical wide
00009AF2 1010                       		dc.b $10, $10		; diagonal
00009AF4 1818                       		dc.b $18, $18
00009AF6 2020                       		dc.b $20, $20
00009AF8 F010                       		dc.b $F0, $10
00009AFA E818                       		dc.b $E8, $18
00009AFC E020                       		dc.b $E0, $20
00009AFE 1008                       		dc.b $10, 8
00009B00 1810                       		dc.b $18, $10
00009B02 F008                       		dc.b $F0, 8
00009B04 E810                       		dc.b $E8, $10
00009B06                            ; ===========================================================================
00009B06                            
00009B06                            Obj25_Main:				; XREF: Obj25_Index
00009B06 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009B0A 7000                       		moveq	#0,d0
00009B0C 1028 0023                  		move.b	$23(a0),d0
00009B10 45F2 0002                  		lea	2(a2,d0.w),a2
00009B14 1812                       		move.b	(a2),d4
00009B16 1228 0028                  		move.b	$28(a0),d1
00009B1A 1001                       		move.b	d1,d0
00009B1C 0241 0007                  		andi.w	#7,d1
00009B20 0C41 0007                  		cmpi.w	#7,d1
00009B24 6600                       		bne.s	loc_9B80
00009B26 7206                       		moveq	#6,d1
00009B28                            
00009B28                            loc_9B80:
00009B28 4841                       		swap	d1
00009B2A 323C 0000                  		move.w	#0,d1
00009B2E E808                       		lsr.b	#4,d0
00009B30 D040                       		add.w	d0,d0
00009B32 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009B36 4885                       		ext.w	d5
00009B38 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009B3C 4886                       		ext.w	d6
00009B3E 2248                       		movea.l	a0,a1
00009B40 3428 0008                  		move.w	8(a0),d2
00009B44 3628 000C                  		move.w	$C(a0),d3
00009B48 E20C                       		lsr.b	#1,d4
00009B4A 6500                       		bcs.s	loc_9C02
00009B4C 0892 0007                  		bclr	#7,(a2)
00009B50 6000                       		bra.s	loc_9BBA
00009B52                            ; ===========================================================================
00009B52                            
00009B52                            Obj25_MakeRings:
00009B52 4841                       		swap	d1
00009B54 E20C                       		lsr.b	#1,d4
00009B56 6500                       		bcs.s	loc_9C02
00009B58 0892 0007                  		bclr	#7,(a2)
00009B5C 6100 0000                  		bsr.w	SingleObjLoad
00009B60 6600                       		bne.s	loc_9C0E
00009B62                            
00009B62                            loc_9BBA:				; XREF: Obj25_Main
00009B62 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009B66 5429 0024                  		addq.b	#2,$24(a1)
00009B6A 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009B6E 3368 0008 0032             		move.w	8(a0),$32(a1)
00009B74 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009B78 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009B80 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009B86 137C 0004 0001             		move.b	#4,1(a1)
00009B8C 137C 0002 0018             		move.b	#2,$18(a1)
00009B92 137C 0047 0020             		move.b	#$47,$20(a1)
00009B98 137C 0008 0019             		move.b	#8,$19(a1)
00009B9E 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009BA4 1341 0034                  		move.b	d1,$34(a1)
00009BA8                            
00009BA8                            loc_9C02:
00009BA8 5241                       		addq.w	#1,d1
00009BAA D445                       		add.w	d5,d2		; add ring spacing value to d2
00009BAC D646                       		add.w	d6,d3		; add ring spacing value to d3
00009BAE 4841                       		swap	d1
00009BB0 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009BB4                            
00009BB4                            loc_9C0E:
00009BB4 0812 0000                  		btst	#0,(a2)
00009BB8 6600 0000                  		bne.w	DeleteObject
00009BBC                            
00009BBC                            Obj25_Animate:				; XREF: Obj25_Index
00009BBC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009BC2 6100 0000                  		bsr.w	DisplaySprite
00009BC6 3028 0032                  		move.w	$32(a0),d0
00009BCA 0240 FF80                  		andi.w	#$FF80,d0
00009BCE 3238 F700                  		move.w	($FFFFF700).w,d1
00009BD2 0441 0080                  		subi.w	#$80,d1
00009BD6 0241 FF80                  		andi.w	#$FF80,d1
00009BDA 9041                       		sub.w	d1,d0
00009BDC 0C40 0280                  		cmpi.w	#$280,d0
00009BE0 6200                       		bhi.s	Obj25_Delete
00009BE2 4E75                       		rts	
00009BE4                            ; ===========================================================================
00009BE4                            
00009BE4                            Obj25_Collect:				; XREF: Obj25_Index
00009BE4 5428 0024                  		addq.b	#2,$24(a0)
00009BE8 117C 0000 0020             		move.b	#0,$20(a0)
00009BEE 117C 0001 0018             		move.b	#1,$18(a0)
00009BF4 6100 0000                  		bsr.w	CollectRing
00009BF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009BFC 7000                       		moveq	#0,d0
00009BFE 1028 0023                  		move.b	$23(a0),d0
00009C02 1228 0034                  		move.b	$34(a0),d1
00009C06 03F2 0002                  		bset	d1,2(a2,d0.w)
00009C0A                            
00009C0A                            Obj25_Sparkle:				; XREF: Obj25_Index
00009C0A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009C10 6100 0000                  		bsr.w	AnimateSprite
00009C14 6000 0000                  		bra.w	DisplaySprite
00009C18                            ; ===========================================================================
00009C18                            
00009C18                            Obj25_Delete:				; XREF: Obj25_Index
00009C18 6000 0000                  		bra.w	DeleteObject
00009C1C                            
00009C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C1C                            
00009C1C                            
00009C1C                            CollectRing:				; XREF: Obj25_Collect
00009C1C 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009C20 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009C26 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009C2A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009C30 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C32 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009C38 6700                       		beq.s	loc_9CA4
00009C3A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009C40 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C42 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009C48 6600                       		bne.s	Obj25_PlaySnd
00009C4A                            
00009C4A                            loc_9CA4:
00009C4A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009C4E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009C52 303C 0088                  		move.w	#$88,d0		; play extra life music
00009C56                            
00009C56                            Obj25_PlaySnd:
00009C56 4EF9 0000 137A             		jmp	(PlaySound_Special).l
00009C5C                            ; End of function CollectRing
00009C5C                            
00009C5C                            ; ===========================================================================
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            ; Object 37 - rings flying out of Sonic	when he's hit
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            
00009C5C                            Obj37:					; XREF: Obj_Index
00009C5C 7000                       		moveq	#0,d0
00009C5E 1028 0024                  		move.b	$24(a0),d0
00009C62 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009C66 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009C6A                            ; ===========================================================================
00009C6A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009C6C 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009C6E 0000                       		dc.w Obj37_Collect-Obj37_Index
00009C70 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009C72 0000                       		dc.w Obj37_Delete-Obj37_Index
00009C74                            ; ===========================================================================
00009C74                            
00009C74                            Obj37_CountRings:			; XREF: Obj37_Index
00009C74 2248                       		movea.l	a0,a1
00009C76 7A00                       		moveq	#0,d5
00009C78 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009C7C 7020                       		moveq	#32,d0
00009C7E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009C80 6500                       		bcs.s	loc_9CDE	; if not, branch
00009C82 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009C84                            
00009C84                            loc_9CDE:
00009C84 5345                       		subq.w	#1,d5
00009C86 383C 0288                  		move.w	#$288,d4
00009C8A 6000                       		bra.s	Obj37_MakeRings
00009C8C                            ; ===========================================================================
00009C8C                            
00009C8C                            Obj37_Loop:
00009C8C 6100 0000                  		bsr.w	SingleObjLoad
00009C90 6600 0000                  		bne.w	Obj37_ResetCounter
00009C94                            
00009C94                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009C94 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009C98 5429 0024                  		addq.b	#2,$24(a1)
00009C9C 137C 0008 0016             		move.b	#8,$16(a1)
00009CA2 137C 0008 0017             		move.b	#8,$17(a1)
00009CA8 3368 0008 0008             		move.w	8(a0),8(a1)
00009CAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CB4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CBC 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CC2 137C 0004 0001             		move.b	#4,1(a1)
00009CC8 137C 0003 0018             		move.b	#3,$18(a1)
00009CCE 137C 0047 0020             		move.b	#$47,$20(a1)
00009CD4 137C 0008 0019             		move.b	#8,$19(a1)
00009CDA 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009CE0 4A44                       		tst.w	d4
00009CE2 6B00                       		bmi.s	loc_9D62
00009CE4 3004                       		move.w	d4,d0
00009CE6 6100 8CD0                  		bsr.w	CalcSine
00009CEA 3404                       		move.w	d4,d2
00009CEC E04A                       		lsr.w	#8,d2
00009CEE E560                       		asl.w	d2,d0
00009CF0 E561                       		asl.w	d2,d1
00009CF2 3400                       		move.w	d0,d2
00009CF4 3601                       		move.w	d1,d3
00009CF6 0604 0010                  		addi.b	#$10,d4
00009CFA 6400                       		bcc.s	loc_9D62
00009CFC 0444 0080                  		subi.w	#$80,d4
00009D00 6400                       		bcc.s	loc_9D62
00009D02 383C 0288                  		move.w	#$288,d4
00009D06                            
00009D06                            loc_9D62:
00009D06 3342 0010                  		move.w	d2,$10(a1)
00009D0A 3343 0012                  		move.w	d3,$12(a1)
00009D0E 4442                       		neg.w	d2
00009D10 4444                       		neg.w	d4
00009D12 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009D16                            
00009D16                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009D16 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009D1C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009D22 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009D28 303C 00C6                  		move.w	#$C6,d0
00009D2C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009D32                            
00009D32                            Obj37_Bounce:				; XREF: Obj37_Index
00009D32 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009D38 6100 0000                  		bsr.w	SpeedToPos
00009D3C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D42 6B00                       		bmi.s	Obj37_ChkDel
00009D44 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009D48 D007                       		add.b	d7,d0
00009D4A 0200 0003                  		andi.b	#3,d0
00009D4E 6600                       		bne.s	Obj37_ChkDel
00009D50 4EB9 0000 0000             		jsr	ObjHitFloor
00009D56 4A41                       		tst.w	d1
00009D58 6A00                       		bpl.s	Obj37_ChkDel
00009D5A D368 000C                  		add.w	d1,$C(a0)
00009D5E 3028 0012                  		move.w	$12(a0),d0
00009D62 E440                       		asr.w	#2,d0
00009D64 9168 0012                  		sub.w	d0,$12(a0)
00009D68 4468 0012                  		neg.w	$12(a0)
00009D6C                            
00009D6C                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009D6C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009D70 6700                       		beq.s	Obj37_Delete
00009D72 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D76 0640 00E0                  		addi.w	#$E0,d0
00009D7A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009D7E 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009D80 6000 0000                  		bra.w	DisplaySprite
00009D84                            ; ===========================================================================
00009D84                            
00009D84                            Obj37_Collect:				; XREF: Obj37_Index
00009D84 5428 0024                  		addq.b	#2,$24(a0)
00009D88 117C 0000 0020             		move.b	#0,$20(a0)
00009D8E 117C 0001 0018             		move.b	#1,$18(a0)
00009D94 6100 FE86                  		bsr.w	CollectRing
00009D98                            
00009D98                            Obj37_Sparkle:				; XREF: Obj37_Index
00009D98 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D9E 6100 0000                  		bsr.w	AnimateSprite
00009DA2 6000 0000                  		bra.w	DisplaySprite
00009DA6                            ; ===========================================================================
00009DA6                            
00009DA6                            Obj37_Delete:				; XREF: Obj37_Index
00009DA6 6000 0000                  		bra.w	DeleteObject
00009DAA                            ; ===========================================================================
00009DAA                            ; ---------------------------------------------------------------------------
00009DAA                            ; Object 4B - giant ring for entry to special stage
00009DAA                            ; ---------------------------------------------------------------------------
00009DAA                            
00009DAA                            Obj4B:					; XREF: Obj_Index
00009DAA 7000                       		moveq	#0,d0
00009DAC 1028 0024                  		move.b	$24(a0),d0
00009DB0 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009DB4 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009DB8                            ; ===========================================================================
00009DB8 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009DBA 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009DBC 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009DBE 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj4B_Main:				; XREF: Obj4B_Index
00009DC0 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009DC8 317C 2400 0002             		move.w	#$2400,2(a0)
00009DCE 0028 0004 0001             		ori.b	#4,1(a0)
00009DD4 117C 0040 0019             		move.b	#$40,$19(a0)
00009DDA 4A28 0001                  		tst.b	1(a0)
00009DDE 6A00                       		bpl.s	Obj4B_Animate
00009DE0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009DE6 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009DEA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009DF0 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009DF2 4E75                       		rts	
00009DF4                            ; ===========================================================================
00009DF4                            
00009DF4                            Obj4B_Okay:				; XREF: Obj4B_Main
00009DF4 5428 0024                  		addq.b	#2,$24(a0)
00009DF8 117C 0002 0018             		move.b	#2,$18(a0)
00009DFE 117C 0052 0020             		move.b	#$52,$20(a0)
00009E04 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009E0A                            
00009E0A                            Obj4B_Animate:				; XREF: Obj4B_Index
00009E0A 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009E10 3028 0008                  		move.w	8(a0),d0
00009E14 0240 FF80                  		andi.w	#$FF80,d0
00009E18 3238 F700                  		move.w	($FFFFF700).w,d1
00009E1C 0441 0080                  		subi.w	#$80,d1
00009E20 0241 FF80                  		andi.w	#$FF80,d1
00009E24 9041                       		sub.w	d1,d0
00009E26 0C40 0280                  		cmpi.w	#$280,d0
00009E2A 6200 0000                  		bhi.w	DeleteObject
00009E2E 6000 0000                  		bra.w	DisplaySprite
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            Obj4B_Collect:				; XREF: Obj4B_Index
00009E32 5528 0024                  		subq.b	#2,$24(a0)
00009E36 117C 0000 0020             		move.b	#0,$20(a0)
00009E3C 6100 0000                  		bsr.w	SingleObjLoad
00009E40 6600 0000                  		bne.w	Obj4B_PlaySnd
00009E44 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009E48 3368 0008 0008             		move.w	8(a0),8(a1)
00009E4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E54 2348 003C                  		move.l	a0,$3C(a1)
00009E58 3038 D008                  		move.w	($FFFFD008).w,d0
00009E5C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009E60 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009E62 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009E68                            
00009E68                            Obj4B_PlaySnd:
00009E68 303C 00C3                  		move.w	#$C3,d0
00009E6C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009E72 6096                       		bra.s	Obj4B_Animate
00009E74                            ; ===========================================================================
00009E74                            
00009E74                            Obj4B_Delete:				; XREF: Obj4B_Index
00009E74 6000 0000                  		bra.w	DeleteObject
00009E78                            ; ===========================================================================
00009E78                            ; ---------------------------------------------------------------------------
00009E78                            ; Object 7C - flash effect when	you collect the	giant ring
00009E78                            ; ---------------------------------------------------------------------------
00009E78                            
00009E78                            Obj7C:					; XREF: Obj_Index
00009E78 7000                       		moveq	#0,d0
00009E7A 1028 0024                  		move.b	$24(a0),d0
00009E7E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009E82 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009E86                            ; ===========================================================================
00009E86 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009E88 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009E8A 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009E8C                            ; ===========================================================================
00009E8C                            
00009E8C                            Obj7C_Main:				; XREF: Obj7C_Index
00009E8C 5428 0024                  		addq.b	#2,$24(a0)
00009E90 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009E98 317C 2462 0002             		move.w	#$2462,2(a0)
00009E9E 0028 0004 0001             		ori.b	#4,1(a0)
00009EA4 117C 0000 0018             		move.b	#0,$18(a0)
00009EAA 117C 0020 0019             		move.b	#$20,$19(a0)
00009EB0 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009EB6                            
00009EB6                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009EB6 6100                       		bsr.s	Obj7C_Collect
00009EB8 3028 0008                  		move.w	8(a0),d0
00009EBC 0240 FF80                  		andi.w	#$FF80,d0
00009EC0 3238 F700                  		move.w	($FFFFF700).w,d1
00009EC4 0441 0080                  		subi.w	#$80,d1
00009EC8 0241 FF80                  		andi.w	#$FF80,d1
00009ECC 9041                       		sub.w	d1,d0
00009ECE 0C40 0280                  		cmpi.w	#$280,d0
00009ED2 6200 0000                  		bhi.w	DeleteObject
00009ED6 6000 0000                  		bra.w	DisplaySprite
00009EDA                            
00009EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EDA                            
00009EDA                            
00009EDA                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00009EDA 5328 001E                  		subq.b	#1,$1E(a0)
00009EDE 6A00                       		bpl.s	locret_9F76
00009EE0 117C 0001 001E             		move.b	#1,$1E(a0)
00009EE6 5228 001A                  		addq.b	#1,$1A(a0)
00009EEA 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
00009EF0 6400                       		bcc.s	Obj7C_End	; if yes, branch
00009EF2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
00009EF8 6600                       		bne.s	locret_9F76	; if not, branch
00009EFA 2268 003C                  		movea.l	$3C(a0),a1
00009EFE 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
00009F04 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
00009F0A 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00009F10 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00009F14 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00009F18                            
00009F18                            locret_9F76:
00009F18 4E75                       		rts	
00009F1A                            ; ===========================================================================
00009F1A                            
00009F1A                            Obj7C_End:				; XREF: Obj7C_Collect
00009F1A 5428 0024                  		addq.b	#2,$24(a0)
00009F1E 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00009F24 588F                       		addq.l	#4,sp
00009F26 4E75                       		rts	
00009F28                            ; End of function Obj7C_Collect
00009F28                            
00009F28                            ; ===========================================================================
00009F28                            
00009F28                            Obj7C_Delete:				; XREF: Obj7C_Index
00009F28 6000 0000                  		bra.w	DeleteObject
00009F2C                            ; ===========================================================================
00009F2C                            Ani_obj25:
00009F2C                            	include "_anim\obj25.asm"
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C                            ; Animation script - ring
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C 0000                       		dc.w byte_9F8C-Ani_obj25
00009F2E 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00009F34                            		even
00009F34                            		even
00009F34                            
00009F34                            ; ---------------------------------------------------------------------------
00009F34                            ; Sprite mappings - rings
00009F34                            ; ---------------------------------------------------------------------------
00009F34                            Map_obj25:
00009F34                            	include "_maps\obj25.asm"
00009F34                            ; ---------------------------------------------------------------------------
00009F34                            ; Sprite mappings - rings
00009F34                            ; ---------------------------------------------------------------------------
00009F34 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00009F38 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00009F3C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00009F40 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00009F44 01                         byte_9FA2:	dc.b 1
00009F45 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009F4A 01                         byte_9FA8:	dc.b 1
00009F4B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00009F50 01                         byte_9FAE:	dc.b 1
00009F51 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00009F56 01                         byte_9FB4:	dc.b 1
00009F57 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00009F5C 01                         byte_9FBA:	dc.b 1
00009F5D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009F62 01                         byte_9FC0:	dc.b 1
00009F63 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00009F68 01                         byte_9FC6:	dc.b 1
00009F69 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00009F6E 01                         byte_9FCC:	dc.b 1
00009F6F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00009F74                            		even
00009F74                            		even
00009F74                            
00009F74                            ; ---------------------------------------------------------------------------
00009F74                            ; Sprite mappings - giant ring
00009F74                            ; ---------------------------------------------------------------------------
00009F74                            Map_obj4B:
00009F74                            	include "_maps\obj4B.asm"
00009F74                            ; ---------------------------------------------------------------------------
00009F74                            ; Sprite mappings - giant ring
00009F74                            ; ---------------------------------------------------------------------------
00009F74 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00009F78 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00009F7C 0A                         byte_9FDA:	dc.b $A
00009F7D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00009F82 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00009F87 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00009F8C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00009F91 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00009F96 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00009F9B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00009FA0 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00009FA5 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00009FAA 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00009FAF 08                         byte_A00D:	dc.b 8
00009FB0 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00009FB5 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00009FBA E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00009FBF F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00009FC4 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00009FC9 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00009FCE 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00009FD3 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
00009FD8 04                         byte_A036:	dc.b 4
00009FD9 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
00009FDE E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
00009FE3 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
00009FE8 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
00009FED 08                         byte_A04B:	dc.b 8
00009FEE E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
00009FF3 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
00009FF8 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
00009FFD F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A002 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A007 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A00C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A011 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A016                            		even
0000A016                            		even
0000A016                            
0000A016                            ; ---------------------------------------------------------------------------
0000A016                            ; Sprite mappings - flash effect when you collect the giant ring
0000A016                            ; ---------------------------------------------------------------------------
0000A016                            Map_obj7C:
0000A016                            	include "_maps\obj7C.asm"
0000A016                            ; ---------------------------------------------------------------------------
0000A016                            ; Sprite mappings - flash effect when you collect the giant ring
0000A016                            ; ---------------------------------------------------------------------------
0000A016 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A01A 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A01E 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A022 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A026 02                         byte_A084:	dc.b 2
0000A027 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A02C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A031 04                         byte_A08F:	dc.b 4
0000A032 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A037 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A03C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A041 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A046 04                         byte_A0A4:	dc.b 4
0000A047 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A04C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A051 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A056 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A05B 04                         byte_A0B9:	dc.b 4
0000A05C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A061 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A066 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A06B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A070 04                         byte_A0CE:	dc.b 4
0000A071 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A076 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A07B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A080 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A085 04                         byte_A0E3:	dc.b 4
0000A086 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A08B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A090 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A095 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A09A 02                         byte_A0F8:	dc.b 2
0000A09B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A0A0 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A0A5 04                         byte_A103:	dc.b 4
0000A0A6 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A0AB E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A0B0 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A0B5 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A0BA                            		even
0000A0BA                            		even
0000A0BA                            
0000A0BA                            ; ===========================================================================
0000A0BA                            ; ---------------------------------------------------------------------------
0000A0BA                            ; Object 26 - monitors
0000A0BA                            ; ---------------------------------------------------------------------------
0000A0BA                            
0000A0BA                            Obj26:					; XREF: Obj_Index
0000A0BA 7000                       		moveq	#0,d0
0000A0BC 1028 0024                  		move.b	$24(a0),d0
0000A0C0 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A0C4 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A0C8                            ; ===========================================================================
0000A0C8 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A0CA 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A0CC 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A0CE 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A0D0 0000                       		dc.w Obj26_Display-Obj26_Index
0000A0D2                            ; ===========================================================================
0000A0D2                            
0000A0D2                            Obj26_Main:				; XREF: Obj26_Index
0000A0D2 5428 0024                  		addq.b	#2,$24(a0)
0000A0D6 117C 000E 0016             		move.b	#$E,$16(a0)
0000A0DC 117C 000E 0017             		move.b	#$E,$17(a0)
0000A0E2 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A0EA 317C 0680 0002             		move.w	#$680,2(a0)
0000A0F0 117C 0004 0001             		move.b	#4,1(a0)
0000A0F6 117C 0003 0018             		move.b	#3,$18(a0)
0000A0FC 117C 000F 0019             		move.b	#$F,$19(a0)
0000A102 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A106 7000                       		moveq	#0,d0
0000A108 1028 0023                  		move.b	$23(a0),d0
0000A10C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A112 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A118 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A11A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A120 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A126 4E75                       		rts	
0000A128                            ; ===========================================================================
0000A128                            
0000A128                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A128 117C 0046 0020             		move.b	#$46,$20(a0)
0000A12E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A134                            
0000A134                            Obj26_Solid:				; XREF: Obj26_Index
0000A134 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A138 6700                       		beq.s	loc_A1EC	; if not, branch
0000A13A 5500                       		subq.b	#2,d0
0000A13C 6600                       		bne.s	Obj26_Fall
0000A13E 7200                       		moveq	#0,d1
0000A140 1228 0019                  		move.b	$19(a0),d1
0000A144 0641 000B                  		addi.w	#$B,d1
0000A148 6100 D43E                  		bsr.w	ExitPlatform
0000A14C 0829 0003 0022             		btst	#3,$22(a1)
0000A152 6600 0000                  		bne.w	loc_A1BC
0000A156 4228 0025                  		clr.b	$25(a0)
0000A15A 6000 0000                  		bra.w	Obj26_Animate
0000A15E                            ; ===========================================================================
0000A15E                            
0000A15E                            loc_A1BC:				; XREF: Obj26_Solid
0000A15E 363C 0010                  		move.w	#$10,d3
0000A162 3428 0008                  		move.w	8(a0),d2
0000A166 6100 D97E                  		bsr.w	MvSonicOnPtfm
0000A16A 6000 0000                  		bra.w	Obj26_Animate
0000A16E                            ; ===========================================================================
0000A16E                            
0000A16E                            Obj26_Fall:				; XREF: Obj26_Solid
0000A16E 6100 0000                  		bsr.w	ObjectFall
0000A172 4EB9 0000 0000             		jsr	ObjHitFloor
0000A178 4A41                       		tst.w	d1
0000A17A 6A00 0000                  		bpl.w	Obj26_Animate
0000A17E D368 000C                  		add.w	d1,$C(a0)
0000A182 4268 0012                  		clr.w	$12(a0)
0000A186 4228 0025                  		clr.b	$25(a0)
0000A18A 6000 0000                  		bra.w	Obj26_Animate
0000A18E                            ; ===========================================================================
0000A18E                            
0000A18E                            loc_A1EC:				; XREF: Obj26_Solid
0000A18E 323C 001A                  		move.w	#$1A,d1
0000A192 343C 000F                  		move.w	#$F,d2
0000A196 6100 0000                  		bsr.w	Obj26_SolidSides
0000A19A 6700 0000                  		beq.w	loc_A25C
0000A19E 4A69 0012                  		tst.w	$12(a1)
0000A1A2 6B00                       		bmi.s	loc_A20A
0000A1A4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A1AA 6700                       		beq.s	loc_A25C	; if yes, branch
0000A1AC                            
0000A1AC                            loc_A20A:
0000A1AC 4A41                       		tst.w	d1
0000A1AE 6A00                       		bpl.s	loc_A220
0000A1B0 9769 000C                  		sub.w	d3,$C(a1)
0000A1B4 6100 D2C0                  		bsr.w	loc_74AE
0000A1B8 117C 0002 0025             		move.b	#2,$25(a0)
0000A1BE 6000 0000                  		bra.w	Obj26_Animate
0000A1C2                            ; ===========================================================================
0000A1C2                            
0000A1C2                            loc_A220:
0000A1C2 4A40                       		tst.w	d0
0000A1C4 6700 0000                  		beq.w	loc_A246
0000A1C8 6B00                       		bmi.s	loc_A230
0000A1CA 4A69 0010                  		tst.w	$10(a1)
0000A1CE 6B00                       		bmi.s	loc_A246
0000A1D0 6000                       		bra.s	loc_A236
0000A1D2                            ; ===========================================================================
0000A1D2                            
0000A1D2                            loc_A230:
0000A1D2 4A69 0010                  		tst.w	$10(a1)
0000A1D6 6A00                       		bpl.s	loc_A246
0000A1D8                            
0000A1D8                            loc_A236:
0000A1D8 9169 0008                  		sub.w	d0,8(a1)
0000A1DC 337C 0000 0014             		move.w	#0,$14(a1)
0000A1E2 337C 0000 0010             		move.w	#0,$10(a1)
0000A1E8                            
0000A1E8                            loc_A246:
0000A1E8 0829 0001 0022             		btst	#1,$22(a1)
0000A1EE 6600                       		bne.s	loc_A26A
0000A1F0 08E9 0005 0022             		bset	#5,$22(a1)
0000A1F6 08E8 0005 0022             		bset	#5,$22(a0)
0000A1FC 6000                       		bra.s	Obj26_Animate
0000A1FE                            ; ===========================================================================
0000A1FE                            
0000A1FE                            loc_A25C:
0000A1FE 0828 0005 0022             		btst	#5,$22(a0)
0000A204 6700                       		beq.s	Obj26_Animate
0000A206 337C 0001 001C             		move.w	#1,$1C(a1)
0000A20C                            
0000A20C                            loc_A26A:
0000A20C 08A8 0005 0022             		bclr	#5,$22(a0)
0000A212 08A9 0005 0022             		bclr	#5,$22(a1)
0000A218                            
0000A218                            Obj26_Animate:				; XREF: Obj26_Index
0000A218 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A21E 6100 0000                  		bsr.w	AnimateSprite
0000A222                            
0000A222                            Obj26_Display:				; XREF: Obj26_Index
0000A222 6100 0000                  		bsr.w	DisplaySprite
0000A226 3028 0008                  		move.w	8(a0),d0
0000A22A 0240 FF80                  		andi.w	#$FF80,d0
0000A22E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A232 0441 0080                  		subi.w	#$80,d1
0000A236 0241 FF80                  		andi.w	#$FF80,d1
0000A23A 9041                       		sub.w	d1,d0
0000A23C 0C40 0280                  		cmpi.w	#$280,d0
0000A240 6200 0000                  		bhi.w	DeleteObject
0000A244 4E75                       		rts	
0000A246                            ; ===========================================================================
0000A246                            
0000A246                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A246 5428 0024                  		addq.b	#2,$24(a0)
0000A24A 117C 0000 0020             		move.b	#0,$20(a0)
0000A250 6100 0000                  		bsr.w	SingleObjLoad
0000A254 6600                       		bne.s	Obj26_Explode
0000A256 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A25A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A260 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A266 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A26C                            
0000A26C                            Obj26_Explode:
0000A26C 6100 0000                  		bsr.w	SingleObjLoad
0000A270 6600                       		bne.s	Obj26_SetBroken
0000A272 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A276 5429 0024                  		addq.b	#2,$24(a1)
0000A27A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A280 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A286                            
0000A286                            Obj26_SetBroken:
0000A286 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A28A 7000                       		moveq	#0,d0
0000A28C 1028 0023                  		move.b	$23(a0),d0
0000A290 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A296 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A29C 6000 0000                  		bra.w	DisplaySprite
0000A2A0                            ; ===========================================================================
0000A2A0                            ; ---------------------------------------------------------------------------
0000A2A0                            ; Object 2E - contents of monitors
0000A2A0                            ; ---------------------------------------------------------------------------
0000A2A0                            
0000A2A0                            Obj2E:					; XREF: Obj_Index
0000A2A0 7000                       		moveq	#0,d0
0000A2A2 1028 0024                  		move.b	$24(a0),d0
0000A2A6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A2AA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A2AE 6000 0000                  		bra.w	DisplaySprite
0000A2B2                            ; ===========================================================================
0000A2B2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A2B4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A2B6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A2B8                            ; ===========================================================================
0000A2B8                            
0000A2B8                            Obj2E_Main:				; XREF: Obj2E_Index
0000A2B8 5428 0024                  		addq.b	#2,$24(a0)
0000A2BC 317C 0680 0002             		move.w	#$680,2(a0)
0000A2C2 117C 0024 0001             		move.b	#$24,1(a0)
0000A2C8 117C 0003 0018             		move.b	#3,$18(a0)
0000A2CE 117C 0008 0019             		move.b	#8,$19(a0)
0000A2D4 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A2DA 7000                       		moveq	#0,d0
0000A2DC 1028 001C                  		move.b	$1C(a0),d0
0000A2E0 5400                       		addq.b	#2,d0
0000A2E2 1140 001A                  		move.b	d0,$1A(a0)
0000A2E6 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A2EC D000                       		add.b	d0,d0
0000A2EE D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A2F2 5249                       		addq.w	#1,a1
0000A2F4 2149 0004                  		move.l	a1,4(a0)
0000A2F8                            
0000A2F8                            Obj2E_Move:				; XREF: Obj2E_Index
0000A2F8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A2FC 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A300 6100 0000                  		bsr.w	SpeedToPos
0000A304 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A30A 4E75                       		rts	
0000A30C                            ; ===========================================================================
0000A30C                            
0000A30C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A30C 5428 0024                  		addq.b	#2,$24(a0)
0000A310 317C 001D 001E             		move.w	#29,$1E(a0)
0000A316 1028 001C                  		move.b	$1C(a0),d0
0000A31A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A31E 6600                       		bne.s	Obj2E_ChkSonic
0000A320 4E75                       		rts			; Eggman monitor does nothing
0000A322                            ; ===========================================================================
0000A322                            
0000A322                            Obj2E_ChkSonic:
0000A322 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A326 6600                       		bne.s	Obj2E_ChkShoes
0000A328                            
0000A328                            ExtraLife:
0000A328 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A32C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A330 303C 0088                  		move.w	#$88,d0
0000A334 4EF9 0000 1374             		jmp	(PlaySound).l	; play extra life music
0000A33A                            ; ===========================================================================
0000A33A                            
0000A33A                            Obj2E_ChkShoes:
0000A33A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A33E 6600                       		bne.s	Obj2E_ChkShield
0000A340 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A346 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A34C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A352 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A358 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A35E 303C 00E2                  		move.w	#$E2,d0
0000A362 4EF9 0000 1374             		jmp	(PlaySound).l	; Speed	up the music
0000A368                            ; ===========================================================================
0000A368                            
0000A368                            Obj2E_ChkShield:
0000A368 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A36C 6600                       		bne.s	Obj2E_ChkInvinc
0000A36E 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A374 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A37A 303C 00AF                  		move.w	#$AF,d0
0000A37E 4EF9 0000 1374             		jmp	(PlaySound).l	; play shield sound
0000A384                            ; ===========================================================================
0000A384                            
0000A384                            Obj2E_ChkInvinc:
0000A384 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A388 6600                       		bne.s	Obj2E_ChkRings
0000A38A 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A390 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A396 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A39C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A3A2 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A3A8 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A3AE 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A3B4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A3BA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A3C0 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A3C6 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A3CA 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A3CC 303C 0087                  		move.w	#$87,d0
0000A3D0 4EF9 0000 1374             		jmp	(PlaySound).l	; play invincibility music
0000A3D6                            ; ===========================================================================
0000A3D6                            
0000A3D6                            Obj2E_NoMusic:
0000A3D6 4E75                       		rts	
0000A3D8                            ; ===========================================================================
0000A3D8                            
0000A3D8                            Obj2E_ChkRings:
0000A3D8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A3DC 6600                       		bne.s	Obj2E_ChkS
0000A3DE 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A3E4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A3EA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A3F0 6500                       		bcs.s	Obj2E_RingSound
0000A3F2 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A3F8 6700 FF2E                  		beq.w	ExtraLife
0000A3FC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A402 6500                       		bcs.s	Obj2E_RingSound
0000A404 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A40A 6700 FF1C                  		beq.w	ExtraLife
0000A40E                            
0000A40E                            Obj2E_RingSound:
0000A40E 303C 00B5                  		move.w	#$B5,d0
0000A412 4EF9 0000 1374             		jmp	(PlaySound).l	; play ring sound
0000A418                            ; ===========================================================================
0000A418                            
0000A418                            Obj2E_ChkS:
0000A418 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A41C 6600                       		bne.s	Obj2E_ChkEnd
0000A41E 4E71                       		nop	
0000A420                            
0000A420                            Obj2E_ChkEnd:
0000A420 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A422                            ; ===========================================================================
0000A422                            
0000A422                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A422 5368 001E                  		subq.w	#1,$1E(a0)
0000A426 6B00 0000                  		bmi.w	DeleteObject
0000A42A 4E75                       		rts	
0000A42C                            ; ---------------------------------------------------------------------------
0000A42C                            ; Subroutine to	make the sides of a monitor solid
0000A42C                            ; ---------------------------------------------------------------------------
0000A42C                            
0000A42C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A42C                            
0000A42C                            
0000A42C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A42C 43F8 D000                  		lea	($FFFFD000).w,a1
0000A430 3029 0008                  		move.w	8(a1),d0
0000A434 9068 0008                  		sub.w	8(a0),d0
0000A438 D041                       		add.w	d1,d0
0000A43A 6B00                       		bmi.s	loc_A4E6
0000A43C 3601                       		move.w	d1,d3
0000A43E D643                       		add.w	d3,d3
0000A440 B043                       		cmp.w	d3,d0
0000A442 6200                       		bhi.s	loc_A4E6
0000A444 1629 0016                  		move.b	$16(a1),d3
0000A448 4883                       		ext.w	d3
0000A44A D443                       		add.w	d3,d2
0000A44C 3629 000C                  		move.w	$C(a1),d3
0000A450 9668 000C                  		sub.w	$C(a0),d3
0000A454 D642                       		add.w	d2,d3
0000A456 6B00                       		bmi.s	loc_A4E6
0000A458 D442                       		add.w	d2,d2
0000A45A B642                       		cmp.w	d2,d3
0000A45C 6400                       		bcc.s	loc_A4E6
0000A45E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A462 6B00                       		bmi.s	loc_A4E6
0000A464 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A46A 6400                       		bcc.s	loc_A4E6
0000A46C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A470 6600                       		bne.s	loc_A4E6
0000A472 B240                       		cmp.w	d0,d1
0000A474 6400                       		bcc.s	loc_A4DC
0000A476 D241                       		add.w	d1,d1
0000A478 9041                       		sub.w	d1,d0
0000A47A                            
0000A47A                            loc_A4DC:
0000A47A 0C43 0010                  		cmpi.w	#$10,d3
0000A47E 6500                       		bcs.s	loc_A4EA
0000A480                            
0000A480                            loc_A4E2:
0000A480 7201                       		moveq	#1,d1
0000A482 4E75                       		rts	
0000A484                            ; ===========================================================================
0000A484                            
0000A484                            loc_A4E6:
0000A484 7200                       		moveq	#0,d1
0000A486 4E75                       		rts	
0000A488                            ; ===========================================================================
0000A488                            
0000A488                            loc_A4EA:
0000A488 7200                       		moveq	#0,d1
0000A48A 1228 0019                  		move.b	$19(a0),d1
0000A48E 5841                       		addq.w	#4,d1
0000A490 3401                       		move.w	d1,d2
0000A492 D442                       		add.w	d2,d2
0000A494 D269 0008                  		add.w	8(a1),d1
0000A498 9268 0008                  		sub.w	8(a0),d1
0000A49C 6BE2                       		bmi.s	loc_A4E2
0000A49E B242                       		cmp.w	d2,d1
0000A4A0 64DE                       		bcc.s	loc_A4E2
0000A4A2 72FF                       		moveq	#-1,d1
0000A4A4 4E75                       		rts	
0000A4A6                            ; End of function Obj26_SolidSides
0000A4A6                            
0000A4A6                            ; ===========================================================================
0000A4A6                            Ani_obj26:
0000A4A6                            	include "_anim\obj26.asm"
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Animation script - monitors
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A4AC 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A4B2 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A4B8 0000                       		dc.w byte_A582-Ani_obj26
0000A4BA 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A4C0 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A4CC 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A4D8 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A4E4 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A4F0 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A4FC 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A508 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A514 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A520 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A528                            		even
0000A528                            		even
0000A528                            
0000A528                            ; ---------------------------------------------------------------------------
0000A528                            ; Sprite mappings - monitors
0000A528                            ; ---------------------------------------------------------------------------
0000A528                            Map_obj26:
0000A528                            	include "_maps\obj26.asm"
0000A528                            ; ---------------------------------------------------------------------------
0000A528                            ; Sprite mappings - monitors
0000A528                            ; ---------------------------------------------------------------------------
0000A528 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A52C 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A530 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A534 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A538 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A53C 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A540 01                         byte_A5A2:	dc.b 1			; static monitor
0000A541 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A546 02                         byte_A5A8:	dc.b 2			; static monitor
0000A547 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A54C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A551 02                         byte_A5B3:	dc.b 2			; static monitor
0000A552 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A557 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A55C 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A55D F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A562 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A567 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A568 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A56D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A572 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A573 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A578 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A57D 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A57E F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A583 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A588 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A589 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A58E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A593 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A594 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A599 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A59E 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A59F F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A5A4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5A9 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A5AA F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A5AF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5B4 01                         byte_A616:	dc.b 1			; broken monitor
0000A5B5 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A5BA                            		even
0000A5BA                            		even
0000A5BA                            
0000A5BA                            ; ===========================================================================
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA                            ; Object 0E - Sonic on the title screen
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA                            
0000A5BA                            Obj0E:					; XREF: Obj_Index
0000A5BA 7000                       		moveq	#0,d0
0000A5BC 1028 0024                  		move.b	$24(a0),d0
0000A5C0 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A5C4 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A5C8                            ; ===========================================================================
0000A5C8 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A5CA 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A5CC 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A5CE 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A5D0                            ; ===========================================================================
0000A5D0                            
0000A5D0                            Obj0E_Main:				; XREF: Obj0E_Index
0000A5D0 5428 0024                  		addq.b	#2,$24(a0)
0000A5D4 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A5DA 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A5E0 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A5E8 317C 2300 0002             		move.w	#$2300,2(a0)
0000A5EE 117C 0001 0018             		move.b	#1,$18(a0)
0000A5F4 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A5FA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A600 6100 0000                  		bsr.w	AnimateSprite
0000A604                            
0000A604                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A604 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A608 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A60A 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A60E 6000 0000                  		bra.w	DisplaySprite
0000A612                            ; ===========================================================================
0000A612                            
0000A612                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A612 4E75                       		rts	
0000A614                            ; ===========================================================================
0000A614                            
0000A614                            Obj0E_Move:				; XREF: Obj0E_Index
0000A614 5168 000A                  		subq.w	#8,$A(a0)
0000A618 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A61E 6600                       		bne.s	Obj0E_Display
0000A620 5428 0024                  		addq.b	#2,$24(a0)
0000A624                            
0000A624                            Obj0E_Display:
0000A624 6000 0000                  		bra.w	DisplaySprite
0000A628                            ; ===========================================================================
0000A628 4E75                       		rts	
0000A62A                            ; ===========================================================================
0000A62A                            
0000A62A                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A62A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A630 6100 0000                  		bsr.w	AnimateSprite
0000A634 6000 0000                  		bra.w	DisplaySprite
0000A638                            ; ===========================================================================
0000A638 4E75                       		rts	
0000A63A                            ; ===========================================================================
0000A63A                            ; ---------------------------------------------------------------------------
0000A63A                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A63A                            ; ---------------------------------------------------------------------------
0000A63A                            
0000A63A                            Obj0F:					; XREF: Obj_Index
0000A63A 7000                       		moveq	#0,d0
0000A63C 1028 0024                  		move.b	$24(a0),d0
0000A640 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A644 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A648 6000 0000                  		bra.w	DisplaySprite
0000A64C                            ; ===========================================================================
0000A64C 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A64E 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A650 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A652                            ; ===========================================================================
0000A652                            
0000A652                            Obj0F_Main:				; XREF: Obj0F_Index
0000A652 5428 0024                  		addq.b	#2,$24(a0)
0000A656 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A65C 317C 0130 000A             		move.w	#$130,$A(a0)
0000A662 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A66A 317C 0200 0002             		move.w	#$200,2(a0)
0000A670 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A676 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A678 5428 0024                  		addq.b	#2,$24(a0)
0000A67C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A682 6600                       		bne.s	locret_A6F8	; if not, branch
0000A684 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A68A 317C 0170 0008             		move.w	#$170,8(a0)
0000A690 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A696                            
0000A696                            locret_A6F8:				; XREF: Obj0F_Index
0000A696 4E75                       		rts	
0000A698                            ; ===========================================================================
0000A698                            
0000A698                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A698 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A69E 6000 0000                  		bra.w	AnimateSprite
0000A6A2                            ; ===========================================================================
0000A6A2                            Ani_obj0E:
0000A6A2                            	include "_anim\obj0E.asm"
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            ; Animation script - Sonic on the title screen
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2 0000                       		dc.w byte_A706-Ani_obj0E
0000A6A4 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A6B0                            		even
0000A6B0                            		even
0000A6B0                            
0000A6B0                            Ani_obj0F:
0000A6B0                            	include "_anim\obj0F.asm"
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0 0000                       		dc.w byte_A714-Ani_obj0F
0000A6B2 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A6B6                            		even
0000A6B6                            		even
0000A6B6                            
0000A6B6                            ; ---------------------------------------------------------------------------
0000A6B6                            ; Subroutine to	animate	a sprite using an animation script
0000A6B6                            ; ---------------------------------------------------------------------------
0000A6B6                            
0000A6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6B6                            
0000A6B6                            
0000A6B6                            AnimateSprite:
0000A6B6 7000                       		moveq	#0,d0
0000A6B8 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A6BC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A6C0 6700                       		beq.s	Anim_Run	; if not, branch
0000A6C2 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A6C6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A6CC 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A6D2                            
0000A6D2                            Anim_Run:
0000A6D2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6D6 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A6D8 D040                       		add.w	d0,d0
0000A6DA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A6DE 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A6E2 7200                       		moveq	#0,d1
0000A6E4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A6E8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A6EC 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A6EE                            
0000A6EE                            Anim_Next:
0000A6EE 1200                       		move.b	d0,d1
0000A6F0 0200 001F                  		andi.b	#$1F,d0
0000A6F4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A6F8 1028 0022                  		move.b	$22(a0),d0
0000A6FC E719                       		rol.b	#3,d1
0000A6FE B101                       		eor.b	d0,d1
0000A700 0201 0003                  		andi.b	#3,d1
0000A704 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A70A 8328 0001                  		or.b	d1,1(a0)
0000A70E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A712                            
0000A712                            Anim_Wait:
0000A712 4E75                       		rts	
0000A714                            ; ===========================================================================
0000A714                            
0000A714                            Anim_End_FF:
0000A714 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A716 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A718 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A71E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A722 60CA                       		bra.s	Anim_Next
0000A724                            ; ===========================================================================
0000A724                            
0000A724                            Anim_End_FE:
0000A724 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A726 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A728 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A72C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A730 9200                       		sub.b	d0,d1
0000A732 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A736 60B6                       		bra.s	Anim_Next
0000A738                            ; ===========================================================================
0000A738                            
0000A738                            Anim_End_FD:
0000A738 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A73A 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A73C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A742                            
0000A742                            Anim_End_FC:
0000A742 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A744 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A746 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A74A                            
0000A74A                            Anim_End_FB:
0000A74A 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A74C 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A74E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A754 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A758                            
0000A758                            Anim_End_FA:
0000A758 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A75A 6600                       		bne.s	Anim_End	; if not, branch
0000A75C 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A760                            
0000A760                            Anim_End:
0000A760 4E75                       		rts	
0000A762                            ; End of function AnimateSprite
0000A762                            
0000A762                            ; ===========================================================================
0000A762                            ; ---------------------------------------------------------------------------
0000A762                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A762                            ; ---------------------------------------------------------------------------
0000A762                            Map_obj0F:
0000A762                            	include "_maps\obj0F.asm"
0000A762                            ; ---------------------------------------------------------------------------
0000A762                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A762                            ; ---------------------------------------------------------------------------
0000A762 0000                       		dc.w byte_A7CD-Map_obj0F
0000A764 0000                       		dc.w byte_A7CC-Map_obj0F
0000A766 0000                       		dc.w byte_A7EB-Map_obj0F
0000A768 0000                       		dc.w byte_A882-Map_obj0F
0000A76A 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A76B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A770 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A775 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A77A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A77F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A784 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A789 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A78A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A78F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A794 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A799 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A79E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7A3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7A8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7AD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7B2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7B7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7BC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7C1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7C6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7CB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7D0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7D5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7DA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7DF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7E4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7E9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7EE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A7F3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A7F8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A7FD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A802 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A807 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A80C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A811 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A816 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A81B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A820 01                         byte_A882:	dc.b 1			; "TM"
0000A821 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A826                            		even
0000A826                            		even
0000A826                            
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            ; Sprite mappings - Sonic on the title screen
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            Map_obj0E:
0000A826                            	include "_maps\obj0E.asm"
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            ; Sprite mappings - Sonic on the title screen
0000A826                            ; ---------------------------------------------------------------------------
0000A826 0000                       		dc.w byte_A898-Map_obj0E
0000A828 0000                       		dc.w byte_A8CB-Map_obj0E
0000A82A 0000                       		dc.w byte_A917-Map_obj0E
0000A82C 0000                       		dc.w byte_A96D-Map_obj0E
0000A82E 0000                       		dc.w byte_A9AF-Map_obj0E
0000A830 0000                       		dc.w byte_A9E7-Map_obj0E
0000A832 0000                       		dc.w byte_AA47-Map_obj0E
0000A834 0000                       		dc.w byte_AAB1-Map_obj0E
0000A836 0A                         byte_A898:	dc.b $A
0000A837 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A83C 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A841 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A846 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A84B 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A850 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A855 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A85A 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A85F 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A864 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A869 0F                         byte_A8CB:	dc.b $F
0000A86A 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A86F 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A874 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A879 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A87E 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A883 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A888 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A88D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A892 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A897 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A89C 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A8A1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A8A6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A8AB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A8B0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A8B5 11                         byte_A917:	dc.b $11
0000A8B6 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A8BB 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A8C0 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000A8C5 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000A8CA 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000A8CF 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000A8D4 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000A8D9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A8DE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A8E3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A8E8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A8ED 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A8F2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A8F7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A8FC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A901 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A906 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A90B 0D                         byte_A96D:	dc.b $D
0000A90C 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000A911 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000A916 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000A91B 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000A920 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000A925 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000A92A 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000A92F 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000A934 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000A939 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000A93E 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000A943 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000A948 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000A94D 0B                         byte_A9AF:	dc.b $B
0000A94E 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000A953 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000A958 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000A95D 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000A962 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000A967 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000A96C 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000A971 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000A976 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000A97B 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000A980 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000A985 13                         byte_A9E7:	dc.b $13
0000A986 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000A98B 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000A990 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000A995 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000A99A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000A99F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000A9A4 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000A9A9 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000A9AE 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000A9B3 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000A9B8 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000A9BD 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000A9C2 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000A9C7 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000A9CC 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000A9D1 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000A9D6 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000A9DB 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000A9E0 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000A9E5 15                         byte_AA47:	dc.b $15
0000A9E6 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000A9EB 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000A9F0 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000A9F5 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000A9FA 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000A9FF 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AA04 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA09 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA0E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AA13 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AA18 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AA1D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AA22 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AA27 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AA2C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AA31 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AA36 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AA3B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AA40 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AA45 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AA4A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AA4F 16                         byte_AAB1:	dc.b $16
0000AA50 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AA55 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AA5A 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AA5F 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000AA64 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000AA69 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AA6E 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AA73 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA78 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA7D 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AA82 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AA87 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AA8C 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AA91 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AA96 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AA9B 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AAA0 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AAA5 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AAAA 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AAAF 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AAB4 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AAB9 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AABE                            		even
0000AABE                            		even
0000AABE                            
0000AABE                            ; ===========================================================================
0000AABE                            ; ---------------------------------------------------------------------------
0000AABE                            ; Object 2B - Chopper enemy (GHZ)
0000AABE                            ; ---------------------------------------------------------------------------
0000AABE                            
0000AABE                            Obj2B:					; XREF: Obj_Index
0000AABE 7000                       		moveq	#0,d0
0000AAC0 1028 0024                  		move.b	$24(a0),d0
0000AAC4 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AAC8 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AACC 6000 0000                  		bra.w	MarkObjGone
0000AAD0                            ; ===========================================================================
0000AAD0 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AAD2 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AAD4                            ; ===========================================================================
0000AAD4                            
0000AAD4                            Obj2B_Main:				; XREF: Obj2B_Index
0000AAD4 5428 0024                  		addq.b	#2,$24(a0)
0000AAD8 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AAE0 317C 047B 0002             		move.w	#$47B,2(a0)
0000AAE6 117C 0004 0001             		move.b	#4,1(a0)
0000AAEC 117C 0004 0018             		move.b	#4,$18(a0)
0000AAF2 117C 0009 0020             		move.b	#9,$20(a0)
0000AAF8 117C 0010 0019             		move.b	#$10,$19(a0)
0000AAFE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB04 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AB0A                            
0000AB0A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AB0A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AB10 6100 FBA4                  		bsr.w	AnimateSprite
0000AB14 6100 0000                  		bsr.w	SpeedToPos
0000AB18 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AB1E 3028 0030                  		move.w	$30(a0),d0
0000AB22 B068 000C                  		cmp.w	$C(a0),d0
0000AB26 6400                       		bcc.s	Obj2B_ChgAni
0000AB28 3140 000C                  		move.w	d0,$C(a0)
0000AB2C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB32                            
0000AB32                            Obj2B_ChgAni:
0000AB32 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AB38 0440 00C0                  		subi.w	#$C0,d0
0000AB3C B068 000C                  		cmp.w	$C(a0),d0
0000AB40 6400                       		bcc.s	locret_ABB6
0000AB42 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AB48 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AB4C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AB4E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AB54                            
0000AB54                            locret_ABB6:
0000AB54 4E75                       		rts	
0000AB56                            ; ===========================================================================
0000AB56                            Ani_obj2B:
0000AB56                            	include "_anim\obj2B.asm"
0000AB56                            ; ---------------------------------------------------------------------------
0000AB56                            ; Animation script - Chopper enemy
0000AB56                            ; ---------------------------------------------------------------------------
0000AB56 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AB58 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AB5A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AB5C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AB60 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AB64 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AB68 00                         		even
0000AB68 00                         		even
0000AB68                            
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            Map_obj2B:
0000AB68                            	include "_maps\obj2B.asm"
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68 0000                       		dc.w byte_ABCE-Map_obj2B
0000AB6A 0000                       		dc.w byte_ABD4-Map_obj2B
0000AB6C 01                         byte_ABCE:	dc.b 1
0000AB6D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AB72 01                         byte_ABD4:	dc.b 1
0000AB73 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AB78                            		even
0000AB78                            		even
0000AB78                            
0000AB78                            ; ===========================================================================
0000AB78                            ; ---------------------------------------------------------------------------
0000AB78                            ; Object 2C - Jaws enemy (LZ)
0000AB78                            ; ---------------------------------------------------------------------------
0000AB78                            
0000AB78                            Obj2C:					; XREF: Obj_Index
0000AB78 7000                       		moveq	#0,d0
0000AB7A 1028 0024                  		move.b	$24(a0),d0
0000AB7E 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000AB82 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000AB86                            ; ===========================================================================
0000AB86 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000AB88 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000AB8A                            ; ===========================================================================
0000AB8A                            
0000AB8A                            Obj2C_Main:				; XREF: Obj2C_Index
0000AB8A 5428 0024                  		addq.b	#2,$24(a0)
0000AB8E 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000AB96 317C 2486 0002             		move.w	#$2486,2(a0)
0000AB9C 0028 0004 0001             		ori.b	#4,1(a0)
0000ABA2 117C 000A 0020             		move.b	#$A,$20(a0)
0000ABA8 117C 0004 0018             		move.b	#4,$18(a0)
0000ABAE 117C 0010 0019             		move.b	#$10,$19(a0)
0000ABB4 7000                       		moveq	#0,d0
0000ABB6 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ABBA ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ABBC 5340                       		subq.w	#1,d0
0000ABBE 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ABC2 3140 0032                  		move.w	d0,$32(a0)
0000ABC6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000ABCC 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000ABD2 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000ABD4 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000ABD8                            
0000ABD8                            Obj2C_Turn:				; XREF: Obj2C_Index
0000ABD8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000ABDC 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000ABDE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000ABE4 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000ABE8 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000ABEE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ABF4                            
0000ABF4                            Obj2C_Animate:
0000ABF4 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000ABFA 6100 FABA                  		bsr.w	AnimateSprite
0000ABFE 6100 0000                  		bsr.w	SpeedToPos
0000AC02 6000 0000                  		bra.w	MarkObjGone
0000AC06                            ; ===========================================================================
0000AC06                            Ani_obj2C:
0000AC06                            	include "_anim\obj2C.asm"
0000AC06                            ; ---------------------------------------------------------------------------
0000AC06                            ; Animation script - Jaws enemy
0000AC06                            ; ---------------------------------------------------------------------------
0000AC06 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AC08 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AC0E                            		even
0000AC0E                            		even
0000AC0E                            
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E                            ; Sprite mappings - Jaws enemy (LZ)
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E                            Map_obj2C:
0000AC0E                            	include "_maps\obj2C.asm"
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E                            ; Sprite mappings - Jaws enemy (LZ)
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E 0000                       		dc.w byte_AC78-Map_obj2C
0000AC10 0000                       		dc.w byte_AC83-Map_obj2C
0000AC12 0000                       		dc.w byte_AC8E-Map_obj2C
0000AC14 0000                       		dc.w byte_AC99-Map_obj2C
0000AC16 02                         byte_AC78:	dc.b 2
0000AC17 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC1C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AC21 02                         byte_AC83:	dc.b 2
0000AC22 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC27 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AC2C 02                         byte_AC8E:	dc.b 2
0000AC2D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC32 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AC37 02                         byte_AC99:	dc.b 2
0000AC38 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC3D F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AC42                            		even
0000AC42                            		even
0000AC42                            
0000AC42                            ; ===========================================================================
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Object 2D - Burrobot enemy (LZ)
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            
0000AC42                            Obj2D:					; XREF: Obj_Index
0000AC42 7000                       		moveq	#0,d0
0000AC44 1028 0024                  		move.b	$24(a0),d0
0000AC48 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AC4C 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AC50                            ; ===========================================================================
0000AC50 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AC52 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AC54                            ; ===========================================================================
0000AC54                            
0000AC54                            Obj2D_Main:				; XREF: Obj2D_Index
0000AC54 5428 0024                  		addq.b	#2,$24(a0)
0000AC58 117C 0013 0016             		move.b	#$13,$16(a0)
0000AC5E 117C 0008 0017             		move.b	#8,$17(a0)
0000AC64 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AC6C 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000AC72 0028 0004 0001             		ori.b	#4,1(a0)
0000AC78 117C 0004 0018             		move.b	#4,$18(a0)
0000AC7E 117C 0005 0020             		move.b	#5,$20(a0)
0000AC84 117C 000C 0019             		move.b	#$C,$19(a0)
0000AC8A 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000AC8E 117C 0002 001C             		move.b	#2,$1C(a0)
0000AC94                            
0000AC94                            Obj2D_Action:				; XREF: Obj2D_Index
0000AC94 7000                       		moveq	#0,d0
0000AC96 1028 0025                  		move.b	$25(a0),d0
0000AC9A 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000AC9E 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ACA2 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ACA8 6100 FA0C                  		bsr.w	AnimateSprite
0000ACAC 6000 0000                  		bra.w	MarkObjGone
0000ACB0                            ; ===========================================================================
0000ACB0 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ACB2 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ACB4 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ACB6 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ACB8                            ; ===========================================================================
0000ACB8                            
0000ACB8                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ACB8 5368 0030                  		subq.w	#1,$30(a0)
0000ACBC 6A00                       		bpl.s	locret_AD42
0000ACBE 5428 0025                  		addq.b	#2,$25(a0)
0000ACC2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ACC8 317C 0080 0010             		move.w	#$80,$10(a0)
0000ACCE 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACD4 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000ACDA 6700                       		beq.s	locret_AD42
0000ACDC 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000ACE0                            
0000ACE0                            locret_AD42:
0000ACE0 4E75                       		rts	
0000ACE2                            ; ===========================================================================
0000ACE2                            
0000ACE2                            Obj2D_Move:				; XREF: Obj2D_Index2
0000ACE2 5368 0030                  		subq.w	#1,$30(a0)
0000ACE6 6B00                       		bmi.s	loc_AD84
0000ACE8 6100 0000                  		bsr.w	SpeedToPos
0000ACEC 0868 0000 0032             		bchg	#0,$32(a0)
0000ACF2 6600                       		bne.s	loc_AD78
0000ACF4 3628 0008                  		move.w	8(a0),d3
0000ACF8 0643 000C                  		addi.w	#$C,d3
0000ACFC 0828 0000 0022             		btst	#0,$22(a0)
0000AD02 6600                       		bne.s	loc_AD6A
0000AD04 0443 0018                  		subi.w	#$18,d3
0000AD08                            
0000AD08                            loc_AD6A:
0000AD08 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AD0E 0C41 000C                  		cmpi.w	#$C,d1
0000AD12 6C00                       		bge.s	loc_AD84
0000AD14 4E75                       		rts	
0000AD16                            ; ===========================================================================
0000AD16                            
0000AD16                            loc_AD78:				; XREF: Obj2D_Move
0000AD16 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD1C D368 000C                  		add.w	d1,$C(a0)
0000AD20 4E75                       		rts	
0000AD22                            ; ===========================================================================
0000AD22                            
0000AD22                            loc_AD84:				; XREF: Obj2D_Move
0000AD22 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AD28 6700                       		beq.s	loc_ADA4
0000AD2A 5528 0025                  		subq.b	#2,$25(a0)
0000AD2E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AD34 317C 0000 0010             		move.w	#0,$10(a0)
0000AD3A 117C 0000 001C             		move.b	#0,$1C(a0)
0000AD40 4E75                       		rts	
0000AD42                            ; ===========================================================================
0000AD42                            
0000AD42                            loc_ADA4:
0000AD42 5428 0025                  		addq.b	#2,$25(a0)
0000AD46 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AD4C 117C 0002 001C             		move.b	#2,$1C(a0)
0000AD52 4E75                       		rts	
0000AD54                            ; ===========================================================================
0000AD54                            
0000AD54                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AD54 6100 0000                  		bsr.w	SpeedToPos
0000AD58 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD5E 6B00                       		bmi.s	locret_ADF0
0000AD60 117C 0003 001C             		move.b	#3,$1C(a0)
0000AD66 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD6C 4A41                       		tst.w	d1
0000AD6E 6A00                       		bpl.s	locret_ADF0
0000AD70 D368 000C                  		add.w	d1,$C(a0)
0000AD74 317C 0000 0012             		move.w	#0,$12(a0)
0000AD7A 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD80 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AD86 5528 0025                  		subq.b	#2,$25(a0)
0000AD8A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AD8E                            
0000AD8E                            locret_ADF0:
0000AD8E 4E75                       		rts	
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AD90 343C 0060                  		move.w	#$60,d2
0000AD94 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AD98 6400                       		bcc.s	locret_AE20
0000AD9A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AD9E 9068 000C                  		sub.w	$C(a0),d0
0000ADA2 6400                       		bcc.s	locret_AE20
0000ADA4 0C40 FF80                  		cmpi.w	#-$80,d0
0000ADA8 6500                       		bcs.s	locret_AE20
0000ADAA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ADAE 6600                       		bne.s	locret_AE20
0000ADB0 5528 0025                  		subq.b	#2,$25(a0)
0000ADB4 3141 0010                  		move.w	d1,$10(a0)
0000ADB8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000ADBE                            
0000ADBE                            locret_AE20:
0000ADBE 4E75                       		rts	
0000ADC0                            
0000ADC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADC0                            
0000ADC0                            
0000ADC0                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000ADC0 323C 0080                  		move.w	#$80,d1
0000ADC4 08E8 0000 0022             		bset	#0,$22(a0)
0000ADCA 3038 D008                  		move.w	($FFFFD008).w,d0
0000ADCE 9068 0008                  		sub.w	8(a0),d0
0000ADD2 6400                       		bcc.s	loc_AE40
0000ADD4 4440                       		neg.w	d0
0000ADD6 4441                       		neg.w	d1
0000ADD8 08A8 0000 0022             		bclr	#0,$22(a0)
0000ADDE                            
0000ADDE                            loc_AE40:
0000ADDE B042                       		cmp.w	d2,d0
0000ADE0 4E75                       		rts	
0000ADE2                            ; End of function Obj2D_ChkSonic2
0000ADE2                            
0000ADE2                            ; ===========================================================================
0000ADE2                            Ani_obj2D:
0000ADE2                            	include "_anim\obj2D.asm"
0000ADE2                            ; ---------------------------------------------------------------------------
0000ADE2                            ; Animation script - Burrobot enemy
0000ADE2                            ; ---------------------------------------------------------------------------
0000ADE2 0000                       		dc.w byte_AE4C-Ani_obj2D
0000ADE4 0000                       		dc.w byte_AE50-Ani_obj2D
0000ADE6 0000                       		dc.w byte_AE54-Ani_obj2D
0000ADE8 0000                       		dc.w byte_AE58-Ani_obj2D
0000ADEA 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000ADEE 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000ADF2 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000ADF6 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000ADFA 00                         		even
0000ADFA 00                         		even
0000ADFA                            
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA                            ; Sprite mappings - Burrobot enemy (LZ)
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA                            Map_obj2D:
0000ADFA                            	include "_maps\obj2D.asm"
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA                            ; Sprite mappings - Burrobot enemy (LZ)
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA 0000                       		dc.w byte_AE6A-Map_obj2D
0000ADFC 0000                       		dc.w byte_AE75-Map_obj2D
0000ADFE 0000                       		dc.w byte_AE80-Map_obj2D
0000AE00 0000                       		dc.w byte_AE8B-Map_obj2D
0000AE02 0000                       		dc.w byte_AE96-Map_obj2D
0000AE04 0000                       		dc.w byte_AEA1-Map_obj2D
0000AE06 0000                       		dc.w byte_AEAC-Map_obj2D
0000AE08 02                         byte_AE6A:	dc.b 2
0000AE09 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AE0E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE13 02                         byte_AE75:	dc.b 2
0000AE14 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE19 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AE1E 02                         byte_AE80:	dc.b 2
0000AE1F E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AE24 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AE29 02                         byte_AE8B:	dc.b 2
0000AE2A E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AE2F 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AE34 02                         byte_AE96:	dc.b 2
0000AE35 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AE3A 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AE3F 02                         byte_AEA1:	dc.b 2
0000AE40 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AE45 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AE4A 02                         byte_AEAC:	dc.b 2
0000AE4B EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE50 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE56 00                         		even
0000AE56 00                         		even
0000AE56                            
0000AE56                            ; ===========================================================================
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            ; Object 2F - large moving platforms (MZ)
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            
0000AE56                            Obj2F:					; XREF: Obj_Index
0000AE56 7000                       		moveq	#0,d0
0000AE58 1028 0024                  		move.b	$24(a0),d0
0000AE5C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AE60 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AE64                            ; ===========================================================================
0000AE64 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AE66 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AE68                            
0000AE68 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AE6A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AE6C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AE6E 0140                       		dc.b 1,	$40
0000AE70 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AE72 0220                       		dc.b 2,	$20
0000AE74                            ; ===========================================================================
0000AE74                            
0000AE74                            Obj2F_Main:				; XREF: Obj2F_Index
0000AE74 5428 0024                  		addq.b	#2,$24(a0)
0000AE78 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AE80 317C C000 0002             		move.w	#$C000,2(a0)
0000AE86 117C 0004 0001             		move.b	#4,1(a0)
0000AE8C 117C 0005 0018             		move.b	#5,$18(a0)
0000AE92 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AE98 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AE9E 7000                       		moveq	#0,d0
0000AEA0 1028 0028                  		move.b	$28(a0),d0
0000AEA4 E448                       		lsr.w	#2,d0
0000AEA6 0240 001C                  		andi.w	#$1C,d0
0000AEAA 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AEAE 3019                       		move.w	(a1)+,d0
0000AEB0 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AEB4 214A 0030                  		move.l	a2,$30(a0)
0000AEB8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AEBC 1151 0019                  		move.b	(a1),$19(a0)
0000AEC0 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AEC6 117C 0040 0016             		move.b	#$40,$16(a0)
0000AECC 08E8 0004 0001             		bset	#4,1(a0)
0000AED2                            
0000AED2                            Obj2F_Action:				; XREF: Obj2F_Index
0000AED2 6100 0000                  		bsr.w	Obj2F_Types
0000AED6 4A28 0025                  		tst.b	$25(a0)
0000AEDA 6700                       		beq.s	Obj2F_Solid
0000AEDC 7200                       		moveq	#0,d1
0000AEDE 1228 0019                  		move.b	$19(a0),d1
0000AEE2 0641 000B                  		addi.w	#$B,d1
0000AEE6 6100 C6A0                  		bsr.w	ExitPlatform
0000AEEA 0829 0003 0022             		btst	#3,$22(a1)
0000AEF0 6600 0000                  		bne.w	Obj2F_Slope
0000AEF4 4228 0025                  		clr.b	$25(a0)
0000AEF8 6000                       		bra.s	Obj2F_Display
0000AEFA                            ; ===========================================================================
0000AEFA                            
0000AEFA                            Obj2F_Slope:				; XREF: Obj2F_Action
0000AEFA 7200                       		moveq	#0,d1
0000AEFC 1228 0019                  		move.b	$19(a0),d1
0000AF00 0641 000B                  		addi.w	#$B,d1
0000AF04 2468 0030                  		movea.l	$30(a0),a2
0000AF08 3428 0008                  		move.w	8(a0),d2
0000AF0C 6100 D5D8                  		bsr.w	SlopeObject2
0000AF10 6000                       		bra.s	Obj2F_Display
0000AF12                            ; ===========================================================================
0000AF12                            
0000AF12                            Obj2F_Solid:				; XREF: Obj2F_Action
0000AF12 7200                       		moveq	#0,d1
0000AF14 1228 0019                  		move.b	$19(a0),d1
0000AF18 0641 000B                  		addi.w	#$B,d1
0000AF1C 343C 0020                  		move.w	#$20,d2
0000AF20 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000AF26 6600                       		bne.s	loc_AF8E
0000AF28 343C 0030                  		move.w	#$30,d2
0000AF2C                            
0000AF2C                            loc_AF8E:
0000AF2C 2468 0030                  		movea.l	$30(a0),a2
0000AF30 6100 0000                  		bsr.w	SolidObject2F
0000AF34                            
0000AF34                            Obj2F_Display:				; XREF: Obj2F_Action
0000AF34 6100 0000                  		bsr.w	DisplaySprite
0000AF38 6000 0000                  		bra.w	Obj2F_ChkDel
0000AF3C                            
0000AF3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF3C                            
0000AF3C                            
0000AF3C                            Obj2F_Types:				; XREF: Obj2F_Action
0000AF3C 7000                       		moveq	#0,d0
0000AF3E 1028 0028                  		move.b	$28(a0),d0
0000AF42 0240 0007                  		andi.w	#7,d0
0000AF46 D040                       		add.w	d0,d0
0000AF48 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000AF4C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000AF50                            ; End of function Obj2F_Types
0000AF50                            
0000AF50                            ; ===========================================================================
0000AF50 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000AF52 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000AF54 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000AF56 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000AF58 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000AF5A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000AF5C 4E75                       		rts			; type 00 platform doesn't move
0000AF5E                            ; ===========================================================================
0000AF5E                            
0000AF5E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000AF5E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000AF62 323C 0020                  		move.w	#$20,d1
0000AF66 6000                       		bra.s	Obj2F_Move
0000AF68                            ; ===========================================================================
0000AF68                            
0000AF68                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000AF68 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000AF6C 323C 0030                  		move.w	#$30,d1
0000AF70 6000                       		bra.s	Obj2F_Move
0000AF72                            ; ===========================================================================
0000AF72                            
0000AF72                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000AF72 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000AF76 323C 0040                  		move.w	#$40,d1
0000AF7A 6000                       		bra.s	Obj2F_Move
0000AF7C                            ; ===========================================================================
0000AF7C                            
0000AF7C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000AF7C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000AF80 323C 0060                  		move.w	#$60,d1
0000AF84                            
0000AF84                            Obj2F_Move:
0000AF84 0828 0003 0028             		btst	#3,$28(a0)
0000AF8A 6700                       		beq.s	loc_AFF2
0000AF8C 4440                       		neg.w	d0
0000AF8E D041                       		add.w	d1,d0
0000AF90                            
0000AF90                            loc_AFF2:
0000AF90 3228 002C                  		move.w	$2C(a0),d1
0000AF94 9240                       		sub.w	d0,d1
0000AF96 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000AF9A 4E75                       		rts	
0000AF9C                            ; ===========================================================================
0000AF9C                            
0000AF9C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000AF9C 1028 0034                  		move.b	$34(a0),d0
0000AFA0 4A28 0025                  		tst.b	$25(a0)
0000AFA4 6600                       		bne.s	loc_B010
0000AFA6 5500                       		subq.b	#2,d0
0000AFA8 6400                       		bcc.s	loc_B01C
0000AFAA 7000                       		moveq	#0,d0
0000AFAC 6000                       		bra.s	loc_B01C
0000AFAE                            ; ===========================================================================
0000AFAE                            
0000AFAE                            loc_B010:
0000AFAE 5800                       		addq.b	#4,d0
0000AFB0 0C00 0040                  		cmpi.b	#$40,d0
0000AFB4 6500                       		bcs.s	loc_B01C
0000AFB6 103C 0040                  		move.b	#$40,d0
0000AFBA                            
0000AFBA                            loc_B01C:
0000AFBA 1140 0034                  		move.b	d0,$34(a0)
0000AFBE 4EB9 0000 29B8             		jsr	(CalcSine).l
0000AFC4 E848                       		lsr.w	#4,d0
0000AFC6 3200                       		move.w	d0,d1
0000AFC8 D068 002C                  		add.w	$2C(a0),d0
0000AFCC 3140 000C                  		move.w	d0,$C(a0)
0000AFD0 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000AFD6 6600                       		bne.s	loc_B07A
0000AFD8 4A28 0035                  		tst.b	$35(a0)
0000AFDC 6600                       		bne.s	loc_B07A
0000AFDE 117C 0001 0035             		move.b	#1,$35(a0)
0000AFE4 6100 0000                  		bsr.w	SingleObjLoad2
0000AFE8 6600                       		bne.s	loc_B07A
0000AFEA 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000AFEE 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFF4 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000AFFA 5069 002C                  		addq.w	#8,$2C(a1)
0000AFFE 5769 002C                  		subq.w	#3,$2C(a1)
0000B002 0469 0040 0008             		subi.w	#$40,8(a1)
0000B008 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B00E 2348 0038                  		move.l	a0,$38(a1)
0000B012 2448                       		movea.l	a0,a2
0000B014 6100                       		bsr.s	sub_B09C
0000B016                            
0000B016                            loc_B07A:
0000B016 7400                       		moveq	#0,d2
0000B018 45E8 0036                  		lea	$36(a0),a2
0000B01C 141A                       		move.b	(a2)+,d2
0000B01E 5302                       		subq.b	#1,d2
0000B020 6500                       		bcs.s	locret_B09A
0000B022                            
0000B022                            loc_B086:
0000B022 7000                       		moveq	#0,d0
0000B024 101A                       		move.b	(a2)+,d0
0000B026 ED48                       		lsl.w	#6,d0
0000B028 0640 D000                  		addi.w	#-$3000,d0
0000B02C 3240                       		movea.w	d0,a1
0000B02E 3341 003C                  		move.w	d1,$3C(a1)
0000B032 51CA FFEE                  		dbf	d2,loc_B086
0000B036                            
0000B036                            locret_B09A:
0000B036 4E75                       		rts	
0000B038                            
0000B038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B038                            
0000B038                            
0000B038                            sub_B09C:
0000B038 45EA 0036                  		lea	$36(a2),a2
0000B03C 7000                       		moveq	#0,d0
0000B03E 1012                       		move.b	(a2),d0
0000B040 5212                       		addq.b	#1,(a2)
0000B042 45F2 0001                  		lea	1(a2,d0.w),a2
0000B046 3009                       		move.w	a1,d0
0000B048 0440 D000                  		subi.w	#-$3000,d0
0000B04C EC48                       		lsr.w	#6,d0
0000B04E 0240 007F                  		andi.w	#$7F,d0
0000B052 1480                       		move.b	d0,(a2)
0000B054 4E75                       		rts	
0000B056                            ; End of function sub_B09C
0000B056                            
0000B056                            ; ===========================================================================
0000B056                            
0000B056                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B056 4A28 0035                  		tst.b	$35(a0)
0000B05A 6700                       		beq.s	loc_B0C6
0000B05C 4A28 0001                  		tst.b	1(a0)
0000B060 6A00                       		bpl.s	Obj2F_DelFlames
0000B062                            
0000B062                            loc_B0C6:
0000B062 3028 002A                  		move.w	$2A(a0),d0
0000B066 0240 FF80                  		andi.w	#$FF80,d0
0000B06A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B06E 0441 0080                  		subi.w	#$80,d1
0000B072 0241 FF80                  		andi.w	#$FF80,d1
0000B076 9041                       		sub.w	d1,d0
0000B078 0C40 0280                  		cmpi.w	#$280,d0
0000B07C 6200 0000                  		bhi.w	DeleteObject
0000B080 4E75                       		rts	
0000B082                            ; ===========================================================================
0000B082                            
0000B082                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B082 7400                       		moveq	#0,d2
0000B084                            
0000B084                            loc_B0E8:
0000B084 45E8 0036                  		lea	$36(a0),a2
0000B088 1412                       		move.b	(a2),d2
0000B08A 421A                       		clr.b	(a2)+
0000B08C 5302                       		subq.b	#1,d2
0000B08E 6500                       		bcs.s	locret_B116
0000B090                            
0000B090                            loc_B0F4:
0000B090 7000                       		moveq	#0,d0
0000B092 1012                       		move.b	(a2),d0
0000B094 421A                       		clr.b	(a2)+
0000B096 ED48                       		lsl.w	#6,d0
0000B098 0640 D000                  		addi.w	#-$3000,d0
0000B09C 3240                       		movea.w	d0,a1
0000B09E 6100 0000                  		bsr.w	DeleteObject2
0000B0A2 51CA FFEC                  		dbf	d2,loc_B0F4
0000B0A6 117C 0000 0035             		move.b	#0,$35(a0)
0000B0AC 117C 0000 0034             		move.b	#0,$34(a0)
0000B0B2                            
0000B0B2                            locret_B116:
0000B0B2 4E75                       		rts	
0000B0B4                            ; ===========================================================================
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            ; Collision data for large moving platforms (MZ)
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B100                            		even
0000B100                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B12C                            		even
0000B12C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B178                            		even
0000B178                            ; ===========================================================================
0000B178                            ; ---------------------------------------------------------------------------
0000B178                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B178                            ; (appears when	you walk on sinking platforms)
0000B178                            ; ---------------------------------------------------------------------------
0000B178                            
0000B178                            Obj35:					; XREF: Obj_Index
0000B178 7000                       		moveq	#0,d0
0000B17A 1028 0024                  		move.b	$24(a0),d0
0000B17E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B182 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B186                            ; ===========================================================================
0000B186 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B188 0000                       		dc.w loc_B238-Obj35_Index
0000B18A 0000                       		dc.w Obj35_Move-Obj35_Index
0000B18C                            ; ===========================================================================
0000B18C                            
0000B18C                            Obj35_Main:				; XREF: Obj35_Index
0000B18C 5428 0024                  		addq.b	#2,$24(a0)
0000B190 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B198 317C 0345 0002             		move.w	#$345,2(a0)
0000B19E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B1A4 117C 0004 0001             		move.b	#4,1(a0)
0000B1AA 117C 0001 0018             		move.b	#1,$18(a0)
0000B1B0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B1B6 117C 0008 0019             		move.b	#8,$19(a0)
0000B1BC 303C 00C8                  		move.w	#$C8,d0
0000B1C0 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play flame sound
0000B1C6 4A28 0028                  		tst.b	$28(a0)
0000B1CA 6700                       		beq.s	loc_B238
0000B1CC 5428 0024                  		addq.b	#2,$24(a0)
0000B1D0 6000 0000                  		bra.w	Obj35_Move
0000B1D4                            ; ===========================================================================
0000B1D4                            
0000B1D4                            loc_B238:				; XREF: Obj35_Index
0000B1D4 2268 0030                  		movea.l	$30(a0),a1
0000B1D8 3228 0008                  		move.w	8(a0),d1
0000B1DC 9268 002A                  		sub.w	$2A(a0),d1
0000B1E0 0641 000C                  		addi.w	#$C,d1
0000B1E4 3001                       		move.w	d1,d0
0000B1E6 E248                       		lsr.w	#1,d0
0000B1E8 1031 0000                  		move.b	(a1,d0.w),d0
0000B1EC 4440                       		neg.w	d0
0000B1EE D068 002C                  		add.w	$2C(a0),d0
0000B1F2 3400                       		move.w	d0,d2
0000B1F4 D068 003C                  		add.w	$3C(a0),d0
0000B1F8 3140 000C                  		move.w	d0,$C(a0)
0000B1FC 0C41 0084                  		cmpi.w	#$84,d1
0000B200 6400                       		bcc.s	loc_B2B0
0000B202 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B20A 0C41 0080                  		cmpi.w	#$80,d1
0000B20E 6400                       		bcc.s	loc_B2B0
0000B210 2028 0008                  		move.l	8(a0),d0
0000B214 0680 0008 0000             		addi.l	#$80000,d0
0000B21A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B220 6600                       		bne.s	loc_B2B0
0000B222 6100 0000                  		bsr.w	SingleObjLoad2
0000B226 6600                       		bne.s	loc_B2B0
0000B228 12BC 0035                  		move.b	#$35,0(a1)
0000B22C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B232 3342 002C                  		move.w	d2,$2C(a1)
0000B236 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B23C 137C 0001 0028             		move.b	#1,$28(a1)
0000B242 2468 0038                  		movea.l	$38(a0),a2
0000B246 6100 FDF0                  		bsr.w	sub_B09C
0000B24A                            
0000B24A                            loc_B2B0:
0000B24A 6000                       		bra.s	Obj35_Animate
0000B24C                            ; ===========================================================================
0000B24C                            
0000B24C                            Obj35_Move:				; XREF: Obj35_Index
0000B24C 3028 002C                  		move.w	$2C(a0),d0
0000B250 D068 003C                  		add.w	$3C(a0),d0
0000B254 3140 000C                  		move.w	d0,$C(a0)
0000B258                            
0000B258                            Obj35_Animate:				; XREF: loc_B238
0000B258 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B25E 6100 F456                  		bsr.w	AnimateSprite
0000B262 6000 0000                  		bra.w	DisplaySprite
0000B266                            ; ===========================================================================
0000B266                            Ani_obj35:
0000B266                            	include "_anim\obj35.asm"
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            ; Animation script - fireball that sits on the	floor (MZ)
0000B266                            ; ---------------------------------------------------------------------------
0000B266 0000                       		dc.w byte_B2CE-Ani_obj35
0000B268 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B26E                            		even
0000B26E                            		even
0000B26E                            
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E                            ; Sprite mappings - large moving platforms (MZ)
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E                            Map_obj2F:
0000B26E                            	include "_maps\obj2F.asm"
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E                            ; Sprite mappings - large moving platforms (MZ)
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E 0000                       		dc.w byte_B2DA-Map_obj2F
0000B270 0000                       		dc.w byte_B31C-Map_obj2F
0000B272 0000                       		dc.w byte_B34F-Map_obj2F
0000B274 0D                         byte_B2DA:	dc.b $D
0000B275 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B27A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B27F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B284 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B289 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B28E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B293 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B298 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B29D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B2A2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B2A7 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B2AC D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B2B1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B2B6 0A                         byte_B31C:	dc.b $A
0000B2B7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B2BC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B2C1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B2C6 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B2CB E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B2D0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B2D5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B2DA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B2DF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B2E4 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B2E9 06                         byte_B34F:	dc.b 6
0000B2EA D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B2EF F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B2F4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B2F9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B2FE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B303 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B308                            		even
0000B308                            		even
0000B308                            
0000B308                            ; ---------------------------------------------------------------------------
0000B308                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B308                            ; ---------------------------------------------------------------------------
0000B308                            Map_obj14:
0000B308                            	include "_maps\obj14.asm"
0000B308                            ; ---------------------------------------------------------------------------
0000B308                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B308                            ; ---------------------------------------------------------------------------
0000B308 0000                       		dc.w byte_B37A-Map_obj14
0000B30A 0000                       		dc.w byte_B380-Map_obj14
0000B30C 0000                       		dc.w byte_B386-Map_obj14
0000B30E 0000                       		dc.w byte_B38C-Map_obj14
0000B310 0000                       		dc.w byte_B392-Map_obj14
0000B312 0000                       		dc.w byte_B398-Map_obj14
0000B314 01                         byte_B37A:	dc.b 1
0000B315 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B31A 01                         byte_B380:	dc.b 1
0000B31B E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B320 01                         byte_B386:	dc.b 1
0000B321 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B326 01                         byte_B38C:	dc.b 1
0000B327 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B32C 01                         byte_B392:	dc.b 1
0000B32D F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B332 01                         byte_B398:	dc.b 1
0000B333 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B338                            		even
0000B338                            		even
0000B338                            
0000B338                            ; ===========================================================================
0000B338                            ; ---------------------------------------------------------------------------
0000B338                            ; Object 30 - large green glassy blocks	(MZ)
0000B338                            ; ---------------------------------------------------------------------------
0000B338                            
0000B338                            Obj30:					; XREF: Obj_Index
0000B338 7000                       		moveq	#0,d0
0000B33A 1028 0024                  		move.b	$24(a0),d0
0000B33E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B342 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B346 3028 0008                  		move.w	8(a0),d0
0000B34A 0240 FF80                  		andi.w	#$FF80,d0
0000B34E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B352 0441 0080                  		subi.w	#$80,d1
0000B356 0241 FF80                  		andi.w	#$FF80,d1
0000B35A 9041                       		sub.w	d1,d0
0000B35C 0C40 0280                  		cmpi.w	#$280,d0
0000B360 6200 0000                  		bhi.w	Obj30_Delete
0000B364 6000 0000                  		bra.w	DisplaySprite
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            Obj30_Delete:
0000B368 6000 0000                  		bra.w	DeleteObject
0000B36C                            ; ===========================================================================
0000B36C 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B36E 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B370 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B372 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B374 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B376                            
0000B376 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B379 0400 01                    		dc.b 4,	0, 1
0000B37C 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B37F 0800 01                    		dc.b 8,	0, 1
0000B382                            ; ===========================================================================
0000B382                            
0000B382                            Obj30_Main:				; XREF: Obj30_Index
0000B382 45F9 0000 B376             		lea	(Obj30_Vars1).l,a2
0000B388 7201                       		moveq	#1,d1
0000B38A 117C 0048 0016             		move.b	#$48,$16(a0)
0000B390 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B396 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B398 45F9 0000 B37C             		lea	(Obj30_Vars2).l,a2
0000B39E 7201                       		moveq	#1,d1
0000B3A0 117C 0038 0016             		move.b	#$38,$16(a0)
0000B3A6                            
0000B3A6                            loc_B40C:
0000B3A6 2248                       		movea.l	a0,a1
0000B3A8 6000                       		bra.s	Obj30_Load	; load main object
0000B3AA                            ; ===========================================================================
0000B3AA                            
0000B3AA                            Obj30_Loop:
0000B3AA 6100 0000                  		bsr.w	SingleObjLoad2
0000B3AE 6600                       		bne.s	loc_B480
0000B3B0                            
0000B3B0                            Obj30_Load:				; XREF: Obj30_Main
0000B3B0 135A 0024                  		move.b	(a2)+,$24(a1)
0000B3B4 12BC 0030                  		move.b	#$30,0(a1)
0000B3B8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3BE 101A                       		move.b	(a2)+,d0
0000B3C0 4880                       		ext.w	d0
0000B3C2 D068 000C                  		add.w	$C(a0),d0
0000B3C6 3340 000C                  		move.w	d0,$C(a1)
0000B3CA 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B3D2 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B3D8 137C 0004 0001             		move.b	#4,1(a1)
0000B3DE 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B3E4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B3EA 137C 0020 0019             		move.b	#$20,$19(a1)
0000B3F0 137C 0004 0018             		move.b	#4,$18(a1)
0000B3F6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B3FA 2348 003C                  		move.l	a0,$3C(a1)
0000B3FE 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B402                            
0000B402 137C 0010 0019             		move.b	#$10,$19(a1)
0000B408 137C 0003 0018             		move.b	#3,$18(a1)
0000B40E 5029 0028                  		addq.b	#8,$28(a1)
0000B412 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B418                            
0000B418                            loc_B480:
0000B418 317C 0090 0032             		move.w	#$90,$32(a0)
0000B41E 08E8 0004 0001             		bset	#4,1(a0)
0000B424                            
0000B424                            Obj30_Block012:				; XREF: Obj30_Index
0000B424 6100 0000                  		bsr.w	Obj30_Types
0000B428 323C 002B                  		move.w	#$2B,d1
0000B42C 343C 0048                  		move.w	#$48,d2
0000B430 363C 0049                  		move.w	#$49,d3
0000B434 3828 0008                  		move.w	8(a0),d4
0000B438 6000 0000                  		bra.w	SolidObject
0000B43C                            ; ===========================================================================
0000B43C                            
0000B43C                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B43C 2268 003C                  		movea.l	$3C(a0),a1
0000B440 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B446 6000 0000                  		bra.w	Obj30_Types
0000B44A                            ; ===========================================================================
0000B44A                            
0000B44A                            Obj30_Block34:				; XREF: Obj30_Index
0000B44A 6100 0000                  		bsr.w	Obj30_Types
0000B44E 323C 002B                  		move.w	#$2B,d1
0000B452 343C 0038                  		move.w	#$38,d2
0000B456 363C 0039                  		move.w	#$39,d3
0000B45A 3828 0008                  		move.w	8(a0),d4
0000B45E 6000 0000                  		bra.w	SolidObject
0000B462                            ; ===========================================================================
0000B462                            
0000B462                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B462 2268 003C                  		movea.l	$3C(a0),a1
0000B466 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B46C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B472 6000 0002                  		bra.w	*+4
0000B476                            
0000B476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B476                            
0000B476                            
0000B476                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B476 7000                       		moveq	#0,d0
0000B478 1028 0028                  		move.b	$28(a0),d0
0000B47C 0240 0007                  		andi.w	#7,d0
0000B480 D040                       		add.w	d0,d0
0000B482 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B486 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B48A                            ; End of function Obj30_Types
0000B48A                            
0000B48A                            ; ===========================================================================
0000B48A 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B48C 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B48E 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B490 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B492 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B494 4E75                       		rts	
0000B496                            ; ===========================================================================
0000B496                            
0000B496                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B496 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B49A 323C 0040                  		move.w	#$40,d1
0000B49E 6000                       		bra.s	loc_B514
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B4A0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4A4 323C 0040                  		move.w	#$40,d1
0000B4A8 4440                       		neg.w	d0
0000B4AA D041                       		add.w	d1,d0
0000B4AC                            
0000B4AC                            loc_B514:				; XREF: Obj30_Type01
0000B4AC 0828 0003 0028             		btst	#3,$28(a0)
0000B4B2 6700                       		beq.s	loc_B526
0000B4B4 4440                       		neg.w	d0
0000B4B6 D041                       		add.w	d1,d0
0000B4B8 E208                       		lsr.b	#1,d0
0000B4BA 0640 0020                  		addi.w	#$20,d0
0000B4BE                            
0000B4BE                            loc_B526:
0000B4BE 6000 0000                  		bra.w	loc_B5EE
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B4C2 0828 0003 0028             		btst	#3,$28(a0)
0000B4C8 6700                       		beq.s	loc_B53E
0000B4CA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4CE 0440 0010                  		subi.w	#$10,d0
0000B4D2 6000 0000                  		bra.w	loc_B5EE
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            loc_B53E:
0000B4D6 0828 0003 0022             		btst	#3,$22(a0)
0000B4DC 6600                       		bne.s	loc_B54E
0000B4DE 08A8 0000 0034             		bclr	#0,$34(a0)
0000B4E4 6000                       		bra.s	loc_B582
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            loc_B54E:
0000B4E6 4A28 0034                  		tst.b	$34(a0)
0000B4EA 6600                       		bne.s	loc_B582
0000B4EC 117C 0001 0034             		move.b	#1,$34(a0)
0000B4F2 08E8 0000 0035             		bset	#0,$35(a0)
0000B4F8 6700                       		beq.s	loc_B582
0000B4FA 08E8 0007 0034             		bset	#7,$34(a0)
0000B500 317C 0010 0036             		move.w	#$10,$36(a0)
0000B506 117C 000A 0038             		move.b	#$A,$38(a0)
0000B50C 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B512 6600                       		bne.s	loc_B582
0000B514 317C 0040 0036             		move.w	#$40,$36(a0)
0000B51A                            
0000B51A                            loc_B582:
0000B51A 4A28 0034                  		tst.b	$34(a0)
0000B51E 6A00                       		bpl.s	loc_B5AA
0000B520 4A28 0038                  		tst.b	$38(a0)
0000B524 6700                       		beq.s	loc_B594
0000B526 5328 0038                  		subq.b	#1,$38(a0)
0000B52A 6600                       		bne.s	loc_B5AA
0000B52C                            
0000B52C                            loc_B594:
0000B52C 4A68 0032                  		tst.w	$32(a0)
0000B530 6700                       		beq.s	loc_B5A4
0000B532 5368 0032                  		subq.w	#1,$32(a0)
0000B536 5368 0036                  		subq.w	#1,$36(a0)
0000B53A 6600                       		bne.s	loc_B5AA
0000B53C                            
0000B53C                            loc_B5A4:
0000B53C 08A8 0007 0034             		bclr	#7,$34(a0)
0000B542                            
0000B542                            loc_B5AA:
0000B542 3028 0032                  		move.w	$32(a0),d0
0000B546 6000                       		bra.s	loc_B5EE
0000B548                            ; ===========================================================================
0000B548                            
0000B548                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B548 0828 0003 0028             		btst	#3,$28(a0)
0000B54E 6700                       		beq.s	Obj30_ChkSwitch
0000B550 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B554 0440 0010                  		subi.w	#$10,d0
0000B558 6000                       		bra.s	loc_B5EE
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B55A 4A28 0034                  		tst.b	$34(a0)
0000B55E 6600                       		bne.s	loc_B5E0
0000B560 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B564 7000                       		moveq	#0,d0
0000B566 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B56A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B56C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B570 6700                       		beq.s	loc_B5EA	; if not, branch
0000B572 117C 0001 0034             		move.b	#1,$34(a0)
0000B578                            
0000B578                            loc_B5E0:
0000B578 4A68 0032                  		tst.w	$32(a0)
0000B57C 6700                       		beq.s	loc_B5EA
0000B57E 5568 0032                  		subq.w	#2,$32(a0)
0000B582                            
0000B582                            loc_B5EA:
0000B582 3028 0032                  		move.w	$32(a0),d0
0000B586                            
0000B586                            loc_B5EE:
0000B586 3228 0030                  		move.w	$30(a0),d1
0000B58A 9240                       		sub.w	d0,d1
0000B58C 3141 000C                  		move.w	d1,$C(a0)
0000B590 4E75                       		rts	
0000B592                            ; ===========================================================================
0000B592                            ; ---------------------------------------------------------------------------
0000B592                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B592                            ; ---------------------------------------------------------------------------
0000B592                            Map_obj30:
0000B592                            	include "_maps\obj30.asm"
0000B592                            ; ---------------------------------------------------------------------------
0000B592                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B592                            ; ---------------------------------------------------------------------------
0000B592 0000                       		dc.w byte_B600-Map_obj30
0000B594 0000                       		dc.w byte_B63D-Map_obj30
0000B596 0000                       		dc.w byte_B648-Map_obj30
0000B598 0C                         byte_B600:	dc.b $C
0000B599 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B59E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B5A3 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B5A8 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B5AD E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B5B2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B5B7 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B5BC 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B5C1 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B5C6 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B5CB 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B5D0 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B5D5 02                         byte_B63D:	dc.b 2
0000B5D6 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B5DB 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B5E0 0A                         byte_B648:	dc.b $A
0000B5E1 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B5E6 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B5EB D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B5F0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B5F5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B5FA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B5FF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B604 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B609 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B60E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B614 00                         		even
0000B614 00                         		even
0000B614                            
0000B614                            ; ===========================================================================
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            
0000B614                            Obj31:					; XREF: Obj_Index
0000B614 7000                       		moveq	#0,d0
0000B616 1028 0024                  		move.b	$24(a0),d0
0000B61A 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B61E 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B622                            ; ===========================================================================
0000B622 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B624 0000                       		dc.w loc_B798-Obj31_Index
0000B626 0000                       		dc.w loc_B7FE-Obj31_Index
0000B628 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B62A 0000                       		dc.w loc_B7E2-Obj31_Index
0000B62C                            
0000B62C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B62E 0100                       		dc.b 1,	0
0000B630                            
0000B630 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B633 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B636 08CC 03                    		dc.b 8,	$CC, 3
0000B639 06F0 02                    		dc.b 6,	$F0, 2
0000B63C                            
0000B63C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B640 5000 7800                  		dc.w $5000, $7800
0000B644 3800 5800                  		dc.w $3800, $5800
0000B648 B800                       		dc.w $B800
0000B64A                            ; ===========================================================================
0000B64A                            
0000B64A                            Obj31_Main:				; XREF: Obj31_Index
0000B64A 7000                       		moveq	#0,d0
0000B64C 1028 0028                  		move.b	$28(a0),d0
0000B650 6A00                       		bpl.s	loc_B6CE
0000B652 0240 007F                  		andi.w	#$7F,d0
0000B656 D040                       		add.w	d0,d0
0000B658 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B65C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B660 101A                       		move.b	(a2)+,d0
0000B662 1140 0028                  		move.b	d0,$28(a0)
0000B666                            
0000B666                            loc_B6CE:
0000B666 0200 000F                  		andi.b	#$F,d0
0000B66A D040                       		add.w	d0,d0
0000B66C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B670 4A40                       		tst.w	d0
0000B672 6600                       		bne.s	loc_B6E0
0000B674 3142 0032                  		move.w	d2,$32(a0)
0000B678                            
0000B678                            loc_B6E0:
0000B678 45F9 0000 B630             		lea	(Obj31_Var).l,a2
0000B67E 2248                       		movea.l	a0,a1
0000B680 7203                       		moveq	#3,d1
0000B682 6000                       		bra.s	Obj31_MakeStomper
0000B684                            ; ===========================================================================
0000B684                            
0000B684                            Obj31_Loop:
0000B684 6100 0000                  		bsr.w	SingleObjLoad2
0000B688 6600 0000                  		bne.w	Obj31_SetSize
0000B68C                            
0000B68C                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B68C 135A 0024                  		move.b	(a2)+,$24(a1)
0000B690 12BC 0031                  		move.b	#$31,0(a1)
0000B694 3368 0008 0008             		move.w	8(a0),8(a1)
0000B69A 101A                       		move.b	(a2)+,d0
0000B69C 4880                       		ext.w	d0
0000B69E D068 000C                  		add.w	$C(a0),d0
0000B6A2 3340 000C                  		move.w	d0,$C(a1)
0000B6A6 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B6AE 337C 0300 0002             		move.w	#$300,2(a1)
0000B6B4 137C 0004 0001             		move.b	#4,1(a1)
0000B6BA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B6C0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B6C6 137C 0010 0019             		move.b	#$10,$19(a1)
0000B6CC 3342 0034                  		move.w	d2,$34(a1)
0000B6D0 137C 0004 0018             		move.b	#4,$18(a1)
0000B6D6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B6DA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B6E0 6600                       		bne.s	loc_B76A
0000B6E2 5341                       		subq.w	#1,d1
0000B6E4 1028 0028                  		move.b	$28(a0),d0
0000B6E8 0240 00F0                  		andi.w	#$F0,d0
0000B6EC 0C40 0020                  		cmpi.w	#$20,d0
0000B6F0 679A                       		beq.s	Obj31_MakeStomper
0000B6F2 137C 0038 0019             		move.b	#$38,$19(a1)
0000B6F8 137C 0090 0020             		move.b	#$90,$20(a1)
0000B6FE 5241                       		addq.w	#1,d1
0000B700                            
0000B700                            loc_B76A:
0000B700 2348 003C                  		move.l	a0,$3C(a1)
0000B704 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B708                            
0000B708 137C 0003 0018             		move.b	#3,$18(a1)
0000B70E                            
0000B70E                            Obj31_SetSize:
0000B70E 7000                       		moveq	#0,d0
0000B710 1028 0028                  		move.b	$28(a0),d0
0000B714 E648                       		lsr.w	#3,d0
0000B716 0200 000E                  		andi.b	#$E,d0
0000B71A 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B71E 115A 0019                  		move.b	(a2)+,$19(a0)
0000B722 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B726 6000                       		bra.s	loc_B798
0000B728                            ; ===========================================================================
0000B728 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B72A 3009                       		dc.b $30, 9
0000B72C 100A                       		dc.b $10, $A
0000B72E                            ; ===========================================================================
0000B72E                            
0000B72E                            loc_B798:				; XREF: Obj31_Index
0000B72E 6100 0000                  		bsr.w	Obj31_Types
0000B732 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B738 7200                       		moveq	#0,d1
0000B73A 1228 0019                  		move.b	$19(a0),d1
0000B73E 0641 000B                  		addi.w	#$B,d1
0000B742 343C 000C                  		move.w	#$C,d2
0000B746 363C 000D                  		move.w	#$D,d3
0000B74A 3828 0008                  		move.w	8(a0),d4
0000B74E 6100 0000                  		bsr.w	SolidObject
0000B752 0828 0003 0022             		btst	#3,$22(a0)
0000B758 6700                       		beq.s	Obj31_Display
0000B75A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B760 6400                       		bcc.s	Obj31_Display
0000B762 2448                       		movea.l	a0,a2
0000B764 41F8 D000                  		lea	($FFFFD000).w,a0
0000B768 4EB9 0000 0000             		jsr	KillSonic
0000B76E 204A                       		movea.l	a2,a0
0000B770                            
0000B770                            Obj31_Display:
0000B770 6100 0000                  		bsr.w	DisplaySprite
0000B774 6000 0000                  		bra.w	Obj31_ChkDel
0000B778                            ; ===========================================================================
0000B778                            
0000B778                            loc_B7E2:				; XREF: Obj31_Index
0000B778 117C 0080 0016             		move.b	#$80,$16(a0)
0000B77E 08E8 0004 0001             		bset	#4,1(a0)
0000B784 2268 003C                  		movea.l	$3C(a0),a1
0000B788 1029 0032                  		move.b	$32(a1),d0
0000B78C EA08                       		lsr.b	#5,d0
0000B78E 5600                       		addq.b	#3,d0
0000B790 1140 001A                  		move.b	d0,$1A(a0)
0000B794                            
0000B794                            loc_B7FE:				; XREF: Obj31_Index
0000B794 2268 003C                  		movea.l	$3C(a0),a1
0000B798 7000                       		moveq	#0,d0
0000B79A 1029 0032                  		move.b	$32(a1),d0
0000B79E D068 0030                  		add.w	$30(a0),d0
0000B7A2 3140 000C                  		move.w	d0,$C(a0)
0000B7A6                            
0000B7A6                            Obj31_Display2:				; XREF: Obj31_Index
0000B7A6 6100 0000                  		bsr.w	DisplaySprite
0000B7AA                            
0000B7AA                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B7AA 3028 0008                  		move.w	8(a0),d0
0000B7AE 0240 FF80                  		andi.w	#$FF80,d0
0000B7B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B7B6 0441 0080                  		subi.w	#$80,d1
0000B7BA 0241 FF80                  		andi.w	#$FF80,d1
0000B7BE 9041                       		sub.w	d1,d0
0000B7C0 0C40 0280                  		cmpi.w	#$280,d0
0000B7C4 6200 0000                  		bhi.w	DeleteObject
0000B7C8 4E75                       		rts	
0000B7CA                            ; ===========================================================================
0000B7CA                            
0000B7CA                            Obj31_Types:				; XREF: loc_B798
0000B7CA 1028 0028                  		move.b	$28(a0),d0
0000B7CE 0240 000F                  		andi.w	#$F,d0
0000B7D2 D040                       		add.w	d0,d0
0000B7D4 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B7D8 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B7DC                            ; ===========================================================================
0000B7DC 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B7DE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B7E0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B7E2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B7E4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B7E6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B7E8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B7EA                            ; ===========================================================================
0000B7EA                            
0000B7EA                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B7EA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B7EE 7000                       		moveq	#0,d0
0000B7F0 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B7F4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B7F8 6700                       		beq.s	loc_B8A8	; if not, branch
0000B7FA 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B7FE 6A00                       		bpl.s	loc_B872
0000B800 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B806 6700                       		beq.s	loc_B8A0
0000B808                            
0000B808                            loc_B872:
0000B808 4A68 0032                  		tst.w	$32(a0)
0000B80C 6700                       		beq.s	loc_B8A0
0000B80E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B812 0200 000F                  		andi.b	#$F,d0
0000B816 6600                       		bne.s	loc_B892
0000B818 4A28 0001                  		tst.b	1(a0)
0000B81C 6A00                       		bpl.s	loc_B892
0000B81E 303C 00C7                  		move.w	#$C7,d0
0000B822 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B828                            
0000B828                            loc_B892:
0000B828 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B82E 6400                       		bcc.s	Obj31_Restart
0000B830 317C 0000 0032             		move.w	#0,$32(a0)
0000B836                            
0000B836                            loc_B8A0:
0000B836 317C 0000 0012             		move.w	#0,$12(a0)
0000B83C 6000                       		bra.s	Obj31_Restart
0000B83E                            ; ===========================================================================
0000B83E                            
0000B83E                            loc_B8A8:				; XREF: Obj31_Type00
0000B83E 3228 0034                  		move.w	$34(a0),d1
0000B842 B268 0032                  		cmp.w	$32(a0),d1
0000B846 6700                       		beq.s	Obj31_Restart
0000B848 3028 0012                  		move.w	$12(a0),d0
0000B84C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B852 D168 0032                  		add.w	d0,$32(a0)
0000B856 B268 0032                  		cmp.w	$32(a0),d1
0000B85A 6200                       		bhi.s	Obj31_Restart
0000B85C 3141 0032                  		move.w	d1,$32(a0)
0000B860 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B866 4A28 0001                  		tst.b	1(a0)
0000B86A 6A00                       		bpl.s	Obj31_Restart
0000B86C 303C 00BD                  		move.w	#$BD,d0
0000B870 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B876                            
0000B876                            Obj31_Restart:
0000B876 7000                       		moveq	#0,d0
0000B878 1028 0032                  		move.b	$32(a0),d0
0000B87C D068 0030                  		add.w	$30(a0),d0
0000B880 3140 000C                  		move.w	d0,$C(a0)
0000B884 4E75                       		rts	
0000B886                            ; ===========================================================================
0000B886                            
0000B886                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B886 4A68 0036                  		tst.w	$36(a0)
0000B88A 6700                       		beq.s	loc_B938
0000B88C 4A68 0038                  		tst.w	$38(a0)
0000B890 6700                       		beq.s	loc_B902
0000B892 5368 0038                  		subq.w	#1,$38(a0)
0000B896 6000                       		bra.s	loc_B97C
0000B898                            ; ===========================================================================
0000B898                            
0000B898                            loc_B902:
0000B898 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B89C 0200 000F                  		andi.b	#$F,d0
0000B8A0 6600                       		bne.s	loc_B91C
0000B8A2 4A28 0001                  		tst.b	1(a0)
0000B8A6 6A00                       		bpl.s	loc_B91C
0000B8A8 303C 00C7                  		move.w	#$C7,d0
0000B8AC 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B8B2                            
0000B8B2                            loc_B91C:
0000B8B2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B8B8 6400                       		bcc.s	loc_B97C
0000B8BA 317C 0000 0032             		move.w	#0,$32(a0)
0000B8C0 317C 0000 0012             		move.w	#0,$12(a0)
0000B8C6 317C 0000 0036             		move.w	#0,$36(a0)
0000B8CC 6000                       		bra.s	loc_B97C
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            loc_B938:				; XREF: Obj31_Type01
0000B8CE 3228 0034                  		move.w	$34(a0),d1
0000B8D2 B268 0032                  		cmp.w	$32(a0),d1
0000B8D6 6700                       		beq.s	loc_B97C
0000B8D8 3028 0012                  		move.w	$12(a0),d0
0000B8DC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B8E2 D168 0032                  		add.w	d0,$32(a0)
0000B8E6 B268 0032                  		cmp.w	$32(a0),d1
0000B8EA 6200                       		bhi.s	loc_B97C
0000B8EC 3141 0032                  		move.w	d1,$32(a0)
0000B8F0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B8F6 317C 0001 0036             		move.w	#1,$36(a0)
0000B8FC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000B902 4A28 0001                  		tst.b	1(a0)
0000B906 6A00                       		bpl.s	loc_B97C
0000B908 303C 00BD                  		move.w	#$BD,d0
0000B90C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B912                            
0000B912                            loc_B97C:
0000B912 6000 FF62                  		bra.w	Obj31_Restart
0000B916                            ; ===========================================================================
0000B916                            
0000B916                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000B916 3038 D008                  		move.w	($FFFFD008).w,d0
0000B91A 9068 0008                  		sub.w	8(a0),d0
0000B91E 6400                       		bcc.s	loc_B98C
0000B920 4440                       		neg.w	d0
0000B922                            
0000B922                            loc_B98C:
0000B922 0C40 0090                  		cmpi.w	#$90,d0
0000B926 6400                       		bcc.s	loc_B996
0000B928 5228 0028                  		addq.b	#1,$28(a0)
0000B92C                            
0000B92C                            loc_B996:
0000B92C 6000 FF48                  		bra.w	Obj31_Restart
0000B930                            ; ===========================================================================
0000B930                            ; ---------------------------------------------------------------------------
0000B930                            ; Object 45 - spiked metal block from beta version (MZ)
0000B930                            ; ---------------------------------------------------------------------------
0000B930                            
0000B930                            Obj45:					; XREF: Obj_Index
0000B930 7000                       		moveq	#0,d0
0000B932 1028 0024                  		move.b	$24(a0),d0
0000B936 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000B93A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000B93E                            ; ===========================================================================
0000B93E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000B940 0000                       		dc.w Obj45_Solid-Obj45_Index
0000B942 0000                       		dc.w loc_BA8E-Obj45_Index
0000B944 0000                       		dc.w Obj45_Display-Obj45_Index
0000B946 0000                       		dc.w loc_BA7A-Obj45_Index
0000B948                            
0000B948 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000B94B 04E4 01                    		dc.b	4, $E4,	  1
0000B94E 0834 03                    		dc.b	8, $34,	  3
0000B951 0628 02                    		dc.b	6, $28,	  2
0000B954                            
0000B954 3800                       word_B9BE:	dc.w $3800
0000B956 A000                       		dc.w -$6000
0000B958 5000                       		dc.w $5000
0000B95A                            ; ===========================================================================
0000B95A                            
0000B95A                            Obj45_Main:				; XREF: Obj45_Index
0000B95A 7000                       		moveq	#0,d0
0000B95C 1028 0028                  		move.b	$28(a0),d0
0000B960 D040                       		add.w	d0,d0
0000B962 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000B966 45F9 0000 B948             		lea	(Obj45_Var).l,a2
0000B96C 2248                       		movea.l	a0,a1
0000B96E 7203                       		moveq	#3,d1
0000B970 6000                       		bra.s	Obj45_Load
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            Obj45_Loop:
0000B972 6100 0000                  		bsr.w	SingleObjLoad2
0000B976 6600                       		bne.s	loc_BA52
0000B978                            
0000B978                            Obj45_Load:				; XREF: Obj45_Main
0000B978 135A 0024                  		move.b	(a2)+,$24(a1)
0000B97C 12BC 0045                  		move.b	#$45,0(a1)
0000B980 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B986 101A                       		move.b	(a2)+,d0
0000B988 4880                       		ext.w	d0
0000B98A D068 0008                  		add.w	8(a0),d0
0000B98E 3340 0008                  		move.w	d0,8(a1)
0000B992 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000B99A 337C 0300 0002             		move.w	#$300,2(a1)
0000B9A0 137C 0004 0001             		move.b	#4,1(a1)
0000B9A6 3369 0008 0030             		move.w	8(a1),$30(a1)
0000B9AC 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000B9B2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9B8 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9BE 3342 0034                  		move.w	d2,$34(a1)
0000B9C2 137C 0004 0018             		move.b	#4,$18(a1)
0000B9C8 0C12 0001                  		cmpi.b	#1,(a2)
0000B9CC 6600                       		bne.s	loc_BA40
0000B9CE 137C 0091 0020             		move.b	#$91,$20(a1)
0000B9D4                            
0000B9D4                            loc_BA40:
0000B9D4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9D8 2348 003C                  		move.l	a0,$3C(a1)
0000B9DC 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000B9E0                            
0000B9E0 137C 0003 0018             		move.b	#3,$18(a1)
0000B9E6                            
0000B9E6                            loc_BA52:
0000B9E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B9EC                            
0000B9EC                            Obj45_Solid:				; XREF: Obj45_Index
0000B9EC 3F28 0008                  		move.w	8(a0),-(sp)
0000B9F0 6100 0000                  		bsr.w	Obj45_Move
0000B9F4 323C 0017                  		move.w	#$17,d1
0000B9F8 343C 0020                  		move.w	#$20,d2
0000B9FC 363C 0020                  		move.w	#$20,d3
0000BA00 381F                       		move.w	(sp)+,d4
0000BA02 6100 0000                  		bsr.w	SolidObject
0000BA06 6100 0000                  		bsr.w	DisplaySprite
0000BA0A 6000 0000                  		bra.w	Obj45_ChkDel
0000BA0E                            ; ===========================================================================
0000BA0E                            
0000BA0E                            loc_BA7A:				; XREF: Obj45_Index
0000BA0E 2268 003C                  		movea.l	$3C(a0),a1
0000BA12 1029 0032                  		move.b	$32(a1),d0
0000BA16 0600 0010                  		addi.b	#$10,d0
0000BA1A EA08                       		lsr.b	#5,d0
0000BA1C 5600                       		addq.b	#3,d0
0000BA1E 1140 001A                  		move.b	d0,$1A(a0)
0000BA22                            
0000BA22                            loc_BA8E:				; XREF: Obj45_Index
0000BA22 2268 003C                  		movea.l	$3C(a0),a1
0000BA26 7000                       		moveq	#0,d0
0000BA28 1029 0032                  		move.b	$32(a1),d0
0000BA2C 4440                       		neg.w	d0
0000BA2E D068 0030                  		add.w	$30(a0),d0
0000BA32 3140 0008                  		move.w	d0,8(a0)
0000BA36                            
0000BA36                            Obj45_Display:				; XREF: Obj45_Index
0000BA36 6100 0000                  		bsr.w	DisplaySprite
0000BA3A                            
0000BA3A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BA3A 3028 003A                  		move.w	$3A(a0),d0
0000BA3E 0240 FF80                  		andi.w	#$FF80,d0
0000BA42 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA46 0441 0080                  		subi.w	#$80,d1
0000BA4A 0241 FF80                  		andi.w	#$FF80,d1
0000BA4E 9041                       		sub.w	d1,d0
0000BA50 0C40 0280                  		cmpi.w	#$280,d0
0000BA54 6200 0000                  		bhi.w	DeleteObject
0000BA58 4E75                       		rts	
0000BA5A                            
0000BA5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA5A                            
0000BA5A                            
0000BA5A                            Obj45_Move:				; XREF: Obj45_Solid
0000BA5A 7000                       		moveq	#0,d0
0000BA5C 1028 0028                  		move.b	$28(a0),d0
0000BA60 D040                       		add.w	d0,d0
0000BA62 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BA66 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BA6A                            ; End of function Obj45_Move
0000BA6A                            
0000BA6A                            ; ===========================================================================
0000BA6A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BA6C 0000                       		dc.w loc_BADA-off_BAD6
0000BA6E                            ; ===========================================================================
0000BA6E                            
0000BA6E                            loc_BADA:				; XREF: off_BAD6
0000BA6E 4A68 0036                  		tst.w	$36(a0)
0000BA72 6700                       		beq.s	loc_BB08
0000BA74 4A68 0038                  		tst.w	$38(a0)
0000BA78 6700                       		beq.s	loc_BAEC
0000BA7A 5368 0038                  		subq.w	#1,$38(a0)
0000BA7E 6000                       		bra.s	loc_BB3C
0000BA80                            ; ===========================================================================
0000BA80                            
0000BA80                            loc_BAEC:
0000BA80 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BA86 6400                       		bcc.s	loc_BB3C
0000BA88 317C 0000 0032             		move.w	#0,$32(a0)
0000BA8E 317C 0000 0010             		move.w	#0,$10(a0)
0000BA94 317C 0000 0036             		move.w	#0,$36(a0)
0000BA9A 6000                       		bra.s	loc_BB3C
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            loc_BB08:				; XREF: loc_BADA
0000BA9C 3228 0034                  		move.w	$34(a0),d1
0000BAA0 B268 0032                  		cmp.w	$32(a0),d1
0000BAA4 6700                       		beq.s	loc_BB3C
0000BAA6 3028 0010                  		move.w	$10(a0),d0
0000BAAA 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BAB0 D168 0032                  		add.w	d0,$32(a0)
0000BAB4 B268 0032                  		cmp.w	$32(a0),d1
0000BAB8 6200                       		bhi.s	loc_BB3C
0000BABA 3141 0032                  		move.w	d1,$32(a0)
0000BABE 317C 0000 0010             		move.w	#0,$10(a0)
0000BAC4 317C 0001 0036             		move.w	#1,$36(a0)
0000BACA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BAD0                            
0000BAD0                            loc_BB3C:
0000BAD0 7000                       		moveq	#0,d0
0000BAD2 1028 0032                  		move.b	$32(a0),d0
0000BAD6 4440                       		neg.w	d0
0000BAD8 D068 0030                  		add.w	$30(a0),d0
0000BADC 3140 0008                  		move.w	d0,8(a0)
0000BAE0 4E75                       		rts	
0000BAE2                            ; ===========================================================================
0000BAE2                            ; ---------------------------------------------------------------------------
0000BAE2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BAE2                            ; ---------------------------------------------------------------------------
0000BAE2                            Map_obj31:
0000BAE2                            	include "_maps\obj31.asm"
0000BAE2                            ; ---------------------------------------------------------------------------
0000BAE2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BAE2                            ; ---------------------------------------------------------------------------
0000BAE2 0000                       		dc.w byte_BB64-Map_obj31
0000BAE4 0000                       		dc.w byte_BB7E-Map_obj31
0000BAE6 0000                       		dc.w byte_BB98-Map_obj31
0000BAE8 0000                       		dc.w byte_BB9E-Map_obj31
0000BAEA 0000                       		dc.w byte_BBA9-Map_obj31
0000BAEC 0000                       		dc.w byte_BBBE-Map_obj31
0000BAEE 0000                       		dc.w byte_BBDD-Map_obj31
0000BAF0 0000                       		dc.w byte_BC06-Map_obj31
0000BAF2 0000                       		dc.w byte_BC06-Map_obj31
0000BAF4 0000                       		dc.w byte_BC39-Map_obj31
0000BAF6 0000                       		dc.w byte_BC53-Map_obj31
0000BAF8 05                         byte_BB64:	dc.b 5
0000BAF9 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BAFE F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BB03 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BB08 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BB0D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BB12 05                         byte_BB7E:	dc.b 5
0000BB13 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BB18 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BB1D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BB22 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BB27 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BB2C 01                         byte_BB98:	dc.b 1
0000BB2D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BB32 02                         byte_BB9E:	dc.b 2
0000BB33 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB38 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB3D 04                         byte_BBA9:	dc.b 4
0000BB3E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB43 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB48 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB4D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB52 06                         byte_BBBE:	dc.b 6
0000BB53 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BB58 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BB5D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB62 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB67 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB6C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB71 08                         byte_BBDD:	dc.b 8
0000BB72 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BB77 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BB7C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BB81 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BB86 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB8B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB90 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB95 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB9A 0A                         byte_BC06:	dc.b $A
0000BB9B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BBA0 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BBA5 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BBAA B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BBAF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BBB4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BBB9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BBBE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BBC3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBC8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BBCD 05                         byte_BC39:	dc.b 5
0000BBCE F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BBD3 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BBD8 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BBDD F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BBE2 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BBE7 01                         byte_BC53:	dc.b 1
0000BBE8 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BBEE 00                         		even
0000BBEE 00                         		even
0000BBEE                            
0000BBEE                            ; ---------------------------------------------------------------------------
0000BBEE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BBEE                            ; ---------------------------------------------------------------------------
0000BBEE                            Map_obj45:
0000BBEE                            	include "_maps\obj45.asm"
0000BBEE                            ; ---------------------------------------------------------------------------
0000BBEE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BBEE                            ; ---------------------------------------------------------------------------
0000BBEE 0000                       		dc.w byte_BC6C-Map_obj45
0000BBF0 0000                       		dc.w byte_BC7C-Map_obj45
0000BBF2 0000                       		dc.w byte_BC8C-Map_obj45
0000BBF4 0000                       		dc.w byte_BC92-Map_obj45
0000BBF6 0000                       		dc.w byte_BC9D-Map_obj45
0000BBF8 0000                       		dc.w byte_BCB2-Map_obj45
0000BBFA 0000                       		dc.w byte_BCD1-Map_obj45
0000BBFC 0000                       		dc.w byte_BCFA-Map_obj45
0000BBFE 0000                       		dc.w byte_BCFA-Map_obj45
0000BC00 03                         byte_BC6C:	dc.b 3
0000BC01 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BC06 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BC0B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BC10 03                         byte_BC7C:	dc.b 3
0000BC11 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BC16 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BC1B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BC20 01                         byte_BC8C:	dc.b 1
0000BC21 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BC26 02                         byte_BC92:	dc.b 2
0000BC27 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC2C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC31 04                         byte_BC9D:	dc.b 4
0000BC32 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC37 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC3C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC41 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC46 06                         byte_BCB2:	dc.b 6
0000BC47 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC4C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC51 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC56 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC5B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BC60 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BC65 08                         byte_BCD1:	dc.b 8
0000BC66 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC6B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC70 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC75 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC7A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BC7F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BC84 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BC89 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BC8E 08                         byte_BCFA:	dc.b 8
0000BC8F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC94 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC99 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC9E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BCA3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BCA8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BCAD F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BCB2 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BCB7 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BCBC F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BCC2 00                         		even
0000BCC2 00                         		even
0000BCC2                            
0000BCC2                            ; ===========================================================================
0000BCC2                            ; ---------------------------------------------------------------------------
0000BCC2                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BCC2                            ; ---------------------------------------------------------------------------
0000BCC2                            
0000BCC2                            Obj32:					; XREF: Obj_Index
0000BCC2 7000                       		moveq	#0,d0
0000BCC4 1028 0024                  		move.b	$24(a0),d0
0000BCC8 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BCCC 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BCD0                            ; ===========================================================================
0000BCD0 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BCD2 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BCD4                            ; ===========================================================================
0000BCD4                            
0000BCD4                            Obj32_Main:				; XREF: Obj32_Index
0000BCD4 5428 0024                  		addq.b	#2,$24(a0)
0000BCD8 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BCE0 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BCE6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BCEC 6700                       		beq.s	loc_BD60
0000BCEE 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BCF4                            
0000BCF4                            loc_BD60:
0000BCF4 117C 0004 0001             		move.b	#4,1(a0)
0000BCFA 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD00 117C 0004 0018             		move.b	#4,$18(a0)
0000BD06 5668 000C                  		addq.w	#3,$C(a0)
0000BD0A                            
0000BD0A                            Obj32_Pressed:				; XREF: Obj32_Index
0000BD0A 4A28 0001                  		tst.b	1(a0)
0000BD0E 6A00                       		bpl.s	Obj32_Display
0000BD10 323C 001B                  		move.w	#$1B,d1
0000BD14 343C 0005                  		move.w	#5,d2
0000BD18 363C 0005                  		move.w	#5,d3
0000BD1C 3828 0008                  		move.w	8(a0),d4
0000BD20 6100 0000                  		bsr.w	SolidObject
0000BD24 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BD2A 1028 0028                  		move.b	$28(a0),d0
0000BD2E 0240 000F                  		andi.w	#$F,d0
0000BD32 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BD36 47F3 0000                  		lea	(a3,d0.w),a3
0000BD3A 7600                       		moveq	#0,d3
0000BD3C 0828 0006 0028             		btst	#6,$28(a0)
0000BD42 6700                       		beq.s	loc_BDB2
0000BD44 7607                       		moveq	#7,d3
0000BD46                            
0000BD46                            loc_BDB2:
0000BD46 4A28 0028                  		tst.b	$28(a0)
0000BD4A 6A00                       		bpl.s	loc_BDBE
0000BD4C 6100 0000                  		bsr.w	Obj32_MZBlock
0000BD50 6600                       		bne.s	loc_BDC8
0000BD52                            
0000BD52                            loc_BDBE:
0000BD52 4A28 0025                  		tst.b	$25(a0)
0000BD56 6600                       		bne.s	loc_BDC8
0000BD58 0793                       		bclr	d3,(a3)
0000BD5A 6000                       		bra.s	loc_BDDE
0000BD5C                            ; ===========================================================================
0000BD5C                            
0000BD5C                            loc_BDC8:
0000BD5C 4A13                       		tst.b	(a3)
0000BD5E 6600                       		bne.s	loc_BDD6
0000BD60 303C 00CD                  		move.w	#$CD,d0
0000BD64 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play switch sound
0000BD6A                            
0000BD6A                            loc_BDD6:
0000BD6A 07D3                       		bset	d3,(a3)
0000BD6C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BD72                            
0000BD72                            loc_BDDE:
0000BD72 0828 0005 0028             		btst	#5,$28(a0)
0000BD78 6700                       		beq.s	Obj32_Display
0000BD7A 5328 001E                  		subq.b	#1,$1E(a0)
0000BD7E 6A00                       		bpl.s	Obj32_Display
0000BD80 117C 0007 001E             		move.b	#7,$1E(a0)
0000BD86 0868 0001 001A             		bchg	#1,$1A(a0)
0000BD8C                            
0000BD8C                            Obj32_Display:
0000BD8C 6100 0000                  		bsr.w	DisplaySprite
0000BD90 3028 0008                  		move.w	8(a0),d0
0000BD94 0240 FF80                  		andi.w	#$FF80,d0
0000BD98 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD9C 0441 0080                  		subi.w	#$80,d1
0000BDA0 0241 FF80                  		andi.w	#$FF80,d1
0000BDA4 9041                       		sub.w	d1,d0
0000BDA6 0C40 0280                  		cmpi.w	#$280,d0
0000BDAA 6200 0000                  		bhi.w	Obj32_Delete
0000BDAE 4E75                       		rts	
0000BDB0                            ; ===========================================================================
0000BDB0                            
0000BDB0                            Obj32_Delete:
0000BDB0 6100 0000                  		bsr.w	DeleteObject
0000BDB4 4E75                       		rts	
0000BDB6                            
0000BDB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDB6                            
0000BDB6                            
0000BDB6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BDB6 3F03                       		move.w	d3,-(sp)
0000BDB8 3428 0008                  		move.w	8(a0),d2
0000BDBC 3628 000C                  		move.w	$C(a0),d3
0000BDC0 0442 0010                  		subi.w	#$10,d2
0000BDC4 5143                       		subq.w	#8,d3
0000BDC6 383C 0020                  		move.w	#$20,d4
0000BDCA 3A3C 0010                  		move.w	#$10,d5
0000BDCE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BDD2 3C3C 005F                  		move.w	#$5F,d6
0000BDD6                            
0000BDD6                            Obj32_MZLoop:
0000BDD6 4A29 0001                  		tst.b	1(a1)
0000BDDA 6A00                       		bpl.s	loc_BE4E
0000BDDC 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BDE0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BDE2                            
0000BDE2                            loc_BE4E:
0000BDE2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BDE6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BDEA                            
0000BDEA 361F                       		move.w	(sp)+,d3
0000BDEC 7000                       		moveq	#0,d0
0000BDEE                            
0000BDEE                            locret_BE5A:
0000BDEE 4E75                       		rts	
0000BDF0                            ; ===========================================================================
0000BDF0 1010                       Obj32_MZData:	dc.b $10, $10
0000BDF2                            ; ===========================================================================
0000BDF2                            
0000BDF2                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BDF2 7001                       		moveq	#1,d0
0000BDF4 0240 003F                  		andi.w	#$3F,d0
0000BDF8 D040                       		add.w	d0,d0
0000BDFA 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BDFE 121A                       		move.b	(a2)+,d1
0000BE00 4881                       		ext.w	d1
0000BE02 3029 0008                  		move.w	8(a1),d0
0000BE06 9041                       		sub.w	d1,d0
0000BE08 9042                       		sub.w	d2,d0
0000BE0A 6400                       		bcc.s	loc_BE80
0000BE0C D241                       		add.w	d1,d1
0000BE0E D041                       		add.w	d1,d0
0000BE10 6500                       		bcs.s	loc_BE84
0000BE12 60CE                       		bra.s	loc_BE4E
0000BE14                            ; ===========================================================================
0000BE14                            
0000BE14                            loc_BE80:
0000BE14 B044                       		cmp.w	d4,d0
0000BE16 62CA                       		bhi.s	loc_BE4E
0000BE18                            
0000BE18                            loc_BE84:
0000BE18 121A                       		move.b	(a2)+,d1
0000BE1A 4881                       		ext.w	d1
0000BE1C 3029 000C                  		move.w	$C(a1),d0
0000BE20 9041                       		sub.w	d1,d0
0000BE22 9043                       		sub.w	d3,d0
0000BE24 6400                       		bcc.s	loc_BE9A
0000BE26 D241                       		add.w	d1,d1
0000BE28 D041                       		add.w	d1,d0
0000BE2A 6500                       		bcs.s	loc_BE9E
0000BE2C 60B4                       		bra.s	loc_BE4E
0000BE2E                            ; ===========================================================================
0000BE2E                            
0000BE2E                            loc_BE9A:
0000BE2E B045                       		cmp.w	d5,d0
0000BE30 62B0                       		bhi.s	loc_BE4E
0000BE32                            
0000BE32                            loc_BE9E:
0000BE32 361F                       		move.w	(sp)+,d3
0000BE34 7001                       		moveq	#1,d0
0000BE36 4E75                       		rts	
0000BE38                            ; End of function Obj32_MZBlock
0000BE38                            
0000BE38                            ; ===========================================================================
0000BE38                            ; ---------------------------------------------------------------------------
0000BE38                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE38                            ; ---------------------------------------------------------------------------
0000BE38                            Map_obj32:
0000BE38                            	include "_maps\obj32.asm"
0000BE38                            ; ---------------------------------------------------------------------------
0000BE38                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE38                            ; ---------------------------------------------------------------------------
0000BE38 0000                       		dc.w byte_BEAC-Map_obj32
0000BE3A 0000                       		dc.w byte_BEB7-Map_obj32
0000BE3C 0000                       		dc.w byte_BEC2-Map_obj32
0000BE3E 0000                       		dc.w byte_BEB7-Map_obj32
0000BE40 02                         byte_BEAC:	dc.b 2
0000BE41 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BE46 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BE4B 02                         byte_BEB7:	dc.b 2
0000BE4C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BE51 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BE56 02                         byte_BEC2:	dc.b 2
0000BE57 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BE5C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BE61 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BE66                            		even
0000BE66                            		even
0000BE66                            
0000BE66                            ; ===========================================================================
0000BE66                            ; ---------------------------------------------------------------------------
0000BE66                            ; Object 33 - pushable blocks (MZ, LZ)
0000BE66                            ; ---------------------------------------------------------------------------
0000BE66                            
0000BE66                            Obj33:					; XREF: Obj_Index
0000BE66 7000                       		moveq	#0,d0
0000BE68 1028 0024                  		move.b	$24(a0),d0
0000BE6C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BE70 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BE74                            ; ===========================================================================
0000BE74 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BE76 0000                       		dc.w loc_BF6E-Obj33_Index
0000BE78 0000                       		dc.w loc_C02C-Obj33_Index
0000BE7A                            
0000BE7A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BE7C 4001                       		dc.b $40, 1
0000BE7E                            ; ===========================================================================
0000BE7E                            
0000BE7E                            Obj33_Main:				; XREF: Obj33_Index
0000BE7E 5428 0024                  		addq.b	#2,$24(a0)
0000BE82 117C 000F 0016             		move.b	#$F,$16(a0)
0000BE88 117C 000F 0017             		move.b	#$F,$17(a0)
0000BE8E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BE96 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BE9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BEA2 6600                       		bne.s	loc_BF16
0000BEA4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BEAA                            
0000BEAA                            loc_BF16:
0000BEAA 117C 0004 0001             		move.b	#4,1(a0)
0000BEB0 117C 0003 0018             		move.b	#3,$18(a0)
0000BEB6 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BEBC 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BEC2 7000                       		moveq	#0,d0
0000BEC4 1028 0028                  		move.b	$28(a0),d0
0000BEC8 D040                       		add.w	d0,d0
0000BECA 0240 000E                  		andi.w	#$E,d0
0000BECE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000BED2 115A 0019                  		move.b	(a2)+,$19(a0)
0000BED6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEDA 4A28 0028                  		tst.b	$28(a0)
0000BEDE 6700                       		beq.s	Obj33_ChkGone
0000BEE0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000BEE6                            
0000BEE6                            Obj33_ChkGone:
0000BEE6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BEEA 7000                       		moveq	#0,d0
0000BEEC 1028 0023                  		move.b	$23(a0),d0
0000BEF0 6700                       		beq.s	loc_BF6E
0000BEF2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BEF8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BEFE 6600 0000                  		bne.w	DeleteObject
0000BF02                            
0000BF02                            loc_BF6E:				; XREF: Obj33_Index
0000BF02 4A28 0032                  		tst.b	$32(a0)
0000BF06 6600 0000                  		bne.w	loc_C046
0000BF0A 7200                       		moveq	#0,d1
0000BF0C 1228 0019                  		move.b	$19(a0),d1
0000BF10 0641 000B                  		addi.w	#$B,d1
0000BF14 343C 0010                  		move.w	#$10,d2
0000BF18 363C 0011                  		move.w	#$11,d3
0000BF1C 3828 0008                  		move.w	8(a0),d4
0000BF20 6100 0000                  		bsr.w	loc_C186
0000BF24 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000BF2A 6600                       		bne.s	loc_BFC6	; if not, branch
0000BF2C 08A8 0007 0028             		bclr	#7,$28(a0)
0000BF32 3028 0008                  		move.w	8(a0),d0
0000BF36 0C40 0A20                  		cmpi.w	#$A20,d0
0000BF3A 6500                       		bcs.s	loc_BFC6
0000BF3C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000BF40 6400                       		bcc.s	loc_BFC6
0000BF42 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000BF46 0440 001C                  		subi.w	#$1C,d0
0000BF4A 3140 000C                  		move.w	d0,$C(a0)
0000BF4E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000BF54 08E8 0007 0028             		bset	#7,$28(a0)
0000BF5A                            
0000BF5A                            loc_BFC6:
0000BF5A 3028 0008                  		move.w	8(a0),d0
0000BF5E 0240 FF80                  		andi.w	#$FF80,d0
0000BF62 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF66 0441 0080                  		subi.w	#$80,d1
0000BF6A 0241 FF80                  		andi.w	#$FF80,d1
0000BF6E 9041                       		sub.w	d1,d0
0000BF70 0C40 0280                  		cmpi.w	#$280,d0
0000BF74 6200                       		bhi.s	loc_BFE6
0000BF76 6000 0000                  		bra.w	DisplaySprite
0000BF7A                            ; ===========================================================================
0000BF7A                            
0000BF7A                            loc_BFE6:
0000BF7A 3028 0034                  		move.w	$34(a0),d0
0000BF7E 0240 FF80                  		andi.w	#$FF80,d0
0000BF82 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF86 0441 0080                  		subi.w	#$80,d1
0000BF8A 0241 FF80                  		andi.w	#$FF80,d1
0000BF8E 9041                       		sub.w	d1,d0
0000BF90 0C40 0280                  		cmpi.w	#$280,d0
0000BF94 6200                       		bhi.s	loc_C016
0000BF96 3168 0034 0008             		move.w	$34(a0),8(a0)
0000BF9C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000BFA2 117C 0004 0024             		move.b	#4,$24(a0)
0000BFA8 6000                       		bra.s	loc_C02C
0000BFAA                            ; ===========================================================================
0000BFAA                            
0000BFAA                            loc_C016:
0000BFAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BFAE 7000                       		moveq	#0,d0
0000BFB0 1028 0023                  		move.b	$23(a0),d0
0000BFB4 6700                       		beq.s	loc_C028
0000BFB6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000BFBC                            
0000BFBC                            loc_C028:
0000BFBC 6000 0000                  		bra.w	DeleteObject
0000BFC0                            ; ===========================================================================
0000BFC0                            
0000BFC0                            loc_C02C:				; XREF: Obj33_Index
0000BFC0 6100 0000                  		bsr.w	ChkObjOnScreen2
0000BFC4 6700                       		beq.s	locret_C044
0000BFC6 117C 0002 0024             		move.b	#2,$24(a0)
0000BFCC 4228 0032                  		clr.b	$32(a0)
0000BFD0 4268 0010                  		clr.w	$10(a0)
0000BFD4 4268 0012                  		clr.w	$12(a0)
0000BFD8                            
0000BFD8                            locret_C044:
0000BFD8 4E75                       		rts	
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            loc_C046:				; XREF: loc_BF6E
0000BFDA 3F28 0008                  		move.w	8(a0),-(sp)
0000BFDE 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000BFE4 6400                       		bcc.s	loc_C056
0000BFE6 6100 0000                  		bsr.w	SpeedToPos
0000BFEA                            
0000BFEA                            loc_C056:
0000BFEA 0828 0001 0022             		btst	#1,$22(a0)
0000BFF0 6700                       		beq.s	loc_C0A0
0000BFF2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BFF8 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFFE 4A41                       		tst.w	d1
0000C000 6A00 0000                  		bpl.w	loc_C09E
0000C004 D368 000C                  		add.w	d1,$C(a0)
0000C008 4268 0012                  		clr.w	$12(a0)
0000C00C 08A8 0001 0022             		bclr	#1,$22(a0)
0000C012 3011                       		move.w	(a1),d0
0000C014 0240 03FF                  		andi.w	#$3FF,d0
0000C018 0C40 016A                  		cmpi.w	#$16A,d0
0000C01C 6500                       		bcs.s	loc_C09E
0000C01E 3028 0030                  		move.w	$30(a0),d0
0000C022 E640                       		asr.w	#3,d0
0000C024 3140 0010                  		move.w	d0,$10(a0)
0000C028 117C 0001 0032             		move.b	#1,$32(a0)
0000C02E 4268 000E                  		clr.w	$E(a0)
0000C032                            
0000C032                            loc_C09E:
0000C032 6000                       		bra.s	loc_C0E6
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            loc_C0A0:
0000C034 4A68 0010                  		tst.w	$10(a0)
0000C038 6700 0000                  		beq.w	loc_C0D6
0000C03C 6B00                       		bmi.s	loc_C0BC
0000C03E 7600                       		moveq	#0,d3
0000C040 1628 0019                  		move.b	$19(a0),d3
0000C044 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C04A 4A41                       		tst.w	d1		; has block touched a wall?
0000C04C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C04E 6000                       		bra.s	loc_C0E6
0000C050                            ; ===========================================================================
0000C050                            
0000C050                            loc_C0BC:
0000C050 7600                       		moveq	#0,d3
0000C052 1628 0019                  		move.b	$19(a0),d3
0000C056 4643                       		not.w	d3
0000C058 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C05E 4A41                       		tst.w	d1		; has block touched a wall?
0000C060 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C062 6000                       		bra.s	loc_C0E6
0000C064                            ; ===========================================================================
0000C064                            
0000C064                            Obj33_StopPush:
0000C064 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C068 6000                       		bra.s	loc_C0E6
0000C06A                            ; ===========================================================================
0000C06A                            
0000C06A                            loc_C0D6:
0000C06A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C072 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C078 6400                       		bcc.s	loc_C104
0000C07A                            
0000C07A                            loc_C0E6:
0000C07A 7200                       		moveq	#0,d1
0000C07C 1228 0019                  		move.b	$19(a0),d1
0000C080 0641 000B                  		addi.w	#$B,d1
0000C084 343C 0010                  		move.w	#$10,d2
0000C088 363C 0011                  		move.w	#$11,d3
0000C08C 381F                       		move.w	(sp)+,d4
0000C08E 6100 0000                  		bsr.w	loc_C186
0000C092 6100                       		bsr.s	Obj33_ChkLava
0000C094 6000 FEC4                  		bra.w	loc_BFC6
0000C098                            ; ===========================================================================
0000C098                            
0000C098                            loc_C104:
0000C098 381F                       		move.w	(sp)+,d4
0000C09A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C09E 08A9 0003 0022             		bclr	#3,$22(a1)
0000C0A4 08A8 0003 0022             		bclr	#3,$22(a0)
0000C0AA 6000 FECE                  		bra.w	loc_BFE6
0000C0AE                            ; ===========================================================================
0000C0AE                            
0000C0AE                            Obj33_ChkLava:
0000C0AE 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C0B4 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C0B6 343C FFE0                  		move.w	#-$20,d2
0000C0BA 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C0C0 6700                       		beq.s	Obj33_LoadLava
0000C0C2 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C0C8 6700                       		beq.s	Obj33_LoadLava
0000C0CA 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C0D0 6700                       		beq.s	Obj33_LoadLava
0000C0D2 4E75                       		rts	
0000C0D4                            ; ===========================================================================
0000C0D4                            
0000C0D4                            Obj33_ChkLava2:
0000C0D4 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C0DA 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C0DC 343C 0020                  		move.w	#$20,d2
0000C0E0 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C0E6 6700                       		beq.s	Obj33_LoadLava
0000C0E8 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C0EE 6700                       		beq.s	Obj33_LoadLava
0000C0F0                            
0000C0F0                            Obj33_NoLava:
0000C0F0 4E75                       		rts	
0000C0F2                            ; ===========================================================================
0000C0F2                            
0000C0F2                            Obj33_LoadLava:
0000C0F2 6100 0000                  		bsr.w	SingleObjLoad
0000C0F6 6600                       		bne.s	locret_C184
0000C0F8 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C0FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C102 D569 0008                  		add.w	d2,8(a1)
0000C106 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C10C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C112 2348 003C                  		move.l	a0,$3C(a1)
0000C116                            
0000C116                            locret_C184:
0000C116 4E75                       		rts	
0000C118                            ; ===========================================================================
0000C118                            
0000C118                            loc_C186:				; XREF: loc_BF6E
0000C118 1028 0025                  		move.b	$25(a0),d0
0000C11C 6700 0000                  		beq.w	loc_C218
0000C120 5500                       		subq.b	#2,d0
0000C122 6600                       		bne.s	loc_C1AA
0000C124 6100 B462                  		bsr.w	ExitPlatform
0000C128 0829 0003 0022             		btst	#3,$22(a1)
0000C12E 6600                       		bne.s	loc_C1A4
0000C130 4228 0025                  		clr.b	$25(a0)
0000C134 4E75                       		rts	
0000C136                            ; ===========================================================================
0000C136                            
0000C136                            loc_C1A4:
0000C136 3404                       		move.w	d4,d2
0000C138 6000 B9AC                  		bra.w	MvSonicOnPtfm
0000C13C                            ; ===========================================================================
0000C13C                            
0000C13C                            loc_C1AA:
0000C13C 5500                       		subq.b	#2,d0
0000C13E 6600                       		bne.s	loc_C1F2
0000C140 6100 0000                  		bsr.w	SpeedToPos
0000C144 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C14A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C150 4A41                       		tst.w	d1
0000C152 6A00 0000                  		bpl.w	locret_C1F0
0000C156 D368 000C                  		add.w	d1,$C(a0)
0000C15A 4268 0012                  		clr.w	$12(a0)
0000C15E 4228 0025                  		clr.b	$25(a0)
0000C162 3011                       		move.w	(a1),d0
0000C164 0240 03FF                  		andi.w	#$3FF,d0
0000C168 0C40 016A                  		cmpi.w	#$16A,d0
0000C16C 6500                       		bcs.s	locret_C1F0
0000C16E 3028 0030                  		move.w	$30(a0),d0
0000C172 E640                       		asr.w	#3,d0
0000C174 3140 0010                  		move.w	d0,$10(a0)
0000C178 117C 0001 0032             		move.b	#1,$32(a0)
0000C17E 4268 000E                  		clr.w	$E(a0)
0000C182                            
0000C182                            locret_C1F0:
0000C182 4E75                       		rts	
0000C184                            ; ===========================================================================
0000C184                            
0000C184                            loc_C1F2:
0000C184 6100 0000                  		bsr.w	SpeedToPos
0000C188 3028 0008                  		move.w	8(a0),d0
0000C18C 0240 000C                  		andi.w	#$C,d0
0000C190 6600 0000                  		bne.w	locret_C2E4
0000C194 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C19A 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C1A0 4268 0010                  		clr.w	$10(a0)
0000C1A4 5528 0025                  		subq.b	#2,$25(a0)
0000C1A8 4E75                       		rts	
0000C1AA                            ; ===========================================================================
0000C1AA                            
0000C1AA                            loc_C218:
0000C1AA 6100 0000                  		bsr.w	loc_FAC8
0000C1AE 4A44                       		tst.w	d4
0000C1B0 6700 0000                  		beq.w	locret_C2E4
0000C1B4 6B00 0000                  		bmi.w	locret_C2E4
0000C1B8 4A28 0032                  		tst.b	$32(a0)
0000C1BC 6700                       		beq.s	loc_C230
0000C1BE 6000 0000                  		bra.w	locret_C2E4
0000C1C2                            ; ===========================================================================
0000C1C2                            
0000C1C2                            loc_C230:
0000C1C2 4A40                       		tst.w	d0
0000C1C4 6700 0000                  		beq.w	locret_C2E4
0000C1C8 6B00                       		bmi.s	loc_C268
0000C1CA 0829 0000 0022             		btst	#0,$22(a1)
0000C1D0 6600 0000                  		bne.w	locret_C2E4
0000C1D4 3F00                       		move.w	d0,-(sp)
0000C1D6 7600                       		moveq	#0,d3
0000C1D8 1628 0019                  		move.b	$19(a0),d3
0000C1DC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C1E2 301F                       		move.w	(sp)+,d0
0000C1E4 4A41                       		tst.w	d1
0000C1E6 6B00 0000                  		bmi.w	locret_C2E4
0000C1EA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C1F2 7001                       		moveq	#1,d0
0000C1F4 323C 0040                  		move.w	#$40,d1
0000C1F8 6000                       		bra.s	loc_C294
0000C1FA                            ; ===========================================================================
0000C1FA                            
0000C1FA                            loc_C268:
0000C1FA 0829 0000 0022             		btst	#0,$22(a1)
0000C200 6700                       		beq.s	locret_C2E4
0000C202 3F00                       		move.w	d0,-(sp)
0000C204 7600                       		moveq	#0,d3
0000C206 1628 0019                  		move.b	$19(a0),d3
0000C20A 4643                       		not.w	d3
0000C20C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C212 301F                       		move.w	(sp)+,d0
0000C214 4A41                       		tst.w	d1
0000C216 6B00                       		bmi.s	locret_C2E4
0000C218 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C220 70FF                       		moveq	#-1,d0
0000C222 323C FFC0                  		move.w	#-$40,d1
0000C226                            
0000C226                            loc_C294:
0000C226 43F8 D000                  		lea	($FFFFD000).w,a1
0000C22A D169 0008                  		add.w	d0,8(a1)
0000C22E 3341 0014                  		move.w	d1,$14(a1)
0000C232 337C 0000 0010             		move.w	#0,$10(a1)
0000C238 3F00                       		move.w	d0,-(sp)
0000C23A 303C 00A7                  		move.w	#$A7,d0
0000C23E 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C244 301F                       		move.w	(sp)+,d0
0000C246 4A28 0028                  		tst.b	$28(a0)
0000C24A 6B00                       		bmi.s	locret_C2E4
0000C24C 3F00                       		move.w	d0,-(sp)
0000C24E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C254 301F                       		move.w	(sp)+,d0
0000C256 0C41 0004                  		cmpi.w	#4,d1
0000C25A 6F00                       		ble.s	loc_C2E0
0000C25C 317C 0400 0010             		move.w	#$400,$10(a0)
0000C262 4A40                       		tst.w	d0
0000C264 6A00                       		bpl.s	loc_C2D8
0000C266 4468 0010                  		neg.w	$10(a0)
0000C26A                            
0000C26A                            loc_C2D8:
0000C26A 117C 0006 0025             		move.b	#6,$25(a0)
0000C270 6000                       		bra.s	locret_C2E4
0000C272                            ; ===========================================================================
0000C272                            
0000C272                            loc_C2E0:
0000C272 D368 000C                  		add.w	d1,$C(a0)
0000C276                            
0000C276                            locret_C2E4:
0000C276 4E75                       		rts	
0000C278                            ; ===========================================================================
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            Map_obj33:
0000C278                            	include "_maps\obj33.asm"
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C278                            ; ---------------------------------------------------------------------------
0000C278 0000                       		dc.w byte_C2EA-Map_obj33
0000C27A 0000                       		dc.w byte_C2F0-Map_obj33
0000C27C 01                         byte_C2EA:	dc.b 1
0000C27D F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C282 04                         byte_C2F0:	dc.b 4
0000C283 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C288 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C28D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C292 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C298 00                         		even
0000C298 00                         		even
0000C298                            
0000C298                            ; ===========================================================================
0000C298                            ; ---------------------------------------------------------------------------
0000C298                            ; Object 34 - zone title cards
0000C298                            ; ---------------------------------------------------------------------------
0000C298                            
0000C298                            Obj34:					; XREF: Obj_Index
0000C298 7000                       		moveq	#0,d0
0000C29A 1028 0024                  		move.b	$24(a0),d0
0000C29E 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C2A2 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C2A6                            ; ===========================================================================
0000C2A6 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C2A8 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C2AA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2AC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2AE                            ; ===========================================================================
0000C2AE                            
0000C2AE                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C2AE 2248                       		movea.l	a0,a1
0000C2B0 7000                       		moveq	#0,d0
0000C2B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C2B6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C2BC 6600                       		bne.s	Obj34_CheckFZ
0000C2BE 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C2C0                            
0000C2C0                            Obj34_CheckFZ:
0000C2C0 3400                       		move.w	d0,d2
0000C2C2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C2C8 6600                       		bne.s	Obj34_LoadConfig
0000C2CA 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C2CC 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C2CE                            
0000C2CE                            Obj34_LoadConfig:
0000C2CE 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C2D4 E948                       		lsl.w	#4,d0
0000C2D6 D6C0                       		adda.w	d0,a3
0000C2D8 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C2DE 7203                       		moveq	#3,d1
0000C2E0                            
0000C2E0                            Obj34_Loop:
0000C2E0 12BC 0034                  		move.b	#$34,0(a1)
0000C2E4 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C2E8 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C2EC 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C2F0 335A 000A                  		move.w	(a2)+,$A(a1)
0000C2F4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C2F8 101A                       		move.b	(a2)+,d0
0000C2FA 6600                       		bne.s	Obj34_ActNumber
0000C2FC 1002                       		move.b	d2,d0
0000C2FE                            
0000C2FE                            Obj34_ActNumber:
0000C2FE 0C00 0007                  		cmpi.b	#7,d0
0000C302 6600                       		bne.s	Obj34_MakeSprite
0000C304 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C308 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C30E 6600                       		bne.s	Obj34_MakeSprite
0000C310 5300                       		subq.b	#1,d0
0000C312                            
0000C312                            Obj34_MakeSprite:
0000C312 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C316 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C31E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C324 137C 0078 0019             		move.b	#$78,$19(a1)
0000C32A 137C 0000 0001             		move.b	#0,1(a1)
0000C330 137C 0000 0018             		move.b	#0,$18(a1)
0000C336 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C33C 43E9 0040                  		lea	$40(a1),a1	; next object
0000C340 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C344                            
0000C344                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C344 7210                       		moveq	#$10,d1		; set horizontal speed
0000C346 3028 0030                  		move.w	$30(a0),d0
0000C34A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C34E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C350 6C00                       		bge.s	Obj34_Move
0000C352 4441                       		neg.w	d1
0000C354                            
0000C354                            Obj34_Move:
0000C354 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C358                            
0000C358                            loc_C3C8:
0000C358 3028 0008                  		move.w	8(a0),d0
0000C35C 6B00                       		bmi.s	locret_C3D8
0000C35E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C362 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C364 6000 0000                  		bra.w	DisplaySprite
0000C368                            ; ===========================================================================
0000C368                            
0000C368                            locret_C3D8:
0000C368 4E75                       		rts	
0000C36A                            ; ===========================================================================
0000C36A                            
0000C36A                            Obj34_Wait:				; XREF: Obj34_Index
0000C36A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C36E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C370 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C374 6000 0000                  		bra.w	DisplaySprite
0000C378                            ; ===========================================================================
0000C378                            
0000C378                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C378 4A28 0001                  		tst.b	1(a0)
0000C37C 6A00                       		bpl.s	Obj34_ChangeArt
0000C37E 7220                       		moveq	#$20,d1
0000C380 3028 0032                  		move.w	$32(a0),d0
0000C384 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C388 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C38A 6C00                       		bge.s	Obj34_Move2
0000C38C 4441                       		neg.w	d1
0000C38E                            
0000C38E                            Obj34_Move2:
0000C38E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C392 3028 0008                  		move.w	8(a0),d0
0000C396 6B00                       		bmi.s	locret_C412
0000C398 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C39C 6400                       		bcc.s	locret_C412	; if yes, branch
0000C39E 6000 0000                  		bra.w	DisplaySprite
0000C3A2                            ; ===========================================================================
0000C3A2                            
0000C3A2                            locret_C412:
0000C3A2 4E75                       		rts	
0000C3A4                            ; ===========================================================================
0000C3A4                            
0000C3A4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C3A4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C3AA 6600                       		bne.s	Obj34_Delete
0000C3AC 7002                       		moveq	#2,d0
0000C3AE 4EB9 0000 155E             		jsr	(LoadPLC).l	; load explosion patterns
0000C3B4 7000                       		moveq	#0,d0
0000C3B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3BA 0640 0015                  		addi.w	#$15,d0
0000C3BE 4EB9 0000 155E             		jsr	(LoadPLC).l	; load animal patterns
0000C3C4                            
0000C3C4                            Obj34_Delete:
0000C3C4 6000 0000                  		bra.w	DeleteObject
0000C3C8                            ; ===========================================================================
0000C3C8 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C3CA 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C3CC 00E4                       		dc.w $E4
0000C3CE 0206                       		dc.b 2,	6
0000C3D0 00EA                       		dc.w $EA
0000C3D2 0207                       		dc.b 2,	7
0000C3D4 00E0                       		dc.w $E0
0000C3D6 020A                       		dc.b 2,	$A
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            ; Title	card configuration data
0000C3D8                            ; Format:
0000C3D8                            ; 4 bytes per item (YYYY XXXX)
0000C3D8                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C3E8 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C3F8 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C408 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C418 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C428 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C438 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C448                            ; ===========================================================================
0000C448                            ; ---------------------------------------------------------------------------
0000C448                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C448                            ; ---------------------------------------------------------------------------
0000C448                            
0000C448                            Obj39:					; XREF: Obj_Index
0000C448 7000                       		moveq	#0,d0
0000C44A 1028 0024                  		move.b	$24(a0),d0
0000C44E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C452 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C456                            ; ===========================================================================
0000C456 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C458 0000                       		dc.w loc_C50C-Obj39_Index
0000C45A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C45C                            ; ===========================================================================
0000C45C                            
0000C45C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C45C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C460 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C462 4E75                       		rts	
0000C464                            ; ===========================================================================
0000C464                            
0000C464                            Obj39_Main:
0000C464 5428 0024                  		addq.b	#2,$24(a0)
0000C468 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C46E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C474 6700                       		beq.s	loc_C4EC	; if not, branch
0000C476 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C47C                            
0000C47C                            loc_C4EC:
0000C47C 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C482 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C48A 317C 855E 0002             		move.w	#$855E,2(a0)
0000C490 117C 0000 0001             		move.b	#0,1(a0)
0000C496 117C 0000 0018             		move.b	#0,$18(a0)
0000C49C                            
0000C49C                            loc_C50C:				; XREF: Obj39_Index
0000C49C 7210                       		moveq	#$10,d1		; set horizontal speed
0000C49E 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C4A4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C4A6 6500                       		bcs.s	Obj39_Move
0000C4A8 4441                       		neg.w	d1
0000C4AA                            
0000C4AA                            Obj39_Move:
0000C4AA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4AE 6000 0000                  		bra.w	DisplaySprite
0000C4B2                            ; ===========================================================================
0000C4B2                            
0000C4B2                            Obj39_SetWait:				; XREF: Obj39_Main
0000C4B2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C4B8 5428 0024                  		addq.b	#2,$24(a0)
0000C4BC 4E75                       		rts	
0000C4BE                            ; ===========================================================================
0000C4BE                            
0000C4BE                            Obj39_Wait:				; XREF: Obj39_Index
0000C4BE 1038 F605                  		move.b	($FFFFF605).w,d0
0000C4C2 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C4C6 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C4C8 0828 0000 001A             		btst	#0,$1A(a0)
0000C4CE 6600                       		bne.s	Obj39_Display
0000C4D0 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C4D4 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C4D6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C4DA 6000 0000                  		bra.w	DisplaySprite
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C4DE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C4E2 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C4E4 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C4EA 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C4EE 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C4F0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C4F6 6000                       		bra.s	Obj39_Display
0000C4F8                            ; ===========================================================================
0000C4F8                            
0000C4F8                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C4F8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C4FE                            
0000C4FE                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C4FE 6000 0000                  		bra.w	DisplaySprite
0000C502                            ; ===========================================================================
0000C502                            ; ---------------------------------------------------------------------------
0000C502                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C502                            ; ---------------------------------------------------------------------------
0000C502                            
0000C502                            Obj3A:					; XREF: Obj_Index
0000C502 7000                       		moveq	#0,d0
0000C504 1028 0024                  		move.b	$24(a0),d0
0000C508 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C50C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C510                            ; ===========================================================================
0000C510 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C512 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C514 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C516 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C518 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C51A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C51C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C51E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C520 0000                       		dc.w loc_C766-Obj3A_Index
0000C522                            ; ===========================================================================
0000C522                            
0000C522                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C522 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C526 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C528 4E75                       		rts	
0000C52A                            ; ===========================================================================
0000C52A                            
0000C52A                            Obj3A_Main:
0000C52A 2248                       		movea.l	a0,a1
0000C52C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C532 7206                       		moveq	#6,d1
0000C534                            
0000C534                            Obj3A_Loop:
0000C534 12BC 003A                  		move.b	#$3A,0(a1)
0000C538 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C53C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C540 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C544 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C548 135A 0024                  		move.b	(a2)+,$24(a1)
0000C54C 101A                       		move.b	(a2)+,d0
0000C54E 0C00 0006                  		cmpi.b	#6,d0
0000C552 6600                       		bne.s	loc_C5CA
0000C554 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C558                            
0000C558                            loc_C5CA:
0000C558 1340 001A                  		move.b	d0,$1A(a1)
0000C55C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C564 337C 8580 0002             		move.w	#$8580,2(a1)
0000C56A 137C 0000 0001             		move.b	#0,1(a1)
0000C570 43E9 0040                  		lea	$40(a1),a1
0000C574 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C578                            
0000C578                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C578 7210                       		moveq	#$10,d1		; set horizontal speed
0000C57A 3028 0030                  		move.w	$30(a0),d0
0000C57E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C582 6700                       		beq.s	loc_C61A	; if yes, branch
0000C584 6C00                       		bge.s	Obj3A_Move
0000C586 4441                       		neg.w	d1
0000C588                            
0000C588                            Obj3A_Move:
0000C588 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C58C                            
0000C58C                            loc_C5FE:				; XREF: loc_C61A
0000C58C 3028 0008                  		move.w	8(a0),d0
0000C590 6B00                       		bmi.s	locret_C60E
0000C592 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C596 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C598 6000 0000                  		bra.w	DisplaySprite
0000C59C                            ; ===========================================================================
0000C59C                            
0000C59C                            locret_C60E:
0000C59C 4E75                       		rts	
0000C59E                            ; ===========================================================================
0000C59E                            
0000C59E                            loc_C610:				; XREF: loc_C61A
0000C59E 117C 000E 0024             		move.b	#$E,$24(a0)
0000C5A4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C5A8                            ; ===========================================================================
0000C5A8                            
0000C5A8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C5A8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C5AE 67EE                       		beq.s	loc_C610
0000C5B0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C5B6 66D4                       		bne.s	loc_C5FE
0000C5B8 5428 0024                  		addq.b	#2,$24(a0)
0000C5BC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C5C2                            
0000C5C2                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C5C2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C5C6 6600                       		bne.s	Obj3A_Display
0000C5C8 5428 0024                  		addq.b	#2,$24(a0)
0000C5CC                            
0000C5CC                            Obj3A_Display:
0000C5CC 6000 0000                  		bra.w	DisplaySprite
0000C5D0                            ; ===========================================================================
0000C5D0                            
0000C5D0                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C5D0 6100 0000                  		bsr.w	DisplaySprite
0000C5D4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C5DA 7000                       		moveq	#0,d0
0000C5DC 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C5E0 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C5E2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C5E6 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C5EC                            
0000C5EC                            Obj3A_RingBonus:
0000C5EC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C5F0 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C5F2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C5F6 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C5FC                            
0000C5FC                            Obj3A_ChkBonus:
0000C5FC 4A40                       		tst.w	d0		; is there any bonus?
0000C5FE 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C600 303C 00C5                  		move.w	#$C5,d0
0000C604 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C60A 5428 0024                  		addq.b	#2,$24(a0)
0000C60E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C614 6600                       		bne.s	Obj3A_SetDelay
0000C616 5828 0024                  		addq.b	#4,$24(a0)
0000C61A                            
0000C61A                            Obj3A_SetDelay:
0000C61A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C620                            
0000C620                            locret_C692:
0000C620 4E75                       		rts	
0000C622                            ; ===========================================================================
0000C622                            
0000C622                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C622 4EB9 0000 0000             		jsr	AddPoints
0000C628 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C62C 0200 0003                  		andi.b	#3,d0
0000C630 66EE                       		bne.s	locret_C692
0000C632 303C 00CD                  		move.w	#$CD,d0
0000C636 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C63C                            ; ===========================================================================
0000C63C                            
0000C63C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C63C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C640 0240 0007                  		andi.w	#7,d0
0000C644 E748                       		lsl.w	#3,d0
0000C646 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C64A 0241 0003                  		andi.w	#3,d1
0000C64E D241                       		add.w	d1,d1
0000C650 D041                       		add.w	d1,d0
0000C652 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C656 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C65A 4A40                       		tst.w	d0
0000C65C 6600                       		bne.s	Obj3A_ChkSS
0000C65E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C664 6000                       		bra.s	Obj3A_Display2
0000C666                            ; ===========================================================================
0000C666                            
0000C666                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C666 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C66A 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C66E 6700                       		beq.s	loc_C6EA	; if not, branch
0000C670 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C676 6000                       		bra.s	Obj3A_Display2
0000C678                            ; ===========================================================================
0000C678                            
0000C678                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C678 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C67E                            
0000C67E                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C67E 6000 0000                  		bra.w	DisplaySprite
0000C682                            ; ===========================================================================
0000C682                            ; ---------------------------------------------------------------------------
0000C682                            ; Level	order array
0000C682                            ; ---------------------------------------------------------------------------
0000C682                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C6B2                            		even
0000C6B2                            ; ===========================================================================
0000C6B2                            
0000C6B2                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C6B2 7220                       		moveq	#$20,d1		; set horizontal speed
0000C6B4 3028 0032                  		move.w	$32(a0),d0
0000C6B8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C6BC 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C6BE 6C00                       		bge.s	Obj3A_Move2
0000C6C0 4441                       		neg.w	d1
0000C6C2                            
0000C6C2                            Obj3A_Move2:
0000C6C2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6C6 3028 0008                  		move.w	8(a0),d0
0000C6CA 6B00                       		bmi.s	locret_C748
0000C6CC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6D0 6400                       		bcc.s	locret_C748	; if yes, branch
0000C6D2 6000 0000                  		bra.w	DisplaySprite
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            locret_C748:
0000C6D6 4E75                       		rts	
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C6D8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6DE 6600 0000                  		bne.w	DeleteObject
0000C6E2 5428 0024                  		addq.b	#2,$24(a0)
0000C6E6 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C6EA 303C 008D                  		move.w	#$8D,d0
0000C6EE 4EF9 0000 1374             		jmp	(PlaySound).l	; play FZ music
0000C6F4                            ; ===========================================================================
0000C6F4                            
0000C6F4                            loc_C766:				; XREF: Obj3A_Index
0000C6F4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C6F8 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C6FE 6700 0000                  		beq.w	DeleteObject
0000C702 4E75                       		rts	
0000C704                            ; ===========================================================================
0000C704 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C70A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C70C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C712 0201                       		dc.b 2,	1
0000C714 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C71A 0206                       		dc.b 2,	6
0000C71C 0520 0120 00EC             		dc.w $520, $120, $EC
0000C722 0202                       		dc.b 2,	2
0000C724 0540 0120 00FC             		dc.w $540, $120, $FC
0000C72A 0203                       		dc.b 2,	3
0000C72C 0560 0120 010C             		dc.w $560, $120, $10C
0000C732 0204                       		dc.b 2,	4
0000C734 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C73A 0205                       		dc.b 2,	5
0000C73C                            ; ===========================================================================
0000C73C                            ; ---------------------------------------------------------------------------
0000C73C                            ; Object 7E - special stage results screen
0000C73C                            ; ---------------------------------------------------------------------------
0000C73C                            
0000C73C                            Obj7E:					; XREF: Obj_Index
0000C73C 7000                       		moveq	#0,d0
0000C73E 1028 0024                  		move.b	$24(a0),d0
0000C742 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C746 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C74A                            ; ===========================================================================
0000C74A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C74C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C74E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C750 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C752 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C754 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C756 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C758 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C75A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C75C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C75E 0000                       		dc.w loc_C91A-Obj7E_Index
0000C760                            ; ===========================================================================
0000C760                            
0000C760                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C760 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C764 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C766 4E75                       		rts	
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            Obj7E_Main:
0000C768 2248                       		movea.l	a0,a1
0000C76A 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C770 7203                       		moveq	#3,d1
0000C772 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C778 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C77A 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C77C                            
0000C77C                            Obj7E_Loop:
0000C77C 12BC 007E                  		move.b	#$7E,0(a1)
0000C780 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C784 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C788 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C78C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C790 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C794 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C79C 337C 8580 0002             		move.w	#$8580,2(a1)
0000C7A2 137C 0000 0001             		move.b	#0,1(a1)
0000C7A8 43E9 0040                  		lea	$40(a1),a1
0000C7AC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C7B0                            
0000C7B0 7007                       		moveq	#7,d0
0000C7B2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C7B6 6700                       		beq.s	loc_C842
0000C7B8 7000                       		moveq	#0,d0
0000C7BA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C7BE 6600                       		bne.s	loc_C842	; if not, branch
0000C7C0 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C7C2 317C 0018 0008             		move.w	#$18,8(a0)
0000C7C8 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C7CE                            
0000C7CE                            loc_C842:
0000C7CE 1140 001A                  		move.b	d0,$1A(a0)
0000C7D2                            
0000C7D2                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C7D2 7210                       		moveq	#$10,d1		; set horizontal speed
0000C7D4 3028 0030                  		move.w	$30(a0),d0
0000C7D8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C7DC 6700                       		beq.s	loc_C86C	; if yes, branch
0000C7DE 6C00                       		bge.s	Obj7E_Move
0000C7E0 4441                       		neg.w	d1
0000C7E2                            
0000C7E2                            Obj7E_Move:
0000C7E2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7E6                            
0000C7E6                            loc_C85A:				; XREF: loc_C86C
0000C7E6 3028 0008                  		move.w	8(a0),d0
0000C7EA 6B00                       		bmi.s	locret_C86A
0000C7EC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C7F0 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C7F2 6000 0000                  		bra.w	DisplaySprite
0000C7F6                            ; ===========================================================================
0000C7F6                            
0000C7F6                            locret_C86A:
0000C7F6 4E75                       		rts	
0000C7F8                            ; ===========================================================================
0000C7F8                            
0000C7F8                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C7F8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C7FE 66E6                       		bne.s	loc_C85A
0000C800 5428 0024                  		addq.b	#2,$24(a0)
0000C804 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C80A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C810                            
0000C810                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C810 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C814 6600                       		bne.s	Obj7E_Display
0000C816 5428 0024                  		addq.b	#2,$24(a0)
0000C81A                            
0000C81A                            Obj7E_Display:
0000C81A 6000 0000                  		bra.w	DisplaySprite
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C81E 6100 0000                  		bsr.w	DisplaySprite
0000C822 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C828 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C82C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C82E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C834 700A                       		moveq	#10,d0		; add 10 to score
0000C836 4EB9 0000 0000             		jsr	AddPoints
0000C83C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C840 0200 0003                  		andi.b	#3,d0
0000C844 6600                       		bne.s	locret_C8EA
0000C846 303C 00CD                  		move.w	#$CD,d0
0000C84A 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C850                            ; ===========================================================================
0000C850                            
0000C850                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C850 303C 00C5                  		move.w	#$C5,d0
0000C854 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C85A 5428 0024                  		addq.b	#2,$24(a0)
0000C85E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C864 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C86A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C86C 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C872 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C876                            
0000C876                            locret_C8EA:
0000C876 4E75                       		rts	
0000C878                            ; ===========================================================================
0000C878                            
0000C878                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C878 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C87E 6000 0000                  		bra.w	DisplaySprite
0000C882                            ; ===========================================================================
0000C882                            
0000C882                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C882 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C888 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C88E 303C 00BF                  		move.w	#$BF,d0
0000C892 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play continues music
0000C898 5428 0024                  		addq.b	#2,$24(a0)
0000C89C 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C8A2 6000 0000                  		bra.w	DisplaySprite
0000C8A6                            ; ===========================================================================
0000C8A6                            
0000C8A6                            loc_C91A:				; XREF: Obj7E_Index
0000C8A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C8AA 0200 000F                  		andi.b	#$F,d0
0000C8AE 6600                       		bne.s	Obj7E_Display2
0000C8B0 0868 0000 001A             		bchg	#0,$1A(a0)
0000C8B6                            
0000C8B6                            Obj7E_Display2:
0000C8B6 6000 0000                  		bra.w	DisplaySprite
0000C8BA                            ; ===========================================================================
0000C8BA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C8C0 0200                       		dc.b 2,	0		; rountine number, frame number
0000C8C2 0320 0120 0118             		dc.w $320, $120, $118
0000C8C8 0201                       		dc.b 2,	1
0000C8CA 0360 0120 0128             		dc.w $360, $120, $128
0000C8D0 0202                       		dc.b 2,	2
0000C8D2 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000C8D8 0203                       		dc.b 2,	3
0000C8DA 03A0 0120 0138             		dc.w $3A0, $120, $138
0000C8E0 0206                       		dc.b 2,	6
0000C8E2                            ; ===========================================================================
0000C8E2                            ; ---------------------------------------------------------------------------
0000C8E2                            ; Object 7F - chaos emeralds from the special stage results screen
0000C8E2                            ; ---------------------------------------------------------------------------
0000C8E2                            
0000C8E2                            Obj7F:					; XREF: Obj_Index
0000C8E2 7000                       		moveq	#0,d0
0000C8E4 1028 0024                  		move.b	$24(a0),d0
0000C8E8 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000C8EC 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000C8F0                            ; ===========================================================================
0000C8F0 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000C8F2 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000C8F4                            
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            ; X-axis positions for chaos emeralds
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000C900                            ; ===========================================================================
0000C900                            
0000C900                            Obj7F_Main:				; XREF: Obj7F_Index
0000C900 2248                       		movea.l	a0,a1
0000C902 45F9 0000 C8F4             		lea	(Obj7F_PosData).l,a2
0000C908 7400                       		moveq	#0,d2
0000C90A 7200                       		moveq	#0,d1
0000C90C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000C910 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000C912 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000C916                            
0000C916                            Obj7F_Loop:
0000C916 12BC 007F                  		move.b	#$7F,0(a1)
0000C91A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000C91E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000C924 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000C928 1633 2000                  		move.b	(a3,d2.w),d3
0000C92C 1343 001A                  		move.b	d3,$1A(a1)
0000C930 1343 001C                  		move.b	d3,$1C(a1)
0000C934 5202                       		addq.b	#1,d2
0000C936 5429 0024                  		addq.b	#2,$24(a1)
0000C93A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000C942 337C 8541 0002             		move.w	#$8541,2(a1)
0000C948 137C 0000 0001             		move.b	#0,1(a1)
0000C94E 43E9 0040                  		lea	$40(a1),a1	; next object
0000C952 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000C956                            
0000C956                            Obj7F_Flash:				; XREF: Obj7F_Index
0000C956 1028 001A                  		move.b	$1A(a0),d0
0000C95A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000C960 0C00 0006                  		cmpi.b	#6,d0
0000C964 6600                       		bne.s	Obj7F_Display
0000C966 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000C96C                            
0000C96C                            Obj7F_Display:
0000C96C 6000 0000                  		bra.w	DisplaySprite
0000C970                            ; ===========================================================================
0000C970                            ; ---------------------------------------------------------------------------
0000C970                            ; Sprite mappings - zone title cards
0000C970                            ; ---------------------------------------------------------------------------
0000C970 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000C972 0000                       		dc.w byte_CA2C-Map_obj34
0000C974 0000                       		dc.w byte_CA5A-Map_obj34
0000C976 0000                       		dc.w byte_CA7A-Map_obj34
0000C978 0000                       		dc.w byte_CAA8-Map_obj34
0000C97A 0000                       		dc.w byte_CADC-Map_obj34
0000C97C 0000                       		dc.w byte_CB10-Map_obj34
0000C97E 0000                       		dc.w byte_CB26-Map_obj34
0000C980 0000                       		dc.w byte_CB31-Map_obj34
0000C982 0000                       		dc.w byte_CB3C-Map_obj34
0000C984 0000                       		dc.w byte_CB47-Map_obj34
0000C986 0000                       		dc.w byte_CB8A-Map_obj34
0000C988 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000C989 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000C98E F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000C993 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000C998 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000C99D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000C9A2 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000C9A7 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000C9AC F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000C9B1 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000C9B6 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000C9B7 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000C9BC F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000C9C1 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000C9C6 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000C9CB F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000C9D0 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000C9D5 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000C9DA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000C9DF F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000C9E4 06                         byte_CA5A:	dc.b 6			; MARBLE
0000C9E5 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000C9EA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000C9EF F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000C9F4 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000C9F9 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000C9FE F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000CA03 00                         		dc.b 0
0000CA04 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000CA05 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000CA0A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000CA0F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000CA14 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000CA19 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000CA1E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000CA23 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000CA28 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000CA2D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000CA32 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000CA33 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CA38 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000CA3D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CA42 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CA47 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000CA4C F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000CA51 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000CA56 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000CA5B F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000CA60 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000CA65 00                         		dc.b 0
0000CA66 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000CA67 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CA6C F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000CA71 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CA76 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000CA7B F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000CA80 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000CA85 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000CA8A F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000CA8F F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000CA94 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000CA99 00                         		dc.b 0
0000CA9A 04                         byte_CB10:	dc.b 4			; ZONE
0000CA9B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CAA0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CAA5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CAAA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CAAF 00                         		dc.b 0
0000CAB0 02                         byte_CB26:	dc.b 2			; ACT 1
0000CAB1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAB6 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CABB 02                         byte_CB31:	dc.b 2			; ACT 2
0000CABC 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAC1 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CAC6 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CAC7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CACC F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CAD1 0D                         byte_CB47:	dc.b $D			; Oval
0000CAD2 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CAD7 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CADC EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CAE1 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CAE6 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CAEB 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CAF0 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CAF5 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CAFA EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CAFF F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CB04 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CB09 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CB0E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CB13 00                         		dc.b 0
0000CB14 05                         byte_CB8A:	dc.b 5			; FINAL
0000CB15 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CB1A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CB1F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CB24 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CB29 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CB2E                            		even
0000CB2E                            ; ---------------------------------------------------------------------------
0000CB2E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB2E                            ; ---------------------------------------------------------------------------
0000CB2E                            Map_obj39:
0000CB2E                            	include "_maps\obj39.asm"
0000CB2E                            ; ---------------------------------------------------------------------------
0000CB2E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB2E                            ; ---------------------------------------------------------------------------
0000CB2E 0000                       		dc.w byte_CBAC-Map_obj39
0000CB30 0000                       		dc.w byte_CBB7-Map_obj39
0000CB32 0000                       		dc.w byte_CBC2-Map_obj39
0000CB34 0000                       		dc.w byte_CBCD-Map_obj39
0000CB36 02                         byte_CBAC:	dc.b 2
0000CB37 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CB3C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CB41 02                         byte_CBB7:	dc.b 2
0000CB42 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CB47 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CB4C 02                         byte_CBC2:	dc.b 2
0000CB4D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CB52 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CB57 02                         byte_CBCD:	dc.b 2
0000CB58 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CB5D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CB62                            		even
0000CB62                            		even
0000CB62                            
0000CB62                            ; ---------------------------------------------------------------------------
0000CB62                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CB62                            ; ---------------------------------------------------------------------------
0000CB62 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CB64 0000                       		dc.w byte_CC13-Map_obj3A
0000CB66 0000                       		dc.w byte_CC32-Map_obj3A
0000CB68 0000                       		dc.w byte_CC51-Map_obj3A
0000CB6A 0000                       		dc.w byte_CC75-Map_obj3A
0000CB6C FF6F                       		dc.w byte_CB47-Map_obj3A
0000CB6E FF4E                       		dc.w byte_CB26-Map_obj3A
0000CB70 FF59                       		dc.w byte_CB31-Map_obj3A
0000CB72 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CB74 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CB75 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CB7A F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CB7F F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CB84 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CB89 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CB8E F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CB93 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CB98 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CB9D 06                         byte_CC13:	dc.b 6			; PASSED
0000CB9E F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CBA3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CBA8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CBAD F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CBB2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBB7 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CBBC 06                         byte_CC32:	dc.b 6			; SCORE
0000CBBD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CBC2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CBC7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CBCC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CBD1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CBD6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CBDB 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CBDC F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CBE1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CBE6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CBEB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CBF0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CBF5 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CBFA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CBFF 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CC00 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CC05 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CC0A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CC0F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CC14 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CC19 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CC1E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CC24 00                         		even
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24                            ; Sprite mappings - special stage results screen
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CC26 0000                       		dc.w byte_CCEE-Map_obj7E
0000CC28 0000                       		dc.w byte_CD0D-Map_obj7E
0000CC2A FEAD                       		dc.w byte_CB47-Map_obj7E
0000CC2C 0000                       		dc.w byte_CD31-Map_obj7E
0000CC2E 0000                       		dc.w byte_CD46-Map_obj7E
0000CC30 0000                       		dc.w byte_CD5B-Map_obj7E
0000CC32 0000                       		dc.w byte_CD6B-Map_obj7E
0000CC34 0000                       		dc.w byte_CDA8-Map_obj7E
0000CC36 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CC37 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CC3C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CC41 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CC46 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CC4B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CC50 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CC55 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CC5A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC5F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CC64 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CC69 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CC6E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CC73 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CC78 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CC79 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CC7E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CC83 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CC88 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CC8D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CC92 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CC97 07                         byte_CD0D:	dc.b 7
0000CC98 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CC9D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CCA2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CCA7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CCAC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CCB1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CCB6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CCBB 04                         byte_CD31:	dc.b 4
0000CCBC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCC1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCC6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CCCB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CCD0 04                         byte_CD46:	dc.b 4
0000CCD1 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCD6 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCDB F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CCE0 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CCE5 03                         byte_CD5B:	dc.b 3
0000CCE6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCEB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCF0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CCF5 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CCF6 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CCFB F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CD00 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CD05 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CD0A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CD0F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CD14 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CD19 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CD1E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CD23 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CD28 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CD2D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CD32 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CD33 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CD38 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CD3D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CD42 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CD47 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CD4C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CD51 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CD56 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CD5B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CD60 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CD65 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CD6A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CD6F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CD74 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CD79 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CD7E                            		even
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            Map_obj7F:
0000CD7E                            	include "_maps\obj7F.asm"
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E 0000                       		dc.w byte_CE02-Map_obj7F
0000CD80 0000                       		dc.w byte_CE08-Map_obj7F
0000CD82 0000                       		dc.w byte_CE0E-Map_obj7F
0000CD84 0000                       		dc.w byte_CE14-Map_obj7F
0000CD86 0000                       		dc.w byte_CE1A-Map_obj7F
0000CD88 0000                       		dc.w byte_CE20-Map_obj7F
0000CD8A 0000                       		dc.w byte_CE26-Map_obj7F
0000CD8C 01                         byte_CE02:	dc.b 1
0000CD8D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CD92 01                         byte_CE08:	dc.b 1
0000CD93 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CD98 01                         byte_CE0E:	dc.b 1
0000CD99 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CD9E 01                         byte_CE14:	dc.b 1
0000CD9F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CDA4 01                         byte_CE1A:	dc.b 1
0000CDA5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CDAA 01                         byte_CE20:	dc.b 1
0000CDAB F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CDB0 00                         byte_CE26:	dc.b 0			; Blank frame
0000CDB2 00                         		even
0000CDB2 00                         		even
0000CDB2                            
0000CDB2                            ; ===========================================================================
0000CDB2                            ; ---------------------------------------------------------------------------
0000CDB2                            ; Object 36 - spikes
0000CDB2                            ; ---------------------------------------------------------------------------
0000CDB2                            
0000CDB2                            Obj36:					; XREF: Obj_Index
0000CDB2 7000                       		moveq	#0,d0
0000CDB4 1028 0024                  		move.b	$24(a0),d0
0000CDB8 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CDBC 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CDC0                            ; ===========================================================================
0000CDC0 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CDC2 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CDC4                            
0000CDC4 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CDC6 0110                       		dc.b 1,	$10
0000CDC8 0204                       		dc.b 2,	4
0000CDCA 031C                       		dc.b 3,	$1C
0000CDCC 0440                       		dc.b 4,	$40
0000CDCE 0510                       		dc.b 5,	$10
0000CDD0                            ; ===========================================================================
0000CDD0                            
0000CDD0                            Obj36_Main:				; XREF: Obj36_Index
0000CDD0 5428 0024                  		addq.b	#2,$24(a0)
0000CDD4 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CDDC 317C 051B 0002             		move.w	#$51B,2(a0)
0000CDE2 0028 0004 0001             		ori.b	#4,1(a0)
0000CDE8 117C 0004 0018             		move.b	#4,$18(a0)
0000CDEE 1028 0028                  		move.b	$28(a0),d0
0000CDF2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CDF8 0240 00F0                  		andi.w	#$F0,d0
0000CDFC 43F9 0000 CDC4             		lea	(Obj36_Var).l,a1
0000CE02 E648                       		lsr.w	#3,d0
0000CE04 D2C0                       		adda.w	d0,a1
0000CE06 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CE0A 1159 0019                  		move.b	(a1)+,$19(a0)
0000CE0E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CE14 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CE1A                            
0000CE1A                            Obj36_Solid:				; XREF: Obj36_Index
0000CE1A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CE1E 343C 0004                  		move.w	#4,d2
0000CE22 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CE28 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CE2A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CE30 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CE32 343C 0014                  		move.w	#$14,d2
0000CE36                            
0000CE36                            ; Spikes types $1x and $5x face	sideways
0000CE36                            
0000CE36                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CE36 323C 001B                  		move.w	#$1B,d1
0000CE3A 3602                       		move.w	d2,d3
0000CE3C 5243                       		addq.w	#1,d3
0000CE3E 3828 0008                  		move.w	8(a0),d4
0000CE42 6100 0000                  		bsr.w	SolidObject
0000CE46 0828 0003 0022             		btst	#3,$22(a0)
0000CE4C 6600                       		bne.s	Obj36_Display
0000CE4E 0C44 0001                  		cmpi.w	#1,d4
0000CE52 6700                       		beq.s	Obj36_Hurt
0000CE54 6000                       		bra.s	Obj36_Display
0000CE56                            ; ===========================================================================
0000CE56                            
0000CE56                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CE56                            
0000CE56                            Obj36_Upright:				; XREF: Obj36_Solid
0000CE56 7200                       		moveq	#0,d1
0000CE58 1228 0019                  		move.b	$19(a0),d1
0000CE5C 0641 000B                  		addi.w	#$B,d1
0000CE60 343C 0010                  		move.w	#$10,d2
0000CE64 363C 0011                  		move.w	#$11,d3
0000CE68 3828 0008                  		move.w	8(a0),d4
0000CE6C 6100 0000                  		bsr.w	SolidObject
0000CE70 0828 0003 0022             		btst	#3,$22(a0)
0000CE76 6600                       		bne.s	Obj36_Hurt
0000CE78 4A44                       		tst.w	d4
0000CE7A 6A00                       		bpl.s	Obj36_Display
0000CE7C                            
0000CE7C                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CE7C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CE80 6600                       		bne.s	Obj36_Display	; if yes, branch
0000CE82 2F08                       		move.l	a0,-(sp)
0000CE84 2448                       		movea.l	a0,a2
0000CE86 41F8 D000                  		lea	($FFFFD000).w,a0
0000CE8A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CE90 6400                       		bcc.s	loc_CF20
0000CE92 2628 000C                  		move.l	$C(a0),d3
0000CE96 3028 0012                  		move.w	$12(a0),d0
0000CE9A 48C0                       		ext.l	d0
0000CE9C E180                       		asl.l	#8,d0
0000CE9E 9680                       		sub.l	d0,d3
0000CEA0 2143 000C                  		move.l	d3,$C(a0)
0000CEA4 4EB9 0000 0000             		jsr	HurtSonic
0000CEAA                            
0000CEAA                            loc_CF20:
0000CEAA 205F                       		movea.l	(sp)+,a0
0000CEAC                            
0000CEAC                            Obj36_Display:
0000CEAC 6100 0000                  		bsr.w	DisplaySprite
0000CEB0 3028 0030                  		move.w	$30(a0),d0
0000CEB4 0240 FF80                  		andi.w	#$FF80,d0
0000CEB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CEBC 0441 0080                  		subi.w	#$80,d1
0000CEC0 0241 FF80                  		andi.w	#$FF80,d1
0000CEC4 9041                       		sub.w	d1,d0
0000CEC6 0C40 0280                  		cmpi.w	#$280,d0
0000CECA 6200 0000                  		bhi.w	DeleteObject
0000CECE 4E75                       		rts	
0000CED0                            ; ===========================================================================
0000CED0                            
0000CED0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000CED0 7000                       		moveq	#0,d0
0000CED2 1028 0028                  		move.b	$28(a0),d0
0000CED6 D040                       		add.w	d0,d0
0000CED8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000CEDC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000CEE0                            ; ===========================================================================
0000CEE0 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000CEE2 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000CEE4 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000CEE6 4E75                       		rts			; don't move the object
0000CEE8                            ; ===========================================================================
0000CEE8                            
0000CEE8                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000CEE8 6100 0000                  		bsr.w	Obj36_Wait
0000CEEC 7000                       		moveq	#0,d0
0000CEEE 1028 0034                  		move.b	$34(a0),d0
0000CEF2 D068 0032                  		add.w	$32(a0),d0
0000CEF6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000CEFA 4E75                       		rts	
0000CEFC                            ; ===========================================================================
0000CEFC                            
0000CEFC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000CEFC 6100 0000                  		bsr.w	Obj36_Wait
0000CF00 7000                       		moveq	#0,d0
0000CF02 1028 0034                  		move.b	$34(a0),d0
0000CF06 D068 0030                  		add.w	$30(a0),d0
0000CF0A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000CF0E 4E75                       		rts	
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            Obj36_Wait:
0000CF10 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000CF14 6700                       		beq.s	loc_CFA4	; if yes, branch
0000CF16 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000CF1A 6600                       		bne.s	locret_CFE6
0000CF1C 4A28 0001                  		tst.b	1(a0)
0000CF20 6A00                       		bpl.s	locret_CFE6
0000CF22 303C 00B6                  		move.w	#$B6,d0
0000CF26 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000CF2C 6000                       		bra.s	locret_CFE6
0000CF2E                            ; ===========================================================================
0000CF2E                            
0000CF2E                            loc_CFA4:
0000CF2E 4A68 0036                  		tst.w	$36(a0)
0000CF32 6700                       		beq.s	loc_CFC6
0000CF34 0468 0800 0034             		subi.w	#$800,$34(a0)
0000CF3A 6400                       		bcc.s	locret_CFE6
0000CF3C 317C 0000 0034             		move.w	#0,$34(a0)
0000CF42 317C 0000 0036             		move.w	#0,$36(a0)
0000CF48 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF4E 6000                       		bra.s	locret_CFE6
0000CF50                            ; ===========================================================================
0000CF50                            
0000CF50                            loc_CFC6:
0000CF50 0668 0800 0034             		addi.w	#$800,$34(a0)
0000CF56 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000CF5C 6500                       		bcs.s	locret_CFE6
0000CF5E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000CF64 317C 0001 0036             		move.w	#1,$36(a0)
0000CF6A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF70                            
0000CF70                            locret_CFE6:
0000CF70 4E75                       		rts	
0000CF72                            ; ===========================================================================
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72                            ; Sprite mappings - spikes
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72                            Map_obj36:
0000CF72                            	include "_maps\obj36.asm"
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72                            ; Sprite mappings - spikes
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72 0000                       		dc.w byte_CFF4-Map_obj36
0000CF74 0000                       		dc.w byte_D004-Map_obj36
0000CF76 0000                       		dc.w byte_D014-Map_obj36
0000CF78 0000                       		dc.w byte_D01A-Map_obj36
0000CF7A 0000                       		dc.w byte_D02A-Map_obj36
0000CF7C 0000                       		dc.w byte_D049-Map_obj36
0000CF7E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000CF7F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000CF84 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CF89 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000CF8E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000CF8F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000CF94 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000CF99 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000CF9E 01                         byte_D014:	dc.b 1			; 1 spike
0000CF9F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFA4 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000CFA5 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000CFAA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFAF F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000CFB4 06                         byte_D02A:	dc.b 6			; 6 spikes
0000CFB5 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000CFBA F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000CFBF F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000CFC4 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000CFC9 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000CFCE F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000CFD3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000CFD4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000CFDA 00                         		even
0000CFDA 00                         		even
0000CFDA                            
0000CFDA                            ; ===========================================================================
0000CFDA                            ; ---------------------------------------------------------------------------
0000CFDA                            ; Object 3B - purple rock (GHZ)
0000CFDA                            ; ---------------------------------------------------------------------------
0000CFDA                            
0000CFDA                            Obj3B:					; XREF: Obj_Index
0000CFDA 7000                       		moveq	#0,d0
0000CFDC 1028 0024                  		move.b	$24(a0),d0
0000CFE0 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000CFE4 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000CFE8                            ; ===========================================================================
0000CFE8 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000CFEA 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000CFEC                            ; ===========================================================================
0000CFEC                            
0000CFEC                            Obj3B_Main:				; XREF: Obj3B_Index
0000CFEC 5428 0024                  		addq.b	#2,$24(a0)
0000CFF0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000CFF8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000CFFE 117C 0004 0001             		move.b	#4,1(a0)
0000D004 117C 0013 0019             		move.b	#$13,$19(a0)
0000D00A 117C 0004 0018             		move.b	#4,$18(a0)
0000D010                            
0000D010                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D010 323C 001B                  		move.w	#$1B,d1
0000D014 343C 0010                  		move.w	#$10,d2
0000D018 363C 0010                  		move.w	#$10,d3
0000D01C 3828 0008                  		move.w	8(a0),d4
0000D020 6100 0000                  		bsr.w	SolidObject
0000D024 6100 0000                  		bsr.w	DisplaySprite
0000D028 3028 0008                  		move.w	8(a0),d0
0000D02C 0240 FF80                  		andi.w	#$FF80,d0
0000D030 3238 F700                  		move.w	($FFFFF700).w,d1
0000D034 0441 0080                  		subi.w	#$80,d1
0000D038 0241 FF80                  		andi.w	#$FF80,d1
0000D03C 9041                       		sub.w	d1,d0
0000D03E 0C40 0280                  		cmpi.w	#$280,d0
0000D042 6200 0000                  		bhi.w	DeleteObject
0000D046 4E75                       		rts	
0000D048                            ; ===========================================================================
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            ; Object 49 - waterfall	sound effect (GHZ)
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            
0000D048                            Obj49:					; XREF: Obj_Index
0000D048 7000                       		moveq	#0,d0
0000D04A 1028 0024                  		move.b	$24(a0),d0
0000D04E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D052 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D056                            ; ===========================================================================
0000D056 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D058 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D05A                            ; ===========================================================================
0000D05A                            
0000D05A                            Obj49_Main:				; XREF: Obj49_Index
0000D05A 5428 0024                  		addq.b	#2,$24(a0)
0000D05E 117C 0004 0001             		move.b	#4,1(a0)
0000D064                            
0000D064                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D064 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D068 0200 003F                  		andi.b	#$3F,d0
0000D06C 6600                       		bne.s	Obj49_ChkDel
0000D06E 303C 00D0                  		move.w	#$D0,d0
0000D072 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D078                            
0000D078                            Obj49_ChkDel:
0000D078 3028 0008                  		move.w	8(a0),d0
0000D07C 0240 FF80                  		andi.w	#$FF80,d0
0000D080 3238 F700                  		move.w	($FFFFF700).w,d1
0000D084 0441 0080                  		subi.w	#$80,d1
0000D088 0241 FF80                  		andi.w	#$FF80,d1
0000D08C 9041                       		sub.w	d1,d0
0000D08E 0C40 0280                  		cmpi.w	#$280,d0
0000D092 6200 0000                  		bhi.w	DeleteObject
0000D096 4E75                       		rts	
0000D098                            ; ===========================================================================
0000D098                            ; ---------------------------------------------------------------------------
0000D098                            ; Sprite mappings - purple rock	(GHZ)
0000D098                            ; ---------------------------------------------------------------------------
0000D098                            Map_obj3B:
0000D098                            	include "_maps\obj3B.asm"
0000D098                            ; ---------------------------------------------------------------------------
0000D098                            ; Sprite mappings - purple rock	(GHZ)
0000D098                            ; ---------------------------------------------------------------------------
0000D098 0000                       		dc.w byte_D110-Map_obj3B
0000D09A 02                         byte_D110:	dc.b 2
0000D09B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D0A0 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D0A6 00                         		even
0000D0A6 00                         		even
0000D0A6                            
0000D0A6                            ; ===========================================================================
0000D0A6                            ; ---------------------------------------------------------------------------
0000D0A6                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D0A6                            ; ---------------------------------------------------------------------------
0000D0A6                            
0000D0A6                            Obj3C:					; XREF: Obj_Index
0000D0A6 7000                       		moveq	#0,d0
0000D0A8 1028 0024                  		move.b	$24(a0),d0
0000D0AC 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D0B0 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D0B4 6000 0000                  		bra.w	MarkObjGone
0000D0B8                            ; ===========================================================================
0000D0B8 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D0BA 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D0BC 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D0BE                            ; ===========================================================================
0000D0BE                            
0000D0BE                            Obj3C_Main:				; XREF: Obj3C_Index
0000D0BE 5428 0024                  		addq.b	#2,$24(a0)
0000D0C2 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D0CA 317C 450F 0002             		move.w	#$450F,2(a0)
0000D0D0 117C 0004 0001             		move.b	#4,1(a0)
0000D0D6 117C 0010 0019             		move.b	#$10,$19(a0)
0000D0DC 117C 0004 0018             		move.b	#4,$18(a0)
0000D0E2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D0E8                            
0000D0E8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D0E8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D0EE 323C 001B                  		move.w	#$1B,d1
0000D0F2 343C 0020                  		move.w	#$20,d2
0000D0F6 363C 0020                  		move.w	#$20,d3
0000D0FA 3828 0008                  		move.w	8(a0),d4
0000D0FE 6100 0000                  		bsr.w	SolidObject
0000D102 0828 0005 0022             		btst	#5,$22(a0)
0000D108 6600                       		bne.s	Obj3C_ChkRoll
0000D10A                            
0000D10A                            locret_D180:
0000D10A 4E75                       		rts	
0000D10C                            ; ===========================================================================
0000D10C                            
0000D10C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D10C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D112 66F6                       		bne.s	locret_D180	; if not, branch
0000D114 3028 0030                  		move.w	$30(a0),d0
0000D118 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D11A 4440                       		neg.w	d0
0000D11C                            
0000D11C                            Obj3C_ChkSpeed:
0000D11C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D120 65E8                       		bcs.s	locret_D180	; if not, branch
0000D122 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D128 5869 0008                  		addq.w	#4,8(a1)
0000D12C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D132 3028 0008                  		move.w	8(a0),d0
0000D136 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D13A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D13C 5169 0008                  		subq.w	#8,8(a1)
0000D140 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D146                            
0000D146                            Obj3C_Smash:
0000D146 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D14C 08A8 0005 0022             		bclr	#5,$22(a0)
0000D152 08A9 0005 0022             		bclr	#5,$22(a1)
0000D158 7207                       		moveq	#7,d1		; load 8 fragments
0000D15A 343C 0070                  		move.w	#$70,d2
0000D15E 6100                       		bsr.s	SmashObject
0000D160                            
0000D160                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D160 6100 0000                  		bsr.w	SpeedToPos
0000D164 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D16A 6100 0000                  		bsr.w	DisplaySprite
0000D16E 4A28 0001                  		tst.b	1(a0)
0000D172 6A00 0000                  		bpl.w	DeleteObject
0000D176 4E75                       		rts	
0000D178                            
0000D178                            ; ---------------------------------------------------------------------------
0000D178                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D178                            ; ---------------------------------------------------------------------------
0000D178                            
0000D178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D178                            
0000D178                            
0000D178                            SmashObject:				; XREF: Obj3C_Smash
0000D178 7000                       		moveq	#0,d0
0000D17A 1028 001A                  		move.b	$1A(a0),d0
0000D17E D040                       		add.w	d0,d0
0000D180 2668 0004                  		movea.l	4(a0),a3
0000D184 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D188 524B                       		addq.w	#1,a3
0000D18A 08E8 0005 0001             		bset	#5,1(a0)
0000D190 1810                       		move.b	0(a0),d4
0000D192 1A28 0001                  		move.b	1(a0),d5
0000D196 2248                       		movea.l	a0,a1
0000D198 6000                       		bra.s	Smash_LoadFrag
0000D19A                            ; ===========================================================================
0000D19A                            
0000D19A                            Smash_Loop:
0000D19A 6100 0000                  		bsr.w	SingleObjLoad
0000D19E 6600                       		bne.s	Smash_PlaySnd
0000D1A0 5A4B                       		addq.w	#5,a3
0000D1A2                            
0000D1A2                            Smash_LoadFrag:				; XREF: SmashObject
0000D1A2 137C 0004 0024             		move.b	#4,$24(a1)
0000D1A8 1284                       		move.b	d4,0(a1)
0000D1AA 234B 0004                  		move.l	a3,4(a1)
0000D1AE 1345 0001                  		move.b	d5,1(a1)
0000D1B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000D1B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D1BE 3368 0002 0002             		move.w	2(a0),2(a1)
0000D1C4 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D1CA 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D1D0 335C 0010                  		move.w	(a4)+,$10(a1)
0000D1D4 335C 0012                  		move.w	(a4)+,$12(a1)
0000D1D8 B3C8                       		cmpa.l	a0,a1
0000D1DA 6400                       		bcc.s	loc_D268
0000D1DC 2F08                       		move.l	a0,-(sp)
0000D1DE 2049                       		movea.l	a1,a0
0000D1E0 6100 0000                  		bsr.w	SpeedToPos
0000D1E4 D568 0012                  		add.w	d2,$12(a0)
0000D1E8 205F                       		movea.l	(sp)+,a0
0000D1EA 6100 0000                  		bsr.w	DisplaySprite2
0000D1EE                            
0000D1EE                            loc_D268:
0000D1EE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D1F2                            
0000D1F2                            Smash_PlaySnd:
0000D1F2 303C 00CB                  		move.w	#$CB,d0
0000D1F6 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D1FC                            ; End of function SmashObject
0000D1FC                            
0000D1FC                            ; ===========================================================================
0000D1FC                            ; Smashed block	fragment speeds
0000D1FC                            ;
0000D1FC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D200 0600 FF00                  		dc.w $600, $FF00
0000D204 0600 0100                  		dc.w $600, $100
0000D208 0400 0500                  		dc.w $400, $500
0000D20C 0600 FA00                  		dc.w $600, $FA00
0000D210 0800 FE00                  		dc.w $800, $FE00
0000D214 0800 0200                  		dc.w $800, $200
0000D218 0600 0600                  		dc.w $600, $600
0000D21C                            
0000D21C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D220 F800 FE00                  		dc.w $F800, $FE00
0000D224 F800 0200                  		dc.w $F800, $200
0000D228 FA00 0600                  		dc.w $FA00, $600
0000D22C FC00 FB00                  		dc.w $FC00, $FB00
0000D230 FA00 FF00                  		dc.w $FA00, $FF00
0000D234 FA00 0100                  		dc.w $FA00, $100
0000D238 FC00 0500                  		dc.w $FC00, $500
0000D23C                            ; ---------------------------------------------------------------------------
0000D23C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D23C                            ; ---------------------------------------------------------------------------
0000D23C                            Map_obj3C:
0000D23C                            	include "_maps\obj3C.asm"
0000D23C                            ; ---------------------------------------------------------------------------
0000D23C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D23C                            ; ---------------------------------------------------------------------------
0000D23C 0000                       		dc.w byte_D2BC-Map_obj3C
0000D23E 0000                       		dc.w byte_D2E5-Map_obj3C
0000D240 0000                       		dc.w byte_D30E-Map_obj3C
0000D242 08                         byte_D2BC:	dc.b 8
0000D243 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D248 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D24D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D252 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D257 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D25C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D261 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D266 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D26B 08                         byte_D2E5:	dc.b 8
0000D26C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D271 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D276 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D27B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D280 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D285 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D28A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D28F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D294 08                         byte_D30E:	dc.b 8
0000D295 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D29A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D29F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D2A4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D2A9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D2AE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D2B3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D2B8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D2BE 00                         		even
0000D2BE 00                         		even
0000D2BE                            
0000D2BE                            ; ---------------------------------------------------------------------------
0000D2BE                            ; Object code loading subroutine
0000D2BE                            ; ---------------------------------------------------------------------------
0000D2BE                            
0000D2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2BE                            
0000D2BE                            
0000D2BE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D2BE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D2C2 7E7F                       		moveq	#$7F,d7
0000D2C4 7000                       		moveq	#0,d0
0000D2C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D2CC 6400                       		bcc.s	loc_D362
0000D2CE                            
0000D2CE                            loc_D348:
0000D2CE 1010                       		move.b	(a0),d0		; load object number from RAM
0000D2D0 6700                       		beq.s	loc_D358
0000D2D2 D040                       		add.w	d0,d0
0000D2D4 D040                       		add.w	d0,d0
0000D2D6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D2DA 4E91                       		jsr	(a1)		; run the object's code
0000D2DC 7000                       		moveq	#0,d0
0000D2DE                            
0000D2DE                            loc_D358:
0000D2DE 41E8 0040                  		lea	$40(a0),a0	; next object
0000D2E2 51CF FFEA                  		dbf	d7,loc_D348
0000D2E6 4E75                       		rts	
0000D2E8                            ; ===========================================================================
0000D2E8                            
0000D2E8                            loc_D362:
0000D2E8 7E1F                       		moveq	#$1F,d7
0000D2EA 61E2                       		bsr.s	loc_D348
0000D2EC 7E5F                       		moveq	#$5F,d7
0000D2EE                            
0000D2EE                            loc_D368:
0000D2EE 7000                       		moveq	#0,d0
0000D2F0 1010                       		move.b	(a0),d0
0000D2F2 6700                       		beq.s	loc_D378
0000D2F4 4A28 0001                  		tst.b	1(a0)
0000D2F8 6A00                       		bpl.s	loc_D378
0000D2FA 6100 0000                  		bsr.w	DisplaySprite
0000D2FE                            
0000D2FE                            loc_D378:
0000D2FE 41E8 0040                  		lea	$40(a0),a0
0000D302                            
0000D302                            loc_D37C:
0000D302 51CF FFEA                  		dbf	d7,loc_D368
0000D306 4E75                       		rts	
0000D308                            ; End of function ObjectsLoad
0000D308                            
0000D308                            ; ===========================================================================
0000D308                            ; ---------------------------------------------------------------------------
0000D308                            ; Object pointers
0000D308                            ; ---------------------------------------------------------------------------
0000D308                            Obj_Index:
0000D308                            	include "_inc\Object pointers.asm"
0000D308                            ; ---------------------------------------------------------------------------
0000D308                            ; Object pointers
0000D308                            ; ---------------------------------------------------------------------------
0000D308 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D318 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D328 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D338 0000 0000 0000 A5BA 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D348 0000 72F4 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D358 0000 791A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D368 0000 8168 0000 81D0 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D378 0000 881A 0000 8B08 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D388 0000 0000 0000 978C 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D398 0000 9ACE 0000 A0BA 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D3A8 0000 93C4 0000 88F0 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D3B8 0000 AC42 0000 A2A0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D3C8 0000 B614 0000 BCC2 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D3D8 0000 B178 0000 CDB2 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D3E8 0000 C448 0000 C502 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D3F8 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D408 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D418 0000 B930 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D428 0000 D048 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D438 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D448 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D458 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D468 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D478 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D488 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D498 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D4A8 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D4B8 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D4C8 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D4D8 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D4E8 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D4F8 0000 0000 0000 C73C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D508 0000 4F2E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D518 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D528 0000 55E8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D528 0000 55E8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D538                            
0000D538                            ; ---------------------------------------------------------------------------
0000D538                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D538                            ; ---------------------------------------------------------------------------
0000D538                            
0000D538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D538                            
0000D538                            
0000D538                            ObjectFall:
0000D538 2428 0008                  		move.l	8(a0),d2
0000D53C 2628 000C                  		move.l	$C(a0),d3
0000D540 3028 0010                  		move.w	$10(a0),d0
0000D544 48C0                       		ext.l	d0
0000D546 E180                       		asl.l	#8,d0
0000D548 D480                       		add.l	d0,d2
0000D54A 3028 0012                  		move.w	$12(a0),d0
0000D54E 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D554 48C0                       		ext.l	d0
0000D556 E180                       		asl.l	#8,d0
0000D558 D680                       		add.l	d0,d3
0000D55A 2142 0008                  		move.l	d2,8(a0)
0000D55E 2143 000C                  		move.l	d3,$C(a0)
0000D562 4E75                       		rts	
0000D564                            ; End of function ObjectFall
0000D564                            
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            ; Subroutine translating object	speed to update	object position
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            
0000D564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D564                            
0000D564                            
0000D564                            SpeedToPos:
0000D564 2428 0008                  		move.l	8(a0),d2
0000D568 2628 000C                  		move.l	$C(a0),d3
0000D56C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D570 48C0                       		ext.l	d0
0000D572 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D574 D480                       		add.l	d0,d2		; add to x-axis	position
0000D576 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D57A 48C0                       		ext.l	d0
0000D57C E180                       		asl.l	#8,d0		; multiply by $100
0000D57E D680                       		add.l	d0,d3		; add to y-axis	position
0000D580 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D584 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D588 4E75                       		rts	
0000D58A                            ; End of function SpeedToPos
0000D58A                            
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            
0000D58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D58A                            
0000D58A                            
0000D58A                            DisplaySprite:
0000D58A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D58E 3028 0018                  		move.w	$18(a0),d0
0000D592 E248                       		lsr.w	#1,d0
0000D594 0240 0380                  		andi.w	#$380,d0
0000D598 D2C0                       		adda.w	d0,a1
0000D59A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D59E 6400                       		bcc.s	locret_D620
0000D5A0 5451                       		addq.w	#2,(a1)
0000D5A2 D2D1                       		adda.w	(a1),a1
0000D5A4 3288                       		move.w	a0,(a1)
0000D5A6                            
0000D5A6                            locret_D620:
0000D5A6 4E75                       		rts	
0000D5A8                            ; End of function DisplaySprite
0000D5A8                            
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8                            
0000D5A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5A8                            
0000D5A8                            
0000D5A8                            DisplaySprite2:
0000D5A8 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D5AC 3029 0018                  		move.w	$18(a1),d0
0000D5B0 E248                       		lsr.w	#1,d0
0000D5B2 0240 0380                  		andi.w	#$380,d0
0000D5B6 D4C0                       		adda.w	d0,a2
0000D5B8 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D5BC 6400                       		bcc.s	locret_D63E
0000D5BE 5452                       		addq.w	#2,(a2)
0000D5C0 D4D2                       		adda.w	(a2),a2
0000D5C2 3489                       		move.w	a1,(a2)
0000D5C4                            
0000D5C4                            locret_D63E:
0000D5C4 4E75                       		rts	
0000D5C6                            ; End of function DisplaySprite2
0000D5C6                            
0000D5C6                            ; ---------------------------------------------------------------------------
0000D5C6                            ; Subroutine to	delete an object
0000D5C6                            ; ---------------------------------------------------------------------------
0000D5C6                            
0000D5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5C6                            
0000D5C6                            
0000D5C6                            DeleteObject:
0000D5C6 2248                       		movea.l	a0,a1
0000D5C8                            
0000D5C8                            DeleteObject2:
0000D5C8 7200                       		moveq	#0,d1
0000D5CA 700F                       		moveq	#$F,d0
0000D5CC                            
0000D5CC                            loc_D646:
0000D5CC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D5CE 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D5D2 4E75                       		rts	
0000D5D4                            ; End of function DeleteObject
0000D5D4                            
0000D5D4                            ; ===========================================================================
0000D5D4 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D5D8 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D5DC 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D5E0 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4                            
0000D5E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5E4                            
0000D5E4                            
0000D5E4                            BuildSprites:				; XREF: TitleScreen; et al
0000D5E4 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D5E8 7A00                       		moveq	#0,d5
0000D5EA 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D5EE 7E07                       		moveq	#7,d7
0000D5F0                            
0000D5F0                            loc_D66A:
0000D5F0 4A54                       		tst.w	(a4)
0000D5F2 6700 0000                  		beq.w	loc_D72E
0000D5F6 7C02                       		moveq	#2,d6
0000D5F8                            
0000D5F8                            loc_D672:
0000D5F8 3074 6000                  		movea.w	(a4,d6.w),a0
0000D5FC 4A10                       		tst.b	(a0)
0000D5FE 6700 0000                  		beq.w	loc_D726
0000D602 08A8 0007 0001             		bclr	#7,1(a0)
0000D608 1028 0001                  		move.b	1(a0),d0
0000D60C 1800                       		move.b	d0,d4
0000D60E 0240 000C                  		andi.w	#$C,d0
0000D612 6700                       		beq.s	loc_D6DE
0000D614 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D618 7000                       		moveq	#0,d0
0000D61A 1028 0019                  		move.b	$19(a0),d0
0000D61E 3628 0008                  		move.w	8(a0),d3
0000D622 9651                       		sub.w	(a1),d3
0000D624 3203                       		move.w	d3,d1
0000D626 D240                       		add.w	d0,d1
0000D628 6B00 0000                  		bmi.w	loc_D726
0000D62C 3203                       		move.w	d3,d1
0000D62E 9240                       		sub.w	d0,d1
0000D630 0C41 0140                  		cmpi.w	#$140,d1
0000D634 6C00                       		bge.s	loc_D726
0000D636 0643 0080                  		addi.w	#$80,d3
0000D63A 0804 0004                  		btst	#4,d4
0000D63E 6700                       		beq.s	loc_D6E8
0000D640 7000                       		moveq	#0,d0
0000D642 1028 0016                  		move.b	$16(a0),d0
0000D646 3428 000C                  		move.w	$C(a0),d2
0000D64A 9469 0004                  		sub.w	4(a1),d2
0000D64E 3202                       		move.w	d2,d1
0000D650 D240                       		add.w	d0,d1
0000D652 6B00                       		bmi.s	loc_D726
0000D654 3202                       		move.w	d2,d1
0000D656 9240                       		sub.w	d0,d1
0000D658 0C41 00E0                  		cmpi.w	#$E0,d1
0000D65C 6C00                       		bge.s	loc_D726
0000D65E 0642 0080                  		addi.w	#$80,d2
0000D662 6000                       		bra.s	loc_D700
0000D664                            ; ===========================================================================
0000D664                            
0000D664                            loc_D6DE:
0000D664 3428 000A                  		move.w	$A(a0),d2
0000D668 3628 0008                  		move.w	8(a0),d3
0000D66C 6000                       		bra.s	loc_D700
0000D66E                            ; ===========================================================================
0000D66E                            
0000D66E                            loc_D6E8:
0000D66E 3428 000C                  		move.w	$C(a0),d2
0000D672 9469 0004                  		sub.w	4(a1),d2
0000D676 0642 0080                  		addi.w	#$80,d2
0000D67A 0C42 0060                  		cmpi.w	#$60,d2
0000D67E 6500                       		bcs.s	loc_D726
0000D680 0C42 0180                  		cmpi.w	#$180,d2
0000D684 6400                       		bcc.s	loc_D726
0000D686                            
0000D686                            loc_D700:
0000D686 2268 0004                  		movea.l	4(a0),a1
0000D68A 7200                       		moveq	#0,d1
0000D68C 0804 0005                  		btst	#5,d4
0000D690 6600                       		bne.s	loc_D71C
0000D692 1228 001A                  		move.b	$1A(a0),d1
0000D696 D201                       		add.b	d1,d1
0000D698 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D69C 1219                       		move.b	(a1)+,d1
0000D69E 5301                       		subq.b	#1,d1
0000D6A0 6B00                       		bmi.s	loc_D720
0000D6A2                            
0000D6A2                            loc_D71C:
0000D6A2 6100 0000                  		bsr.w	sub_D750
0000D6A6                            
0000D6A6                            loc_D720:
0000D6A6 08E8 0007 0001             		bset	#7,1(a0)
0000D6AC                            
0000D6AC                            loc_D726:
0000D6AC 5446                       		addq.w	#2,d6
0000D6AE 5554                       		subq.w	#2,(a4)
0000D6B0 6600 FF46                  		bne.w	loc_D672
0000D6B4                            
0000D6B4                            loc_D72E:
0000D6B4 49EC 0080                  		lea	$80(a4),a4
0000D6B8 51CF FF36                  		dbf	d7,loc_D66A
0000D6BC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D6C0 0C05 0050                  		cmpi.b	#$50,d5
0000D6C4 6700                       		beq.s	loc_D748
0000D6C6 24BC 0000 0000             		move.l	#0,(a2)
0000D6CC 4E75                       		rts	
0000D6CE                            ; ===========================================================================
0000D6CE                            
0000D6CE                            loc_D748:
0000D6CE 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D6D4 4E75                       		rts	
0000D6D6                            ; End of function BuildSprites
0000D6D6                            
0000D6D6                            
0000D6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6D6                            
0000D6D6                            
0000D6D6                            sub_D750:				; XREF: BuildSprites
0000D6D6 3668 0002                  		movea.w	2(a0),a3
0000D6DA 0804 0000                  		btst	#0,d4
0000D6DE 6600                       		bne.s	loc_D796
0000D6E0 0804 0001                  		btst	#1,d4
0000D6E4 6600 0000                  		bne.w	loc_D7E4
0000D6E8                            ; End of function sub_D750
0000D6E8                            
0000D6E8                            
0000D6E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6E8                            
0000D6E8                            
0000D6E8                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D6E8 0C05 0050                  		cmpi.b	#$50,d5
0000D6EC 6700                       		beq.s	locret_D794
0000D6EE 1019                       		move.b	(a1)+,d0
0000D6F0 4880                       		ext.w	d0
0000D6F2 D042                       		add.w	d2,d0
0000D6F4 34C0                       		move.w	d0,(a2)+
0000D6F6 14D9                       		move.b	(a1)+,(a2)+
0000D6F8 5205                       		addq.b	#1,d5
0000D6FA 14C5                       		move.b	d5,(a2)+
0000D6FC 1019                       		move.b	(a1)+,d0
0000D6FE E148                       		lsl.w	#8,d0
0000D700 1019                       		move.b	(a1)+,d0
0000D702 D04B                       		add.w	a3,d0
0000D704 34C0                       		move.w	d0,(a2)+
0000D706 1019                       		move.b	(a1)+,d0
0000D708 4880                       		ext.w	d0
0000D70A D043                       		add.w	d3,d0
0000D70C 0240 01FF                  		andi.w	#$1FF,d0
0000D710 6600                       		bne.s	loc_D78E
0000D712 5240                       		addq.w	#1,d0
0000D714                            
0000D714                            loc_D78E:
0000D714 34C0                       		move.w	d0,(a2)+
0000D716 51C9 FFD0                  		dbf	d1,sub_D762
0000D71A                            
0000D71A                            locret_D794:
0000D71A 4E75                       		rts	
0000D71C                            ; End of function sub_D762
0000D71C                            
0000D71C                            ; ===========================================================================
0000D71C                            
0000D71C                            loc_D796:
0000D71C 0804 0001                  		btst	#1,d4
0000D720 6600 0000                  		bne.w	loc_D82A
0000D724                            
0000D724                            loc_D79E:
0000D724 0C05 0050                  		cmpi.b	#$50,d5
0000D728 6700                       		beq.s	locret_D7E2
0000D72A 1019                       		move.b	(a1)+,d0
0000D72C 4880                       		ext.w	d0
0000D72E D042                       		add.w	d2,d0
0000D730 34C0                       		move.w	d0,(a2)+
0000D732 1819                       		move.b	(a1)+,d4
0000D734 14C4                       		move.b	d4,(a2)+
0000D736 5205                       		addq.b	#1,d5
0000D738 14C5                       		move.b	d5,(a2)+
0000D73A 1019                       		move.b	(a1)+,d0
0000D73C E148                       		lsl.w	#8,d0
0000D73E 1019                       		move.b	(a1)+,d0
0000D740 D04B                       		add.w	a3,d0
0000D742 0A40 0800                  		eori.w	#$800,d0
0000D746 34C0                       		move.w	d0,(a2)+
0000D748 1019                       		move.b	(a1)+,d0
0000D74A 4880                       		ext.w	d0
0000D74C 4440                       		neg.w	d0
0000D74E D804                       		add.b	d4,d4
0000D750 0244 0018                  		andi.w	#$18,d4
0000D754 5044                       		addq.w	#8,d4
0000D756 9044                       		sub.w	d4,d0
0000D758 D043                       		add.w	d3,d0
0000D75A 0240 01FF                  		andi.w	#$1FF,d0
0000D75E 6600                       		bne.s	loc_D7DC
0000D760 5240                       		addq.w	#1,d0
0000D762                            
0000D762                            loc_D7DC:
0000D762 34C0                       		move.w	d0,(a2)+
0000D764 51C9 FFBE                  		dbf	d1,loc_D79E
0000D768                            
0000D768                            locret_D7E2:
0000D768 4E75                       		rts	
0000D76A                            ; ===========================================================================
0000D76A                            
0000D76A                            loc_D7E4:				; XREF: sub_D750
0000D76A 0C05 0050                  		cmpi.b	#$50,d5
0000D76E 6700                       		beq.s	locret_D828
0000D770 1019                       		move.b	(a1)+,d0
0000D772 1811                       		move.b	(a1),d4
0000D774 4880                       		ext.w	d0
0000D776 4440                       		neg.w	d0
0000D778 E70C                       		lsl.b	#3,d4
0000D77A 0244 0018                  		andi.w	#$18,d4
0000D77E 5044                       		addq.w	#8,d4
0000D780 9044                       		sub.w	d4,d0
0000D782 D042                       		add.w	d2,d0
0000D784 34C0                       		move.w	d0,(a2)+
0000D786 14D9                       		move.b	(a1)+,(a2)+
0000D788 5205                       		addq.b	#1,d5
0000D78A 14C5                       		move.b	d5,(a2)+
0000D78C 1019                       		move.b	(a1)+,d0
0000D78E E148                       		lsl.w	#8,d0
0000D790 1019                       		move.b	(a1)+,d0
0000D792 D04B                       		add.w	a3,d0
0000D794 0A40 1000                  		eori.w	#$1000,d0
0000D798 34C0                       		move.w	d0,(a2)+
0000D79A 1019                       		move.b	(a1)+,d0
0000D79C 4880                       		ext.w	d0
0000D79E D043                       		add.w	d3,d0
0000D7A0 0240 01FF                  		andi.w	#$1FF,d0
0000D7A4 6600                       		bne.s	loc_D822
0000D7A6 5240                       		addq.w	#1,d0
0000D7A8                            
0000D7A8                            loc_D822:
0000D7A8 34C0                       		move.w	d0,(a2)+
0000D7AA 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D7AE                            
0000D7AE                            locret_D828:
0000D7AE 4E75                       		rts	
0000D7B0                            ; ===========================================================================
0000D7B0                            
0000D7B0                            loc_D82A:
0000D7B0 0C05 0050                  		cmpi.b	#$50,d5
0000D7B4 6700                       		beq.s	locret_D87C
0000D7B6 1019                       		move.b	(a1)+,d0
0000D7B8 1811                       		move.b	(a1),d4
0000D7BA 4880                       		ext.w	d0
0000D7BC 4440                       		neg.w	d0
0000D7BE E70C                       		lsl.b	#3,d4
0000D7C0 0244 0018                  		andi.w	#$18,d4
0000D7C4 5044                       		addq.w	#8,d4
0000D7C6 9044                       		sub.w	d4,d0
0000D7C8 D042                       		add.w	d2,d0
0000D7CA 34C0                       		move.w	d0,(a2)+
0000D7CC 1819                       		move.b	(a1)+,d4
0000D7CE 14C4                       		move.b	d4,(a2)+
0000D7D0 5205                       		addq.b	#1,d5
0000D7D2 14C5                       		move.b	d5,(a2)+
0000D7D4 1019                       		move.b	(a1)+,d0
0000D7D6 E148                       		lsl.w	#8,d0
0000D7D8 1019                       		move.b	(a1)+,d0
0000D7DA D04B                       		add.w	a3,d0
0000D7DC 0A40 1800                  		eori.w	#$1800,d0
0000D7E0 34C0                       		move.w	d0,(a2)+
0000D7E2 1019                       		move.b	(a1)+,d0
0000D7E4 4880                       		ext.w	d0
0000D7E6 4440                       		neg.w	d0
0000D7E8 D804                       		add.b	d4,d4
0000D7EA 0244 0018                  		andi.w	#$18,d4
0000D7EE 5044                       		addq.w	#8,d4
0000D7F0 9044                       		sub.w	d4,d0
0000D7F2 D043                       		add.w	d3,d0
0000D7F4 0240 01FF                  		andi.w	#$1FF,d0
0000D7F8 6600                       		bne.s	loc_D876
0000D7FA 5240                       		addq.w	#1,d0
0000D7FC                            
0000D7FC                            loc_D876:
0000D7FC 34C0                       		move.w	d0,(a2)+
0000D7FE 51C9 FFB0                  		dbf	d1,loc_D82A
0000D802                            
0000D802                            locret_D87C:
0000D802 4E75                       		rts	
0000D804                            ; ---------------------------------------------------------------------------
0000D804                            ; Subroutine to	check if an object is on the screen
0000D804                            ; ---------------------------------------------------------------------------
0000D804                            
0000D804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D804                            
0000D804                            
0000D804                            ChkObjOnScreen:
0000D804 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D808 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D80C 6B00                       		bmi.s	NotOnScreen
0000D80E 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D812 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D814                            
0000D814 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D818 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D81C 6B00                       		bmi.s	NotOnScreen
0000D81E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D822 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D824                            
0000D824 7000                       		moveq	#0,d0		; set flag to 0
0000D826 4E75                       		rts	
0000D828                            ; ===========================================================================
0000D828                            
0000D828                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D828 7001                       		moveq	#1,d0		; set flag to 1
0000D82A 4E75                       		rts	
0000D82C                            ; End of function ChkObjOnScreen
0000D82C                            
0000D82C                            
0000D82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D82C                            
0000D82C                            
0000D82C                            ChkObjOnScreen2:
0000D82C 7200                       		moveq	#0,d1
0000D82E 1228 0019                  		move.b	$19(a0),d1
0000D832 3028 0008                  		move.w	8(a0),d0
0000D836 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D83A D041                       		add.w	d1,d0
0000D83C 6B00                       		bmi.s	NotOnScreen2
0000D83E D241                       		add.w	d1,d1
0000D840 9041                       		sub.w	d1,d0
0000D842 0C40 0140                  		cmpi.w	#320,d0
0000D846 6C00                       		bge.s	NotOnScreen2
0000D848                            
0000D848 3228 000C                  		move.w	$C(a0),d1
0000D84C 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D850 6B00                       		bmi.s	NotOnScreen2
0000D852 0C41 00E0                  		cmpi.w	#224,d1
0000D856 6C00                       		bge.s	NotOnScreen2
0000D858                            
0000D858 7000                       		moveq	#0,d0
0000D85A 4E75                       		rts	
0000D85C                            ; ===========================================================================
0000D85C                            
0000D85C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D85C 7001                       		moveq	#1,d0
0000D85E 4E75                       		rts	
0000D860                            ; End of function ChkObjOnScreen2
0000D860                            
0000D860                            ; ---------------------------------------------------------------------------
0000D860                            ; Subroutine to	load a level's objects
0000D860                            ; ---------------------------------------------------------------------------
0000D860                            
0000D860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D860                            
0000D860                            
0000D860                            ObjPosLoad:				; XREF: Level; et al
0000D860 7000                       		moveq	#0,d0
0000D862 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D866 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D86A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D86E                            ; End of function ObjPosLoad
0000D86E                            
0000D86E                            ; ===========================================================================
0000D86E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D870 0000                       		dc.w OPL_Next-OPL_Index
0000D872                            ; ===========================================================================
0000D872                            
0000D872                            OPL_Main:				; XREF: OPL_Index
0000D872 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D876 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D87A ED08                       		lsl.b	#6,d0
0000D87C E848                       		lsr.w	#4,d0
0000D87E 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D884 2248                       		movea.l	a0,a1
0000D886 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D88A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D88E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D892 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D896 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D89A 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D89E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8A2 34FC 0101                  		move.w	#$101,(a2)+
0000D8A6 303C 005E                  		move.w	#$5E,d0
0000D8AA                            
0000D8AA                            OPL_ClrList:
0000D8AA 429A                       		clr.l	(a2)+
0000D8AC 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D8B0                            
0000D8B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8B4 7400                       		moveq	#0,d2
0000D8B6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D8BA 0446 0080                  		subi.w	#$80,d6
0000D8BE 6400                       		bcc.s	loc_D93C
0000D8C0 7C00                       		moveq	#0,d6
0000D8C2                            
0000D8C2                            loc_D93C:
0000D8C2 0246 FF80                  		andi.w	#$FF80,d6
0000D8C6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D8CA                            
0000D8CA                            loc_D944:
0000D8CA BC50                       		cmp.w	(a0),d6
0000D8CC 6300                       		bls.s	loc_D956
0000D8CE 4A28 0004                  		tst.b	4(a0)
0000D8D2 6A00                       		bpl.s	loc_D952
0000D8D4 1412                       		move.b	(a2),d2
0000D8D6 5212                       		addq.b	#1,(a2)
0000D8D8                            
0000D8D8                            loc_D952:
0000D8D8 5C48                       		addq.w	#6,a0
0000D8DA 60EE                       		bra.s	loc_D944
0000D8DC                            ; ===========================================================================
0000D8DC                            
0000D8DC                            loc_D956:
0000D8DC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D8E0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D8E4 0446 0080                  		subi.w	#$80,d6
0000D8E8 6500                       		bcs.s	loc_D976
0000D8EA                            
0000D8EA                            loc_D964:
0000D8EA BC50                       		cmp.w	(a0),d6
0000D8EC 6300                       		bls.s	loc_D976
0000D8EE 4A28 0004                  		tst.b	4(a0)
0000D8F2 6A00                       		bpl.s	loc_D972
0000D8F4 522A 0001                  		addq.b	#1,1(a2)
0000D8F8                            
0000D8F8                            loc_D972:
0000D8F8 5C48                       		addq.w	#6,a0
0000D8FA 60EE                       		bra.s	loc_D964
0000D8FC                            ; ===========================================================================
0000D8FC                            
0000D8FC                            loc_D976:
0000D8FC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D900 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000D906                            
0000D906                            OPL_Next:				; XREF: OPL_Index
0000D906 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D90A 7400                       		moveq	#0,d2
0000D90C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D910 0246 FF80                  		andi.w	#$FF80,d6
0000D914 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000D918 6700 0000                  		beq.w	locret_DA3A
0000D91C 6C00                       		bge.s	loc_D9F6
0000D91E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D922 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D926 0446 0080                  		subi.w	#$80,d6
0000D92A 6500                       		bcs.s	loc_D9D2
0000D92C                            
0000D92C                            loc_D9A6:
0000D92C BC68 FFFA                  		cmp.w	-6(a0),d6
0000D930 6C00                       		bge.s	loc_D9D2
0000D932 5D48                       		subq.w	#6,a0
0000D934 4A28 0004                  		tst.b	4(a0)
0000D938 6A00                       		bpl.s	loc_D9BC
0000D93A 532A 0001                  		subq.b	#1,1(a2)
0000D93E 142A 0001                  		move.b	1(a2),d2
0000D942                            
0000D942                            loc_D9BC:
0000D942 6100 0000                  		bsr.w	loc_DA3C
0000D946 6600                       		bne.s	loc_D9C6
0000D948 5D48                       		subq.w	#6,a0
0000D94A 60E0                       		bra.s	loc_D9A6
0000D94C                            ; ===========================================================================
0000D94C                            
0000D94C                            loc_D9C6:
0000D94C 4A28 0004                  		tst.b	4(a0)
0000D950 6A00                       		bpl.s	loc_D9D0
0000D952 522A 0001                  		addq.b	#1,1(a2)
0000D956                            
0000D956                            loc_D9D0:
0000D956 5C48                       		addq.w	#6,a0
0000D958                            
0000D958                            loc_D9D2:
0000D958 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D95C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D960 0646 0300                  		addi.w	#$300,d6
0000D964                            
0000D964                            loc_D9DE:
0000D964 BC68 FFFA                  		cmp.w	-6(a0),d6
0000D968 6E00                       		bgt.s	loc_D9F0
0000D96A 4A28 FFFE                  		tst.b	-2(a0)
0000D96E 6A00                       		bpl.s	loc_D9EC
0000D970 5312                       		subq.b	#1,(a2)
0000D972                            
0000D972                            loc_D9EC:
0000D972 5D48                       		subq.w	#6,a0
0000D974 60EE                       		bra.s	loc_D9DE
0000D976                            ; ===========================================================================
0000D976                            
0000D976                            loc_D9F0:
0000D976 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D97A 4E75                       		rts	
0000D97C                            ; ===========================================================================
0000D97C                            
0000D97C                            loc_D9F6:
0000D97C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D980 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D984 0646 0280                  		addi.w	#$280,d6
0000D988                            
0000D988                            loc_DA02:
0000D988 BC50                       		cmp.w	(a0),d6
0000D98A 6300                       		bls.s	loc_DA16
0000D98C 4A28 0004                  		tst.b	4(a0)
0000D990 6A00                       		bpl.s	loc_DA10
0000D992 1412                       		move.b	(a2),d2
0000D994 5212                       		addq.b	#1,(a2)
0000D996                            
0000D996                            loc_DA10:
0000D996 6100 0000                  		bsr.w	loc_DA3C
0000D99A 67EC                       		beq.s	loc_DA02
0000D99C                            
0000D99C                            loc_DA16:
0000D99C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9A0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D9A4 0446 0300                  		subi.w	#$300,d6
0000D9A8 6500                       		bcs.s	loc_DA36
0000D9AA                            
0000D9AA                            loc_DA24:
0000D9AA BC50                       		cmp.w	(a0),d6
0000D9AC 6300                       		bls.s	loc_DA36
0000D9AE 4A28 0004                  		tst.b	4(a0)
0000D9B2 6A00                       		bpl.s	loc_DA32
0000D9B4 522A 0001                  		addq.b	#1,1(a2)
0000D9B8                            
0000D9B8                            loc_DA32:
0000D9B8 5C48                       		addq.w	#6,a0
0000D9BA 60EE                       		bra.s	loc_DA24
0000D9BC                            ; ===========================================================================
0000D9BC                            
0000D9BC                            loc_DA36:
0000D9BC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9C0                            
0000D9C0                            locret_DA3A:
0000D9C0 4E75                       		rts	
0000D9C2                            ; ===========================================================================
0000D9C2                            
0000D9C2                            loc_DA3C:
0000D9C2 4A28 0004                  		tst.b	4(a0)
0000D9C6 6A00                       		bpl.s	OPL_MakeItem
0000D9C8 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000D9CE 6700                       		beq.s	OPL_MakeItem
0000D9D0 5C48                       		addq.w	#6,a0
0000D9D2 7000                       		moveq	#0,d0
0000D9D4 4E75                       		rts	
0000D9D6                            ; ===========================================================================
0000D9D6                            
0000D9D6                            OPL_MakeItem:
0000D9D6 6100 0000                  		bsr.w	SingleObjLoad
0000D9DA 6600                       		bne.s	locret_DA8A
0000D9DC 3358 0008                  		move.w	(a0)+,8(a1)
0000D9E0 3018                       		move.w	(a0)+,d0
0000D9E2 3200                       		move.w	d0,d1
0000D9E4 0240 0FFF                  		andi.w	#$FFF,d0
0000D9E8 3340 000C                  		move.w	d0,$C(a1)
0000D9EC E559                       		rol.w	#2,d1
0000D9EE 0201 0003                  		andi.b	#3,d1
0000D9F2 1341 0001                  		move.b	d1,1(a1)
0000D9F6 1341 0022                  		move.b	d1,$22(a1)
0000D9FA 1018                       		move.b	(a0)+,d0
0000D9FC 6A00                       		bpl.s	loc_DA80
0000D9FE 0200 007F                  		andi.b	#$7F,d0
0000DA02 1342 0023                  		move.b	d2,$23(a1)
0000DA06                            
0000DA06                            loc_DA80:
0000DA06 1280                       		move.b	d0,0(a1)
0000DA08 1358 0028                  		move.b	(a0)+,$28(a1)
0000DA0C 7000                       		moveq	#0,d0
0000DA0E                            
0000DA0E                            locret_DA8A:
0000DA0E 4E75                       		rts	
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            ; Single object	loading	subroutine
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            
0000DA10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA10                            
0000DA10                            
0000DA10                            SingleObjLoad:
0000DA10 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DA14 303C 005F                  		move.w	#$5F,d0
0000DA18                            
0000DA18                            loc_DA94:
0000DA18 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DA1A 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DA1C 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DA20 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DA24                            
0000DA24                            locret_DAA0:
0000DA24 4E75                       		rts	
0000DA26                            ; End of function SingleObjLoad
0000DA26                            
0000DA26                            
0000DA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA26                            
0000DA26                            
0000DA26                            SingleObjLoad2:
0000DA26 2248                       		movea.l	a0,a1
0000DA28 303C F000                  		move.w	#-$1000,d0
0000DA2C 9048                       		sub.w	a0,d0
0000DA2E EC48                       		lsr.w	#6,d0
0000DA30 5340                       		subq.w	#1,d0
0000DA32 6500                       		bcs.s	locret_DABC
0000DA34                            
0000DA34                            loc_DAB0:
0000DA34 4A11                       		tst.b	(a1)
0000DA36 6700                       		beq.s	locret_DABC
0000DA38 43E9 0040                  		lea	$40(a1),a1
0000DA3C 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DA40                            
0000DA40                            locret_DABC:
0000DA40 4E75                       		rts	
0000DA42                            ; End of function SingleObjLoad2
0000DA42                            
0000DA42                            ; ===========================================================================
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            ; Object 41 - springs
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            
0000DA42                            Obj41:					; XREF: Obj_Index
0000DA42 7000                       		moveq	#0,d0
0000DA44 1028 0024                  		move.b	$24(a0),d0
0000DA48 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DA4C 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DA50 6100 FB38                  		bsr.w	DisplaySprite
0000DA54 3028 0008                  		move.w	8(a0),d0
0000DA58 0240 FF80                  		andi.w	#$FF80,d0
0000DA5C 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA60 0441 0080                  		subi.w	#$80,d1
0000DA64 0241 FF80                  		andi.w	#$FF80,d1
0000DA68 9041                       		sub.w	d1,d0
0000DA6A 0C40 0280                  		cmpi.w	#$280,d0
0000DA6E 6200 FB56                  		bhi.w	DeleteObject
0000DA72 4E75                       		rts	
0000DA74                            ; ===========================================================================
0000DA74 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DA76 0000                       		dc.w Obj41_Up-Obj41_Index
0000DA78 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DA7A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DA7C 0000                       		dc.w Obj41_LR-Obj41_Index
0000DA7E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DA80 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DA82 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DA84 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DA86 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DA88                            
0000DA88 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DA8A F600                       		dc.w -$A00		; power	of yellow spring
0000DA8C                            ; ===========================================================================
0000DA8C                            
0000DA8C                            Obj41_Main:				; XREF: Obj41_Index
0000DA8C 5428 0024                  		addq.b	#2,$24(a0)
0000DA90 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DA98 317C 0523 0002             		move.w	#$523,2(a0)
0000DA9E 0028 0004 0001             		ori.b	#4,1(a0)
0000DAA4 117C 0010 0019             		move.b	#$10,$19(a0)
0000DAAA 117C 0004 0018             		move.b	#4,$18(a0)
0000DAB0 1028 0028                  		move.b	$28(a0),d0
0000DAB4 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DAB8 6700                       		beq.s	loc_DB54	; if not, branch
0000DABA 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DAC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000DAC6 117C 0003 001A             		move.b	#3,$1A(a0)
0000DACC 317C 0533 0002             		move.w	#$533,2(a0)
0000DAD2 117C 0008 0019             		move.b	#8,$19(a0)
0000DAD8                            
0000DAD8                            loc_DB54:
0000DAD8 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DADC 6700                       		beq.s	loc_DB66	; if not, branch
0000DADE 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DAE4 08E8 0001 0022             		bset	#1,$22(a0)
0000DAEA                            
0000DAEA                            loc_DB66:
0000DAEA 0800 0001                  		btst	#1,d0
0000DAEE 6700                       		beq.s	loc_DB72
0000DAF0 08E8 0005 0002             		bset	#5,2(a0)
0000DAF6                            
0000DAF6                            loc_DB72:
0000DAF6 0240 000F                  		andi.w	#$F,d0
0000DAFA 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DB00 4E75                       		rts	
0000DB02                            ; ===========================================================================
0000DB02                            
0000DB02                            Obj41_Up:				; XREF: Obj41_Index
0000DB02 323C 001B                  		move.w	#$1B,d1
0000DB06 343C 0008                  		move.w	#8,d2
0000DB0A 363C 0010                  		move.w	#$10,d3
0000DB0E 3828 0008                  		move.w	8(a0),d4
0000DB12 6100 0000                  		bsr.w	SolidObject
0000DB16 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DB1A 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DB1C 4E75                       		rts	
0000DB1E                            ; ===========================================================================
0000DB1E                            
0000DB1E                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DB1E 5428 0024                  		addq.b	#2,$24(a0)
0000DB22 5069 000C                  		addq.w	#8,$C(a1)
0000DB26 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DB2C 08E9 0001 0022             		bset	#1,$22(a1)
0000DB32 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB38 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DB3E 137C 0002 0024             		move.b	#2,$24(a1)
0000DB44 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB4A 4228 0025                  		clr.b	$25(a0)
0000DB4E 303C 00CC                  		move.w	#$CC,d0
0000DB52 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play spring sound
0000DB58                            
0000DB58                            Obj41_AniUp:				; XREF: Obj41_Index
0000DB58 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DB5E 6000 CB56                  		bra.w	AnimateSprite
0000DB62                            ; ===========================================================================
0000DB62                            
0000DB62                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DB62 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DB68 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DB6C 4E75                       		rts	
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            Obj41_LR:				; XREF: Obj41_Index
0000DB6E 323C 0013                  		move.w	#$13,d1
0000DB72 343C 000E                  		move.w	#$E,d2
0000DB76 363C 000F                  		move.w	#$F,d3
0000DB7A 3828 0008                  		move.w	8(a0),d4
0000DB7E 6100 0000                  		bsr.w	SolidObject
0000DB82 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DB88 6600                       		bne.s	loc_DC0C
0000DB8A 117C 0008 0024             		move.b	#8,$24(a0)
0000DB90                            
0000DB90                            loc_DC0C:
0000DB90 0828 0005 0022             		btst	#5,$22(a0)
0000DB96 6600                       		bne.s	Obj41_BounceLR
0000DB98 4E75                       		rts	
0000DB9A                            ; ===========================================================================
0000DB9A                            
0000DB9A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DB9A 5428 0024                  		addq.b	#2,$24(a0)
0000DB9E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DBA4 5069 0008                  		addq.w	#8,8(a1)
0000DBA8 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DBAE 6600                       		bne.s	loc_DC36	; if yes, branch
0000DBB0 0469 0010 0008             		subi.w	#$10,8(a1)
0000DBB6 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DBBA                            
0000DBBA                            loc_DC36:
0000DBBA 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DBC0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBC6 0869 0000 0022             		bchg	#0,$22(a1)
0000DBCC 0829 0002 0022             		btst	#2,$22(a1)
0000DBD2 6600                       		bne.s	loc_DC56
0000DBD4 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DBDA                            
0000DBDA                            loc_DC56:
0000DBDA 08A8 0005 0022             		bclr	#5,$22(a0)
0000DBE0 08A9 0005 0022             		bclr	#5,$22(a1)
0000DBE6 303C 00CC                  		move.w	#$CC,d0
0000DBEA 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play spring sound
0000DBF0                            
0000DBF0                            Obj41_AniLR:				; XREF: Obj41_Index
0000DBF0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DBF6 6000 CABE                  		bra.w	AnimateSprite
0000DBFA                            ; ===========================================================================
0000DBFA                            
0000DBFA                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DBFA 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DC00 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DC04 4E75                       		rts	
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            Obj41_Dwn:				; XREF: Obj41_Index
0000DC06 323C 001B                  		move.w	#$1B,d1
0000DC0A 343C 0008                  		move.w	#8,d2
0000DC0E 363C 0010                  		move.w	#$10,d3
0000DC12 3828 0008                  		move.w	8(a0),d4
0000DC16 6100 0000                  		bsr.w	SolidObject
0000DC1A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DC20 6600                       		bne.s	loc_DCA4
0000DC22 117C 000E 0024             		move.b	#$E,$24(a0)
0000DC28                            
0000DC28                            loc_DCA4:
0000DC28 4A28 0025                  		tst.b	$25(a0)
0000DC2C 6600                       		bne.s	locret_DCAE
0000DC2E 4A44                       		tst.w	d4
0000DC30 6B00                       		bmi.s	Obj41_BounceDwn
0000DC32                            
0000DC32                            locret_DCAE:
0000DC32 4E75                       		rts	
0000DC34                            ; ===========================================================================
0000DC34                            
0000DC34                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DC34 5428 0024                  		addq.b	#2,$24(a0)
0000DC38 5169 000C                  		subq.w	#8,$C(a1)
0000DC3C 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DC42 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DC46 08E9 0001 0022             		bset	#1,$22(a1)
0000DC4C 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC52 137C 0002 0024             		move.b	#2,$24(a1)
0000DC58 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC5E 4228 0025                  		clr.b	$25(a0)
0000DC62 303C 00CC                  		move.w	#$CC,d0
0000DC66 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC6C                            
0000DC6C                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DC6C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC72 6000 CA42                  		bra.w	AnimateSprite
0000DC76                            ; ===========================================================================
0000DC76                            
0000DC76                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DC76 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DC7C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DC80 4E75                       		rts	
0000DC82                            ; ===========================================================================
0000DC82                            Ani_obj41:
0000DC82                            	include "_anim\obj41.asm"
0000DC82                            ; ---------------------------------------------------------------------------
0000DC82                            ; Animation script - springs
0000DC82                            ; ---------------------------------------------------------------------------
0000DC82 0000                       		dc.w byte_DD02-Ani_obj41
0000DC84 0000                       		dc.w byte_DD0E-Ani_obj41
0000DC86 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DC92 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DC9E                            		even
0000DC9E                            		even
0000DC9E                            
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; Sprite mappings - springs
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            Map_obj41:
0000DC9E                            	include "_maps\obj41.asm"
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; Sprite mappings - springs
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E 0000                       		dc.w byte_DD26-Map_obj41
0000DCA0 0000                       		dc.w byte_DD31-Map_obj41
0000DCA2 0000                       		dc.w byte_DD37-Map_obj41
0000DCA4 0000                       		dc.w byte_DD47-Map_obj41
0000DCA6 0000                       		dc.w byte_DD4D-Map_obj41
0000DCA8 0000                       		dc.w byte_DD53-Map_obj41
0000DCAA 02                         byte_DD26:	dc.b 2
0000DCAB F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DCB0 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DCB5 01                         byte_DD31:	dc.b 1
0000DCB6 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DCBB 03                         byte_DD37:	dc.b 3
0000DCBC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DCC1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DCC6 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DCCB 01                         byte_DD47:	dc.b 1
0000DCCC F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DCD1 01                         byte_DD4D:	dc.b 1
0000DCD2 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DCD7 04                         byte_DD53:	dc.b 4
0000DCD8 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DCDD F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DCE2 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DCE7 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DCEC                            		even
0000DCEC                            		even
0000DCEC                            
0000DCEC                            ; ===========================================================================
0000DCEC                            ; ---------------------------------------------------------------------------
0000DCEC                            ; Object 42 - Newtron enemy (GHZ)
0000DCEC                            ; ---------------------------------------------------------------------------
0000DCEC                            
0000DCEC                            Obj42:					; XREF: Obj_Index
0000DCEC 7000                       		moveq	#0,d0
0000DCEE 1028 0024                  		move.b	$24(a0),d0
0000DCF2 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DCF6 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DCFA                            ; ===========================================================================
0000DCFA 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DCFC 0000                       		dc.w Obj42_Action-Obj42_Index
0000DCFE 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DD00                            ; ===========================================================================
0000DD00                            
0000DD00                            Obj42_Main:				; XREF: Obj42_Index
0000DD00 5428 0024                  		addq.b	#2,$24(a0)
0000DD04 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DD0C 317C 049B 0002             		move.w	#$49B,2(a0)
0000DD12 117C 0004 0001             		move.b	#4,1(a0)
0000DD18 117C 0004 0018             		move.b	#4,$18(a0)
0000DD1E 117C 0014 0019             		move.b	#$14,$19(a0)
0000DD24 117C 0010 0016             		move.b	#$10,$16(a0)
0000DD2A 117C 0008 0017             		move.b	#8,$17(a0)
0000DD30                            
0000DD30                            Obj42_Action:				; XREF: Obj42_Index
0000DD30 7000                       		moveq	#0,d0
0000DD32 1028 0025                  		move.b	$25(a0),d0
0000DD36 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DD3A 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DD3E 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DD44 6100 C970                  		bsr.w	AnimateSprite
0000DD48 6000 0000                  		bra.w	MarkObjGone
0000DD4C                            ; ===========================================================================
0000DD4C 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DD4E 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DD50 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DD52 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DD54 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DD56                            ; ===========================================================================
0000DD56                            
0000DD56                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DD56 08E8 0000 0022             		bset	#0,$22(a0)
0000DD5C 3038 D008                  		move.w	($FFFFD008).w,d0
0000DD60 9068 0008                  		sub.w	8(a0),d0
0000DD64 6400                       		bcc.s	loc_DDEA
0000DD66 4440                       		neg.w	d0
0000DD68 08A8 0000 0022             		bclr	#0,$22(a0)
0000DD6E                            
0000DD6E                            loc_DDEA:
0000DD6E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DD72 6400                       		bcc.s	locret_DE12	; if not, branch
0000DD74 5428 0025                  		addq.b	#2,$25(a0)
0000DD78 117C 0001 001C             		move.b	#1,$1C(a0)
0000DD7E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DD82 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DD84 317C 249B 0002             		move.w	#$249B,2(a0)
0000DD8A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DD90 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DD96                            
0000DD96                            locret_DE12:
0000DD96 4E75                       		rts	
0000DD98                            ; ===========================================================================
0000DD98                            
0000DD98                            Obj42_Type00:				; XREF: Obj42_Index2
0000DD98 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DD9E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DDA0 08E8 0000 0022             		bset	#0,$22(a0)
0000DDA6 3038 D008                  		move.w	($FFFFD008).w,d0
0000DDAA 9068 0008                  		sub.w	8(a0),d0
0000DDAE 6400                       		bcc.s	locret_DE32
0000DDB0 08A8 0000 0022             		bclr	#0,$22(a0)
0000DDB6                            
0000DDB6                            locret_DE32:
0000DDB6 4E75                       		rts	
0000DDB8                            ; ===========================================================================
0000DDB8                            
0000DDB8                            Obj42_Fall:				; XREF: Obj42_Type00
0000DDB8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DDBE 6600                       		bne.s	loc_DE42
0000DDC0 117C 000C 0020             		move.b	#$C,$20(a0)
0000DDC6                            
0000DDC6                            loc_DE42:
0000DDC6 6100 F770                  		bsr.w	ObjectFall
0000DDCA 6100 0000                  		bsr.w	ObjHitFloor
0000DDCE 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DDD0 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DDD2 D368 000C                  		add.w	d1,$C(a0)
0000DDD6 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DDDC 5428 0025                  		addq.b	#2,$25(a0)
0000DDE0 117C 0002 001C             		move.b	#2,$1C(a0)
0000DDE6 0828 0005 0002             		btst	#5,2(a0)
0000DDEC 6700                       		beq.s	Obj42_Move
0000DDEE 5228 001C                  		addq.b	#1,$1C(a0)
0000DDF2                            
0000DDF2                            Obj42_Move:
0000DDF2 117C 000D 0020             		move.b	#$D,$20(a0)
0000DDF8 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DDFE 0828 0000 0022             		btst	#0,$22(a0)
0000DE04 6600                       		bne.s	locret_DE86
0000DE06 4468 0010                  		neg.w	$10(a0)
0000DE0A                            
0000DE0A                            locret_DE86:
0000DE0A 4E75                       		rts	
0000DE0C                            ; ===========================================================================
0000DE0C                            
0000DE0C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DE0C 6100 F756                  		bsr.w	SpeedToPos
0000DE10 6100 0000                  		bsr.w	ObjHitFloor
0000DE14 0C41 FFF8                  		cmpi.w	#-8,d1
0000DE18 6D00                       		blt.s	loc_DEA2
0000DE1A 0C41 000C                  		cmpi.w	#$C,d1
0000DE1E 6C00                       		bge.s	loc_DEA2
0000DE20 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DE24 4E75                       		rts	
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            loc_DEA2:
0000DE26 5428 0025                  		addq.b	#2,$25(a0)
0000DE2A 4E75                       		rts	
0000DE2C                            ; ===========================================================================
0000DE2C                            
0000DE2C                            Obj42_Speed:				; XREF: Obj42_Index2
0000DE2C 6100 F736                  		bsr.w	SpeedToPos
0000DE30 4E75                       		rts	
0000DE32                            ; ===========================================================================
0000DE32                            
0000DE32                            Obj42_Type01:				; XREF: Obj42_Index2
0000DE32 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DE38 6600                       		bne.s	Obj42_FireMissile
0000DE3A 117C 000C 0020             		move.b	#$C,$20(a0)
0000DE40                            
0000DE40                            Obj42_FireMissile:
0000DE40 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DE46 6600                       		bne.s	locret_DF14
0000DE48 4A28 0032                  		tst.b	$32(a0)
0000DE4C 6600                       		bne.s	locret_DF14
0000DE4E 117C 0001 0032             		move.b	#1,$32(a0)
0000DE54 6100 FBBA                  		bsr.w	SingleObjLoad
0000DE58 6600                       		bne.s	locret_DF14
0000DE5A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DE5E 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE6A 5169 000C                  		subq.w	#8,$C(a1)
0000DE6E 337C 0200 0010             		move.w	#$200,$10(a1)
0000DE74 303C 0014                  		move.w	#$14,d0
0000DE78 0828 0000 0022             		btst	#0,$22(a0)
0000DE7E 6600                       		bne.s	loc_DF04
0000DE80 4440                       		neg.w	d0
0000DE82 4469 0010                  		neg.w	$10(a1)
0000DE86                            
0000DE86                            loc_DF04:
0000DE86 D169 0008                  		add.w	d0,8(a1)
0000DE8A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DE90 137C 0001 0028             		move.b	#1,$28(a1)
0000DE96                            
0000DE96                            locret_DF14:
0000DE96 4E75                       		rts	
0000DE98                            ; ===========================================================================
0000DE98                            
0000DE98                            Obj42_Delete:				; XREF: Obj42_Index
0000DE98 6000 F72C                  		bra.w	DeleteObject
0000DE9C                            ; ===========================================================================
0000DE9C                            Ani_obj42:
0000DE9C                            	include "_anim\obj42.asm"
0000DE9C                            ; ---------------------------------------------------------------------------
0000DE9C                            ; Animation script - Newtron enemy
0000DE9C                            ; ---------------------------------------------------------------------------
0000DE9C 0000                       		dc.w byte_DF24-Ani_obj42
0000DE9E 0000                       		dc.w byte_DF28-Ani_obj42
0000DEA0 0000                       		dc.w byte_DF30-Ani_obj42
0000DEA2 0000                       		dc.w byte_DF34-Ani_obj42
0000DEA4 0000                       		dc.w byte_DF38-Ani_obj42
0000DEA6 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DEAA 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DEB2 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DEB6 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DEBA 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000DEC4                            		even
0000DEC4                            		even
0000DEC4                            
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4                            Map_obj42:
0000DEC4                            	include "_maps\obj42.asm"
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000DEC8 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000DECC 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000DED0 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000DED4 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000DED8 0000                       		dc.w byte_DFF8-Map_obj42
0000DEDA 03                         byte_DF58:	dc.b 3
0000DEDB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000DEE0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000DEE5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000DEEA 03                         byte_DF68:	dc.b 3
0000DEEB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000DEF0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DEF5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DEFA 03                         byte_DF78:	dc.b 3
0000DEFB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000DF00 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF05 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DF0A 04                         byte_DF88:	dc.b 4
0000DF0B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000DF10 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF15 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000DF1A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000DF1F 03                         byte_DF9D:	dc.b 3
0000DF20 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000DF25 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000DF2A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000DF2F 02                         byte_DFAD:	dc.b 2
0000DF30 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF35 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF3A 03                         byte_DFB8:	dc.b 3
0000DF3B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF40 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF45 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000DF4A 03                         byte_DFC8:	dc.b 3
0000DF4B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF50 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF55 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000DF5A 03                         byte_DFD8:	dc.b 3
0000DF5B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF60 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF65 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000DF6A 03                         byte_DFE8:	dc.b 3
0000DF6B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF70 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF75 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000DF7A 00                         byte_DFF8:	dc.b 0
0000DF7C 00                         		even
0000DF7C 00                         		even
0000DF7C                            
0000DF7C                            ; ===========================================================================
0000DF7C                            ; ---------------------------------------------------------------------------
0000DF7C                            ; Object 43 - Roller enemy (SYZ)
0000DF7C                            ; ---------------------------------------------------------------------------
0000DF7C                            
0000DF7C                            Obj43:					; XREF: Obj_Index
0000DF7C 7000                       		moveq	#0,d0
0000DF7E 1028 0024                  		move.b	$24(a0),d0
0000DF82 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000DF86 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000DF8A                            ; ===========================================================================
0000DF8A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000DF8C 0000                       		dc.w Obj43_Action-Obj43_Index
0000DF8E                            ; ===========================================================================
0000DF8E                            
0000DF8E                            Obj43_Main:				; XREF: Obj43_Index
0000DF8E 117C 000E 0016             		move.b	#$E,$16(a0)
0000DF94 117C 0008 0017             		move.b	#8,$17(a0)
0000DF9A 6100 F59C                  		bsr.w	ObjectFall
0000DF9E 6100 0000                  		bsr.w	ObjHitFloor
0000DFA2 4A41                       		tst.w	d1
0000DFA4 6A00                       		bpl.s	locret_E052
0000DFA6 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000DFAA 317C 0000 0012             		move.w	#0,$12(a0)
0000DFB0 5428 0024                  		addq.b	#2,$24(a0)
0000DFB4 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000DFBC 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000DFC2 117C 0004 0001             		move.b	#4,1(a0)
0000DFC8 117C 0004 0018             		move.b	#4,$18(a0)
0000DFCE 117C 0010 0019             		move.b	#$10,$19(a0)
0000DFD4                            
0000DFD4                            locret_E052:
0000DFD4 4E75                       		rts	
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            Obj43_Action:				; XREF: Obj43_Index
0000DFD6 7000                       		moveq	#0,d0
0000DFD8 1028 0025                  		move.b	$25(a0),d0
0000DFDC 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000DFE0 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000DFE4 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000DFEA 6100 C6CA                  		bsr.w	AnimateSprite
0000DFEE 3028 0008                  		move.w	8(a0),d0
0000DFF2 0240 FF80                  		andi.w	#$FF80,d0
0000DFF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000DFFA 0441 0080                  		subi.w	#$80,d1
0000DFFE 0241 FF80                  		andi.w	#$FF80,d1
0000E002 9041                       		sub.w	d1,d0
0000E004 0C40 0280                  		cmpi.w	#$280,d0
0000E008 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E00C 6000 F57C                  		bra.w	DisplaySprite
0000E010                            ; ===========================================================================
0000E010                            
0000E010                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E010 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E014 7000                       		moveq	#0,d0
0000E016 1028 0023                  		move.b	$23(a0),d0
0000E01A 6700                       		beq.s	Obj43_Delete
0000E01C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E022                            
0000E022                            Obj43_Delete:
0000E022 6000 F5A2                  		bra.w	DeleteObject
0000E026                            ; ===========================================================================
0000E026 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E028 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E02A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E02C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E02E                            ; ===========================================================================
0000E02E                            
0000E02E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E02E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E032 0440 0100                  		subi.w	#$100,d0
0000E036 6500                       		bcs.s	loc_E0D2
0000E038 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E03C 6500                       		bcs.s	loc_E0D2
0000E03E 5828 0025                  		addq.b	#4,$25(a0)
0000E042 117C 0002 001C             		move.b	#2,$1C(a0)
0000E048 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E04E 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E054                            
0000E054                            loc_E0D2:
0000E054 588F                       		addq.l	#4,sp
0000E056 4E75                       		rts	
0000E058                            ; ===========================================================================
0000E058                            
0000E058                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E058 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E05E 6700                       		beq.s	loc_E0F8
0000E060 5368 0030                  		subq.w	#1,$30(a0)
0000E064 6A00                       		bpl.s	locret_E0F6
0000E066 117C 0001 001C             		move.b	#1,$1C(a0)
0000E06C 317C 0700 0010             		move.w	#$700,$10(a0)
0000E072 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E078                            
0000E078                            locret_E0F6:
0000E078 4E75                       		rts	
0000E07A                            ; ===========================================================================
0000E07A                            
0000E07A                            loc_E0F8:
0000E07A 5428 0025                  		addq.b	#2,$25(a0)
0000E07E 4E75                       		rts	
0000E080                            ; ===========================================================================
0000E080                            
0000E080                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E080 6100 0000                  		bsr.w	Obj43_Stop
0000E084 6100 F4DE                  		bsr.w	SpeedToPos
0000E088 6100 0000                  		bsr.w	ObjHitFloor
0000E08C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E090 6D00                       		blt.s	Obj43_Jump
0000E092 0C41 000C                  		cmpi.w	#$C,d1
0000E096 6C00                       		bge.s	Obj43_Jump
0000E098 D368 000C                  		add.w	d1,$C(a0)
0000E09C 4E75                       		rts	
0000E09E                            ; ===========================================================================
0000E09E                            
0000E09E                            Obj43_Jump:
0000E09E 5428 0025                  		addq.b	#2,$25(a0)
0000E0A2 08E8 0000 0032             		bset	#0,$32(a0)
0000E0A8 6700                       		beq.s	locret_E12E
0000E0AA 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E0B0                            
0000E0B0                            locret_E12E:
0000E0B0 4E75                       		rts	
0000E0B2                            ; ===========================================================================
0000E0B2                            
0000E0B2                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E0B2 6100 F484                  		bsr.w	ObjectFall
0000E0B6 4A68 0012                  		tst.w	$12(a0)
0000E0BA 6B00                       		bmi.s	locret_E150
0000E0BC 6100 0000                  		bsr.w	ObjHitFloor
0000E0C0 4A41                       		tst.w	d1
0000E0C2 6A00                       		bpl.s	locret_E150
0000E0C4 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E0C8 5528 0025                  		subq.b	#2,$25(a0)
0000E0CC 317C 0000 0012             		move.w	#0,$12(a0)
0000E0D2                            
0000E0D2                            locret_E150:
0000E0D2 4E75                       		rts	
0000E0D4                            
0000E0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0D4                            
0000E0D4                            
0000E0D4                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E0D4 4A28 0032                  		tst.b	$32(a0)
0000E0D8 6B00                       		bmi.s	locret_E188
0000E0DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E0DE 0440 0030                  		subi.w	#$30,d0
0000E0E2 9068 0008                  		sub.w	8(a0),d0
0000E0E6 6400                       		bcc.s	locret_E188
0000E0E8 117C 0000 001C             		move.b	#0,$1C(a0)
0000E0EE 117C 000E 0020             		move.b	#$E,$20(a0)
0000E0F4 4268 0010                  		clr.w	$10(a0)
0000E0F8 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E0FE 117C 0002 0025             		move.b	#2,$25(a0)
0000E104 08E8 0007 0032             		bset	#7,$32(a0)
0000E10A                            
0000E10A                            locret_E188:
0000E10A 4E75                       		rts	
0000E10C                            ; End of function Obj43_Stop
0000E10C                            
0000E10C                            ; ===========================================================================
0000E10C                            Ani_obj43:
0000E10C                            	include "_anim\obj43.asm"
0000E10C                            ; ---------------------------------------------------------------------------
0000E10C                            ; Animation script - Roller enemy
0000E10C                            ; ---------------------------------------------------------------------------
0000E10C 0000                       		dc.w byte_E190-Ani_obj43
0000E10E 0000                       		dc.w byte_E196-Ani_obj43
0000E110 0000                       		dc.w byte_E19C-Ani_obj43
0000E112 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E118 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E11E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E124 00                         		even
0000E124 00                         		even
0000E124                            
0000E124                            ; ---------------------------------------------------------------------------
0000E124                            ; Sprite mappings - Roller enemy (SYZ)
0000E124                            ; ---------------------------------------------------------------------------
0000E124                            Map_obj43:
0000E124                            	include "_maps\obj43.asm"
0000E124                            ; ---------------------------------------------------------------------------
0000E124                            ; Sprite mappings - Roller enemy (SYZ)
0000E124                            ; ---------------------------------------------------------------------------
0000E124 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E128 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E12C 0000                       		dc.w byte_E1CE-Map_obj43
0000E12E 02                         byte_E1AC:	dc.b 2
0000E12F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E134 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E139 02                         byte_E1B7:	dc.b 2
0000E13A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E13F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E144 01                         byte_E1C2:	dc.b 1
0000E145 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E14A 01                         byte_E1C8:	dc.b 1
0000E14B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E150 01                         byte_E1CE:	dc.b 1
0000E151 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E156                            		even
0000E156                            		even
0000E156                            
0000E156                            ; ===========================================================================
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            ; Object 44 - walls (GHZ)
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            
0000E156                            Obj44:					; XREF: Obj_Index
0000E156 7000                       		moveq	#0,d0
0000E158 1028 0024                  		move.b	$24(a0),d0
0000E15C 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E160 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E164                            ; ===========================================================================
0000E164 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E166 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E168 0000                       		dc.w Obj44_Display-Obj44_Index
0000E16A                            ; ===========================================================================
0000E16A                            
0000E16A                            Obj44_Main:				; XREF: Obj44_Index
0000E16A 5428 0024                  		addq.b	#2,$24(a0)
0000E16E 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E176 317C 434C 0002             		move.w	#$434C,2(a0)
0000E17C 0028 0004 0001             		ori.b	#4,1(a0)
0000E182 117C 0008 0019             		move.b	#8,$19(a0)
0000E188 117C 0006 0018             		move.b	#6,$18(a0)
0000E18E 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E194 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E19A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E19C 5428 0024                  		addq.b	#2,$24(a0)
0000E1A0 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E1A2                            ; ===========================================================================
0000E1A2                            
0000E1A2                            Obj44_Solid:				; XREF: Obj44_Index
0000E1A2 323C 0013                  		move.w	#$13,d1
0000E1A6 343C 0028                  		move.w	#$28,d2
0000E1AA 6100 A872                  		bsr.w	Obj44_SolidWall
0000E1AE                            
0000E1AE                            Obj44_Display:				; XREF: Obj44_Index
0000E1AE 6100 F3DA                  		bsr.w	DisplaySprite
0000E1B2 3028 0008                  		move.w	8(a0),d0
0000E1B6 0240 FF80                  		andi.w	#$FF80,d0
0000E1BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1BE 0441 0080                  		subi.w	#$80,d1
0000E1C2 0241 FF80                  		andi.w	#$FF80,d1
0000E1C6 9041                       		sub.w	d1,d0
0000E1C8 0C40 0280                  		cmpi.w	#$280,d0
0000E1CC 6200 F3F8                  		bhi.w	DeleteObject
0000E1D0 4E75                       		rts	
0000E1D2                            ; ===========================================================================
0000E1D2                            ; ---------------------------------------------------------------------------
0000E1D2                            ; Sprite mappings - walls (GHZ)
0000E1D2                            ; ---------------------------------------------------------------------------
0000E1D2                            Map_obj44:
0000E1D2                            	include "_maps\obj44.asm"
0000E1D2                            ; ---------------------------------------------------------------------------
0000E1D2                            ; Sprite mappings - walls (GHZ)
0000E1D2                            ; ---------------------------------------------------------------------------
0000E1D2 0000                       		dc.w byte_E256-Map_obj44
0000E1D4 0000                       		dc.w byte_E26B-Map_obj44
0000E1D6 0000                       		dc.w byte_E280-Map_obj44
0000E1D8 04                         byte_E256:	dc.b 4
0000E1D9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E1DE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E1E3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E1E8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E1ED 04                         byte_E26B:	dc.b 4
0000E1EE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E1F3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E1F8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E1FD 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E202 04                         byte_E280:	dc.b 4
0000E203 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E208 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E20D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E212 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E218 00                         		even
0000E218 00                         		even
0000E218                            
0000E218                            ; ===========================================================================
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            
0000E218                            Obj13:					; XREF: Obj_Index
0000E218 7000                       		moveq	#0,d0
0000E21A 1028 0024                  		move.b	$24(a0),d0
0000E21E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E222 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E226 6000 0000                  		bra.w	Obj14_ChkDel
0000E22A                            ; ===========================================================================
0000E22A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E22C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E22E                            ; ---------------------------------------------------------------------------
0000E22E                            ;
0000E22E                            ; Lava ball production rates
0000E22E                            ;
0000E22E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E234                            ; ===========================================================================
0000E234                            
0000E234                            Obj13_Main:				; XREF: Obj13_Index
0000E234 5428 0024                  		addq.b	#2,$24(a0)
0000E238 1028 0028                  		move.b	$28(a0),d0
0000E23C E848                       		lsr.w	#4,d0
0000E23E 0240 000F                  		andi.w	#$F,d0
0000E242 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E248 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E24E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E254                            
0000E254                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E254 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E258 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E25A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E260 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E264 6600                       		bne.s	locret_E302
0000E266 6100 F7A8                  		bsr.w	SingleObjLoad
0000E26A 6600                       		bne.s	locret_E302
0000E26C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E270 3368 0008 0008             		move.w	8(a0),8(a1)
0000E276 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E27C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E282                            
0000E282                            locret_E302:
0000E282 4E75                       		rts	
0000E284                            ; ===========================================================================
0000E284                            ; ---------------------------------------------------------------------------
0000E284                            ; Object 14 - lava balls (MZ, SLZ)
0000E284                            ; ---------------------------------------------------------------------------
0000E284                            
0000E284                            Obj14:					; XREF: Obj_Index
0000E284 7000                       		moveq	#0,d0
0000E286 1028 0024                  		move.b	$24(a0),d0
0000E28A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E28E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E292 6000 F2F6                  		bra.w	DisplaySprite
0000E296                            ; ===========================================================================
0000E296 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E298 0000                       		dc.w Obj14_Action-Obj14_Index
0000E29A 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E29C                            
0000E29C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E2A6 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E2AE                            ; ===========================================================================
0000E2AE                            
0000E2AE                            Obj14_Main:				; XREF: Obj14_Index
0000E2AE 5428 0024                  		addq.b	#2,$24(a0)
0000E2B2 117C 0008 0016             		move.b	#8,$16(a0)
0000E2B8 117C 0008 0017             		move.b	#8,$17(a0)
0000E2BE 217C 0000 B308 0004        		move.l	#Map_obj14,4(a0)
0000E2C6 317C 0345 0002             		move.w	#$345,2(a0)
0000E2CC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E2D2 6600                       		bne.s	loc_E35A
0000E2D4 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E2DA                            
0000E2DA                            loc_E35A:
0000E2DA 117C 0004 0001             		move.b	#4,1(a0)
0000E2E0 117C 0003 0018             		move.b	#3,$18(a0)
0000E2E6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E2EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E2F2 4A28 0029                  		tst.b	$29(a0)
0000E2F6 6700                       		beq.s	Obj14_SetSpeed
0000E2F8 5428 0018                  		addq.b	#2,$18(a0)
0000E2FC                            
0000E2FC                            Obj14_SetSpeed:
0000E2FC 7000                       		moveq	#0,d0
0000E2FE 1028 0028                  		move.b	$28(a0),d0
0000E302 D040                       		add.w	d0,d0
0000E304 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E30A 117C 0008 0019             		move.b	#8,$19(a0)
0000E310 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E316 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E318 117C 0010 0019             		move.b	#$10,$19(a0)
0000E31E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E324 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E32A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E330                            
0000E330                            Obj14_PlaySnd:
0000E330 303C 00AE                  		move.w	#$AE,d0
0000E334 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E33A                            
0000E33A                            Obj14_Action:				; XREF: Obj14_Index
0000E33A 7000                       		moveq	#0,d0
0000E33C 1028 0028                  		move.b	$28(a0),d0
0000E340 D040                       		add.w	d0,d0
0000E342 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E346 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E34A 6100 F218                  		bsr.w	SpeedToPos
0000E34E 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E354 6100 C360                  		bsr.w	AnimateSprite
0000E358                            
0000E358                            Obj14_ChkDel:				; XREF: Obj13
0000E358 3028 0008                  		move.w	8(a0),d0
0000E35C 0240 FF80                  		andi.w	#$FF80,d0
0000E360 3238 F700                  		move.w	($FFFFF700).w,d1
0000E364 0441 0080                  		subi.w	#$80,d1
0000E368 0241 FF80                  		andi.w	#$FF80,d1
0000E36C 9041                       		sub.w	d1,d0
0000E36E 0C40 0280                  		cmpi.w	#$280,d0
0000E372 6200 F252                  		bhi.w	DeleteObject
0000E376 4E75                       		rts	
0000E378                            ; ===========================================================================
0000E378 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E37C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E380 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E384 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E388 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E38A                            ; ===========================================================================
0000E38A                            ; lavaball types 00-03 fly up and fall back down
0000E38A                            
0000E38A                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E38A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E390 3028 0030                  		move.w	$30(a0),d0
0000E394 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E398 6400                       		bcc.s	loc_E41E	; if not, branch
0000E39A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E39E                            
0000E39E                            loc_E41E:
0000E39E 08A8 0001 0022             		bclr	#1,$22(a0)
0000E3A4 4A68 0012                  		tst.w	$12(a0)
0000E3A8 6A00                       		bpl.s	locret_E430
0000E3AA 08E8 0001 0022             		bset	#1,$22(a0)
0000E3B0                            
0000E3B0                            locret_E430:
0000E3B0 4E75                       		rts	
0000E3B2                            ; ===========================================================================
0000E3B2                            ; lavaball type	04 flies up until it hits the ceiling
0000E3B2                            
0000E3B2                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E3B2 08E8 0001 0022             		bset	#1,$22(a0)
0000E3B8 6100 0000                  		bsr.w	ObjHitCeiling
0000E3BC 4A41                       		tst.w	d1
0000E3BE 6A00                       		bpl.s	locret_E452
0000E3C0 117C 0008 0028             		move.b	#8,$28(a0)
0000E3C6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3CC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E3D2                            
0000E3D2                            locret_E452:
0000E3D2 4E75                       		rts	
0000E3D4                            ; ===========================================================================
0000E3D4                            ; lavaball type	05 falls down until it hits the	floor
0000E3D4                            
0000E3D4                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E3D4 08A8 0001 0022             		bclr	#1,$22(a0)
0000E3DA 6100 0000                  		bsr.w	ObjHitFloor
0000E3DE 4A41                       		tst.w	d1
0000E3E0 6A00                       		bpl.s	locret_E474
0000E3E2 117C 0008 0028             		move.b	#8,$28(a0)
0000E3E8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E3F4                            
0000E3F4                            locret_E474:
0000E3F4 4E75                       		rts	
0000E3F6                            ; ===========================================================================
0000E3F6                            ; lavaball types 06-07 move sideways
0000E3F6                            
0000E3F6                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E3F6 08E8 0000 0022             		bset	#0,$22(a0)
0000E3FC 76F8                       		moveq	#-8,d3
0000E3FE 6100 0000                  		bsr.w	ObjHitWallLeft
0000E402 4A41                       		tst.w	d1
0000E404 6A00                       		bpl.s	locret_E498
0000E406 117C 0008 0028             		move.b	#8,$28(a0)
0000E40C 117C 0003 001C             		move.b	#3,$1C(a0)
0000E412 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E418                            
0000E418                            locret_E498:
0000E418 4E75                       		rts	
0000E41A                            ; ===========================================================================
0000E41A                            
0000E41A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E41A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E420 7608                       		moveq	#8,d3
0000E422 6100 0000                  		bsr.w	ObjHitWallRight
0000E426 4A41                       		tst.w	d1
0000E428 6A00                       		bpl.s	locret_E4BC
0000E42A 117C 0008 0028             		move.b	#8,$28(a0)
0000E430 117C 0003 001C             		move.b	#3,$1C(a0)
0000E436 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E43C                            
0000E43C                            locret_E4BC:
0000E43C 4E75                       		rts	
0000E43E                            ; ===========================================================================
0000E43E                            
0000E43E                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E43E 4E75                       		rts	
0000E440                            ; ===========================================================================
0000E440                            
0000E440                            Obj14_Delete:				; XREF: Obj14_Index
0000E440 6000 F184                  		bra.w	DeleteObject
0000E444                            ; ===========================================================================
0000E444                            Ani_obj14:
0000E444                            	include "_anim\obj14.asm"
0000E444                            ; ---------------------------------------------------------------------------
0000E444                            ; Animation script - lava balls
0000E444                            ; ---------------------------------------------------------------------------
0000E444 0000                       		dc.w byte_E4CC-Ani_obj14
0000E446 0000                       		dc.w byte_E4D2-Ani_obj14
0000E448 0000                       		dc.w byte_E4D6-Ani_obj14
0000E44A 0000                       		dc.w byte_E4DC-Ani_obj14
0000E44C 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E452 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E456 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E45C 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E460                            		even
0000E460                            		even
0000E460                            
0000E460                            ; ===========================================================================
0000E460                            ; ---------------------------------------------------------------------------
0000E460                            ; Object 6D - flame thrower (SBZ)
0000E460                            ; ---------------------------------------------------------------------------
0000E460                            
0000E460                            Obj6D:					; XREF: Obj_Index
0000E460 7000                       		moveq	#0,d0
0000E462 1028 0024                  		move.b	$24(a0),d0
0000E466 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E46A 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E46E                            ; ===========================================================================
0000E46E 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E470 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            Obj6D_Main:				; XREF: Obj6D_Index
0000E472 5428 0024                  		addq.b	#2,$24(a0)
0000E476 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E47E 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E484 0028 0004 0001             		ori.b	#4,1(a0)
0000E48A 117C 0001 0018             		move.b	#1,$18(a0)
0000E490 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E496 117C 000C 0019             		move.b	#$C,$19(a0)
0000E49C 1028 0028                  		move.b	$28(a0),d0
0000E4A0 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E4A4 D040                       		add.w	d0,d0		; multiply by 2
0000E4A6 3140 0030                  		move.w	d0,$30(a0)
0000E4AA 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E4AE 1028 0028                  		move.b	$28(a0),d0
0000E4B2 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E4B6 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E4B8 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E4BC 117C 000A 0036             		move.b	#$A,$36(a0)
0000E4C2 0828 0001 0022             		btst	#1,$22(a0)
0000E4C8 6700                       		beq.s	Obj6D_Action
0000E4CA 117C 0002 001C             		move.b	#2,$1C(a0)
0000E4D0 117C 0015 0036             		move.b	#$15,$36(a0)
0000E4D6                            
0000E4D6                            Obj6D_Action:				; XREF: Obj6D_Index
0000E4D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E4DA 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E4DC 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E4E2 0868 0000 001C             		bchg	#0,$1C(a0)
0000E4E8 6700                       		beq.s	loc_E57A
0000E4EA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E4F0 303C 00B3                  		move.w	#$B3,d0
0000E4F4 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play flame sound
0000E4FA                            
0000E4FA                            loc_E57A:
0000E4FA 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E500 6100 C1B4                  		bsr.w	AnimateSprite
0000E504 117C 0000 0020             		move.b	#0,$20(a0)
0000E50A 1028 0036                  		move.b	$36(a0),d0
0000E50E B028 001A                  		cmp.b	$1A(a0),d0
0000E512 6600                       		bne.s	Obj6D_ChkDel
0000E514 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E51A                            
0000E51A                            Obj6D_ChkDel:
0000E51A 3028 0008                  		move.w	8(a0),d0
0000E51E 0240 FF80                  		andi.w	#$FF80,d0
0000E522 3238 F700                  		move.w	($FFFFF700).w,d1
0000E526 0441 0080                  		subi.w	#$80,d1
0000E52A 0241 FF80                  		andi.w	#$FF80,d1
0000E52E 9041                       		sub.w	d1,d0
0000E530 0C40 0280                  		cmpi.w	#$280,d0
0000E534 6200 F090                  		bhi.w	DeleteObject
0000E538 6000 F050                  		bra.w	DisplaySprite
0000E53C                            ; ===========================================================================
0000E53C                            Ani_obj6D:
0000E53C                            	include "_anim\obj6D.asm"
0000E53C                            ; ---------------------------------------------------------------------------
0000E53C                            ; Animation script - flamethrower (SBZ)
0000E53C                            ; ---------------------------------------------------------------------------
0000E53C 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E53E 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E540 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E542 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E544 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E552 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E55C 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E56A 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E574                            		even
0000E574                            		even
0000E574                            
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Sprite mappings - flame thrower (SBZ)
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            Map_obj6D:
0000E574                            	include "_maps\obj6D.asm"
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Sprite mappings - flame thrower (SBZ)
0000E574                            ; ---------------------------------------------------------------------------
0000E574 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E578 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E57C 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E580 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E584 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E588 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E58C 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E590 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E594 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E598 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E59C 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E5A0 01                         byte_E620:	dc.b 1
0000E5A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5A6 02                         byte_E626:	dc.b 2
0000E5A7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5AC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5B1 02                         byte_E631:	dc.b 2
0000E5B2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5B7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5BC 03                         byte_E63C:	dc.b 3
0000E5BD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E5C2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5CC 03                         byte_E64C:	dc.b 3
0000E5CD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E5D2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5D7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5DC 04                         byte_E65C:	dc.b 4
0000E5DD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E5E2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E5E7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5EC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5F1 04                         byte_E671:	dc.b 4
0000E5F2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E5F7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E5FC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E601 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E606 05                         byte_E686:	dc.b 5
0000E607 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E60C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E611 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E616 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E61B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E620 05                         byte_E6A0:	dc.b 5
0000E621 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E626 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E62B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E630 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E635 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E63A 06                         byte_E6BA:	dc.b 6
0000E63B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E640 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E645 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E64A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E64F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E654 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E659 06                         byte_E6D9:	dc.b 6
0000E65A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E65F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E664 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E669 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E66E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E673 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E678 01                         byte_E6F8:	dc.b 1
0000E679 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E67E 02                         byte_E6FE:	dc.b 2
0000E67F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E684 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E689 02                         byte_E709:	dc.b 2
0000E68A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E68F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E694 03                         byte_E714:	dc.b 3
0000E695 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E69A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E69F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6A4 03                         byte_E724:	dc.b 3
0000E6A5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6AA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6AF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6B4 04                         byte_E734:	dc.b 4
0000E6B5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E6BA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6BF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6C4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6C9 04                         byte_E749:	dc.b 4
0000E6CA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E6CF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6D4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6D9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6DE 05                         byte_E75E:	dc.b 5
0000E6DF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E6E4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E6E9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6EE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6F8 05                         byte_E778:	dc.b 5
0000E6F9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E6FE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E703 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E708 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E70D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E712 06                         byte_E792:	dc.b 6
0000E713 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E718 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E71D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E722 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E727 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E72C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E731 06                         byte_E7B1:	dc.b 6
0000E732 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E737 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E73C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E741 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E746 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E74B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E750                            		even
0000E750                            		even
0000E750                            
0000E750                            ; ===========================================================================
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            
0000E750                            Obj46:					; XREF: Obj_Index
0000E750 7000                       		moveq	#0,d0
0000E752 1028 0024                  		move.b	$24(a0),d0
0000E756 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E75A 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E75E                            ; ===========================================================================
0000E75E 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E760 0000                       		dc.w Obj46_Action-Obj46_Index
0000E762                            ; ===========================================================================
0000E762                            
0000E762                            Obj46_Main:				; XREF: Obj46_Index
0000E762 5428 0024                  		addq.b	#2,$24(a0)
0000E766 117C 000F 0016             		move.b	#$F,$16(a0)
0000E76C 117C 000F 0017             		move.b	#$F,$17(a0)
0000E772 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E77A 317C 4000 0002             		move.w	#$4000,2(a0)
0000E780 117C 0004 0001             		move.b	#4,1(a0)
0000E786 117C 0003 0018             		move.b	#3,$18(a0)
0000E78C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E792 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E798 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E79E                            
0000E79E                            Obj46_Action:				; XREF: Obj46_Index
0000E79E 4A28 0001                  		tst.b	1(a0)
0000E7A2 6A00                       		bpl.s	Obj46_ChkDel
0000E7A4 7000                       		moveq	#0,d0
0000E7A6 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E7AA 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E7AE D040                       		add.w	d0,d0
0000E7B0 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E7B4 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E7B8 323C 001B                  		move.w	#$1B,d1
0000E7BC 343C 0010                  		move.w	#$10,d2
0000E7C0 363C 0011                  		move.w	#$11,d3
0000E7C4 3828 0008                  		move.w	8(a0),d4
0000E7C8 6100 0000                  		bsr.w	SolidObject
0000E7CC                            
0000E7CC                            Obj46_ChkDel:
0000E7CC 6100 EDBC                  		bsr.w	DisplaySprite
0000E7D0 3028 0008                  		move.w	8(a0),d0
0000E7D4 0240 FF80                  		andi.w	#$FF80,d0
0000E7D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7DC 0441 0080                  		subi.w	#$80,d1
0000E7E0 0241 FF80                  		andi.w	#$FF80,d1
0000E7E4 9041                       		sub.w	d1,d0
0000E7E6 0C40 0280                  		cmpi.w	#$280,d0
0000E7EA 6200 EDDA                  		bhi.w	DeleteObject
0000E7EE 4E75                       		rts	
0000E7F0                            ; ===========================================================================
0000E7F0 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E7F2 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E7F4 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E7F6 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E7F8 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E7FA                            ; ===========================================================================
0000E7FA                            
0000E7FA                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E7FA 4E75                       		rts	
0000E7FC                            ; ===========================================================================
0000E7FC                            
0000E7FC                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E7FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E800 9068 0008                  		sub.w	8(a0),d0
0000E804 6400                       		bcc.s	loc_E888
0000E806 4440                       		neg.w	d0
0000E808                            
0000E808                            loc_E888:
0000E808 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E80C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E80E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E814                            
0000E814                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E814 7000                       		moveq	#0,d0
0000E816 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E81A 0828 0003 0028             		btst	#3,$28(a0)
0000E820 6700                       		beq.s	loc_E8A8
0000E822 4440                       		neg.w	d0
0000E824 0640 0010                  		addi.w	#$10,d0
0000E828                            
0000E828                            loc_E8A8:
0000E828 3228 0030                  		move.w	$30(a0),d1
0000E82C 9240                       		sub.w	d0,d1
0000E82E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E832 4E75                       		rts	
0000E834                            ; ===========================================================================
0000E834                            
0000E834                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E834 6100 ED2E                  		bsr.w	SpeedToPos
0000E838 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E83E 6100 0000                  		bsr.w	ObjHitFloor
0000E842 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E844 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E848 D368 000C                  		add.w	d1,$C(a0)
0000E84C 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E850 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E856 117C 0004 0028             		move.b	#4,$28(a0)
0000E85C 3011                       		move.w	(a1),d0
0000E85E 0240 03FF                  		andi.w	#$3FF,d0
0000E862 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E866 6400                       		bcc.s	locret_E8EE
0000E868 117C 0000 0028             		move.b	#0,$28(a0)
0000E86E                            
0000E86E                            locret_E8EE:
0000E86E 4E75                       		rts	
0000E870                            ; ===========================================================================
0000E870                            
0000E870                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E870 7000                       		moveq	#0,d0
0000E872 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E876 E648                       		lsr.w	#3,d0
0000E878 3228 0030                  		move.w	$30(a0),d1
0000E87C 9240                       		sub.w	d0,d1
0000E87E 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E882 4E75                       		rts	
0000E884                            ; ===========================================================================
0000E884                            ; ---------------------------------------------------------------------------
0000E884                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E884                            ; ---------------------------------------------------------------------------
0000E884                            Map_obj46:
0000E884                            	include "_maps\obj46.asm"
0000E884                            ; ---------------------------------------------------------------------------
0000E884                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E884                            ; ---------------------------------------------------------------------------
0000E884 0000                       		dc.w byte_E906-Map_obj46
0000E886 01                         byte_E906:	dc.b 1
0000E887 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E88C                            		even
0000E88C                            		even
0000E88C                            
0000E88C                            ; ===========================================================================
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            ; Object 12 - lamp (SYZ)
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            
0000E88C                            Obj12:					; XREF: Obj_Index
0000E88C 7000                       		moveq	#0,d0
0000E88E 1028 0024                  		move.b	$24(a0),d0
0000E892 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E896 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E89A                            ; ===========================================================================
0000E89A 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E89C 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            Obj12_Main:				; XREF: Obj12_Index
0000E89E 5428 0024                  		addq.b	#2,$24(a0)
0000E8A2 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E8AA 317C 0000 0002             		move.w	#0,2(a0)
0000E8B0 117C 0004 0001             		move.b	#4,1(a0)
0000E8B6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8BC 117C 0006 0018             		move.b	#6,$18(a0)
0000E8C2                            
0000E8C2                            Obj12_Animate:				; XREF: Obj12_Index
0000E8C2 5328 001E                  		subq.b	#1,$1E(a0)
0000E8C6 6A00                       		bpl.s	Obj12_ChkDel
0000E8C8 117C 0007 001E             		move.b	#7,$1E(a0)
0000E8CE 5228 001A                  		addq.b	#1,$1A(a0)
0000E8D2 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000E8D8 6500                       		bcs.s	Obj12_ChkDel
0000E8DA 117C 0000 001A             		move.b	#0,$1A(a0)
0000E8E0                            
0000E8E0                            Obj12_ChkDel:
0000E8E0 3028 0008                  		move.w	8(a0),d0
0000E8E4 0240 FF80                  		andi.w	#$FF80,d0
0000E8E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8EC 0441 0080                  		subi.w	#$80,d1
0000E8F0 0241 FF80                  		andi.w	#$FF80,d1
0000E8F4 9041                       		sub.w	d1,d0
0000E8F6 0C40 0280                  		cmpi.w	#$280,d0
0000E8FA 6200 ECCA                  		bhi.w	DeleteObject
0000E8FE 6000 EC8A                  		bra.w	DisplaySprite
0000E902                            ; ===========================================================================
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Sprite mappings - lamp (SYZ)
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            Map_obj12:
0000E902                            	include "_maps\obj12.asm"
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Sprite mappings - lamp (SYZ)
0000E902                            ; ---------------------------------------------------------------------------
0000E902 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000E906 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000E90A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000E90E 02                         byte_E98E:	dc.b 2
0000E90F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000E914 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000E919 02                         byte_E999:	dc.b 2
0000E91A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000E91F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000E924 02                         byte_E9A4:	dc.b 2
0000E925 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000E92A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000E92F 02                         byte_E9AF:	dc.b 2
0000E930 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000E935 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000E93A 02                         byte_E9BA:	dc.b 2
0000E93B F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000E940 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000E945 02                         byte_E9C5:	dc.b 2
0000E946 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000E94B 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000E950                            		even
0000E950                            		even
0000E950                            
0000E950                            ; ===========================================================================
0000E950                            ; ---------------------------------------------------------------------------
0000E950                            ; Object 47 - pinball bumper (SYZ)
0000E950                            ; ---------------------------------------------------------------------------
0000E950                            
0000E950                            Obj47:					; XREF: Obj_Index
0000E950 7000                       		moveq	#0,d0
0000E952 1028 0024                  		move.b	$24(a0),d0
0000E956 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000E95A 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000E95E                            ; ===========================================================================
0000E95E 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000E960 0000                       		dc.w Obj47_Hit-Obj47_Index
0000E962                            ; ===========================================================================
0000E962                            
0000E962                            Obj47_Main:				; XREF: Obj47_Index
0000E962 5428 0024                  		addq.b	#2,$24(a0)
0000E966 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000E96E 317C 0380 0002             		move.w	#$380,2(a0)
0000E974 117C 0004 0001             		move.b	#4,1(a0)
0000E97A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E980 117C 0001 0018             		move.b	#1,$18(a0)
0000E986 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000E98C                            
0000E98C                            Obj47_Hit:				; XREF: Obj47_Index
0000E98C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000E990 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000E994 4228 0021                  		clr.b	$21(a0)
0000E998 43F8 D000                  		lea	($FFFFD000).w,a1
0000E99C 3228 0008                  		move.w	8(a0),d1
0000E9A0 3428 000C                  		move.w	$C(a0),d2
0000E9A4 9269 0008                  		sub.w	8(a1),d1
0000E9A8 9469 000C                  		sub.w	$C(a1),d2
0000E9AC 4EB9 0000 2C86             		jsr	(CalcAngle).l
0000E9B2 4EB9 0000 29B8             		jsr	(CalcSine).l
0000E9B8 C3FC F900                  		muls.w	#-$700,d1
0000E9BC E081                       		asr.l	#8,d1
0000E9BE 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000E9C2 C1FC F900                  		muls.w	#-$700,d0
0000E9C6 E080                       		asr.l	#8,d0
0000E9C8 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000E9CC 08E9 0001 0022             		bset	#1,$22(a1)
0000E9D2 08A9 0004 0022             		bclr	#4,$22(a1)
0000E9D8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E9DE 4229 003C                  		clr.b	$3C(a1)
0000E9E2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9E8 303C 00B4                  		move.w	#$B4,d0
0000E9EC 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play bumper sound
0000E9F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E9F6 7000                       		moveq	#0,d0
0000E9F8 1028 0023                  		move.b	$23(a0),d0
0000E9FC 6700                       		beq.s	Obj47_Score
0000E9FE 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EA04 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EA06 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EA0A                            
0000EA0A                            Obj47_Score:
0000EA0A 7001                       		moveq	#1,d0
0000EA0C 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EA12 6100 EFFC                  		bsr.w	SingleObjLoad
0000EA16 6600                       		bne.s	Obj47_Display
0000EA18 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EA1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA22 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA28 137C 0004 001A             		move.b	#4,$1A(a1)
0000EA2E                            
0000EA2E                            Obj47_Display:
0000EA2E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EA34 6100 BC80                  		bsr.w	AnimateSprite
0000EA38 3028 0008                  		move.w	8(a0),d0
0000EA3C 0240 FF80                  		andi.w	#$FF80,d0
0000EA40 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA44 0441 0080                  		subi.w	#$80,d1
0000EA48 0241 FF80                  		andi.w	#$FF80,d1
0000EA4C 9041                       		sub.w	d1,d0
0000EA4E 0C40 0280                  		cmpi.w	#$280,d0
0000EA52 6200                       		bhi.s	Obj47_ChkHit
0000EA54 6000 EB34                  		bra.w	DisplaySprite
0000EA58                            ; ===========================================================================
0000EA58                            
0000EA58                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EA58 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA5C 7000                       		moveq	#0,d0
0000EA5E 1028 0023                  		move.b	$23(a0),d0
0000EA62 6700                       		beq.s	Obj47_Delete
0000EA64 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA6A                            
0000EA6A                            Obj47_Delete:
0000EA6A 6000 EB5A                  		bra.w	DeleteObject
0000EA6E                            ; ===========================================================================
0000EA6E                            Ani_obj47:
0000EA6E                            	include "_anim\obj47.asm"
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E                            ; Animation script - flamethrower (SBZ)
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E 0000                       		dc.w byte_EAF4-Ani_obj47
0000EA70 0000                       		dc.w byte_EAF8-Ani_obj47
0000EA72 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EA76 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EA7E                            		even
0000EA7E                            		even
0000EA7E                            
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            ; Sprite mappings - pinball bumper (SYZ)
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            Map_obj47:
0000EA7E                            	include "_maps\obj47.asm"
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            ; Sprite mappings - pinball bumper (SYZ)
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E 0000                       		dc.w byte_EB06-Map_obj47
0000EA80 0000                       		dc.w byte_EB11-Map_obj47
0000EA82 0000                       		dc.w byte_EB1C-Map_obj47
0000EA84 02                         byte_EB06:	dc.b 2
0000EA85 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EA8A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EA8F 02                         byte_EB11:	dc.b 2
0000EA90 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EA95 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EA9A 02                         byte_EB1C:	dc.b 2
0000EA9B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EAA0 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EAA6 00                         		even
0000EAA6 00                         		even
0000EAA6                            
0000EAA6                            ; ===========================================================================
0000EAA6                            ; ---------------------------------------------------------------------------
0000EAA6                            ; Object 0D - signpost at the end of a level
0000EAA6                            ; ---------------------------------------------------------------------------
0000EAA6                            
0000EAA6                            Obj0D:					; XREF: Obj_Index
0000EAA6 7000                       		moveq	#0,d0
0000EAA8 1028 0024                  		move.b	$24(a0),d0
0000EAAC 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EAB0 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EAB4 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EABA 6100 BBFA                  		bsr.w	AnimateSprite
0000EABE 6100 EACA                  		bsr.w	DisplaySprite
0000EAC2 3028 0008                  		move.w	8(a0),d0
0000EAC6 0240 FF80                  		andi.w	#$FF80,d0
0000EACA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EACE 0441 0080                  		subi.w	#$80,d1
0000EAD2 0241 FF80                  		andi.w	#$FF80,d1
0000EAD6 9041                       		sub.w	d1,d0
0000EAD8 0C40 0280                  		cmpi.w	#$280,d0
0000EADC 6200 EAE8                  		bhi.w	DeleteObject
0000EAE0 4E75                       		rts	
0000EAE2                            ; ===========================================================================
0000EAE2 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EAE4 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EAE6 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EAE8 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EAEA 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EAEC                            ; ===========================================================================
0000EAEC                            
0000EAEC                            Obj0D_Main:				; XREF: Obj0D_Index
0000EAEC 5428 0024                  		addq.b	#2,$24(a0)
0000EAF0 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EAF8 317C 0680 0002             		move.w	#$680,2(a0)
0000EAFE 117C 0004 0001             		move.b	#4,1(a0)
0000EB04 117C 0018 0019             		move.b	#$18,$19(a0)
0000EB0A 117C 0004 0018             		move.b	#4,$18(a0)
0000EB10                            
0000EB10                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EB10 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB14 9068 0008                  		sub.w	8(a0),d0
0000EB18 6500                       		bcs.s	locret_EBBA
0000EB1A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EB1E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EB20 303C 00CF                  		move.w	#$CF,d0
0000EB24 4EB9 0000 1374             		jsr	(PlaySound).l	; play signpost	sound
0000EB2A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EB2E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EB34 5428 0024                  		addq.b	#2,$24(a0)
0000EB38                            
0000EB38                            locret_EBBA:
0000EB38 4E75                       		rts	
0000EB3A                            ; ===========================================================================
0000EB3A                            
0000EB3A                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EB3A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EB3E 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EB40 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EB46 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EB4A 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EB50 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EB52 5428 0024                  		addq.b	#2,$24(a0)
0000EB56                            
0000EB56                            Obj0D_Sparkle:
0000EB56 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EB5A 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EB5C 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EB62 7000                       		moveq	#0,d0
0000EB64 1028 0034                  		move.b	$34(a0),d0
0000EB68 5428 0034                  		addq.b	#2,$34(a0)
0000EB6C 0228 000E 0034             		andi.b	#$E,$34(a0)
0000EB72 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000EB76 6100 EE98                  		bsr.w	SingleObjLoad
0000EB7A 6600                       		bne.s	locret_EC42
0000EB7C 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000EB80 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000EB86 101A                       		move.b	(a2)+,d0
0000EB88 4880                       		ext.w	d0
0000EB8A D068 0008                  		add.w	8(a0),d0
0000EB8E 3340 0008                  		move.w	d0,8(a1)
0000EB92 101A                       		move.b	(a2)+,d0
0000EB94 4880                       		ext.w	d0
0000EB96 D068 000C                  		add.w	$C(a0),d0
0000EB9A 3340 000C                  		move.w	d0,$C(a1)
0000EB9E 237C 0000 9F34 0004        		move.l	#Map_obj25,4(a1)
0000EBA6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000EBAC 137C 0004 0001             		move.b	#4,1(a1)
0000EBB2 137C 0002 0018             		move.b	#2,$18(a1)
0000EBB8 137C 0008 0019             		move.b	#8,$19(a1)
0000EBBE                            
0000EBBE                            locret_EC42:
0000EBBE 4E75                       		rts	
0000EBC0                            ; ===========================================================================
0000EBC0 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EBC2 0808                       		dc.b	8,   8
0000EBC4 F000                       		dc.b -$10,   0
0000EBC6 18F8                       		dc.b  $18,  -8
0000EBC8 00F8                       		dc.b	0,  -8
0000EBCA 1000                       		dc.b  $10,   0
0000EBCC E808                       		dc.b -$18,   8
0000EBCE 1810                       		dc.b  $18, $10
0000EBD0                            ; ===========================================================================
0000EBD0                            
0000EBD0                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EBD0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EBD4 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EBD8 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EBDE 6600                       		bne.s	loc_EC70
0000EBE0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EBE6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EBEC                            
0000EBEC                            loc_EC70:
0000EBEC 4A38 D000                  		tst.b	($FFFFD000).w
0000EBF0 6700                       		beq.s	loc_EC86
0000EBF2 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBF6 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EBFA 0641 0128                  		addi.w	#$128,d1
0000EBFE B041                       		cmp.w	d1,d0
0000EC00 6500                       		bcs.s	locret_ECEE
0000EC02                            
0000EC02                            loc_EC86:
0000EC02 5428 0024                  		addq.b	#2,$24(a0)
0000EC06                            
0000EC06                            ; ---------------------------------------------------------------------------
0000EC06                            ; Subroutine to	set up bonuses at the end of an	act
0000EC06                            ; ---------------------------------------------------------------------------
0000EC06                            
0000EC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC06                            
0000EC06                            
0000EC06                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EC06 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EC0A 6600                       		bne.s	locret_ECEE
0000EC0C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EC12 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EC16 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC1A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EC20 7010                       		moveq	#$10,d0
0000EC22 4EB9 0000 1590             		jsr	(LoadPLC2).l	; load title card patterns
0000EC28 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EC2E 7000                       		moveq	#0,d0
0000EC30 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EC34 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EC38 7200                       		moveq	#0,d1
0000EC3A 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EC3E D041                       		add.w	d1,d0		; add up your time
0000EC40 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EC44 7214                       		moveq	#$14,d1
0000EC46 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EC48 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EC4A 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EC4C                            
0000EC4C                            loc_ECD0:
0000EC4C D040                       		add.w	d0,d0
0000EC4E 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EC54 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EC58 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EC5C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EC60 303C 008E                  		move.w	#$8E,d0
0000EC64 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EC6A                            
0000EC6A                            locret_ECEE:
0000EC6A 4E75                       		rts	
0000EC6C                            ; End of function GotThroughAct
0000EC6C                            
0000EC6C                            ; ===========================================================================
0000EC6C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EC80 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EC96                            ; ===========================================================================
0000EC96                            
0000EC96                            locret_ED1A:				; XREF: Obj0D_Index
0000EC96 4E75                       		rts	
0000EC98                            ; ===========================================================================
0000EC98                            Ani_obj0D:
0000EC98                            	include "_anim\obj0D.asm"
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            ; Animation script - signpost
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98 0000                       		dc.w byte_ED24-Ani_obj0D
0000EC9A 0000                       		dc.w byte_ED28-Ani_obj0D
0000EC9C 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EC9E 0000                       		dc.w byte_ED34-Ani_obj0D
0000ECA0 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000ECA4 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000ECAA 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000ECB0 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000ECB4 00                         		even
0000ECB4 00                         		even
0000ECB4                            
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            ; Sprite mappings - signpost
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            Map_obj0D:
0000ECB4                            	include "_maps\obj0D.asm"
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            ; Sprite mappings - signpost
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000ECB8 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000ECBC 0000                       		dc.w byte_ED73-Map_obj0D
0000ECBE 03                         byte_ED42:	dc.b 3
0000ECBF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000ECC4 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000ECC9 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECCE 02                         byte_ED52:	dc.b 2
0000ECCF F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000ECD4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECD9 02                         byte_ED5D:	dc.b 2
0000ECDA F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000ECDF 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ECE4 02                         byte_ED68:	dc.b 2
0000ECE5 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000ECEA 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ECEF 03                         byte_ED73:	dc.b 3
0000ECF0 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000ECF5 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000ECFA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ED00 00                         		even
0000ED00 00                         		even
0000ED00                            
0000ED00                            ; ===========================================================================
0000ED00                            ; ---------------------------------------------------------------------------
0000ED00                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000ED00                            ; ---------------------------------------------------------------------------
0000ED00                            
0000ED00                            Obj4C:					; XREF: Obj_Index
0000ED00 7000                       		moveq	#0,d0
0000ED02 1028 0024                  		move.b	$24(a0),d0
0000ED06 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000ED0A 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000ED0E 6000 0000                  		bra.w	Obj4D_ChkDel
0000ED12                            ; ===========================================================================
0000ED12 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000ED14 0000                       		dc.w loc_EDCC-Obj4C_Index
0000ED16 0000                       		dc.w loc_EE3E-Obj4C_Index
0000ED18 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000ED1A 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000ED1C 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000ED1E                            ; ===========================================================================
0000ED1E                            
0000ED1E                            Obj4C_Main:				; XREF: Obj4C_Index
0000ED1E 5428 0024                  		addq.b	#2,$24(a0)
0000ED22 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000ED2A 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000ED30 117C 0004 0001             		move.b	#4,1(a0)
0000ED36 117C 0001 0018             		move.b	#1,$18(a0)
0000ED3C 117C 0038 0019             		move.b	#$38,$19(a0)
0000ED42 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000ED48                            
0000ED48                            loc_EDCC:				; XREF: Obj4C_Index
0000ED48 5368 0032                  		subq.w	#1,$32(a0)
0000ED4C 6A00                       		bpl.s	locret_EDF0
0000ED4E 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000ED54 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000ED58 3228 000C                  		move.w	$C(a0),d1
0000ED5C B041                       		cmp.w	d1,d0
0000ED5E 6400                       		bcc.s	locret_EDF0
0000ED60 0441 0170                  		subi.w	#$170,d1
0000ED64 B041                       		cmp.w	d1,d0
0000ED66 6500                       		bcs.s	locret_EDF0
0000ED68 5428 0024                  		addq.b	#2,$24(a0)
0000ED6C                            
0000ED6C                            locret_EDF0:
0000ED6C 4E75                       		rts	
0000ED6E                            ; ===========================================================================
0000ED6E                            
0000ED6E                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000ED6E 5428 0024                  		addq.b	#2,$24(a0)
0000ED72 6100 ECB2                  		bsr.w	SingleObjLoad2
0000ED76 6600                       		bne.s	loc_EE18
0000ED78 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000ED7C 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED82 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED88 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ED8E 2348 003C                  		move.l	a0,$3C(a1)
0000ED92                            
0000ED92                            loc_EE18:
0000ED92 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED98 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000ED9C 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000ED9E 117C 0004 001C             		move.b	#4,$1C(a0)
0000EDA4 6000                       		bra.s	Obj4C_Display
0000EDA6                            ; ===========================================================================
0000EDA6                            
0000EDA6                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EDA6 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EDAA 08E9 0001 0022             		bset	#1,$22(a1)
0000EDB0 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EDB6 6000                       		bra.s	Obj4C_Display
0000EDB8                            ; ===========================================================================
0000EDB8                            
0000EDB8                            loc_EE3E:				; XREF: Obj4C_Index
0000EDB8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EDBC 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EDBE 5428 0024                  		addq.b	#2,$24(a0)
0000EDC2 4E75                       		rts	
0000EDC4                            ; ===========================================================================
0000EDC4                            
0000EDC4                            Obj4C_Display:				; XREF: Obj4C_Index
0000EDC4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EDCA 6100 B8EA                  		bsr.w	AnimateSprite
0000EDCE 6100 E7BA                  		bsr.w	DisplaySprite
0000EDD2 4E75                       		rts	
0000EDD4                            ; ===========================================================================
0000EDD4                            
0000EDD4                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EDD4 117C 0000 001C             		move.b	#0,$1C(a0)
0000EDDA 117C 0002 0024             		move.b	#2,$24(a0)
0000EDE0 4A28 0028                  		tst.b	$28(a0)
0000EDE4 6700 E7E0                  		beq.w	DeleteObject
0000EDE8 4E75                       		rts	
0000EDEA                            ; ===========================================================================
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA                            ; Object 4D - lava geyser / lavafall (MZ)
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA                            
0000EDEA                            Obj4D:					; XREF: Obj_Index
0000EDEA 7000                       		moveq	#0,d0
0000EDEC 1028 0024                  		move.b	$24(a0),d0
0000EDF0 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EDF4 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EDF8 6000 E790                  		bra.w	DisplaySprite
0000EDFC                            ; ===========================================================================
0000EDFC 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EDFE 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EE00 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EE02 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EE04                            
0000EE04 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EE08                            ; ===========================================================================
0000EE08                            
0000EE08                            Obj4D_Main:				; XREF: Obj4D_Index
0000EE08 5428 0024                  		addq.b	#2,$24(a0)
0000EE0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE12 4A28 0028                  		tst.b	$28(a0)
0000EE16 6700                       		beq.s	loc_EEA4
0000EE18 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EE1E                            
0000EE1E                            loc_EEA4:
0000EE1E 7000                       		moveq	#0,d0
0000EE20 1028 0028                  		move.b	$28(a0),d0
0000EE24 D040                       		add.w	d0,d0
0000EE26 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EE2C 2248                       		movea.l	a0,a1
0000EE2E 7201                       		moveq	#1,d1
0000EE30 6100                       		bsr.s	Obj4D_MakeLava
0000EE32 6000                       		bra.s	loc_EF10
0000EE34                            ; ===========================================================================
0000EE34                            
0000EE34                            Obj4D_Loop:
0000EE34 6100 EBF0                  		bsr.w	SingleObjLoad2
0000EE38 6600                       		bne.s	loc_EF0A
0000EE3A                            
0000EE3A                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EE3A 12BC 004D                  		move.b	#$4D,0(a1)
0000EE3E 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EE46 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EE4C 137C 0004 0001             		move.b	#4,1(a1)
0000EE52 137C 0020 0019             		move.b	#$20,$19(a1)
0000EE58 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE64 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE6A 137C 0001 0018             		move.b	#1,$18(a1)
0000EE70 137C 0005 001C             		move.b	#5,$1C(a1)
0000EE76 4A28 0028                  		tst.b	$28(a0)
0000EE7A 6700                       		beq.s	loc_EF0A
0000EE7C 137C 0002 001C             		move.b	#2,$1C(a1)
0000EE82                            
0000EE82                            loc_EF0A:
0000EE82 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EE86 4E75                       		rts	
0000EE88                            ; ===========================================================================
0000EE88                            
0000EE88                            loc_EF10:				; XREF: Obj4D_Main
0000EE88 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EE8E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EE94 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EE9A 137C 0093 0020             		move.b	#$93,$20(a1)
0000EEA0 137C 0080 0016             		move.b	#$80,$16(a1)
0000EEA6 08E9 0004 0001             		bset	#4,1(a1)
0000EEAC 5829 0024                  		addq.b	#4,$24(a1)
0000EEB0 2348 003C                  		move.l	a0,$3C(a1)
0000EEB4 4A28 0028                  		tst.b	$28(a0)
0000EEB8 6700                       		beq.s	Obj4D_PlaySnd
0000EEBA 7200                       		moveq	#0,d1
0000EEBC 6100 FF76                  		bsr.w	Obj4D_Loop
0000EEC0 5429 0024                  		addq.b	#2,$24(a1)
0000EEC4 08E9 0004 0002             		bset	#4,2(a1)
0000EECA 0669 0100 000C             		addi.w	#$100,$C(a1)
0000EED0 137C 0000 0018             		move.b	#0,$18(a1)
0000EED6 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EEDC 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000EEE2 117C 0000 0028             		move.b	#0,$28(a0)
0000EEE8                            
0000EEE8                            Obj4D_PlaySnd:
0000EEE8 303C 00C8                  		move.w	#$C8,d0
0000EEEC 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play flame sound
0000EEF2                            
0000EEF2                            Obj4D_Action:				; XREF: Obj4D_Index
0000EEF2 7000                       		moveq	#0,d0
0000EEF4 1028 0028                  		move.b	$28(a0),d0
0000EEF8 D040                       		add.w	d0,d0
0000EEFA 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000EEFE 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000EF02 6100 E660                  		bsr.w	SpeedToPos
0000EF06 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF0C 6100 B7A8                  		bsr.w	AnimateSprite
0000EF10                            
0000EF10                            Obj4D_ChkDel:				; XREF: Obj4C
0000EF10 3028 0008                  		move.w	8(a0),d0
0000EF14 0240 FF80                  		andi.w	#$FF80,d0
0000EF18 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF1C 0441 0080                  		subi.w	#$80,d1
0000EF20 0241 FF80                  		andi.w	#$FF80,d1
0000EF24 9041                       		sub.w	d1,d0
0000EF26 0C40 0280                  		cmpi.w	#$280,d0
0000EF2A 6200 E69A                  		bhi.w	DeleteObject
0000EF2E 4E75                       		rts	
0000EF30                            ; ===========================================================================
0000EF30 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000EF32 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000EF34                            ; ===========================================================================
0000EF34                            
0000EF34                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000EF34 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF3A 3028 0030                  		move.w	$30(a0),d0
0000EF3E B068 000C                  		cmp.w	$C(a0),d0
0000EF42 6400                       		bcc.s	locret_EFDA
0000EF44 5828 0024                  		addq.b	#4,$24(a0)
0000EF48 2268 003C                  		movea.l	$3C(a0),a1
0000EF4C 137C 0003 001C             		move.b	#3,$1C(a1)
0000EF52                            
0000EF52                            locret_EFDA:
0000EF52 4E75                       		rts	
0000EF54                            ; ===========================================================================
0000EF54                            
0000EF54                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000EF54 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF5A 3028 0030                  		move.w	$30(a0),d0
0000EF5E B068 000C                  		cmp.w	$C(a0),d0
0000EF62 6400                       		bcc.s	locret_EFFA
0000EF64 5828 0024                  		addq.b	#4,$24(a0)
0000EF68 2268 003C                  		movea.l	$3C(a0),a1
0000EF6C 137C 0001 001C             		move.b	#1,$1C(a1)
0000EF72                            
0000EF72                            locret_EFFA:
0000EF72 4E75                       		rts	
0000EF74                            ; ===========================================================================
0000EF74                            
0000EF74                            loc_EFFC:				; XREF: Obj4D_Index
0000EF74 2268 003C                  		movea.l	$3C(a0),a1
0000EF78 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000EF7E 6700 0000                  		beq.w	Obj4D_Delete
0000EF82 3029 000C                  		move.w	$C(a1),d0
0000EF86 0640 0060                  		addi.w	#$60,d0
0000EF8A 3140 000C                  		move.w	d0,$C(a0)
0000EF8E 9068 0030                  		sub.w	$30(a0),d0
0000EF92 4440                       		neg.w	d0
0000EF94 7208                       		moveq	#8,d1
0000EF96 0C40 0040                  		cmpi.w	#$40,d0
0000EF9A 6C00                       		bge.s	loc_F026
0000EF9C 720B                       		moveq	#$B,d1
0000EF9E                            
0000EF9E                            loc_F026:
0000EF9E 0C40 0080                  		cmpi.w	#$80,d0
0000EFA2 6F00                       		ble.s	loc_F02E
0000EFA4 720E                       		moveq	#$E,d1
0000EFA6                            
0000EFA6                            loc_F02E:
0000EFA6 5328 001E                  		subq.b	#1,$1E(a0)
0000EFAA 6A00                       		bpl.s	loc_F04C
0000EFAC 117C 0007 001E             		move.b	#7,$1E(a0)
0000EFB2 5228 001B                  		addq.b	#1,$1B(a0)
0000EFB6 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000EFBC 6500                       		bcs.s	loc_F04C
0000EFBE 117C 0000 001B             		move.b	#0,$1B(a0)
0000EFC4                            
0000EFC4                            loc_F04C:
0000EFC4 1028 001B                  		move.b	$1B(a0),d0
0000EFC8 D001                       		add.b	d1,d0
0000EFCA 1140 001A                  		move.b	d0,$1A(a0)
0000EFCE 6000 FF40                  		bra.w	Obj4D_ChkDel
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj4D_Delete:				; XREF: Obj4D_Index
0000EFD2 6000 E5F2                  		bra.w	DeleteObject
0000EFD6                            ; ===========================================================================
0000EFD6                            ; ---------------------------------------------------------------------------
0000EFD6                            ; Object 4E - advancing	wall of	lava (MZ)
0000EFD6                            ; ---------------------------------------------------------------------------
0000EFD6                            
0000EFD6                            Obj4E:					; XREF: Obj_Index
0000EFD6 7000                       		moveq	#0,d0
0000EFD8 1028 0024                  		move.b	$24(a0),d0
0000EFDC 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000EFE0 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000EFE4                            ; ===========================================================================
0000EFE4 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000EFE6 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000EFE8 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000EFEA 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000EFEC 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000EFEE                            ; ===========================================================================
0000EFEE                            
0000EFEE                            Obj4E_Main:				; XREF: Obj4E_Index
0000EFEE 5828 0024                  		addq.b	#4,$24(a0)
0000EFF2 2248                       		movea.l	a0,a1
0000EFF4 7201                       		moveq	#1,d1
0000EFF6 6000                       		bra.s	Obj4E_Main2
0000EFF8                            ; ===========================================================================
0000EFF8                            
0000EFF8                            Obj4E_Loop:
0000EFF8 6100 EA2C                  		bsr.w	SingleObjLoad2
0000EFFC 6600                       		bne.s	loc_F0C8
0000EFFE                            
0000EFFE                            Obj4E_Main2:				; XREF: Obj4E_Main
0000EFFE 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F002 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F00A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F010 137C 0004 0001             		move.b	#4,1(a1)
0000F016 137C 0050 0019             		move.b	#$50,$19(a1)
0000F01C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F022 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F028 137C 0001 0018             		move.b	#1,$18(a1)
0000F02E 137C 0000 001C             		move.b	#0,$1C(a1)
0000F034 137C 0094 0020             		move.b	#$94,$20(a1)
0000F03A 2348 003C                  		move.l	a0,$3C(a1)
0000F03E                            
0000F03E                            loc_F0C8:
0000F03E 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F042                            
0000F042 5C29 0024                  		addq.b	#6,$24(a1)
0000F046 137C 0004 001A             		move.b	#4,$1A(a1)
0000F04C                            
0000F04C                            Obj4E_Action:				; XREF: Obj4E_Index
0000F04C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F050 9068 0008                  		sub.w	8(a0),d0
0000F054 6400                       		bcc.s	Obj4E_ChkSonic
0000F056 4440                       		neg.w	d0
0000F058                            
0000F058                            Obj4E_ChkSonic:
0000F058 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F05C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F05E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F062 9068 000C                  		sub.w	$C(a0),d0
0000F066 6400                       		bcc.s	loc_F0F4
0000F068 4440                       		neg.w	d0
0000F06A                            
0000F06A                            loc_F0F4:
0000F06A 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F06E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F070 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F076 6000                       		bra.s	Obj4E_Solid
0000F078                            ; ===========================================================================
0000F078                            
0000F078                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F078 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F07C 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F07E 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F084 5528 0024                  		subq.b	#2,$24(a0)
0000F088                            
0000F088                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F088 323C 002B                  		move.w	#$2B,d1
0000F08C 343C 0018                  		move.w	#$18,d2
0000F090 3602                       		move.w	d2,d3
0000F092 5243                       		addq.w	#1,d3
0000F094 3828 0008                  		move.w	8(a0),d4
0000F098 1028 0024                  		move.b	$24(a0),d0
0000F09C 3F00                       		move.w	d0,-(sp)
0000F09E 6100 0000                  		bsr.w	SolidObject
0000F0A2 301F                       		move.w	(sp)+,d0
0000F0A4 1140 0024                  		move.b	d0,$24(a0)
0000F0A8 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F0AE 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F0B0 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F0B4 4228 0036                  		clr.b	$36(a0)
0000F0B8                            
0000F0B8                            Obj4E_Animate:
0000F0B8 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F0BE 6100 B5F6                  		bsr.w	AnimateSprite
0000F0C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F0C8 6400                       		bcc.s	Obj4E_ChkDel
0000F0CA 6100 E498                  		bsr.w	SpeedToPos
0000F0CE                            
0000F0CE                            Obj4E_ChkDel:
0000F0CE 6100 E4BA                  		bsr.w	DisplaySprite
0000F0D2 4A28 0036                  		tst.b	$36(a0)
0000F0D6 6600                       		bne.s	locret_F17E
0000F0D8 3028 0008                  		move.w	8(a0),d0
0000F0DC 0240 FF80                  		andi.w	#$FF80,d0
0000F0E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0E4 0441 0080                  		subi.w	#$80,d1
0000F0E8 0241 FF80                  		andi.w	#$FF80,d1
0000F0EC 9041                       		sub.w	d1,d0
0000F0EE 0C40 0280                  		cmpi.w	#$280,d0
0000F0F2 6200                       		bhi.s	Obj4E_ChkGone
0000F0F4                            
0000F0F4                            locret_F17E:
0000F0F4 4E75                       		rts	
0000F0F6                            ; ===========================================================================
0000F0F6                            
0000F0F6                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F0F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F0FA 7000                       		moveq	#0,d0
0000F0FC 1028 0023                  		move.b	$23(a0),d0
0000F100 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F106 117C 0008 0024             		move.b	#8,$24(a0)
0000F10C 4E75                       		rts	
0000F10E                            ; ===========================================================================
0000F10E                            
0000F10E                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F10E 2268 003C                  		movea.l	$3C(a0),a1
0000F112 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F118 6700                       		beq.s	Obj4E_Delete
0000F11A 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F120 0468 0080 0008             		subi.w	#$80,8(a0)
0000F126 6000 E462                  		bra.w	DisplaySprite
0000F12A                            ; ===========================================================================
0000F12A                            
0000F12A                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F12A 6000 E49A                  		bra.w	DeleteObject
0000F12E                            ; ===========================================================================
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            ; Object 54 - invisible	lava tag (MZ)
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            
0000F12E                            Obj54:					; XREF: Obj_Index
0000F12E 7000                       		moveq	#0,d0
0000F130 1028 0024                  		move.b	$24(a0),d0
0000F134 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F138 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F13C                            ; ===========================================================================
0000F13C 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F13E 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F140                            
0000F140 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F144                            ; ===========================================================================
0000F144                            
0000F144                            Obj54_Main:				; XREF: Obj54_Index
0000F144 5428 0024                  		addq.b	#2,$24(a0)
0000F148 7000                       		moveq	#0,d0
0000F14A 1028 0028                  		move.b	$28(a0),d0
0000F14E 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F154 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F15C 117C 0084 0001             		move.b	#$84,1(a0)
0000F162                            
0000F162                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F162 3028 0008                  		move.w	8(a0),d0
0000F166 0240 FF80                  		andi.w	#$FF80,d0
0000F16A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F16E 0441 0080                  		subi.w	#$80,d1
0000F172 0241 FF80                  		andi.w	#$FF80,d1
0000F176 9041                       		sub.w	d1,d0
0000F178 6B00 E44C                  		bmi.w	DeleteObject
0000F17C 0C40 0280                  		cmpi.w	#$280,d0
0000F180 6200 E444                  		bhi.w	DeleteObject
0000F184 4E75                       		rts	
0000F186                            ; ===========================================================================
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            ; Sprite mappings - invisible lava tag (MZ)
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            Map_obj54:
0000F186                            	include "_maps\obj54.asm"
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            ; Sprite mappings - invisible lava tag (MZ)
0000F186                            ; ---------------------------------------------------------------------------
0000F186 0000                       		dc.w byte_F212-Map_obj54
0000F188 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F18A 00                         		even
0000F18A 00                         		even
0000F18A                            
0000F18A                            Ani_obj4C:
0000F18A                            	include "_anim\obj4C.asm"
0000F18A                            ; ---------------------------------------------------------------------------
0000F18A                            ; Animation script - geyser of lava (MZ)
0000F18A                            ; ---------------------------------------------------------------------------
0000F18A 0000                       		dc.w byte_F220-Ani_obj4C
0000F18C 0000                       		dc.w byte_F22A-Ani_obj4C
0000F18E 0000                       		dc.w byte_F22E-Ani_obj4C
0000F190 0000                       		dc.w byte_F232-Ani_obj4C
0000F192 0000                       		dc.w byte_F23A-Ani_obj4C
0000F194 0000                       		dc.w byte_F23E-Ani_obj4C
0000F196 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F1A0 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F1A4 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F1A8 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F1B0 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F1B4 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F1B8                            		even
0000F1B8                            		even
0000F1B8                            
0000F1B8                            Ani_obj4E:
0000F1B8                            	include "_anim\obj4E.asm"
0000F1B8                            ; ---------------------------------------------------------------------------
0000F1B8                            ; Animation script - advancing wall of lava (MZ)
0000F1B8                            ; ---------------------------------------------------------------------------
0000F1B8 0000                       		dc.w byte_F244-Ani_obj4E
0000F1BA 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F1C0                            		even
0000F1C0                            		even
0000F1C0                            
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0                            Map_obj4C:
0000F1C0                            	include "_maps\obj4C.asm"
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F1C4 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F1C8 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F1CC 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F1D0 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F1D4 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F1D8 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F1DC 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F1E0 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F1E4 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F1E8 02                         byte_F272:	dc.b 2
0000F1E9 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F1EE EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F1F3 02                         byte_F27D:	dc.b 2
0000F1F4 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F1F9 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F1FE 04                         byte_F288:	dc.b 4
0000F1FF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F204 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F209 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F20E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F213 04                         byte_F29D:	dc.b 4
0000F214 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F219 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F21E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F223 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F228 06                         byte_F2B2:	dc.b 6
0000F229 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F22E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F233 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F238 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F23D E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F242 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F247 06                         byte_F2D1:	dc.b 6
0000F248 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F24D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F252 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F257 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F25C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F261 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F266 02                         byte_F2F0:	dc.b 2
0000F267 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F26C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F271 02                         byte_F2FB:	dc.b 2
0000F272 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F277 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F27C 0A                         byte_F306:	dc.b $A
0000F27D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F282 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F287 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F28C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F291 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F296 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F29B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F2A0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F2A5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F2AA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F2AF 0A                         byte_F339:	dc.b $A
0000F2B0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F2B5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F2BA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F2BF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F2C4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F2C9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F2CE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F2D3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F2D8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F2DD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F2E2 0A                         byte_F36C:	dc.b $A
0000F2E3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F2E8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F2ED B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F2F2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F2F7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F2FC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F301 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F306 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F30B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F310 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F315 06                         byte_F39F:	dc.b 6
0000F316 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F31B 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F320 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F325 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F32A D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F32F D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F334 06                         byte_F3BE:	dc.b 6
0000F335 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F33A 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F33F B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F344 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F349 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F34E D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F353 06                         byte_F3DD:	dc.b 6
0000F354 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F359 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F35E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F363 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F368 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F36D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F372 10                         byte_F3FC:	dc.b $10
0000F373 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F378 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F37D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F382 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F387 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F38C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F391 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F396 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F39B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3A0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F3A5 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F3AA 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F3AF 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F3B4 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F3B9 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F3BE 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F3C3 10                         byte_F44D:	dc.b $10
0000F3C4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F3C9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F3CE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F3D3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F3D8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F3DD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F3E2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F3E7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F3EC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F3F1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F3F6 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F3FB 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F400 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F405 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F40A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F40F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F414 10                         byte_F49E:	dc.b $10
0000F415 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F41A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F41F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F424 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F429 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F42E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F433 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F438 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F43D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F442 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F447 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F44C 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F451 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F456 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F45B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F460 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F465 06                         byte_F4EF:	dc.b 6
0000F466 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F46B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F470 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F475 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F47A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F47F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F484 06                         byte_F50E:	dc.b 6
0000F485 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F48A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F48F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F494 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F499 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F49E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F4A3 00                         byte_F52D:	dc.b 0
0000F4A4                            		even
0000F4A4                            		even
0000F4A4                            
0000F4A4                            ; ---------------------------------------------------------------------------
0000F4A4                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4A4                            ; ---------------------------------------------------------------------------
0000F4A4                            Map_obj4E:
0000F4A4                            	include "_maps\obj4E.asm"
0000F4A4                            ; ---------------------------------------------------------------------------
0000F4A4                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4A4                            ; ---------------------------------------------------------------------------
0000F4A4 0000                       		dc.w byte_F538-Map_obj4E
0000F4A6 0000                       		dc.w byte_F566-Map_obj4E
0000F4A8 0000                       		dc.w byte_F594-Map_obj4E
0000F4AA 0000                       		dc.w byte_F5C2-Map_obj4E
0000F4AC 0000                       		dc.w byte_F5F0-Map_obj4E
0000F4AE 09                         byte_F538:	dc.b 9
0000F4AF E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F4B4 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F4B9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F4BE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F4C3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F4C8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F4CD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F4D2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F4D7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F4DC 09                         byte_F566:	dc.b 9
0000F4DD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F4E2 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F4E7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F4EC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F4F1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F4F6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F4FB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F500 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F505 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F50A 09                         byte_F594:	dc.b 9
0000F50B E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F510 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F515 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F51A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F51F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F524 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F529 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F52E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F533 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F538 09                         byte_F5C2:	dc.b 9
0000F539 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F53E 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F543 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F548 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F54D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F552 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F557 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F55C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F561 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F566 08                         byte_F5F0:	dc.b 8
0000F567 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F56C 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F571 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F576 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F57B E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F580 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F585 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F58A 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F590 00                         		even
0000F590 00                         		even
0000F590                            
0000F590                            ; ===========================================================================
0000F590                            ; ---------------------------------------------------------------------------
0000F590                            ; Object 40 - Moto Bug enemy (GHZ)
0000F590                            ; ---------------------------------------------------------------------------
0000F590                            
0000F590                            Obj40:					; XREF: Obj_Index
0000F590 7000                       		moveq	#0,d0
0000F592 1028 0024                  		move.b	$24(a0),d0
0000F596 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F59A 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F59E                            ; ===========================================================================
0000F59E 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F5A0 0000                       		dc.w Obj40_Action-Obj40_Index
0000F5A2 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F5A4 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            Obj40_Main:				; XREF: Obj40_Index
0000F5A6 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F5AE 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F5B4 117C 0004 0001             		move.b	#4,1(a0)
0000F5BA 117C 0004 0018             		move.b	#4,$18(a0)
0000F5C0 117C 0014 0019             		move.b	#$14,$19(a0)
0000F5C6 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F5CA 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F5CC 117C 000E 0016             		move.b	#$E,$16(a0)
0000F5D2 117C 0008 0017             		move.b	#8,$17(a0)
0000F5D8 117C 000C 0020             		move.b	#$C,$20(a0)
0000F5DE 6100 DF58                  		bsr.w	ObjectFall
0000F5E2 4EB9 0000 0000             		jsr	ObjHitFloor
0000F5E8 4A41                       		tst.w	d1
0000F5EA 6A00                       		bpl.s	locret_F68A
0000F5EC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F5F0 317C 0000 0012             		move.w	#0,$12(a0)
0000F5F6 5428 0024                  		addq.b	#2,$24(a0)
0000F5FA 0868 0000 0022             		bchg	#0,$22(a0)
0000F600                            
0000F600                            locret_F68A:
0000F600 4E75                       		rts	
0000F602                            ; ===========================================================================
0000F602                            
0000F602                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F602 5828 0024                  		addq.b	#4,$24(a0)
0000F606 6000 0000                  		bra.w	Obj40_Animate
0000F60A                            ; ===========================================================================
0000F60A                            
0000F60A                            Obj40_Action:				; XREF: Obj40_Index
0000F60A 7000                       		moveq	#0,d0
0000F60C 1028 0025                  		move.b	$25(a0),d0
0000F610 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F614 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F618 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F61E 6100 B096                  		bsr.w	AnimateSprite
0000F622                            
0000F622                            ; ---------------------------------------------------------------------------
0000F622                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F622                            ; ---------------------------------------------------------------------------
0000F622                            
0000F622                            MarkObjGone:
0000F622 3028 0008                  		move.w	8(a0),d0
0000F626 0240 FF80                  		andi.w	#$FF80,d0
0000F62A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F62E 0441 0080                  		subi.w	#$80,d1
0000F632 0241 FF80                  		andi.w	#$FF80,d1
0000F636 9041                       		sub.w	d1,d0
0000F638 0C40 0280                  		cmpi.w	#$280,d0
0000F63C 6200 0000                  		bhi.w	Mark_ChkGone
0000F640 6000 DF48                  		bra.w	DisplaySprite
0000F644                            ; ===========================================================================
0000F644                            
0000F644                            Mark_ChkGone:
0000F644 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F648 7000                       		moveq	#0,d0
0000F64A 1028 0023                  		move.b	$23(a0),d0
0000F64E 6700                       		beq.s	Mark_Delete
0000F650 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F656                            
0000F656                            Mark_Delete:
0000F656 6000 DF6E                  		bra.w	DeleteObject
0000F65A                            
0000F65A                            ; ===========================================================================
0000F65A 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F65C 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F65E                            ; ===========================================================================
0000F65E                            
0000F65E                            Obj40_Move:				; XREF: Obj40_Index2
0000F65E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F662 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F664 5428 0025                  		addq.b	#2,$25(a0)
0000F668 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F66E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F674 0868 0000 0022             		bchg	#0,$22(a0)
0000F67A 6600                       		bne.s	locret_F70A
0000F67C 4468 0010                  		neg.w	$10(a0)		; change direction
0000F680                            
0000F680                            locret_F70A:
0000F680 4E75                       		rts	
0000F682                            ; ===========================================================================
0000F682                            
0000F682                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F682 6100 DEE0                  		bsr.w	SpeedToPos
0000F686 4EB9 0000 0000             		jsr	ObjHitFloor
0000F68C 0C41 FFF8                  		cmpi.w	#-8,d1
0000F690 6D00                       		blt.s	Obj40_Pause
0000F692 0C41 000C                  		cmpi.w	#$C,d1
0000F696 6C00                       		bge.s	Obj40_Pause
0000F698 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F69C 5328 0033                  		subq.b	#1,$33(a0)
0000F6A0 6A00                       		bpl.s	locret_F756
0000F6A2 117C 000F 0033             		move.b	#$F,$33(a0)
0000F6A8 6100 E366                  		bsr.w	SingleObjLoad
0000F6AC 6600                       		bne.s	locret_F756
0000F6AE 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F6B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6BE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F6C4 137C 0002 001C             		move.b	#2,$1C(a1)
0000F6CA                            
0000F6CA                            locret_F756:
0000F6CA 4E75                       		rts	
0000F6CC                            ; ===========================================================================
0000F6CC                            
0000F6CC                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F6CC 5528 0025                  		subq.b	#2,$25(a0)
0000F6D0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F6D6 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F6DC 117C 0000 001C             		move.b	#0,$1C(a0)
0000F6E2 4E75                       		rts	
0000F6E4                            ; ===========================================================================
0000F6E4                            
0000F6E4                            Obj40_Animate:				; XREF: Obj40_Index
0000F6E4 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F6EA 6100 AFCA                  		bsr.w	AnimateSprite
0000F6EE 6000 DE9A                  		bra.w	DisplaySprite
0000F6F2                            ; ===========================================================================
0000F6F2                            
0000F6F2                            Obj40_Delete:				; XREF: Obj40_Index
0000F6F2 6000 DED2                  		bra.w	DeleteObject
0000F6F6                            ; ===========================================================================
0000F6F6                            Ani_obj40:
0000F6F6                            	include "_anim\obj40.asm"
0000F6F6                            ; ---------------------------------------------------------------------------
0000F6F6                            ; Animation script - Motobug enemy
0000F6F6                            ; ---------------------------------------------------------------------------
0000F6F6 0000                       		dc.w byte_F788-Ani_obj40
0000F6F8 0000                       		dc.w byte_F78C-Ani_obj40
0000F6FA 0000                       		dc.w byte_F792-Ani_obj40
0000F6FC 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F700 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F706 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F714                            		even
0000F714                            		even
0000F714                            
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            Map_obj40:
0000F714                            	include "_maps\obj40.asm"
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F714                            ; ---------------------------------------------------------------------------
0000F714 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F718 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F71C 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F720 0000                       		dc.w byte_F804-Map_obj40
0000F722 04                         byte_F7AE:	dc.b 4
0000F723 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F728 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F72D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F732 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F737 04                         byte_F7C3:	dc.b 4
0000F738 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F73D 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F742 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F747 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F74C 05                         byte_F7D8:	dc.b 5
0000F74D F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F752 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F757 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F75C 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F761 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F766 01                         byte_F7F2:	dc.b 1
0000F767 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F76C 01                         byte_F7F8:	dc.b 1
0000F76D FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F772 01                         byte_F7FE:	dc.b 1
0000F773 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F778 00                         byte_F804:	dc.b 0
0000F77A 00                         		even
0000F77A 00                         		even
0000F77A                            
0000F77A                            ; ===========================================================================
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A                            ; Object 4F - blank
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A                            
0000F77A                            Obj4F:					; XREF: Obj_Index
0000F77A 4E75                       		rts	
0000F77C                            
0000F77C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F77C                            
0000F77C                            
0000F77C                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F77C 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F780 D047                       		add.w	d7,d0
0000F782 0240 0003                  		andi.w	#3,d0
0000F786 6600                       		bne.s	loc_F836
0000F788 7600                       		moveq	#0,d3
0000F78A 1628 0019                  		move.b	$19(a0),d3
0000F78E 4A68 0010                  		tst.w	$10(a0)
0000F792 6B00                       		bmi.s	loc_F82C
0000F794 6100 0000                  		bsr.w	ObjHitWallRight
0000F798 4A41                       		tst.w	d1
0000F79A 6A00                       		bpl.s	loc_F836
0000F79C                            
0000F79C                            loc_F828:
0000F79C 7001                       		moveq	#1,d0
0000F79E 4E75                       		rts	
0000F7A0                            ; ===========================================================================
0000F7A0                            
0000F7A0                            loc_F82C:
0000F7A0 4643                       		not.w	d3
0000F7A2 6100 0000                  		bsr.w	ObjHitWallLeft
0000F7A6 4A41                       		tst.w	d1
0000F7A8 6BF2                       		bmi.s	loc_F828
0000F7AA                            
0000F7AA                            loc_F836:
0000F7AA 7000                       		moveq	#0,d0
0000F7AC 4E75                       		rts	
0000F7AE                            ; End of function Obj50_ChkWall
0000F7AE                            
0000F7AE                            ; ===========================================================================
0000F7AE                            ; ---------------------------------------------------------------------------
0000F7AE                            ; Object 50 - Yadrin enemy (SYZ)
0000F7AE                            ; ---------------------------------------------------------------------------
0000F7AE                            
0000F7AE                            Obj50:					; XREF: Obj_Index
0000F7AE 7000                       		moveq	#0,d0
0000F7B0 1028 0024                  		move.b	$24(a0),d0
0000F7B4 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F7B8 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F7BC                            ; ===========================================================================
0000F7BC 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F7BE 0000                       		dc.w Obj50_Action-Obj50_Index
0000F7C0                            ; ===========================================================================
0000F7C0                            
0000F7C0                            Obj50_Main:				; XREF: Obj50_Index
0000F7C0 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F7C8 317C 247B 0002             		move.w	#$247B,2(a0)
0000F7CE 117C 0004 0001             		move.b	#4,1(a0)
0000F7D4 117C 0004 0018             		move.b	#4,$18(a0)
0000F7DA 117C 0014 0019             		move.b	#$14,$19(a0)
0000F7E0 117C 0011 0016             		move.b	#$11,$16(a0)
0000F7E6 117C 0008 0017             		move.b	#8,$17(a0)
0000F7EC 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F7F2 6100 DD44                  		bsr.w	ObjectFall
0000F7F6 6100 0000                  		bsr.w	ObjHitFloor
0000F7FA 4A41                       		tst.w	d1
0000F7FC 6A00                       		bpl.s	locret_F89E
0000F7FE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F802 317C 0000 0012             		move.w	#0,$12(a0)
0000F808 5428 0024                  		addq.b	#2,$24(a0)
0000F80C 0868 0000 0022             		bchg	#0,$22(a0)
0000F812                            
0000F812                            locret_F89E:
0000F812 4E75                       		rts	
0000F814                            ; ===========================================================================
0000F814                            
0000F814                            Obj50_Action:				; XREF: Obj50_Index
0000F814 7000                       		moveq	#0,d0
0000F816 1028 0025                  		move.b	$25(a0),d0
0000F81A 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F81E 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F822 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F828 6100 AE8C                  		bsr.w	AnimateSprite
0000F82C 6000 FDF4                  		bra.w	MarkObjGone
0000F830                            ; ===========================================================================
0000F830 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F832 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F834                            ; ===========================================================================
0000F834                            
0000F834                            Obj50_Move:				; XREF: Obj50_Index2
0000F834 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F838 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F83A 5428 0025                  		addq.b	#2,$25(a0)
0000F83E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F844 117C 0001 001C             		move.b	#1,$1C(a0)
0000F84A 0868 0000 0022             		bchg	#0,$22(a0)
0000F850 6600                       		bne.s	locret_F8E2
0000F852 4468 0010                  		neg.w	$10(a0)		; change direction
0000F856                            
0000F856                            locret_F8E2:
0000F856 4E75                       		rts	
0000F858                            ; ===========================================================================
0000F858                            
0000F858                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F858 6100 DD0A                  		bsr.w	SpeedToPos
0000F85C 6100 0000                  		bsr.w	ObjHitFloor
0000F860 0C41 FFF8                  		cmpi.w	#-8,d1
0000F864 6D00                       		blt.s	Obj50_Pause
0000F866 0C41 000C                  		cmpi.w	#$C,d1
0000F86A 6C00                       		bge.s	Obj50_Pause
0000F86C D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F870 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F874 6600                       		bne.s	Obj50_Pause
0000F876 4E75                       		rts	
0000F878                            ; ===========================================================================
0000F878                            
0000F878                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F878 5528 0025                  		subq.b	#2,$25(a0)
0000F87C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F882 317C 0000 0010             		move.w	#0,$10(a0)
0000F888 117C 0000 001C             		move.b	#0,$1C(a0)
0000F88E 4E75                       		rts	
0000F890                            ; ===========================================================================
0000F890                            Ani_obj50:
0000F890                            	include "_anim\obj50.asm"
0000F890                            ; ---------------------------------------------------------------------------
0000F890                            ; Animation script - Yadrin enemy
0000F890                            ; ---------------------------------------------------------------------------
0000F890 0000                       		dc.w byte_F920-Ani_obj50
0000F892 0000                       		dc.w byte_F924-Ani_obj50
0000F894 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F898 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F8A2                            		even
0000F8A2                            		even
0000F8A2                            
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            Map_obj50:
0000F8A2                            	include "_maps\obj50.asm"
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F8A6 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F8AA 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000F8AE 05                         byte_F93A:	dc.b 5
0000F8AF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F8B4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F8B9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8BE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8C3 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F8C8 05                         byte_F954:	dc.b 5
0000F8C9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F8CE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F8D3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8D8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8DD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F8E2 05                         byte_F96E:	dc.b 5
0000F8E3 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F8E8 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F8ED EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8F2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8F7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F8FC 05                         byte_F988:	dc.b 5
0000F8FD F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F902 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F907 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F90C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F911 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F916 05                         byte_F9A2:	dc.b 5
0000F917 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F91C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F921 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F926 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F92B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F930 05                         byte_F9BC:	dc.b 5
0000F931 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F936 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F93B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F940 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F945 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F94A                            		even
0000F94A                            		even
0000F94A                            
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000F94A                            ;
0000F94A                            ; variables:
0000F94A                            ; d1 = width
0000F94A                            ; d2 = height /	2 (when	jumping)
0000F94A                            ; d3 = height /	2 (when	walking)
0000F94A                            ; d4 = x-axis position
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A                            
0000F94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F94A                            
0000F94A                            
0000F94A                            SolidObject:
0000F94A 4A28 0025                  		tst.b	$25(a0)
0000F94E 6700 0000                  		beq.w	loc_FAC8
0000F952 3401                       		move.w	d1,d2
0000F954 D442                       		add.w	d2,d2
0000F956 43F8 D000                  		lea	($FFFFD000).w,a1
0000F95A 0829 0001 0022             		btst	#1,$22(a1)
0000F960 6600                       		bne.s	loc_F9FE
0000F962 3029 0008                  		move.w	8(a1),d0
0000F966 9068 0008                  		sub.w	8(a0),d0
0000F96A D041                       		add.w	d1,d0
0000F96C 6B00                       		bmi.s	loc_F9FE
0000F96E B042                       		cmp.w	d2,d0
0000F970 6500                       		bcs.s	loc_FA12
0000F972                            
0000F972                            loc_F9FE:
0000F972 08A9 0003 0022             		bclr	#3,$22(a1)
0000F978 08A8 0003 0022             		bclr	#3,$22(a0)
0000F97E 4228 0025                  		clr.b	$25(a0)
0000F982 7800                       		moveq	#0,d4
0000F984 4E75                       		rts	
0000F986                            ; ===========================================================================
0000F986                            
0000F986                            loc_FA12:
0000F986 3404                       		move.w	d4,d2
0000F988 6100 815C                  		bsr.w	MvSonicOnPtfm
0000F98C 7800                       		moveq	#0,d4
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            
0000F990                            SolidObject71:				; XREF: Obj71_Solid
0000F990 4A28 0025                  		tst.b	$25(a0)
0000F994 6700 0000                  		beq.w	loc_FAD0
0000F998 3401                       		move.w	d1,d2
0000F99A D442                       		add.w	d2,d2
0000F99C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F9A0 0829 0001 0022             		btst	#1,$22(a1)
0000F9A6 6600                       		bne.s	loc_FA44
0000F9A8 3029 0008                  		move.w	8(a1),d0
0000F9AC 9068 0008                  		sub.w	8(a0),d0
0000F9B0 D041                       		add.w	d1,d0
0000F9B2 6B00                       		bmi.s	loc_FA44
0000F9B4 B042                       		cmp.w	d2,d0
0000F9B6 6500                       		bcs.s	loc_FA58
0000F9B8                            
0000F9B8                            loc_FA44:
0000F9B8 08A9 0003 0022             		bclr	#3,$22(a1)
0000F9BE 08A8 0003 0022             		bclr	#3,$22(a0)
0000F9C4 4228 0025                  		clr.b	$25(a0)
0000F9C8 7800                       		moveq	#0,d4
0000F9CA 4E75                       		rts	
0000F9CC                            ; ===========================================================================
0000F9CC                            
0000F9CC                            loc_FA58:
0000F9CC 3404                       		move.w	d4,d2
0000F9CE 6100 8116                  		bsr.w	MvSonicOnPtfm
0000F9D2 7800                       		moveq	#0,d4
0000F9D4 4E75                       		rts	
0000F9D6                            ; ===========================================================================
0000F9D6                            
0000F9D6                            SolidObject2F:				; XREF: Obj2F_Solid
0000F9D6 43F8 D000                  		lea	($FFFFD000).w,a1
0000F9DA 4A28 0001                  		tst.b	1(a0)
0000F9DE 6A00 0000                  		bpl.w	loc_FB92
0000F9E2 3029 0008                  		move.w	8(a1),d0
0000F9E6 9068 0008                  		sub.w	8(a0),d0
0000F9EA D041                       		add.w	d1,d0
0000F9EC 6B00 0000                  		bmi.w	loc_FB92
0000F9F0 3601                       		move.w	d1,d3
0000F9F2 D643                       		add.w	d3,d3
0000F9F4 B043                       		cmp.w	d3,d0
0000F9F6 6200 0000                  		bhi.w	loc_FB92
0000F9FA 3A00                       		move.w	d0,d5
0000F9FC 0828 0000 0001             		btst	#0,1(a0)
0000FA02 6700                       		beq.s	loc_FA94
0000FA04 4645                       		not.w	d5
0000FA06 DA43                       		add.w	d3,d5
0000FA08                            
0000FA08                            loc_FA94:
0000FA08 E24D                       		lsr.w	#1,d5
0000FA0A 7600                       		moveq	#0,d3
0000FA0C 1632 5000                  		move.b	(a2,d5.w),d3
0000FA10 9612                       		sub.b	(a2),d3
0000FA12 3A28 000C                  		move.w	$C(a0),d5
0000FA16 9A43                       		sub.w	d3,d5
0000FA18 1629 0016                  		move.b	$16(a1),d3
0000FA1C 4883                       		ext.w	d3
0000FA1E D443                       		add.w	d3,d2
0000FA20 3629 000C                  		move.w	$C(a1),d3
0000FA24 9645                       		sub.w	d5,d3
0000FA26 5843                       		addq.w	#4,d3
0000FA28 D642                       		add.w	d2,d3
0000FA2A 6B00 0000                  		bmi.w	loc_FB92
0000FA2E 3802                       		move.w	d2,d4
0000FA30 D844                       		add.w	d4,d4
0000FA32 B644                       		cmp.w	d4,d3
0000FA34 6400 0000                  		bcc.w	loc_FB92
0000FA38 6000 0000                  		bra.w	loc_FB0E
0000FA3C                            ; ===========================================================================
0000FA3C                            
0000FA3C                            loc_FAC8:
0000FA3C 4A28 0001                  		tst.b	1(a0)
0000FA40 6A00 0000                  		bpl.w	loc_FB92
0000FA44                            
0000FA44                            loc_FAD0:
0000FA44 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA48 3029 0008                  		move.w	8(a1),d0
0000FA4C 9068 0008                  		sub.w	8(a0),d0
0000FA50 D041                       		add.w	d1,d0
0000FA52 6B00 0000                  		bmi.w	loc_FB92
0000FA56 3601                       		move.w	d1,d3
0000FA58 D643                       		add.w	d3,d3
0000FA5A B043                       		cmp.w	d3,d0
0000FA5C 6200 0000                  		bhi.w	loc_FB92
0000FA60 1629 0016                  		move.b	$16(a1),d3
0000FA64 4883                       		ext.w	d3
0000FA66 D443                       		add.w	d3,d2
0000FA68 3629 000C                  		move.w	$C(a1),d3
0000FA6C 9668 000C                  		sub.w	$C(a0),d3
0000FA70 5843                       		addq.w	#4,d3
0000FA72 D642                       		add.w	d2,d3
0000FA74 6B00 0000                  		bmi.w	loc_FB92
0000FA78 3802                       		move.w	d2,d4
0000FA7A D844                       		add.w	d4,d4
0000FA7C B644                       		cmp.w	d4,d3
0000FA7E 6400 0000                  		bcc.w	loc_FB92
0000FA82                            
0000FA82                            loc_FB0E:
0000FA82 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FA86 6B00 0000                  		bmi.w	loc_FB92
0000FA8A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FA90 6400 0000                  		bcc.w	loc_FB92
0000FA94 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FA98 6600 0000                  		bne.w	loc_FBAC
0000FA9C 3A00                       		move.w	d0,d5
0000FA9E B240                       		cmp.w	d0,d1
0000FAA0 6400                       		bcc.s	loc_FB36
0000FAA2 D241                       		add.w	d1,d1
0000FAA4 9041                       		sub.w	d1,d0
0000FAA6 3A00                       		move.w	d0,d5
0000FAA8 4445                       		neg.w	d5
0000FAAA                            
0000FAAA                            loc_FB36:
0000FAAA 3203                       		move.w	d3,d1
0000FAAC B443                       		cmp.w	d3,d2
0000FAAE 6400                       		bcc.s	loc_FB44
0000FAB0 5943                       		subq.w	#4,d3
0000FAB2 9644                       		sub.w	d4,d3
0000FAB4 3203                       		move.w	d3,d1
0000FAB6 4441                       		neg.w	d1
0000FAB8                            
0000FAB8                            loc_FB44:
0000FAB8 BA41                       		cmp.w	d1,d5
0000FABA 6200 0000                  		bhi.w	loc_FBB0
0000FABE 0C41 0004                  		cmpi.w	#4,d1
0000FAC2 6300                       		bls.s	loc_FB8C
0000FAC4 4A40                       		tst.w	d0
0000FAC6 6700                       		beq.s	loc_FB70
0000FAC8 6B00                       		bmi.s	loc_FB5E
0000FACA 4A69 0010                  		tst.w	$10(a1)
0000FACE 6B00                       		bmi.s	loc_FB70
0000FAD0 6000                       		bra.s	loc_FB64
0000FAD2                            ; ===========================================================================
0000FAD2                            
0000FAD2                            loc_FB5E:
0000FAD2 4A69 0010                  		tst.w	$10(a1)
0000FAD6 6A00                       		bpl.s	loc_FB70
0000FAD8                            
0000FAD8                            loc_FB64:
0000FAD8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FADE 337C 0000 0010             		move.w	#0,$10(a1)
0000FAE4                            
0000FAE4                            loc_FB70:
0000FAE4 9169 0008                  		sub.w	d0,8(a1)
0000FAE8 0829 0001 0022             		btst	#1,$22(a1)
0000FAEE 6600                       		bne.s	loc_FB8C
0000FAF0 08E9 0005 0022             		bset	#5,$22(a1)
0000FAF6 08E8 0005 0022             		bset	#5,$22(a0)
0000FAFC 7801                       		moveq	#1,d4
0000FAFE 4E75                       		rts	
0000FB00                            ; ===========================================================================
0000FB00                            
0000FB00                            loc_FB8C:
0000FB00 6100                       		bsr.s	loc_FBA0
0000FB02 7801                       		moveq	#1,d4
0000FB04 4E75                       		rts	
0000FB06                            ; ===========================================================================
0000FB06                            
0000FB06                            loc_FB92:
0000FB06 0828 0005 0022             		btst	#5,$22(a0)
0000FB0C 6700                       		beq.s	loc_FBAC
0000FB0E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FB14                            
0000FB14                            loc_FBA0:
0000FB14 08A8 0005 0022             		bclr	#5,$22(a0)
0000FB1A 08A9 0005 0022             		bclr	#5,$22(a1)
0000FB20                            
0000FB20                            loc_FBAC:
0000FB20 7800                       		moveq	#0,d4
0000FB22 4E75                       		rts	
0000FB24                            ; ===========================================================================
0000FB24                            
0000FB24                            loc_FBB0:
0000FB24 4A43                       		tst.w	d3
0000FB26 6B00                       		bmi.s	loc_FBBC
0000FB28 0C43 0010                  		cmpi.w	#$10,d3
0000FB2C 6500                       		bcs.s	loc_FBEE
0000FB2E 60D6                       		bra.s	loc_FB92
0000FB30                            ; ===========================================================================
0000FB30                            
0000FB30                            loc_FBBC:
0000FB30 4A69 0012                  		tst.w	$12(a1)
0000FB34 6700                       		beq.s	loc_FBD6
0000FB36 6A00                       		bpl.s	loc_FBD2
0000FB38 4A43                       		tst.w	d3
0000FB3A 6A00                       		bpl.s	loc_FBD2
0000FB3C 9769 000C                  		sub.w	d3,$C(a1)
0000FB40 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FB46                            
0000FB46                            loc_FBD2:
0000FB46 78FF                       		moveq	#-1,d4
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            loc_FBD6:
0000FB4A 0829 0001 0022             		btst	#1,$22(a1)
0000FB50 66F4                       		bne.s	loc_FBD2
0000FB52 2F08                       		move.l	a0,-(sp)
0000FB54 2049                       		movea.l	a1,a0
0000FB56 4EB9 0000 0000             		jsr	KillSonic
0000FB5C 205F                       		movea.l	(sp)+,a0
0000FB5E 78FF                       		moveq	#-1,d4
0000FB60 4E75                       		rts	
0000FB62                            ; ===========================================================================
0000FB62                            
0000FB62                            loc_FBEE:
0000FB62 5943                       		subq.w	#4,d3
0000FB64 7200                       		moveq	#0,d1
0000FB66 1228 0019                  		move.b	$19(a0),d1
0000FB6A 3401                       		move.w	d1,d2
0000FB6C D442                       		add.w	d2,d2
0000FB6E D269 0008                  		add.w	8(a1),d1
0000FB72 9268 0008                  		sub.w	8(a0),d1
0000FB76 6B00                       		bmi.s	loc_FC28
0000FB78 B242                       		cmp.w	d2,d1
0000FB7A 6400                       		bcc.s	loc_FC28
0000FB7C 4A69 0012                  		tst.w	$12(a1)
0000FB80 6B00                       		bmi.s	loc_FC28
0000FB82 9769 000C                  		sub.w	d3,$C(a1)
0000FB86 5369 000C                  		subq.w	#1,$C(a1)
0000FB8A 6100                       		bsr.s	sub_FC2C
0000FB8C 117C 0002 0025             		move.b	#2,$25(a0)
0000FB92 08E8 0003 0022             		bset	#3,$22(a0)
0000FB98 78FF                       		moveq	#-1,d4
0000FB9A 4E75                       		rts	
0000FB9C                            ; ===========================================================================
0000FB9C                            
0000FB9C                            loc_FC28:
0000FB9C 7800                       		moveq	#0,d4
0000FB9E 4E75                       		rts	
0000FBA0                            ; End of function SolidObject
0000FBA0                            
0000FBA0                            
0000FBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBA0                            
0000FBA0                            
0000FBA0                            sub_FC2C:				; XREF: SolidObject
0000FBA0 0829 0003 0022             		btst	#3,$22(a1)
0000FBA6 6700                       		beq.s	loc_FC4E
0000FBA8 7000                       		moveq	#0,d0
0000FBAA 1029 003D                  		move.b	$3D(a1),d0
0000FBAE ED48                       		lsl.w	#6,d0
0000FBB0 0680 00FF D000             		addi.l	#$FFD000,d0
0000FBB6 2440                       		movea.l	d0,a2
0000FBB8 08AA 0003 0022             		bclr	#3,$22(a2)
0000FBBE 422A 0025                  		clr.b	$25(a2)
0000FBC2                            
0000FBC2                            loc_FC4E:
0000FBC2 3008                       		move.w	a0,d0
0000FBC4 0440 D000                  		subi.w	#-$3000,d0
0000FBC8 EC48                       		lsr.w	#6,d0
0000FBCA 0240 007F                  		andi.w	#$7F,d0
0000FBCE 1340 003D                  		move.b	d0,$3D(a1)
0000FBD2 137C 0000 0026             		move.b	#0,$26(a1)
0000FBD8 337C 0000 0012             		move.w	#0,$12(a1)
0000FBDE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FBE4 0829 0001 0022             		btst	#1,$22(a1)
0000FBEA 6700                       		beq.s	loc_FC84
0000FBEC 2F08                       		move.l	a0,-(sp)
0000FBEE 2049                       		movea.l	a1,a0
0000FBF0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FBF6 205F                       		movea.l	(sp)+,a0
0000FBF8                            
0000FBF8                            loc_FC84:
0000FBF8 08E9 0003 0022             		bset	#3,$22(a1)
0000FBFE 08E8 0003 0022             		bset	#3,$22(a0)
0000FC04 4E75                       		rts	
0000FC06                            ; End of function sub_FC2C
0000FC06                            
0000FC06                            ; ===========================================================================
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            ; Object 51 - smashable	green block (MZ)
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            
0000FC06                            Obj51:					; XREF: Obj_Index
0000FC06 7000                       		moveq	#0,d0
0000FC08 1028 0024                  		move.b	$24(a0),d0
0000FC0C 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FC10 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FC14 6000 FA0C                  		bra.w	MarkObjGone
0000FC18                            ; ===========================================================================
0000FC18 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FC1A 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FC1C 0000                       		dc.w Obj51_Display-Obj51_Index
0000FC1E                            ; ===========================================================================
0000FC1E                            
0000FC1E                            Obj51_Main:				; XREF: Obj51_Index
0000FC1E 5428 0024                  		addq.b	#2,$24(a0)
0000FC22 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FC2A 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FC30 117C 0004 0001             		move.b	#4,1(a0)
0000FC36 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC3C 117C 0004 0018             		move.b	#4,$18(a0)
0000FC42 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FC48                            
0000FC48                            Obj51_Solid:				; XREF: Obj51_Index
0000FC48 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FC4E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FC54 323C 001B                  		move.w	#$1B,d1
0000FC58 343C 0010                  		move.w	#$10,d2
0000FC5C 363C 0011                  		move.w	#$11,d3
0000FC60 3828 0008                  		move.w	8(a0),d4
0000FC64 6100 FCE4                  		bsr.w	SolidObject
0000FC68 0828 0003 0022             		btst	#3,$22(a0)
0000FC6E 6600                       		bne.s	Obj51_Smash
0000FC70                            
0000FC70                            locret_FCFC:
0000FC70 4E75                       		rts	
0000FC72                            ; ===========================================================================
0000FC72                            
0000FC72                            Obj51_Smash:				; XREF: Obj51_Solid
0000FC72 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FC78 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FC7A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FC80 08E9 0002 0022             		bset	#2,$22(a1)
0000FC86 137C 000E 0016             		move.b	#$E,$16(a1)
0000FC8C 137C 0007 0017             		move.b	#7,$17(a1)
0000FC92 137C 0002 001C             		move.b	#2,$1C(a1)
0000FC98 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FC9E 08E9 0001 0022             		bset	#1,$22(a1)
0000FCA4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FCAA 137C 0002 0024             		move.b	#2,$24(a1)
0000FCB0 08A8 0003 0022             		bclr	#3,$22(a0)
0000FCB6 4228 0025                  		clr.b	$25(a0)
0000FCBA 117C 0001 001A             		move.b	#1,$1A(a0)
0000FCC0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FCC6 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FCC8 343C 0038                  		move.w	#$38,d2
0000FCCC 6100 D4AA                  		bsr.w	SmashObject
0000FCD0 6100 DD3E                  		bsr.w	SingleObjLoad
0000FCD4 6600                       		bne.s	Obj51_Display
0000FCD6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FCDA 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCE6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FCEA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FCEE 0C42 0006                  		cmpi.w	#6,d2
0000FCF2 6500                       		bcs.s	Obj51_Bonus
0000FCF4 7406                       		moveq	#6,d2
0000FCF6                            
0000FCF6                            Obj51_Bonus:
0000FCF6 7000                       		moveq	#0,d0
0000FCF8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FCFC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FD02 6500                       		bcs.s	loc_FD98	; if not, branch
0000FD04 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FD08 740A                       		moveq	#10,d2
0000FD0A                            
0000FD0A                            loc_FD98:
0000FD0A 4EB9 0000 0000             		jsr	AddPoints
0000FD10 E24A                       		lsr.w	#1,d2
0000FD12 1342 001A                  		move.b	d2,$1A(a1)
0000FD16                            
0000FD16                            Obj51_Display:				; XREF: Obj51_Index
0000FD16 6100 D84C                  		bsr.w	SpeedToPos
0000FD1A 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FD20 6100 D868                  		bsr.w	DisplaySprite
0000FD24 4A28 0001                  		tst.b	1(a0)
0000FD28 6A00 D89C                  		bpl.w	DeleteObject
0000FD2C 4E75                       		rts	
0000FD2E                            ; ===========================================================================
0000FD2E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FD32 FF00 FF00                  		dc.w $FF00, $FF00
0000FD36 0200 FE00                  		dc.w $200, $FE00
0000FD3A 0100 FF00                  		dc.w $100, $FF00
0000FD3E                            
0000FD3E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            ; Sprite mappings - smashable green block (MZ)
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            Map_obj51:
0000FD46                            	include "_maps\obj51.asm"
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            ; Sprite mappings - smashable green block (MZ)
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46 0000                       		dc.w byte_FDD8-Map_obj51
0000FD48 0000                       		dc.w byte_FDE3-Map_obj51
0000FD4A 02                         byte_FDD8:	dc.b 2
0000FD4B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FD50 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FD55 04                         byte_FDE3:	dc.b 4
0000FD56 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FD5B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FD60 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FD65 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FD6A                            		even
0000FD6A                            		even
0000FD6A                            
0000FD6A                            ; ===========================================================================
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            
0000FD6A                            Obj52:					; XREF: Obj_Index
0000FD6A 7000                       		moveq	#0,d0
0000FD6C 1028 0024                  		move.b	$24(a0),d0
0000FD70 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FD74 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FD78                            ; ===========================================================================
0000FD78 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FD7A 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FD7C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FD7E                            
0000FD7E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FD80 2001                       		dc.b $20, 1
0000FD82 2002                       		dc.b $20, 2
0000FD84 4003                       		dc.b $40, 3
0000FD86 3004                       		dc.b $30, 4
0000FD88                            ; ===========================================================================
0000FD88                            
0000FD88                            Obj52_Main:				; XREF: Obj52_Index
0000FD88 5428 0024                  		addq.b	#2,$24(a0)
0000FD8C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FD94 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FD9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FDA0 6600                       		bne.s	loc_FE44
0000FDA2 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FDAA 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FDB0 117C 0007 0016             		move.b	#7,$16(a0)
0000FDB6                            
0000FDB6                            loc_FE44:
0000FDB6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FDBC 6600                       		bne.s	loc_FE60
0000FDBE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FDC4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FDCA 6700                       		beq.s	loc_FE60	; if yes, branch
0000FDCC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FDD2                            
0000FDD2                            loc_FE60:
0000FDD2 117C 0004 0001             		move.b	#4,1(a0)
0000FDD8 7000                       		moveq	#0,d0
0000FDDA 1028 0028                  		move.b	$28(a0),d0
0000FDDE E648                       		lsr.w	#3,d0
0000FDE0 0240 001E                  		andi.w	#$1E,d0
0000FDE4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FDE8 115A 0019                  		move.b	(a2)+,$19(a0)
0000FDEC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FDF0 117C 0004 0018             		move.b	#4,$18(a0)
0000FDF6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FDFC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FE02 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FE08                            
0000FE08                            Obj52_Platform:				; XREF: Obj52_Index
0000FE08 6100 0000                  		bsr.w	Obj52_Move
0000FE0C 7200                       		moveq	#0,d1
0000FE0E 1228 0019                  		move.b	$19(a0),d1
0000FE12 4EB9 0000 7414             		jsr	(PlatformObject).l
0000FE18 6000                       		bra.s	Obj52_ChkDel
0000FE1A                            ; ===========================================================================
0000FE1A                            
0000FE1A                            Obj52_StandOn:				; XREF: Obj52_Index
0000FE1A 7200                       		moveq	#0,d1
0000FE1C 1228 0019                  		move.b	$19(a0),d1
0000FE20 4EB9 0000 7588             		jsr	(ExitPlatform).l
0000FE26 3F28 0008                  		move.w	8(a0),-(sp)
0000FE2A 6100 0000                  		bsr.w	Obj52_Move
0000FE2E 341F                       		move.w	(sp)+,d2
0000FE30 4EB9 0000 7AF2             		jsr	(MvSonicOnPtfm2).l
0000FE36                            
0000FE36                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FE36 3028 0030                  		move.w	$30(a0),d0
0000FE3A 0240 FF80                  		andi.w	#$FF80,d0
0000FE3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE42 0441 0080                  		subi.w	#$80,d1
0000FE46 0241 FF80                  		andi.w	#$FF80,d1
0000FE4A 9041                       		sub.w	d1,d0
0000FE4C 0C40 0280                  		cmpi.w	#$280,d0
0000FE50 6200 D774                  		bhi.w	DeleteObject
0000FE54 6000 D734                  		bra.w	DisplaySprite
0000FE58                            ; ===========================================================================
0000FE58                            
0000FE58                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FE58 7000                       		moveq	#0,d0
0000FE5A 1028 0028                  		move.b	$28(a0),d0
0000FE5E 0240 000F                  		andi.w	#$F,d0
0000FE62 D040                       		add.w	d0,d0
0000FE64 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FE68 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FE6C                            ; ===========================================================================
0000FE6C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FE70 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FE74 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FE78 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FE7C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FE80 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FE82                            ; ===========================================================================
0000FE82                            
0000FE82                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FE82 4E75                       		rts	
0000FE84                            ; ===========================================================================
0000FE84                            
0000FE84                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FE84 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FE88 323C 0060                  		move.w	#$60,d1
0000FE8C 0828 0000 0022             		btst	#0,$22(a0)
0000FE92 6700                       		beq.s	loc_FF26
0000FE94 4440                       		neg.w	d0
0000FE96 D041                       		add.w	d1,d0
0000FE98                            
0000FE98                            loc_FF26:
0000FE98 3228 0030                  		move.w	$30(a0),d1
0000FE9C 9240                       		sub.w	d0,d1
0000FE9E 3141 0008                  		move.w	d1,8(a0)
0000FEA2 4E75                       		rts	
0000FEA4                            ; ===========================================================================
0000FEA4                            
0000FEA4                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FEA4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FEAA 6600                       		bne.s	Obj52_02_Wait
0000FEAC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000FEB0                            
0000FEB0                            Obj52_02_Wait:
0000FEB0 4E75                       		rts	
0000FEB2                            ; ===========================================================================
0000FEB2                            
0000FEB2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000FEB2 7600                       		moveq	#0,d3
0000FEB4 1628 0019                  		move.b	$19(a0),d3
0000FEB8 6100 0000                  		bsr.w	ObjHitWallRight
0000FEBC 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FEBE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000FEC0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FEC4 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FECA 4E75                       		rts	
0000FECC                            ; ===========================================================================
0000FECC                            
0000FECC                            Obj52_03_End:
0000FECC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0000FED0 4E75                       		rts	
0000FED2                            ; ===========================================================================
0000FED2                            
0000FED2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0000FED2 7600                       		moveq	#0,d3
0000FED4 1628 0019                  		move.b	$19(a0),d3
0000FED8 6100 0000                  		bsr.w	ObjHitWallRight
0000FEDC 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FEDE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0000FEE0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FEE4 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FEEA 4E75                       		rts	
0000FEEC                            ; ===========================================================================
0000FEEC                            
0000FEEC                            Obj52_05_End:
0000FEEC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0000FEF0 4E75                       		rts	
0000FEF2                            ; ===========================================================================
0000FEF2                            
0000FEF2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0000FEF2 6100 D670                  		bsr.w	SpeedToPos
0000FEF6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0000FEFC 6100 0000                  		bsr.w	ObjHitFloor
0000FF00 4A41                       		tst.w	d1		; has platform hit the floor?
0000FF02 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0000FF06 D368 000C                  		add.w	d1,$C(a0)
0000FF0A 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0000FF0E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0000FF12                            
0000FF12                            locret_FFA0:
0000FF12 4E75                       		rts	
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0000FF14 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0000FF18 6700                       		beq.s	Obj52_07_ChkDel
0000FF1A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0000FF1E                            
0000FF1E                            Obj52_07_ChkDel:
0000FF1E 588F                       		addq.l	#4,sp
0000FF20 3028 0030                  		move.w	$30(a0),d0
0000FF24 0240 FF80                  		andi.w	#$FF80,d0
0000FF28 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF2C 0441 0080                  		subi.w	#$80,d1
0000FF30 0241 FF80                  		andi.w	#$FF80,d1
0000FF34 9041                       		sub.w	d1,d0
0000FF36 0C40 0280                  		cmpi.w	#$280,d0
0000FF3A 6200 D68A                  		bhi.w	DeleteObject
0000FF3E 4E75                       		rts	
0000FF40                            ; ===========================================================================
0000FF40                            
0000FF40                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0000FF40 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000FF44 323C 0080                  		move.w	#$80,d1
0000FF48 0828 0000 0022             		btst	#0,$22(a0)
0000FF4E 6700                       		beq.s	loc_FFE2
0000FF50 4440                       		neg.w	d0
0000FF52 D041                       		add.w	d1,d0
0000FF54                            
0000FF54                            loc_FFE2:
0000FF54 3228 0032                  		move.w	$32(a0),d1
0000FF58 9240                       		sub.w	d0,d1
0000FF5A 3141 000C                  		move.w	d1,$C(a0)
0000FF5E 4E75                       		rts	
0000FF60                            ; ===========================================================================
0000FF60                            
0000FF60                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0000FF60 7600                       		moveq	#0,d3
0000FF62 1628 0019                  		move.b	$19(a0),d3
0000FF66 D643                       		add.w	d3,d3
0000FF68 7208                       		moveq	#8,d1
0000FF6A 0828 0000 0022             		btst	#0,$22(a0)
0000FF70 6700                       		beq.s	loc_10004
0000FF72 4441                       		neg.w	d1
0000FF74 4443                       		neg.w	d3
0000FF76                            
0000FF76                            loc_10004:
0000FF76 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0000FF7A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0000FF7C 3028 0008                  		move.w	8(a0),d0
0000FF80 9068 0030                  		sub.w	$30(a0),d0
0000FF84 B043                       		cmp.w	d3,d0
0000FF86 6700                       		beq.s	Obj52_0A_Wait
0000FF88 D368 0008                  		add.w	d1,8(a0)	; move platform
0000FF8C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0000FF92 4E75                       		rts	
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            Obj52_0A_Wait:
0000FF94 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0000FF98 6600                       		bne.s	locret_1002E	; if time remains, branch
0000FF9A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0000FFA0                            
0000FFA0                            locret_1002E:
0000FFA0 4E75                       		rts	
0000FFA2                            ; ===========================================================================
0000FFA2                            
0000FFA2                            Obj52_0A_Back:
0000FFA2 3028 0008                  		move.w	8(a0),d0
0000FFA6 9068 0030                  		sub.w	$30(a0),d0
0000FFAA 6700                       		beq.s	Obj52_0A_Reset
0000FFAC 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0000FFB0 4E75                       		rts	
0000FFB2                            ; ===========================================================================
0000FFB2                            
0000FFB2                            Obj52_0A_Reset:
0000FFB2 4268 0036                  		clr.w	$36(a0)
0000FFB6 5328 0028                  		subq.b	#1,$28(a0)
0000FFBA 4E75                       		rts	
0000FFBC                            ; ===========================================================================
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC                            Map_obj52:
0000FFBC                            	include "_maps\obj52mz.asm"
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0000FFC0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0000FFC4 0000                       		dc.w byte_1008F-Map_obj52
0000FFC6 01                         byte_10054:	dc.b 1
0000FFC7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0000FFCC 02                         byte_1005A:	dc.b 2
0000FFCD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0000FFD2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0000FFD7 04                         byte_10065:	dc.b 4
0000FFD8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0000FFDD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0000FFE2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0000FFE7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0000FFEC 04                         byte_1007A:	dc.b 4
0000FFED F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0000FFF2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0000FFF7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0000FFFC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010001 03                         byte_1008F:	dc.b 3
00010002 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010007 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001000C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010012 00                         		even
00010012 00                         		even
00010012                            
00010012                            ; ---------------------------------------------------------------------------
00010012                            ; Sprite mappings - moving block (LZ)
00010012                            ; ---------------------------------------------------------------------------
00010012                            Map_obj52a:
00010012                            	include "_maps\obj52lz.asm"
00010012                            ; ---------------------------------------------------------------------------
00010012                            ; Sprite mappings - moving block (LZ)
00010012                            ; ---------------------------------------------------------------------------
00010012 0000                       		dc.w byte_100A2-Map_obj52a
00010014 01                         byte_100A2:	dc.b 1
00010015 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001001A                            		even
0001001A                            		even
0001001A                            
0001001A                            ; ===========================================================================
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            ; Object 55 - Basaran enemy (MZ)
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            
0001001A                            Obj55:					; XREF: Obj_Index
0001001A 7000                       		moveq	#0,d0
0001001C 1028 0024                  		move.b	$24(a0),d0
00010020 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010024 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010028                            ; ===========================================================================
00010028 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001002A 0000                       		dc.w Obj55_Action-Obj55_Index
0001002C                            ; ===========================================================================
0001002C                            
0001002C                            Obj55_Main:				; XREF: Obj55_Index
0001002C 5428 0024                  		addq.b	#2,$24(a0)
00010030 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010038 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001003E 117C 0004 0001             		move.b	#4,1(a0)
00010044 117C 000C 0016             		move.b	#$C,$16(a0)
0001004A 117C 0002 0018             		move.b	#2,$18(a0)
00010050 117C 000B 0020             		move.b	#$B,$20(a0)
00010056 117C 0010 0019             		move.b	#$10,$19(a0)
0001005C                            
0001005C                            Obj55_Action:				; XREF: Obj55_Index
0001005C 7000                       		moveq	#0,d0
0001005E 1028 0025                  		move.b	$25(a0),d0
00010062 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010066 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001006A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010070 6100 A644                  		bsr.w	AnimateSprite
00010074 6000 F5AC                  		bra.w	MarkObjGone
00010078                            ; ===========================================================================
00010078 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001007A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001007C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001007E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010080                            ; ===========================================================================
00010080                            
00010080                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010080 343C 0080                  		move.w	#$80,d2
00010084 6100 0000                  		bsr.w	Obj55_ChkSonic
00010088 6400                       		bcc.s	Obj55_NoDrop
0001008A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001008E 3140 0036                  		move.w	d0,$36(a0)
00010092 9068 000C                  		sub.w	$C(a0),d0
00010096 6500                       		bcs.s	Obj55_NoDrop
00010098 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001009C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001009E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000100A2 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000100A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000100A8 D007                       		add.b	d7,d0
000100AA 0200 0007                  		andi.b	#7,d0
000100AE 6600                       		bne.s	Obj55_NoDrop
000100B0 117C 0001 001C             		move.b	#1,$1C(a0)
000100B6 5428 0025                  		addq.b	#2,$25(a0)
000100BA                            
000100BA                            Obj55_NoDrop:
000100BA 4E75                       		rts	
000100BC                            ; ===========================================================================
000100BC                            
000100BC                            Obj55_DropFly:				; XREF: Obj55_Index2
000100BC 6100 D4A6                  		bsr.w	SpeedToPos
000100C0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000100C6 343C 0080                  		move.w	#$80,d2
000100CA 6100 0000                  		bsr.w	Obj55_ChkSonic
000100CE 3028 0036                  		move.w	$36(a0),d0
000100D2 9068 000C                  		sub.w	$C(a0),d0
000100D6 6500                       		bcs.s	Obj55_ChkDel
000100D8 0C40 0010                  		cmpi.w	#$10,d0
000100DC 6400                       		bcc.s	locret_10180
000100DE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000100E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000100E8 117C 0002 001C             		move.b	#2,$1C(a0)
000100EE 5428 0025                  		addq.b	#2,$25(a0)
000100F2                            
000100F2                            locret_10180:
000100F2 4E75                       		rts	
000100F4                            ; ===========================================================================
000100F4                            
000100F4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000100F4 4A28 0001                  		tst.b	1(a0)
000100F8 6A00 D4CC                  		bpl.w	DeleteObject
000100FC 4E75                       		rts	
000100FE                            ; ===========================================================================
000100FE                            
000100FE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000100FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010102 0200 000F                  		andi.b	#$F,d0
00010106 6600                       		bne.s	loc_101A0
00010108 303C 00C0                  		move.w	#$C0,d0
0001010C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play flapping sound
00010112                            
00010112                            loc_101A0:
00010112 6100 D450                  		bsr.w	SpeedToPos
00010116 3038 D008                  		move.w	($FFFFD008).w,d0
0001011A 9068 0008                  		sub.w	8(a0),d0
0001011E 6400                       		bcc.s	loc_101B0
00010120 4440                       		neg.w	d0
00010122                            
00010122                            loc_101B0:
00010122 0C40 0080                  		cmpi.w	#$80,d0
00010126 6500                       		bcs.s	locret_101C6
00010128 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001012C D007                       		add.b	d7,d0
0001012E 0200 0007                  		andi.b	#7,d0
00010132 6600                       		bne.s	locret_101C6
00010134 5428 0025                  		addq.b	#2,$25(a0)
00010138                            
00010138                            locret_101C6:
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001013A 6100 D428                  		bsr.w	SpeedToPos
0001013E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010144 6100 0000                  		bsr.w	ObjHitCeiling
00010148 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001014A 6A00                       		bpl.s	locret_101F4	; if not, branch
0001014C 9368 000C                  		sub.w	d1,$C(a0)
00010150 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010156 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001015A 4268 0012                  		clr.w	$12(a0)
0001015E 4228 001C                  		clr.b	$1C(a0)
00010162 4228 0025                  		clr.b	$25(a0)
00010166                            
00010166                            locret_101F4:
00010166 4E75                       		rts	
00010168                            ; ===========================================================================
00010168                            
00010168                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010168 323C 0100                  		move.w	#$100,d1
0001016C 08E8 0000 0022             		bset	#0,$22(a0)
00010172 3038 D008                  		move.w	($FFFFD008).w,d0
00010176 9068 0008                  		sub.w	8(a0),d0
0001017A 6400                       		bcc.s	loc_10214
0001017C 4440                       		neg.w	d0
0001017E 4441                       		neg.w	d1
00010180 08A8 0000 0022             		bclr	#0,$22(a0)
00010186                            
00010186                            loc_10214:
00010186 B042                       		cmp.w	d2,d0
00010188 4E75                       		rts	
0001018A                            ; ===========================================================================
0001018A 6100 D3D8                  		bsr.w	SpeedToPos
0001018E 6100 D3FA                  		bsr.w	DisplaySprite
00010192 4A28 0001                  		tst.b	1(a0)
00010196 6A00 D42E                  		bpl.w	DeleteObject
0001019A 4E75                       		rts	
0001019C                            ; ===========================================================================
0001019C                            Ani_obj55:
0001019C                            	include "_anim\obj55.asm"
0001019C                            ; ---------------------------------------------------------------------------
0001019C                            ; Animation script - Basaran enemy
0001019C                            ; ---------------------------------------------------------------------------
0001019C 0000                       		dc.w byte_10230-Ani_obj55
0001019E 0000                       		dc.w byte_10234-Ani_obj55
000101A0 0000                       		dc.w byte_10238-Ani_obj55
000101A2 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000101A6 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000101AA 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000101B0                            		even
000101B0                            		even
000101B0                            
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Sprite mappings - Basaran enemy (MZ)
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            Map_obj55:
000101B0                            	include "_maps\obj55.asm"
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Sprite mappings - Basaran enemy (MZ)
000101B0                            ; ---------------------------------------------------------------------------
000101B0 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000101B4 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000101B8 01                         byte_10246:	dc.b 1
000101B9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000101BE 03                         byte_1024C:	dc.b 3
000101BF F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000101C4 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000101C9 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000101CE 04                         byte_1025C:	dc.b 4
000101CF F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000101D4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000101D9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000101DE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000101E3 04                         byte_10271:	dc.b 4
000101E4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000101E9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000101EE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000101F3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000101F8                            		even
000101F8                            		even
000101F8                            
000101F8                            ; ===========================================================================
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            
000101F8                            Obj56:					; XREF: Obj_Index
000101F8 7000                       		moveq	#0,d0
000101FA 1028 0024                  		move.b	$24(a0),d0
000101FE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010202 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010206                            ; ===========================================================================
00010206 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010208 0000                       		dc.w Obj56_Action-Obj56_Index
0001020A                            
0001020A 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001020C 2020                       		dc.b  $20, $20
0001020E 1020                       		dc.b  $10, $20
00010210 201A                       		dc.b  $20, $1A
00010212 1027                       		dc.b  $10, $27
00010214 1010                       		dc.b  $10, $10
00010216 0820                       		dc.b	8, $20
00010218 4010                       		dc.b  $40, $10
0001021A                            ; ===========================================================================
0001021A                            
0001021A                            Obj56_Main:				; XREF: Obj56_Index
0001021A 5428 0024                  		addq.b	#2,$24(a0)
0001021E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010226 317C 4000 0002             		move.w	#$4000,2(a0)
0001022C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010232 6600                       		bne.s	loc_102C8
00010234 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001023A                            
0001023A                            loc_102C8:
0001023A 117C 0004 0001             		move.b	#4,1(a0)
00010240 117C 0003 0018             		move.b	#3,$18(a0)
00010246 7000                       		moveq	#0,d0
00010248 1028 0028                  		move.b	$28(a0),d0
0001024C E648                       		lsr.w	#3,d0
0001024E 0240 000E                  		andi.w	#$E,d0
00010252 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010256 115A 0019                  		move.b	(a2)+,$19(a0)
0001025A 1152 0016                  		move.b	(a2),$16(a0)
0001025E E248                       		lsr.w	#1,d0
00010260 1140 001A                  		move.b	d0,$1A(a0)
00010264 3168 0008 0034             		move.w	8(a0),$34(a0)
0001026A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010270 7000                       		moveq	#0,d0
00010272 1012                       		move.b	(a2),d0
00010274 D040                       		add.w	d0,d0
00010276 3140 003A                  		move.w	d0,$3A(a0)
0001027A 7000                       		moveq	#0,d0
0001027C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010282 6700                       		beq.s	loc_10332
00010284 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010288 0240 000F                  		andi.w	#$F,d0
0001028C 5140                       		subq.w	#8,d0
0001028E 6500                       		bcs.s	loc_10332
00010290 E548                       		lsl.w	#2,d0
00010292 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010296 45F2 0000                  		lea	(a2,d0.w),a2
0001029A 4A52                       		tst.w	(a2)
0001029C 6A00                       		bpl.s	loc_10332
0001029E 0868 0000 0022             		bchg	#0,$22(a0)
000102A4                            
000102A4                            loc_10332:
000102A4 1028 0028                  		move.b	$28(a0),d0
000102A8 6A00                       		bpl.s	Obj56_Action
000102AA 0200 000F                  		andi.b	#$F,d0
000102AE 1140 003C                  		move.b	d0,$3C(a0)
000102B2 117C 0005 0028             		move.b	#5,$28(a0)
000102B8 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000102BE 6600                       		bne.s	Obj56_ChkGone
000102C0 117C 000C 0028             		move.b	#$C,$28(a0)
000102C6 317C 0080 003A             		move.w	#$80,$3A(a0)
000102CC                            
000102CC                            Obj56_ChkGone:
000102CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102D0 7000                       		moveq	#0,d0
000102D2 1028 0023                  		move.b	$23(a0),d0
000102D6 6700                       		beq.s	Obj56_Action
000102D8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000102DE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000102E4 6700                       		beq.s	Obj56_Action
000102E6 5228 0028                  		addq.b	#1,$28(a0)
000102EA 4268 003A                  		clr.w	$3A(a0)
000102EE                            
000102EE                            Obj56_Action:				; XREF: Obj56_Index
000102EE 3F28 0008                  		move.w	8(a0),-(sp)
000102F2 7000                       		moveq	#0,d0
000102F4 1028 0028                  		move.b	$28(a0),d0	; get object type
000102F8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000102FC D040                       		add.w	d0,d0
000102FE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010302 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010306 381F                       		move.w	(sp)+,d4
00010308 4A28 0001                  		tst.b	1(a0)
0001030C 6A00                       		bpl.s	Obj56_ChkDel
0001030E 7200                       		moveq	#0,d1
00010310 1228 0019                  		move.b	$19(a0),d1
00010314 0641 000B                  		addi.w	#$B,d1
00010318 7400                       		moveq	#0,d2
0001031A 1428 0016                  		move.b	$16(a0),d2
0001031E 3602                       		move.w	d2,d3
00010320 5243                       		addq.w	#1,d3
00010322 6100 F626                  		bsr.w	SolidObject
00010326                            
00010326                            Obj56_ChkDel:
00010326 3028 0034                  		move.w	$34(a0),d0
0001032A 0240 FF80                  		andi.w	#$FF80,d0
0001032E 3238 F700                  		move.w	($FFFFF700).w,d1
00010332 0441 0080                  		subi.w	#$80,d1
00010336 0241 FF80                  		andi.w	#$FF80,d1
0001033A 9041                       		sub.w	d1,d0
0001033C 0C40 0280                  		cmpi.w	#$280,d0
00010340 6200 D284                  		bhi.w	DeleteObject
00010344 6000 D244                  		bra.w	DisplaySprite
00010348                            ; ===========================================================================
00010348 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001034C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010350 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010354 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010358 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001035C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010360 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010364                            ; ===========================================================================
00010364                            
00010364                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010364 4E75                       		rts	
00010366                            ; ===========================================================================
00010366                            
00010366                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010366 323C 0040                  		move.w	#$40,d1
0001036A 7000                       		moveq	#0,d0
0001036C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010370 6000                       		bra.s	Obj56_Move_LR
00010372                            ; ===========================================================================
00010372                            
00010372                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010372 323C 0080                  		move.w	#$80,d1
00010376 7000                       		moveq	#0,d0
00010378 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001037C                            
0001037C                            Obj56_Move_LR:
0001037C 0828 0000 0022             		btst	#0,$22(a0)
00010382 6700                       		beq.s	loc_10416
00010384 4440                       		neg.w	d0
00010386 D041                       		add.w	d1,d0
00010388                            
00010388                            loc_10416:
00010388 3228 0034                  		move.w	$34(a0),d1
0001038C 9240                       		sub.w	d0,d1
0001038E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010392 4E75                       		rts	
00010394                            ; ===========================================================================
00010394                            
00010394                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010394 323C 0040                  		move.w	#$40,d1
00010398 7000                       		moveq	#0,d0
0001039A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001039E 6000                       		bra.s	Obj56_Move_UD
000103A0                            ; ===========================================================================
000103A0                            
000103A0                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000103A0 323C 0080                  		move.w	#$80,d1
000103A4 7000                       		moveq	#0,d0
000103A6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000103AA                            
000103AA                            Obj56_Move_UD:
000103AA 0828 0000 0022             		btst	#0,$22(a0)
000103B0 6700                       		beq.s	loc_10444
000103B2 4440                       		neg.w	d0
000103B4 D041                       		add.w	d1,d0
000103B6                            
000103B6                            loc_10444:
000103B6 3228 0030                  		move.w	$30(a0),d1
000103BA 9240                       		sub.w	d0,d1
000103BC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000103C0 4E75                       		rts	
000103C2                            ; ===========================================================================
000103C2                            
000103C2                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000103C2 4A28 0038                  		tst.b	$38(a0)
000103C6 6600                       		bne.s	loc_104A4
000103C8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000103CE 6600                       		bne.s	loc_1047A	; if not, branch
000103D0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000103D6 6600                       		bne.s	loc_1047A
000103D8 4238 F7C9                  		clr.b	($FFFFF7C9).w
000103DC 3038 D008                  		move.w	($FFFFD008).w,d0
000103E0 B068 0008                  		cmp.w	8(a0),d0
000103E4 6400                       		bcc.s	loc_1047A
000103E6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000103EC                            
000103EC                            loc_1047A:
000103EC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000103F0 7000                       		moveq	#0,d0
000103F2 1028 003C                  		move.b	$3C(a0),d0
000103F6 0832 0000 0000             		btst	#0,(a2,d0.w)
000103FC 6700                       		beq.s	loc_104AE
000103FE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010404 6600                       		bne.s	loc_1049E	; if not, branch
00010406 0C00 0003                  		cmpi.b	#3,d0
0001040A 6600                       		bne.s	loc_1049E
0001040C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010410                            
00010410                            loc_1049E:
00010410 117C 0001 0038             		move.b	#1,$38(a0)
00010416                            
00010416                            loc_104A4:
00010416 4A68 003A                  		tst.w	$3A(a0)
0001041A 6700                       		beq.s	loc_104C8
0001041C 5568 003A                  		subq.w	#2,$3A(a0)
00010420                            
00010420                            loc_104AE:
00010420 3028 003A                  		move.w	$3A(a0),d0
00010424 0828 0000 0022             		btst	#0,$22(a0)
0001042A 6700                       		beq.s	loc_104BC
0001042C 4440                       		neg.w	d0
0001042E                            
0001042E                            loc_104BC:
0001042E 3228 0030                  		move.w	$30(a0),d1
00010432 D240                       		add.w	d0,d1
00010434 3141 000C                  		move.w	d1,$C(a0)
00010438 4E75                       		rts	
0001043A                            ; ===========================================================================
0001043A                            
0001043A                            loc_104C8:
0001043A 5228 0028                  		addq.b	#1,$28(a0)
0001043E 4228 0038                  		clr.b	$38(a0)
00010442 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010446 7000                       		moveq	#0,d0
00010448 1028 0023                  		move.b	$23(a0),d0
0001044C 67D2                       		beq.s	loc_104AE
0001044E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010454 60CA                       		bra.s	loc_104AE
00010456                            ; ===========================================================================
00010456                            
00010456                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010456 4A28 0038                  		tst.b	$38(a0)
0001045A 6600                       		bne.s	loc_10500
0001045C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010460 7000                       		moveq	#0,d0
00010462 1028 003C                  		move.b	$3C(a0),d0
00010466 4A32 0000                  		tst.b	(a2,d0.w)
0001046A 6A00                       		bpl.s	loc_10512
0001046C 117C 0001 0038             		move.b	#1,$38(a0)
00010472                            
00010472                            loc_10500:
00010472 7000                       		moveq	#0,d0
00010474 1028 0016                  		move.b	$16(a0),d0
00010478 D040                       		add.w	d0,d0
0001047A B068 003A                  		cmp.w	$3A(a0),d0
0001047E 6700                       		beq.s	loc_1052C
00010480 5468 003A                  		addq.w	#2,$3A(a0)
00010484                            
00010484                            loc_10512:
00010484 3028 003A                  		move.w	$3A(a0),d0
00010488 0828 0000 0022             		btst	#0,$22(a0)
0001048E 6700                       		beq.s	loc_10520
00010490 4440                       		neg.w	d0
00010492                            
00010492                            loc_10520:
00010492 3228 0030                  		move.w	$30(a0),d1
00010496 D240                       		add.w	d0,d1
00010498 3141 000C                  		move.w	d1,$C(a0)
0001049C 4E75                       		rts	
0001049E                            ; ===========================================================================
0001049E                            
0001049E                            loc_1052C:
0001049E 5328 0028                  		subq.b	#1,$28(a0)
000104A2 4228 0038                  		clr.b	$38(a0)
000104A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104AA 7000                       		moveq	#0,d0
000104AC 1028 0023                  		move.b	$23(a0),d0
000104B0 67D2                       		beq.s	loc_10512
000104B2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000104B8 60CA                       		bra.s	loc_10512
000104BA                            ; ===========================================================================
000104BA                            
000104BA                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000104BA 4A28 0038                  		tst.b	$38(a0)
000104BE 6600                       		bne.s	loc_1055E
000104C0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000104C4 6700                       		beq.s	locret_10578
000104C6 117C 0001 0038             		move.b	#1,$38(a0)
000104CC 4268 003A                  		clr.w	$3A(a0)
000104D0                            
000104D0                            loc_1055E:
000104D0 5268 0008                  		addq.w	#1,8(a0)
000104D4 3168 0008 0034             		move.w	8(a0),$34(a0)
000104DA 5268 003A                  		addq.w	#1,$3A(a0)
000104DE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000104E4 6600                       		bne.s	locret_10578
000104E6 4228 0028                  		clr.b	$28(a0)
000104EA                            
000104EA                            locret_10578:
000104EA 4E75                       		rts	
000104EC                            ; ===========================================================================
000104EC                            
000104EC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000104EC 4A28 0038                  		tst.b	$38(a0)
000104F0 6600                       		bne.s	loc_10598
000104F2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000104F6 7000                       		moveq	#0,d0
000104F8 1028 003C                  		move.b	$3C(a0),d0
000104FC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010502 6700                       		beq.s	loc_105A2
00010504 117C 0001 0038             		move.b	#1,$38(a0)
0001050A                            
0001050A                            loc_10598:
0001050A 4A68 003A                  		tst.w	$3A(a0)
0001050E 6700                       		beq.s	loc_105C0
00010510 5568 003A                  		subq.w	#2,$3A(a0)
00010514                            
00010514                            loc_105A2:
00010514 3028 003A                  		move.w	$3A(a0),d0
00010518 0828 0000 0022             		btst	#0,$22(a0)
0001051E 6700                       		beq.s	loc_105B4
00010520 4440                       		neg.w	d0
00010522 0640 0080                  		addi.w	#$80,d0
00010526                            
00010526                            loc_105B4:
00010526 3228 0034                  		move.w	$34(a0),d1
0001052A D240                       		add.w	d0,d1
0001052C 3141 0008                  		move.w	d1,8(a0)
00010530 4E75                       		rts	
00010532                            ; ===========================================================================
00010532                            
00010532                            loc_105C0:
00010532 5228 0028                  		addq.b	#1,$28(a0)
00010536 4228 0038                  		clr.b	$38(a0)
0001053A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001053E 7000                       		moveq	#0,d0
00010540 1028 0023                  		move.b	$23(a0),d0
00010544 67CE                       		beq.s	loc_105A2
00010546 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001054C 60C6                       		bra.s	loc_105A2
0001054E                            ; ===========================================================================
0001054E                            
0001054E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001054E 4A28 0038                  		tst.b	$38(a0)
00010552 6600                       		bne.s	loc_105F8
00010554 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010558 7000                       		moveq	#0,d0
0001055A 1028 003C                  		move.b	$3C(a0),d0
0001055E 4A32 0000                  		tst.b	(a2,d0.w)
00010562 6A00                       		bpl.s	loc_10606
00010564 117C 0001 0038             		move.b	#1,$38(a0)
0001056A                            
0001056A                            loc_105F8:
0001056A 303C 0080                  		move.w	#$80,d0
0001056E B068 003A                  		cmp.w	$3A(a0),d0
00010572 6700                       		beq.s	loc_10624
00010574 5468 003A                  		addq.w	#2,$3A(a0)
00010578                            
00010578                            loc_10606:
00010578 3028 003A                  		move.w	$3A(a0),d0
0001057C 0828 0000 0022             		btst	#0,$22(a0)
00010582 6700                       		beq.s	loc_10618
00010584 4440                       		neg.w	d0
00010586 0640 0080                  		addi.w	#$80,d0
0001058A                            
0001058A                            loc_10618:
0001058A 3228 0034                  		move.w	$34(a0),d1
0001058E D240                       		add.w	d0,d1
00010590 3141 0008                  		move.w	d1,8(a0)
00010594 4E75                       		rts	
00010596                            ; ===========================================================================
00010596                            
00010596                            loc_10624:
00010596 5328 0028                  		subq.b	#1,$28(a0)
0001059A 4228 0038                  		clr.b	$38(a0)
0001059E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105A2 7000                       		moveq	#0,d0
000105A4 1028 0023                  		move.b	$23(a0),d0
000105A8 67CE                       		beq.s	loc_10606
000105AA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000105B0 60C6                       		bra.s	loc_10606
000105B2                            ; ===========================================================================
000105B2                            
000105B2                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000105B2 323C 0010                  		move.w	#$10,d1
000105B6 7000                       		moveq	#0,d0
000105B8 1038 FE88                  		move.b	($FFFFFE88).w,d0
000105BC E248                       		lsr.w	#1,d0
000105BE 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000105C2 6000                       		bra.s	Obj56_Move_Sqr
000105C4                            ; ===========================================================================
000105C4                            
000105C4                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000105C4 323C 0030                  		move.w	#$30,d1
000105C8 7000                       		moveq	#0,d0
000105CA 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000105CE 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000105D2 6000                       		bra.s	Obj56_Move_Sqr
000105D4                            ; ===========================================================================
000105D4                            
000105D4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000105D4 323C 0050                  		move.w	#$50,d1
000105D8 7000                       		moveq	#0,d0
000105DA 1038 FE90                  		move.b	($FFFFFE90).w,d0
000105DE 3638 FE92                  		move.w	($FFFFFE92).w,d3
000105E2 6000                       		bra.s	Obj56_Move_Sqr
000105E4                            ; ===========================================================================
000105E4                            
000105E4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000105E4 323C 0070                  		move.w	#$70,d1
000105E8 7000                       		moveq	#0,d0
000105EA 1038 FE94                  		move.b	($FFFFFE94).w,d0
000105EE 3638 FE96                  		move.w	($FFFFFE96).w,d3
000105F2                            
000105F2                            Obj56_Move_Sqr:
000105F2 4A43                       		tst.w	d3
000105F4 6600                       		bne.s	loc_1068E
000105F6 5228 0022                  		addq.b	#1,$22(a0)
000105FA 0228 0003 0022             		andi.b	#3,$22(a0)
00010600                            
00010600                            loc_1068E:
00010600 1428 0022                  		move.b	$22(a0),d2
00010604 0202 0003                  		andi.b	#3,d2
00010608 6600                       		bne.s	loc_106AE
0001060A 9041                       		sub.w	d1,d0
0001060C D068 0034                  		add.w	$34(a0),d0
00010610 3140 0008                  		move.w	d0,8(a0)
00010614 4441                       		neg.w	d1
00010616 D268 0030                  		add.w	$30(a0),d1
0001061A 3141 000C                  		move.w	d1,$C(a0)
0001061E 4E75                       		rts	
00010620                            ; ===========================================================================
00010620                            
00010620                            loc_106AE:
00010620 5302                       		subq.b	#1,d2
00010622 6600                       		bne.s	loc_106CC
00010624 5341                       		subq.w	#1,d1
00010626 9041                       		sub.w	d1,d0
00010628 4440                       		neg.w	d0
0001062A D068 0030                  		add.w	$30(a0),d0
0001062E 3140 000C                  		move.w	d0,$C(a0)
00010632 5241                       		addq.w	#1,d1
00010634 D268 0034                  		add.w	$34(a0),d1
00010638 3141 0008                  		move.w	d1,8(a0)
0001063C 4E75                       		rts	
0001063E                            ; ===========================================================================
0001063E                            
0001063E                            loc_106CC:
0001063E 5302                       		subq.b	#1,d2
00010640 6600                       		bne.s	loc_106EA
00010642 5341                       		subq.w	#1,d1
00010644 9041                       		sub.w	d1,d0
00010646 4440                       		neg.w	d0
00010648 D068 0034                  		add.w	$34(a0),d0
0001064C 3140 0008                  		move.w	d0,8(a0)
00010650 5241                       		addq.w	#1,d1
00010652 D268 0030                  		add.w	$30(a0),d1
00010656 3141 000C                  		move.w	d1,$C(a0)
0001065A 4E75                       		rts	
0001065C                            ; ===========================================================================
0001065C                            
0001065C                            loc_106EA:
0001065C 9041                       		sub.w	d1,d0
0001065E D068 0030                  		add.w	$30(a0),d0
00010662 3140 000C                  		move.w	d0,$C(a0)
00010666 4441                       		neg.w	d1
00010668 D268 0034                  		add.w	$34(a0),d1
0001066C 3141 0008                  		move.w	d1,8(a0)
00010670 4E75                       		rts	
00010672                            ; ===========================================================================
00010672                            ; ---------------------------------------------------------------------------
00010672                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010672                            ; ---------------------------------------------------------------------------
00010672                            Map_obj56:
00010672                            	include "_maps\obj56.asm"
00010672                            ; ---------------------------------------------------------------------------
00010672                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010672                            ; ---------------------------------------------------------------------------
00010672 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010676 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001067A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001067E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010682 01                         byte_10710:	dc.b 1
00010683 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010688 04                         byte_10716:	dc.b 4
00010689 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001068E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010693 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010698 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001069D 02                         byte_1072B:	dc.b 2
0001069E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000106A3 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000106A8 04                         byte_10736:	dc.b 4
000106A9 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000106AE E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000106B3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000106B8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000106BD 03                         byte_1074B:	dc.b 3
000106BE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000106C3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000106C8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000106CD 01                         byte_1075B:	dc.b 1
000106CE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000106D3 02                         byte_10761:	dc.b 2
000106D4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000106D9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000106DE 04                         byte_1076C:	dc.b 4
000106DF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000106E4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000106E9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000106EE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000106F4 00                         		even
000106F4 00                         		even
000106F4                            
000106F4                            ; ===========================================================================
000106F4                            ; ---------------------------------------------------------------------------
000106F4                            ; Object 57 - spiked balls (SYZ, LZ)
000106F4                            ; ---------------------------------------------------------------------------
000106F4                            
000106F4                            Obj57:					; XREF: Obj_Index
000106F4 7000                       		moveq	#0,d0
000106F6 1028 0024                  		move.b	$24(a0),d0
000106FA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000106FE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010702                            ; ===========================================================================
00010702 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010704 0000                       		dc.w Obj57_Move-Obj57_Index
00010706 0000                       		dc.w Obj57_Display-Obj57_Index
00010708                            ; ===========================================================================
00010708                            
00010708                            Obj57_Main:				; XREF: Obj57_Index
00010708 5428 0024                  		addq.b	#2,$24(a0)
0001070C 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010714 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001071A 117C 0004 0001             		move.b	#4,1(a0)
00010720 117C 0004 0018             		move.b	#4,$18(a0)
00010726 117C 0008 0019             		move.b	#8,$19(a0)
0001072C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010732 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010738 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001073E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010744 6600                       		bne.s	loc_107E8
00010746 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001074C 317C 0310 0002             		move.w	#$310,2(a0)
00010752 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001075A                            
0001075A                            loc_107E8:
0001075A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001075E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010762 4881                       		ext.w	d1
00010764 E741                       		asl.w	#3,d1		; multiply by 8
00010766 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001076A 1028 0022                  		move.b	$22(a0),d0
0001076E E418                       		ror.b	#2,d0
00010770 0200 00C0                  		andi.b	#-$40,d0
00010774 1140 0026                  		move.b	d0,$26(a0)
00010778 45E8 0029                  		lea	$29(a0),a2
0001077C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010780 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010784 14FC 0000                  		move.b	#0,(a2)+
00010788 3601                       		move.w	d1,d3
0001078A E94B                       		lsl.w	#4,d3
0001078C 1143 003C                  		move.b	d3,$3C(a0)
00010790 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010792 6500                       		bcs.s	loc_10894
00010794 0828 0003 0028             		btst	#3,$28(a0)
0001079A 6700                       		beq.s	Obj57_MakeChain
0001079C 5341                       		subq.w	#1,d1
0001079E 6500                       		bcs.s	loc_10894
000107A0                            
000107A0                            Obj57_MakeChain:
000107A0 6100 D26E                  		bsr.w	SingleObjLoad
000107A4 6600                       		bne.s	loc_10894
000107A6 5228 0029                  		addq.b	#1,$29(a0)
000107AA 3A09                       		move.w	a1,d5
000107AC 0445 D000                  		subi.w	#-$3000,d5
000107B0 EC4D                       		lsr.w	#6,d5
000107B2 0245 007F                  		andi.w	#$7F,d5
000107B6 14C5                       		move.b	d5,(a2)+
000107B8 137C 0004 0024             		move.b	#4,$24(a1)
000107BE 1290                       		move.b	0(a0),0(a1)
000107C0 2368 0004 0004             		move.l	4(a0),4(a1)
000107C6 3368 0002 0002             		move.w	2(a0),2(a1)
000107CC 1368 0001 0001             		move.b	1(a0),1(a1)
000107D2 1368 0018 0018             		move.b	$18(a0),$18(a1)
000107D8 1368 0019 0019             		move.b	$19(a0),$19(a1)
000107DE 1368 0020 0020             		move.b	$20(a0),$20(a1)
000107E4 0403 0010                  		subi.b	#$10,d3
000107E8 1343 003C                  		move.b	d3,$3C(a1)
000107EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000107F2 6600                       		bne.s	loc_10890
000107F4 4A03                       		tst.b	d3
000107F6 6600                       		bne.s	loc_10890
000107F8 137C 0002 001A             		move.b	#2,$1A(a1)
000107FE                            
000107FE                            loc_10890:
000107FE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010802                            
00010802                            loc_10894:
00010802 3A08                       		move.w	a0,d5
00010804 0445 D000                  		subi.w	#-$3000,d5
00010808 EC4D                       		lsr.w	#6,d5
0001080A 0245 007F                  		andi.w	#$7F,d5
0001080E 14C5                       		move.b	d5,(a2)+
00010810 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010816 6600                       		bne.s	Obj57_Move
00010818 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001081E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010824                            
00010824                            Obj57_Move:				; XREF: Obj57_Index
00010824 6100 0000                  		bsr.w	Obj57_MoveSub
00010828 6000 0000                  		bra.w	Obj57_ChkDel
0001082C                            ; ===========================================================================
0001082C                            
0001082C                            Obj57_MoveSub:				; XREF: Obj57_Move
0001082C 3028 003E                  		move.w	$3E(a0),d0
00010830 D168 0026                  		add.w	d0,$26(a0)
00010834 1028 0026                  		move.b	$26(a0),d0
00010838 4EB9 0000 29B8             		jsr	(CalcSine).l
0001083E 3428 0038                  		move.w	$38(a0),d2
00010842 3628 003A                  		move.w	$3A(a0),d3
00010846 45E8 0029                  		lea	$29(a0),a2
0001084A 7C00                       		moveq	#0,d6
0001084C 1C1A                       		move.b	(a2)+,d6
0001084E                            
0001084E                            Obj57_MoveLoop:
0001084E 7800                       		moveq	#0,d4
00010850 181A                       		move.b	(a2)+,d4
00010852 ED4C                       		lsl.w	#6,d4
00010854 0684 00FF D000             		addi.l	#$FFD000,d4
0001085A 2244                       		movea.l	d4,a1
0001085C 7800                       		moveq	#0,d4
0001085E 1829 003C                  		move.b	$3C(a1),d4
00010862 2A04                       		move.l	d4,d5
00010864 C9C0                       		muls.w	d0,d4
00010866 E084                       		asr.l	#8,d4
00010868 CBC1                       		muls.w	d1,d5
0001086A E085                       		asr.l	#8,d5
0001086C D842                       		add.w	d2,d4
0001086E DA43                       		add.w	d3,d5
00010870 3344 000C                  		move.w	d4,$C(a1)
00010874 3345 0008                  		move.w	d5,8(a1)
00010878 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001087C 4E75                       		rts	
0001087E                            ; ===========================================================================
0001087E                            
0001087E                            Obj57_ChkDel:				; XREF: Obj57_Move
0001087E 3028 003A                  		move.w	$3A(a0),d0
00010882 0240 FF80                  		andi.w	#$FF80,d0
00010886 3238 F700                  		move.w	($FFFFF700).w,d1
0001088A 0441 0080                  		subi.w	#$80,d1
0001088E 0241 FF80                  		andi.w	#$FF80,d1
00010892 9041                       		sub.w	d1,d0
00010894 0C40 0280                  		cmpi.w	#$280,d0
00010898 6200 0000                  		bhi.w	Obj57_Delete
0001089C 6000 CCEC                  		bra.w	DisplaySprite
000108A0                            ; ===========================================================================
000108A0                            
000108A0                            Obj57_Delete:				; XREF: Obj57_ChkDel
000108A0 7400                       		moveq	#0,d2
000108A2 45E8 0029                  		lea	$29(a0),a2
000108A6 141A                       		move.b	(a2)+,d2
000108A8                            
000108A8                            Obj57_DelLoop:
000108A8 7000                       		moveq	#0,d0
000108AA 101A                       		move.b	(a2)+,d0
000108AC ED48                       		lsl.w	#6,d0
000108AE 0680 00FF D000             		addi.l	#$FFD000,d0
000108B4 2240                       		movea.l	d0,a1
000108B6 6100 CD10                  		bsr.w	DeleteObject2
000108BA 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000108BE                            
000108BE 4E75                       		rts	
000108C0                            ; ===========================================================================
000108C0                            
000108C0                            Obj57_Display:				; XREF: Obj57_Index
000108C0 6000 CCC8                  		bra.w	DisplaySprite
000108C4                            ; ===========================================================================
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            ; Sprite mappings - chain of spiked balls (SYZ)
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            Map_obj57:
000108C4                            	include "_maps\obj57syz.asm"
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            ; Sprite mappings - chain of spiked balls (SYZ)
000108C4                            ; ---------------------------------------------------------------------------
000108C4 0000                       		dc.w byte_10958-Map_obj57
000108C6 01                         byte_10958:	dc.b 1
000108C7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108CC                            		even
000108CC                            		even
000108CC                            
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            Map_obj57a:
000108CC                            	include "_maps\obj57lz.asm"
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108CC                            ; ---------------------------------------------------------------------------
000108CC 0000                       		dc.w byte_10964-Map_obj57a
000108CE 0000                       		dc.w byte_1096A-Map_obj57a
000108D0 0000                       		dc.w byte_10970-Map_obj57a
000108D2 01                         byte_10964:	dc.b 1
000108D3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108D8 01                         byte_1096A:	dc.b 1
000108D9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000108DE 01                         byte_10970:	dc.b 1
000108DF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000108E4                            		even
000108E4                            		even
000108E4                            
000108E4                            ; ===========================================================================
000108E4                            ; ---------------------------------------------------------------------------
000108E4                            ; Object 58 - giant spiked balls (SYZ)
000108E4                            ; ---------------------------------------------------------------------------
000108E4                            
000108E4                            Obj58:					; XREF: Obj_Index
000108E4 7000                       		moveq	#0,d0
000108E6 1028 0024                  		move.b	$24(a0),d0
000108EA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000108EE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000108F2                            ; ===========================================================================
000108F2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000108F4 0000                       		dc.w Obj58_Move-Obj58_Index
000108F6                            ; ===========================================================================
000108F6                            
000108F6                            Obj58_Main:				; XREF: Obj58_Index
000108F6 5428 0024                  		addq.b	#2,$24(a0)
000108FA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010902 317C 0396 0002             		move.w	#$396,2(a0)
00010908 117C 0004 0001             		move.b	#4,1(a0)
0001090E 117C 0004 0018             		move.b	#4,$18(a0)
00010914 117C 0018 0019             		move.b	#$18,$19(a0)
0001091A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010920 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010926 117C 0086 0020             		move.b	#$86,$20(a0)
0001092C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010930 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010934 4881                       		ext.w	d1
00010936 E741                       		asl.w	#3,d1		; multiply by 8
00010938 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001093C 1028 0022                  		move.b	$22(a0),d0
00010940 E418                       		ror.b	#2,d0
00010942 0200 00C0                  		andi.b	#$C0,d0
00010946 1140 0026                  		move.b	d0,$26(a0)
0001094A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010950                            
00010950                            Obj58_Move:				; XREF: Obj58_Index
00010950 7000                       		moveq	#0,d0
00010952 1028 0028                  		move.b	$28(a0),d0	; get object type
00010956 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001095A D040                       		add.w	d0,d0
0001095C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010960 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010964 3028 003A                  		move.w	$3A(a0),d0
00010968 0240 FF80                  		andi.w	#$FF80,d0
0001096C 3238 F700                  		move.w	($FFFFF700).w,d1
00010970 0441 0080                  		subi.w	#$80,d1
00010974 0241 FF80                  		andi.w	#$FF80,d1
00010978 9041                       		sub.w	d1,d0
0001097A 0C40 0280                  		cmpi.w	#$280,d0
0001097E 6200 CC46                  		bhi.w	DeleteObject
00010982 6000 CC06                  		bra.w	DisplaySprite
00010986                            ; ===========================================================================
00010986 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010988 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001098A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001098C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001098E                            ; ===========================================================================
0001098E                            
0001098E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001098E 4E75                       		rts	
00010990                            ; ===========================================================================
00010990                            
00010990                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010990 323C 0060                  		move.w	#$60,d1
00010994 7000                       		moveq	#0,d0
00010996 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001099A 0828 0000 0022             		btst	#0,$22(a0)
000109A0 6700                       		beq.s	loc_10A38
000109A2 4440                       		neg.w	d0
000109A4 D041                       		add.w	d1,d0
000109A6                            
000109A6                            loc_10A38:
000109A6 3228 003A                  		move.w	$3A(a0),d1
000109AA 9240                       		sub.w	d0,d1
000109AC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109B0 4E75                       		rts	
000109B2                            ; ===========================================================================
000109B2                            
000109B2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000109B2 323C 0060                  		move.w	#$60,d1
000109B6 7000                       		moveq	#0,d0
000109B8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000109BC 0828 0000 0022             		btst	#0,$22(a0)
000109C2 6700                       		beq.s	loc_10A5C
000109C4 4440                       		neg.w	d0
000109C6 0640 0080                  		addi.w	#$80,d0
000109CA                            
000109CA                            loc_10A5C:
000109CA 3228 0038                  		move.w	$38(a0),d1
000109CE 9240                       		sub.w	d0,d1
000109D0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109D4 4E75                       		rts	
000109D6                            ; ===========================================================================
000109D6                            
000109D6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000109D6 3028 003E                  		move.w	$3E(a0),d0
000109DA D168 0026                  		add.w	d0,$26(a0)
000109DE 1028 0026                  		move.b	$26(a0),d0
000109E2 4EB9 0000 29B8             		jsr	(CalcSine).l
000109E8 3428 0038                  		move.w	$38(a0),d2
000109EC 3628 003A                  		move.w	$3A(a0),d3
000109F0 7800                       		moveq	#0,d4
000109F2 1828 003C                  		move.b	$3C(a0),d4
000109F6 2A04                       		move.l	d4,d5
000109F8 C9C0                       		muls.w	d0,d4
000109FA E084                       		asr.l	#8,d4
000109FC CBC1                       		muls.w	d1,d5
000109FE E085                       		asr.l	#8,d5
00010A00 D842                       		add.w	d2,d4
00010A02 DA43                       		add.w	d3,d5
00010A04 3144 000C                  		move.w	d4,$C(a0)
00010A08 3145 0008                  		move.w	d5,8(a0)
00010A0C 4E75                       		rts	
00010A0E                            ; ===========================================================================
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E                            ; Sprite mappings - SBZ	spiked ball on a chain
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E                            Map_obj15b:
00010A0E                            	include "_maps\obj15sbz.asm"
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010A12 0000                       		dc.w byte_10AC6-Map_obj15b
00010A14 05                         byte_10AA6:	dc.b 5
00010A15 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010A1A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010A1F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010A24 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010A29 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010A2E 01                         byte_10AC0:	dc.b 1
00010A2F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010A34 02                         byte_10AC6:	dc.b 2
00010A35 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010A3A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010A40 00                         		even
00010A40 00                         		even
00010A40                            
00010A40                            ; ===========================================================================
00010A40                            ; ---------------------------------------------------------------------------
00010A40                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010A40                            ; ---------------------------------------------------------------------------
00010A40                            
00010A40                            Obj59:					; XREF: Obj_Index
00010A40 7000                       		moveq	#0,d0
00010A42 1028 0024                  		move.b	$24(a0),d0
00010A46 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010A4A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010A4E 3028 0032                  		move.w	$32(a0),d0
00010A52 0240 FF80                  		andi.w	#$FF80,d0
00010A56 3238 F700                  		move.w	($FFFFF700).w,d1
00010A5A 0441 0080                  		subi.w	#$80,d1
00010A5E 0241 FF80                  		andi.w	#$FF80,d1
00010A62 9041                       		sub.w	d1,d0
00010A64 0C40 0280                  		cmpi.w	#$280,d0
00010A68 6200 CB5C                  		bhi.w	DeleteObject
00010A6C 6000 CB1C                  		bra.w	DisplaySprite
00010A70                            ; ===========================================================================
00010A70 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010A72 0000                       		dc.w Obj59_Platform-Obj59_Index
00010A74 0000                       		dc.w Obj59_Action-Obj59_Index
00010A76 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010A78                            
00010A78 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010A7A                            
00010A7A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010A7C 2001                       		dc.b $20, 1
00010A7E 3401                       		dc.b $34, 1
00010A80 1003                       		dc.b $10, 3
00010A82 2003                       		dc.b $20, 3
00010A84 3403                       		dc.b $34, 3
00010A86 1401                       		dc.b $14, 1
00010A88 2401                       		dc.b $24, 1
00010A8A 2C01                       		dc.b $2C, 1
00010A8C 1403                       		dc.b $14, 3
00010A8E 2403                       		dc.b $24, 3
00010A90 2C03                       		dc.b $2C, 3
00010A92 2005                       		dc.b $20, 5
00010A94 2007                       		dc.b $20, 7
00010A96 3009                       		dc.b $30, 9
00010A98                            ; ===========================================================================
00010A98                            
00010A98                            Obj59_Main:				; XREF: Obj59_Index
00010A98 5428 0024                  		addq.b	#2,$24(a0)
00010A9C 7000                       		moveq	#0,d0
00010A9E 1028 0028                  		move.b	$28(a0),d0
00010AA2 6A00                       		bpl.s	Obj59_Main2
00010AA4 5828 0024                  		addq.b	#4,$24(a0)
00010AA8 0240 007F                  		andi.w	#$7F,d0
00010AAC C0FC 0006                  		mulu.w	#6,d0
00010AB0 3140 003C                  		move.w	d0,$3C(a0)
00010AB4 3140 003E                  		move.w	d0,$3E(a0)
00010AB8 588F                       		addq.l	#4,sp
00010ABA 4E75                       		rts	
00010ABC                            ; ===========================================================================
00010ABC                            
00010ABC                            Obj59_Main2:
00010ABC E648                       		lsr.w	#3,d0
00010ABE 0240 001E                  		andi.w	#$1E,d0
00010AC2 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010AC6 115A 0019                  		move.b	(a2)+,$19(a0)
00010ACA 115A 001A                  		move.b	(a2)+,$1A(a0)
00010ACE 7000                       		moveq	#0,d0
00010AD0 1028 0028                  		move.b	$28(a0),d0
00010AD4 D040                       		add.w	d0,d0
00010AD6 0240 001E                  		andi.w	#$1E,d0
00010ADA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010ADE 101A                       		move.b	(a2)+,d0
00010AE0 E548                       		lsl.w	#2,d0
00010AE2 3140 003C                  		move.w	d0,$3C(a0)
00010AE6 115A 0028                  		move.b	(a2)+,$28(a0)
00010AEA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010AF2 317C 4000 0002             		move.w	#$4000,2(a0)
00010AF8 117C 0004 0001             		move.b	#4,1(a0)
00010AFE 117C 0004 0018             		move.b	#4,$18(a0)
00010B04 3168 0008 0032             		move.w	8(a0),$32(a0)
00010B0A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B10                            
00010B10                            Obj59_Platform:				; XREF: Obj59_Index
00010B10 7200                       		moveq	#0,d1
00010B12 1228 0019                  		move.b	$19(a0),d1
00010B16 4EB9 0000 7414             		jsr	(PlatformObject).l
00010B1C 6000 0000                  		bra.w	Obj59_Types
00010B20                            ; ===========================================================================
00010B20                            
00010B20                            Obj59_Action:				; XREF: Obj59_Index
00010B20 7200                       		moveq	#0,d1
00010B22 1228 0019                  		move.b	$19(a0),d1
00010B26 4EB9 0000 7588             		jsr	(ExitPlatform).l
00010B2C 3F28 0008                  		move.w	8(a0),-(sp)
00010B30 6100 0000                  		bsr.w	Obj59_Types
00010B34 341F                       		move.w	(sp)+,d2
00010B36 4A10                       		tst.b	0(a0)
00010B38 6700                       		beq.s	locret_10BD4
00010B3A 4EF9 0000 7AF2             		jmp	(MvSonicOnPtfm2).l
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            locret_10BD4:
00010B40 4E75                       		rts	
00010B42                            ; ===========================================================================
00010B42                            
00010B42                            Obj59_Types:
00010B42 7000                       		moveq	#0,d0
00010B44 1028 0028                  		move.b	$28(a0),d0
00010B48 0240 000F                  		andi.w	#$F,d0
00010B4C D040                       		add.w	d0,d0
00010B4E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010B52 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010B56                            ; ===========================================================================
00010B56 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B5A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B5E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B62 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B66 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010B6A                            ; ===========================================================================
00010B6A                            
00010B6A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010B6A 4E75                       		rts	
00010B6C                            ; ===========================================================================
00010B6C                            
00010B6C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010B6C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010B72 6600                       		bne.s	locret_10C0C
00010B74 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010B78                            
00010B78                            locret_10C0C:
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010B7A 6100 0000                  		bsr.w	Obj59_Move
00010B7E 3028 0034                  		move.w	$34(a0),d0
00010B82 4440                       		neg.w	d0
00010B84 D068 0030                  		add.w	$30(a0),d0
00010B88 3140 000C                  		move.w	d0,$C(a0)
00010B8C 4E75                       		rts	
00010B8E                            ; ===========================================================================
00010B8E                            
00010B8E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010B8E 6100 0000                  		bsr.w	Obj59_Move
00010B92 3028 0034                  		move.w	$34(a0),d0
00010B96 D068 0030                  		add.w	$30(a0),d0
00010B9A 3140 000C                  		move.w	d0,$C(a0)
00010B9E 4E75                       		rts	
00010BA0                            ; ===========================================================================
00010BA0                            
00010BA0                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010BA0 6100 0000                  		bsr.w	Obj59_Move
00010BA4 3028 0034                  		move.w	$34(a0),d0
00010BA8 E240                       		asr.w	#1,d0
00010BAA 4440                       		neg.w	d0
00010BAC D068 0030                  		add.w	$30(a0),d0
00010BB0 3140 000C                  		move.w	d0,$C(a0)
00010BB4 3028 0034                  		move.w	$34(a0),d0
00010BB8 D068 0032                  		add.w	$32(a0),d0
00010BBC 3140 0008                  		move.w	d0,8(a0)
00010BC0 4E75                       		rts	
00010BC2                            ; ===========================================================================
00010BC2                            
00010BC2                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010BC2 6100 0000                  		bsr.w	Obj59_Move
00010BC6 3028 0034                  		move.w	$34(a0),d0
00010BCA E240                       		asr.w	#1,d0
00010BCC D068 0030                  		add.w	$30(a0),d0
00010BD0 3140 000C                  		move.w	d0,$C(a0)
00010BD4 3028 0034                  		move.w	$34(a0),d0
00010BD8 4440                       		neg.w	d0
00010BDA D068 0032                  		add.w	$32(a0),d0
00010BDE 3140 0008                  		move.w	d0,8(a0)
00010BE2 4E75                       		rts	
00010BE4                            ; ===========================================================================
00010BE4                            
00010BE4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010BE4 6100 0000                  		bsr.w	Obj59_Move
00010BE8 3028 0034                  		move.w	$34(a0),d0
00010BEC 4440                       		neg.w	d0
00010BEE D068 0030                  		add.w	$30(a0),d0
00010BF2 3140 000C                  		move.w	d0,$C(a0)
00010BF6 4A28 0028                  		tst.b	$28(a0)
00010BFA 6700 0000                  		beq.w	loc_10C94
00010BFE 4E75                       		rts	
00010C00                            ; ===========================================================================
00010C00                            
00010C00                            loc_10C94:
00010C00 0828 0003 0022             		btst	#3,$22(a0)
00010C06 6700                       		beq.s	Obj59_Delete
00010C08 08E9 0001 0022             		bset	#1,$22(a1)
00010C0E 08A9 0003 0022             		bclr	#3,$22(a1)
00010C14 137C 0002 0024             		move.b	#2,$24(a1)
00010C1A                            
00010C1A                            Obj59_Delete:
00010C1A 6000 C9AA                  		bra.w	DeleteObject
00010C1E                            
00010C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C1E                            
00010C1E                            
00010C1E                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010C1E 3028 0038                  		move.w	$38(a0),d0
00010C22 4A28 003A                  		tst.b	$3A(a0)
00010C26 6600                       		bne.s	loc_10CC8
00010C28 0C40 0800                  		cmpi.w	#$800,d0
00010C2C 6400                       		bcc.s	loc_10CD0
00010C2E 0640 0010                  		addi.w	#$10,d0
00010C32 6000                       		bra.s	loc_10CD0
00010C34                            ; ===========================================================================
00010C34                            
00010C34                            loc_10CC8:
00010C34 4A40                       		tst.w	d0
00010C36 6700                       		beq.s	loc_10CD0
00010C38 0440 0010                  		subi.w	#$10,d0
00010C3C                            
00010C3C                            loc_10CD0:
00010C3C 3140 0038                  		move.w	d0,$38(a0)
00010C40 48C0                       		ext.l	d0
00010C42 E180                       		asl.l	#8,d0
00010C44 D0A8 0034                  		add.l	$34(a0),d0
00010C48 2140 0034                  		move.l	d0,$34(a0)
00010C4C 4840                       		swap	d0
00010C4E 3428 003C                  		move.w	$3C(a0),d2
00010C52 B042                       		cmp.w	d2,d0
00010C54 6300                       		bls.s	loc_10CF0
00010C56 117C 0001 003A             		move.b	#1,$3A(a0)
00010C5C                            
00010C5C                            loc_10CF0:
00010C5C D442                       		add.w	d2,d2
00010C5E B042                       		cmp.w	d2,d0
00010C60 6600                       		bne.s	locret_10CFA
00010C62 4228 0028                  		clr.b	$28(a0)
00010C66                            
00010C66                            locret_10CFA:
00010C66 4E75                       		rts	
00010C68                            ; End of function Obj59_Move
00010C68                            
00010C68                            ; ===========================================================================
00010C68                            
00010C68                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010C68 5368 003C                  		subq.w	#1,$3C(a0)
00010C6C 6600                       		bne.s	Obj59_ChkDel
00010C6E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010C74 6100 CD9A                  		bsr.w	SingleObjLoad
00010C78 6600                       		bne.s	Obj59_ChkDel
00010C7A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010C7E 3368 0008 0008             		move.w	8(a0),8(a1)
00010C84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010C8A 137C 000E 0028             		move.b	#$E,$28(a1)
00010C90                            
00010C90                            Obj59_ChkDel:
00010C90 588F                       		addq.l	#4,sp
00010C92 3028 0008                  		move.w	8(a0),d0
00010C96 0240 FF80                  		andi.w	#$FF80,d0
00010C9A 3238 F700                  		move.w	($FFFFF700).w,d1
00010C9E 0441 0080                  		subi.w	#$80,d1
00010CA2 0241 FF80                  		andi.w	#$FF80,d1
00010CA6 9041                       		sub.w	d1,d0
00010CA8 0C40 0280                  		cmpi.w	#$280,d0
00010CAC 6200 C918                  		bhi.w	DeleteObject
00010CB0 4E75                       		rts	
00010CB2                            ; ===========================================================================
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2                            Map_obj59:
00010CB2                            	include "_maps\obj59.asm"
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2 0000                       		dc.w byte_10D4A-Map_obj59
00010CB4 03                         byte_10D4A:	dc.b 3
00010CB5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010CBA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010CBF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010CC4                            		even
00010CC4                            		even
00010CC4                            
00010CC4                            ; ===========================================================================
00010CC4                            ; ---------------------------------------------------------------------------
00010CC4                            ; Object 5A - platforms	moving in circles (SLZ)
00010CC4                            ; ---------------------------------------------------------------------------
00010CC4                            
00010CC4                            Obj5A:					; XREF: Obj_Index
00010CC4 7000                       		moveq	#0,d0
00010CC6 1028 0024                  		move.b	$24(a0),d0
00010CCA 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010CCE 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010CD2 3028 0032                  		move.w	$32(a0),d0
00010CD6 0240 FF80                  		andi.w	#$FF80,d0
00010CDA 3238 F700                  		move.w	($FFFFF700).w,d1
00010CDE 0441 0080                  		subi.w	#$80,d1
00010CE2 0241 FF80                  		andi.w	#$FF80,d1
00010CE6 9041                       		sub.w	d1,d0
00010CE8 0C40 0280                  		cmpi.w	#$280,d0
00010CEC 6200 C8D8                  		bhi.w	DeleteObject
00010CF0 6000 C898                  		bra.w	DisplaySprite
00010CF4                            ; ===========================================================================
00010CF4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010CF6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010CF8 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010CFA                            ; ===========================================================================
00010CFA                            
00010CFA                            Obj5A_Main:				; XREF: Obj5A_Index
00010CFA 5428 0024                  		addq.b	#2,$24(a0)
00010CFE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010D06 317C 4000 0002             		move.w	#$4000,2(a0)
00010D0C 117C 0004 0001             		move.b	#4,1(a0)
00010D12 117C 0004 0018             		move.b	#4,$18(a0)
00010D18 117C 0018 0019             		move.b	#$18,$19(a0)
00010D1E 3168 0008 0032             		move.w	8(a0),$32(a0)
00010D24 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D2A                            
00010D2A                            Obj5A_Platform:				; XREF: Obj5A_Index
00010D2A 7200                       		moveq	#0,d1
00010D2C 1228 0019                  		move.b	$19(a0),d1
00010D30 4EB9 0000 7414             		jsr	(PlatformObject).l
00010D36 6000 0000                  		bra.w	Obj5A_Types
00010D3A                            ; ===========================================================================
00010D3A                            
00010D3A                            Obj5A_Action:				; XREF: Obj5A_Index
00010D3A 7200                       		moveq	#0,d1
00010D3C 1228 0019                  		move.b	$19(a0),d1
00010D40 4EB9 0000 7588             		jsr	(ExitPlatform).l
00010D46 3F28 0008                  		move.w	8(a0),-(sp)
00010D4A 6100 0000                  		bsr.w	Obj5A_Types
00010D4E 341F                       		move.w	(sp)+,d2
00010D50 4EF9 0000 7AF2             		jmp	(MvSonicOnPtfm2).l
00010D56                            ; ===========================================================================
00010D56                            
00010D56                            Obj5A_Types:
00010D56 7000                       		moveq	#0,d0
00010D58 1028 0028                  		move.b	$28(a0),d0
00010D5C 0240 000C                  		andi.w	#$C,d0
00010D60 E248                       		lsr.w	#1,d0
00010D62 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010D66 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010D6A                            ; ===========================================================================
00010D6A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010D6C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010D6E                            ; ===========================================================================
00010D6E                            
00010D6E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010D6E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010D72 0401 0050                  		subi.b	#$50,d1
00010D76 4881                       		ext.w	d1
00010D78 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010D7C 0402 0050                  		subi.b	#$50,d2
00010D80 4882                       		ext.w	d2
00010D82 0828 0000 0028             		btst	#0,$28(a0)
00010D88 6700                       		beq.s	loc_10E24
00010D8A 4441                       		neg.w	d1
00010D8C 4442                       		neg.w	d2
00010D8E                            
00010D8E                            loc_10E24:
00010D8E 0828 0001 0028             		btst	#1,$28(a0)
00010D94 6700                       		beq.s	loc_10E30
00010D96 4441                       		neg.w	d1
00010D98 C342                       		exg	d1,d2
00010D9A                            
00010D9A                            loc_10E30:
00010D9A D268 0032                  		add.w	$32(a0),d1
00010D9E 3141 0008                  		move.w	d1,8(a0)
00010DA2 D468 0030                  		add.w	$30(a0),d2
00010DA6 3142 000C                  		move.w	d2,$C(a0)
00010DAA 4E75                       		rts	
00010DAC                            ; ===========================================================================
00010DAC                            
00010DAC                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010DAC 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010DB0 0401 0050                  		subi.b	#$50,d1
00010DB4 4881                       		ext.w	d1
00010DB6 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010DBA 0402 0050                  		subi.b	#$50,d2
00010DBE 4882                       		ext.w	d2
00010DC0 0828 0000 0028             		btst	#0,$28(a0)
00010DC6 6700                       		beq.s	loc_10E62
00010DC8 4441                       		neg.w	d1
00010DCA 4442                       		neg.w	d2
00010DCC                            
00010DCC                            loc_10E62:
00010DCC 0828 0001 0028             		btst	#1,$28(a0)
00010DD2 6700                       		beq.s	loc_10E6E
00010DD4 4441                       		neg.w	d1
00010DD6 C342                       		exg	d1,d2
00010DD8                            
00010DD8                            loc_10E6E:
00010DD8 4441                       		neg.w	d1
00010DDA D268 0032                  		add.w	$32(a0),d1
00010DDE 3141 0008                  		move.w	d1,8(a0)
00010DE2 D468 0030                  		add.w	$30(a0),d2
00010DE6 3142 000C                  		move.w	d2,$C(a0)
00010DEA 4E75                       		rts	
00010DEC                            ; ===========================================================================
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC                            Map_obj5A:
00010DEC                            	include "_maps\obj5A.asm"
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC 0000                       		dc.w byte_10E84-Map_obj5A
00010DEE 02                         byte_10E84:	dc.b 2
00010DEF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010DF4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010DFA 00                         		even
00010DFA 00                         		even
00010DFA                            
00010DFA                            ; ===========================================================================
00010DFA                            ; ---------------------------------------------------------------------------
00010DFA                            ; Object 5B - blocks that form a staircase (SLZ)
00010DFA                            ; ---------------------------------------------------------------------------
00010DFA                            
00010DFA                            Obj5B:					; XREF: Obj_Index
00010DFA 7000                       		moveq	#0,d0
00010DFC 1028 0024                  		move.b	$24(a0),d0
00010E00 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010E04 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010E08 3028 0030                  		move.w	$30(a0),d0
00010E0C 0240 FF80                  		andi.w	#$FF80,d0
00010E10 3238 F700                  		move.w	($FFFFF700).w,d1
00010E14 0441 0080                  		subi.w	#$80,d1
00010E18 0241 FF80                  		andi.w	#$FF80,d1
00010E1C 9041                       		sub.w	d1,d0
00010E1E 0C40 0280                  		cmpi.w	#$280,d0
00010E22 6200 C7A2                  		bhi.w	DeleteObject
00010E26 6000 C762                  		bra.w	DisplaySprite
00010E2A                            ; ===========================================================================
00010E2A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010E2C 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010E2E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010E30                            ; ===========================================================================
00010E30                            
00010E30                            Obj5B_Main:				; XREF: Obj5B_Index
00010E30 5428 0024                  		addq.b	#2,$24(a0)
00010E34 7638                       		moveq	#$38,d3
00010E36 7801                       		moveq	#1,d4
00010E38 0828 0000 0022             		btst	#0,$22(a0)
00010E3E 6700                       		beq.s	loc_10EDA
00010E40 763B                       		moveq	#$3B,d3
00010E42 78FF                       		moveq	#-1,d4
00010E44                            
00010E44                            loc_10EDA:
00010E44 3428 0008                  		move.w	8(a0),d2
00010E48 2248                       		movea.l	a0,a1
00010E4A 7203                       		moveq	#3,d1
00010E4C 6000                       		bra.s	Obj5B_MakeBlocks
00010E4E                            ; ===========================================================================
00010E4E                            
00010E4E                            Obj5B_Loop:
00010E4E 6100 CBD6                  		bsr.w	SingleObjLoad2
00010E52 6600 0000                  		bne.w	Obj5B_Move
00010E56 137C 0004 0024             		move.b	#4,$24(a1)
00010E5C                            
00010E5C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010E5C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010E60 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010E68 337C 4000 0002             		move.w	#$4000,2(a1)
00010E6E 137C 0004 0001             		move.b	#4,1(a1)
00010E74 137C 0003 0018             		move.b	#3,$18(a1)
00010E7A 137C 0010 0019             		move.b	#$10,$19(a1)
00010E80 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010E86 3342 0008                  		move.w	d2,8(a1)
00010E8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010E90 3368 0008 0030             		move.w	8(a0),$30(a1)
00010E96 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010E9C 0642 0020                  		addi.w	#$20,d2
00010EA0 1343 0037                  		move.b	d3,$37(a1)
00010EA4 2348 003C                  		move.l	a0,$3C(a1)
00010EA8 D604                       		add.b	d4,d3
00010EAA 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00010EAE                            
00010EAE                            Obj5B_Move:				; XREF: Obj5B_Index
00010EAE 7000                       		moveq	#0,d0
00010EB0 1028 0028                  		move.b	$28(a0),d0
00010EB4 0240 0007                  		andi.w	#7,d0
00010EB8 D040                       		add.w	d0,d0
00010EBA 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00010EBE 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00010EC2                            
00010EC2                            Obj5B_Solid:				; XREF: Obj5B_Index
00010EC2 2468 003C                  		movea.l	$3C(a0),a2
00010EC6 7000                       		moveq	#0,d0
00010EC8 1028 0037                  		move.b	$37(a0),d0
00010ECC 1032 0000                  		move.b	(a2,d0.w),d0
00010ED0 D068 0032                  		add.w	$32(a0),d0
00010ED4 3140 000C                  		move.w	d0,$C(a0)
00010ED8 7200                       		moveq	#0,d1
00010EDA 1228 0019                  		move.b	$19(a0),d1
00010EDE 0641 000B                  		addi.w	#$B,d1
00010EE2 343C 0010                  		move.w	#$10,d2
00010EE6 363C 0011                  		move.w	#$11,d3
00010EEA 3828 0008                  		move.w	8(a0),d4
00010EEE 6100 EA5A                  		bsr.w	SolidObject
00010EF2 4A04                       		tst.b	d4
00010EF4 6A00                       		bpl.s	loc_10F92
00010EF6 1544 0036                  		move.b	d4,$36(a2)
00010EFA                            
00010EFA                            loc_10F92:
00010EFA 0828 0003 0022             		btst	#3,$22(a0)
00010F00 6700                       		beq.s	locret_10FA0
00010F02 157C 0001 0036             		move.b	#1,$36(a2)
00010F08                            
00010F08                            locret_10FA0:
00010F08 4E75                       		rts	
00010F0A                            ; ===========================================================================
00010F0A 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00010F0C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F0E 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00010F10 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F12                            ; ===========================================================================
00010F12                            
00010F12                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00010F12 4A68 0034                  		tst.w	$34(a0)
00010F16 6600                       		bne.s	loc_10FC0
00010F18 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00010F1E 6600                       		bne.s	locret_10FBE
00010F20 317C 001E 0034             		move.w	#$1E,$34(a0)
00010F26                            
00010F26                            locret_10FBE:
00010F26 4E75                       		rts	
00010F28                            ; ===========================================================================
00010F28                            
00010F28                            loc_10FC0:
00010F28 5368 0034                  		subq.w	#1,$34(a0)
00010F2C 66F8                       		bne.s	locret_10FBE
00010F2E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F32 4E75                       		rts	
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00010F34 4A68 0034                  		tst.w	$34(a0)
00010F38 6600                       		bne.s	loc_10FE0
00010F3A 4A28 0036                  		tst.b	$36(a0)
00010F3E 6A00                       		bpl.s	locret_10FDE
00010F40 317C 003C 0034             		move.w	#$3C,$34(a0)
00010F46                            
00010F46                            locret_10FDE:
00010F46 4E75                       		rts	
00010F48                            ; ===========================================================================
00010F48                            
00010F48                            loc_10FE0:
00010F48 5368 0034                  		subq.w	#1,$34(a0)
00010F4C 6600                       		bne.s	loc_10FEC
00010F4E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F52 4E75                       		rts	
00010F54                            ; ===========================================================================
00010F54                            
00010F54                            loc_10FEC:
00010F54 43E8 0038                  		lea	$38(a0),a1
00010F58 3028 0034                  		move.w	$34(a0),d0
00010F5C E408                       		lsr.b	#2,d0
00010F5E 0200 0001                  		andi.b	#1,d0
00010F62 12C0                       		move.b	d0,(a1)+
00010F64 0A00 0001                  		eori.b	#1,d0
00010F68 12C0                       		move.b	d0,(a1)+
00010F6A 0A00 0001                  		eori.b	#1,d0
00010F6E 12C0                       		move.b	d0,(a1)+
00010F70 0A00 0001                  		eori.b	#1,d0
00010F74 12C0                       		move.b	d0,(a1)+
00010F76 4E75                       		rts	
00010F78                            ; ===========================================================================
00010F78                            
00010F78                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00010F78 43E8 0038                  		lea	$38(a0),a1
00010F7C 0C11 0080                  		cmpi.b	#$80,(a1)
00010F80 6700                       		beq.s	locret_11038
00010F82 5211                       		addq.b	#1,(a1)
00010F84 7200                       		moveq	#0,d1
00010F86 1219                       		move.b	(a1)+,d1
00010F88 4841                       		swap	d1
00010F8A E289                       		lsr.l	#1,d1
00010F8C 2401                       		move.l	d1,d2
00010F8E E289                       		lsr.l	#1,d1
00010F90 2601                       		move.l	d1,d3
00010F92 D682                       		add.l	d2,d3
00010F94 4841                       		swap	d1
00010F96 4842                       		swap	d2
00010F98 4843                       		swap	d3
00010F9A 12C3                       		move.b	d3,(a1)+
00010F9C 12C2                       		move.b	d2,(a1)+
00010F9E 12C1                       		move.b	d1,(a1)+
00010FA0                            
00010FA0                            locret_11038:
00010FA0 4E75                       		rts	
00010FA2 4E75                       		rts	
00010FA4                            ; ===========================================================================
00010FA4                            ; ---------------------------------------------------------------------------
00010FA4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FA4                            ; ---------------------------------------------------------------------------
00010FA4                            Map_obj5B:
00010FA4                            	include "_maps\obj5B.asm"
00010FA4                            ; ---------------------------------------------------------------------------
00010FA4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FA4                            ; ---------------------------------------------------------------------------
00010FA4 0000                       		dc.w byte_1103E-Map_obj5B
00010FA6 01                         byte_1103E:	dc.b 1
00010FA7 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FAC                            		even
00010FAC                            		even
00010FAC                            
00010FAC                            ; ===========================================================================
00010FAC                            ; ---------------------------------------------------------------------------
00010FAC                            ; Object 5C - metal girders in foreground (SLZ)
00010FAC                            ; ---------------------------------------------------------------------------
00010FAC                            
00010FAC                            Obj5C:					; XREF: Obj_Index
00010FAC 7000                       		moveq	#0,d0
00010FAE 1028 0024                  		move.b	$24(a0),d0
00010FB2 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00010FB6 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00010FBA                            ; ===========================================================================
00010FBA 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00010FBC 0000                       		dc.w Obj5C_Display-Obj5C_Index
00010FBE                            ; ===========================================================================
00010FBE                            
00010FBE                            Obj5C_Main:				; XREF: Obj5C_Index
00010FBE 5428 0024                  		addq.b	#2,$24(a0)
00010FC2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00010FCA 317C 83CC 0002             		move.w	#$83CC,2(a0)
00010FD0 117C 0010 0019             		move.b	#$10,$19(a0)
00010FD6                            
00010FD6                            Obj5C_Display:				; XREF: Obj5C_Index
00010FD6 2238 F700                  		move.l	($FFFFF700).w,d1
00010FDA D281                       		add.l	d1,d1
00010FDC 4841                       		swap	d1
00010FDE 4441                       		neg.w	d1
00010FE0 3141 0008                  		move.w	d1,8(a0)
00010FE4 2238 F704                  		move.l	($FFFFF704).w,d1
00010FE8 D281                       		add.l	d1,d1
00010FEA 4841                       		swap	d1
00010FEC 0241 003F                  		andi.w	#$3F,d1
00010FF0 4441                       		neg.w	d1
00010FF2 0641 0100                  		addi.w	#$100,d1
00010FF6 3141 000A                  		move.w	d1,$A(a0)
00010FFA 6000 C58E                  		bra.w	DisplaySprite
00010FFE                            ; ===========================================================================
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            Map_obj5C:
00010FFE                            	include "_maps\obj5C.asm"
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE 0000                       		dc.w byte_11098-Map_obj5C
00011000 09                         byte_11098:	dc.b 9
00011001 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011006 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001100B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011010 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011015 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001101A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001101F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011024 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011029 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001102E                            		even
0001102E                            		even
0001102E                            
0001102E                            ; ===========================================================================
0001102E                            ; ---------------------------------------------------------------------------
0001102E                            ; Object 1B - water surface (LZ)
0001102E                            ; ---------------------------------------------------------------------------
0001102E                            
0001102E                            Obj1B:					; XREF: Obj_Index
0001102E 7000                       		moveq	#0,d0
00011030 1028 0024                  		move.b	$24(a0),d0
00011034 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011038 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001103C                            ; ===========================================================================
0001103C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001103E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011040                            ; ===========================================================================
00011040                            
00011040                            Obj1B_Main:				; XREF: Obj1B_Index
00011040 5428 0024                  		addq.b	#2,$24(a0)
00011044 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001104C 317C C300 0002             		move.w	#$C300,2(a0)
00011052 117C 0004 0001             		move.b	#4,1(a0)
00011058 117C 0080 0019             		move.b	#$80,$19(a0)
0001105E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011064                            
00011064                            Obj1B_Action:				; XREF: Obj1B_Index
00011064 3238 F700                  		move.w	($FFFFF700).w,d1
00011068 0241 FFE0                  		andi.w	#$FFE0,d1
0001106C D268 0030                  		add.w	$30(a0),d1
00011070 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011076 6700                       		beq.s	loc_11114
00011078 0641 0020                  		addi.w	#$20,d1
0001107C                            
0001107C                            loc_11114:
0001107C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011080 3238 F646                  		move.w	($FFFFF646).w,d1
00011084 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011088 4A28 0032                  		tst.b	$32(a0)
0001108C 6600                       		bne.s	Obj1B_Animate
0001108E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011094 6700                       		beq.s	loc_1114A	; if not, branch
00011096 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001109A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000110A0 6000                       		bra.s	Obj1B_Display
000110A2                            ; ===========================================================================
000110A2                            
000110A2                            Obj1B_Animate:				; XREF: loc_11114
000110A2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000110A6 6600                       		bne.s	Obj1B_Display	; if yes, branch
000110A8 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000110AE 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000110B2                            
000110B2                            loc_1114A:				; XREF: loc_11114
000110B2 5328 001E                  		subq.b	#1,$1E(a0)
000110B6 6A00                       		bpl.s	Obj1B_Display
000110B8 117C 0007 001E             		move.b	#7,$1E(a0)
000110BE 5228 001A                  		addq.b	#1,$1A(a0)
000110C2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000110C8 6500                       		bcs.s	Obj1B_Display
000110CA 117C 0000 001A             		move.b	#0,$1A(a0)
000110D0                            
000110D0                            Obj1B_Display:
000110D0 6000 C4B8                  		bra.w	DisplaySprite
000110D4                            ; ===========================================================================
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Sprite mappings - water surface (LZ)
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            Map_obj1B:
000110D4                            	include "_maps\obj1B.asm"
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Sprite mappings - water surface (LZ)
000110D4                            ; ---------------------------------------------------------------------------
000110D4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000110D8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000110DC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000110E0 03                         byte_11178:	dc.b 3
000110E1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000110E6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000110EB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000110F0 03                         byte_11188:	dc.b 3
000110F1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000110F6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000110FB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011100 03                         byte_11198:	dc.b 3
00011101 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011106 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001110B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011110 06                         byte_111A8:	dc.b 6
00011111 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011116 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001111B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011120 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011125 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001112A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001112F 06                         byte_111C7:	dc.b 6
00011130 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011135 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001113A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001113F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011144 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011149 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001114E 06                         byte_111E6:	dc.b 6
0001114F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011154 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011159 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001115E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011163 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011168 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001116E 00                         		even
0001116E 00                         		even
0001116E                            
0001116E                            ; ===========================================================================
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            ; Object 0B - pole that	breaks (LZ)
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            
0001116E                            Obj0B:					; XREF: Obj_Index
0001116E 7000                       		moveq	#0,d0
00011170 1028 0024                  		move.b	$24(a0),d0
00011174 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011178 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001117C                            ; ===========================================================================
0001117C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001117E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011180 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011182                            ; ===========================================================================
00011182                            
00011182                            Obj0B_Main:				; XREF: Obj0B_Index
00011182 5428 0024                  		addq.b	#2,$24(a0)
00011186 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001118E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011194 117C 0004 0001             		move.b	#4,1(a0)
0001119A 117C 0008 0019             		move.b	#8,$19(a0)
000111A0 117C 0004 0018             		move.b	#4,$18(a0)
000111A6 117C 00E1 0020             		move.b	#$E1,$20(a0)
000111AC 7000                       		moveq	#0,d0
000111AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000111B2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000111B6 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000111BA                            
000111BA                            Obj0B_Action:				; XREF: Obj0B_Index
000111BA 4A28 0032                  		tst.b	$32(a0)
000111BE 6700                       		beq.s	Obj0B_Grab
000111C0 4A68 0030                  		tst.w	$30(a0)
000111C4 6700                       		beq.s	Obj0B_MoveUp
000111C6 5368 0030                  		subq.w	#1,$30(a0)
000111CA 6600                       		bne.s	Obj0B_MoveUp
000111CC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000111D2 6000                       		bra.s	Obj0B_Release
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000111D4 43F8 D000                  		lea	($FFFFD000).w,a1
000111D8 3028 000C                  		move.w	$C(a0),d0
000111DC 0440 0018                  		subi.w	#$18,d0
000111E0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000111E6 6700                       		beq.s	Obj0B_MoveDown
000111E8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000111EC B069 000C                  		cmp.w	$C(a1),d0
000111F0 6500                       		bcs.s	Obj0B_MoveDown
000111F2 3340 000C                  		move.w	d0,$C(a1)
000111F6                            
000111F6                            Obj0B_MoveDown:
000111F6 0640 0024                  		addi.w	#$24,d0
000111FA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011200 6700                       		beq.s	Obj0B_LetGo
00011202 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011206 B069 000C                  		cmp.w	$C(a1),d0
0001120A 6400                       		bcc.s	Obj0B_LetGo
0001120C 3340 000C                  		move.w	d0,$C(a1)
00011210                            
00011210                            Obj0B_LetGo:
00011210 1038 F603                  		move.b	($FFFFF603).w,d0
00011214 0240 0070                  		andi.w	#$70,d0
00011218 6700                       		beq.s	Obj0B_Display
0001121A                            
0001121A                            Obj0B_Release:				; XREF: Obj0B_Action
0001121A 4228 0020                  		clr.b	$20(a0)
0001121E 5428 0024                  		addq.b	#2,$24(a0)
00011222 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011226 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001122A 4228 0032                  		clr.b	$32(a0)
0001122E 6000                       		bra.s	Obj0B_Display
00011230                            ; ===========================================================================
00011230                            
00011230                            Obj0B_Grab:				; XREF: Obj0B_Action
00011230 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011234 6700                       		beq.s	Obj0B_Display	; if not, branch
00011236 43F8 D000                  		lea	($FFFFD000).w,a1
0001123A 3028 0008                  		move.w	8(a0),d0
0001123E 0640 0014                  		addi.w	#$14,d0
00011242 B069 0008                  		cmp.w	8(a1),d0
00011246 6400                       		bcc.s	Obj0B_Display
00011248 4228 0021                  		clr.b	$21(a0)
0001124C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011252 6400                       		bcc.s	Obj0B_Display
00011254 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011258 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001125C 3028 0008                  		move.w	8(a0),d0
00011260 0640 0014                  		addi.w	#$14,d0
00011264 3340 0008                  		move.w	d0,8(a1)
00011268 08A9 0000 0022             		bclr	#0,$22(a1)
0001126E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011274 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001127A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011280 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011286                            
00011286                            Obj0B_Display:				; XREF: Obj0B_Index
00011286 6000 E39A                  		bra.w	MarkObjGone
0001128A                            ; ===========================================================================
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            ; Sprite mappings - pole that breaks (LZ)
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            Map_obj0B:
0001128A                            	include "_maps\obj0B.asm"
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            ; Sprite mappings - pole that breaks (LZ)
0001128A                            ; ---------------------------------------------------------------------------
0001128A 0000                       		dc.w byte_11326-Map_obj0B
0001128C 0000                       		dc.w byte_11331-Map_obj0B
0001128E 02                         byte_11326:	dc.b 2			; normal pole
0001128F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011294 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011299 04                         byte_11331:	dc.b 4			; broken pole
0001129A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001129F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000112A4 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000112A9 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000112AE                            		even
000112AE                            		even
000112AE                            
000112AE                            ; ===========================================================================
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            ; Object 0C - flapping door (LZ)
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            
000112AE                            Obj0C:					; XREF: Obj_Index
000112AE 7000                       		moveq	#0,d0
000112B0 1028 0024                  		move.b	$24(a0),d0
000112B4 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000112B8 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000112BC                            ; ===========================================================================
000112BC 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000112BE 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000112C0                            ; ===========================================================================
000112C0                            
000112C0                            Obj0C_Main:				; XREF: Obj0C_Index
000112C0 5428 0024                  		addq.b	#2,$24(a0)
000112C4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000112CC 317C 4328 0002             		move.w	#$4328,2(a0)
000112D2 0028 0004 0001             		ori.b	#4,1(a0)
000112D8 117C 0028 0019             		move.b	#$28,$19(a0)
000112DE 7000                       		moveq	#0,d0
000112E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000112E4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000112E8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000112EC                            
000112EC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000112EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000112F0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000112F2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000112F8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000112FE 4A28 0001                  		tst.b	1(a0)
00011302 6A00                       		bpl.s	Obj0C_Solid
00011304 303C 00BB                  		move.w	#$BB,d0
00011308 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play door sound
0001130E                            
0001130E                            Obj0C_Solid:
0001130E 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011314 6100 93A0                  		bsr.w	AnimateSprite
00011318 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001131C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011320 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011322 3038 D008                  		move.w	($FFFFD008).w,d0
00011326 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001132A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001132C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011332 323C 0013                  		move.w	#$13,d1
00011336 343C 0020                  		move.w	#$20,d2
0001133A 3602                       		move.w	d2,d3
0001133C 5243                       		addq.w	#1,d3
0001133E 3828 0008                  		move.w	8(a0),d4
00011342 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011346                            
00011346                            Obj0C_Display:
00011346 6000 E2DA                  		bra.w	MarkObjGone
0001134A                            ; ===========================================================================
0001134A                            Ani_obj0C:
0001134A                            	include "_anim\obj0C.asm"
0001134A                            ; ---------------------------------------------------------------------------
0001134A                            ; Animation script - flapping door (LZ)
0001134A                            ; ---------------------------------------------------------------------------
0001134A 0000                       		dc.w byte_113E6-Ani_obj0C
0001134C 0000                       		dc.w byte_113EC-Ani_obj0C
0001134E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011354 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001135A                            		even
0001135A                            		even
0001135A                            
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            ; Sprite mappings - flapping door (LZ)
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            Map_obj0C:
0001135A                            	include "_maps\obj0C.asm"
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            ; Sprite mappings - flapping door (LZ)
0001135A                            ; ---------------------------------------------------------------------------
0001135A 0000                       		dc.w byte_113F8-Map_obj0C
0001135C 0000                       		dc.w byte_11403-Map_obj0C
0001135E 0000                       		dc.w byte_1140E-Map_obj0C
00011360 02                         byte_113F8:	dc.b 2
00011361 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011366 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001136B 02                         byte_11403:	dc.b 2
0001136C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011371 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011376 02                         byte_1140E:	dc.b 2
00011377 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001137C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011382 00                         		even
00011382 00                         		even
00011382                            
00011382                            ; ===========================================================================
00011382                            ; ---------------------------------------------------------------------------
00011382                            ; Object 71 - invisible	solid blocks
00011382                            ; ---------------------------------------------------------------------------
00011382                            
00011382                            Obj71:					; XREF: Obj_Index
00011382 7000                       		moveq	#0,d0
00011384 1028 0024                  		move.b	$24(a0),d0
00011388 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001138C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011390                            ; ===========================================================================
00011390 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011392 0000                       		dc.w Obj71_Solid-Obj71_Index
00011394                            ; ===========================================================================
00011394                            
00011394                            Obj71_Main:				; XREF: Obj71_Index
00011394 5428 0024                  		addq.b	#2,$24(a0)
00011398 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000113A0 317C 8680 0002             		move.w	#$8680,2(a0)
000113A6 0028 0004 0001             		ori.b	#4,1(a0)
000113AC 1028 0028                  		move.b	$28(a0),d0	; get object type
000113B0 1200                       		move.b	d0,d1
000113B2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000113B6 0640 0010                  		addi.w	#$10,d0
000113BA E248                       		lsr.w	#1,d0
000113BC 1140 0019                  		move.b	d0,$19(a0)	; set object width
000113C0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000113C4 5241                       		addq.w	#1,d1
000113C6 E749                       		lsl.w	#3,d1
000113C8 1141 0016                  		move.b	d1,$16(a0)	; set object height
000113CC                            
000113CC                            Obj71_Solid:				; XREF: Obj71_Index
000113CC 6100 C436                  		bsr.w	ChkObjOnScreen
000113D0 6600                       		bne.s	Obj71_ChkDel
000113D2 7200                       		moveq	#0,d1
000113D4 1228 0019                  		move.b	$19(a0),d1
000113D8 0641 000B                  		addi.w	#$B,d1
000113DC 7400                       		moveq	#0,d2
000113DE 1428 0016                  		move.b	$16(a0),d2
000113E2 3602                       		move.w	d2,d3
000113E4 5243                       		addq.w	#1,d3
000113E6 3828 0008                  		move.w	8(a0),d4
000113EA 6100 E5A4                  		bsr.w	SolidObject71
000113EE                            
000113EE                            Obj71_ChkDel:
000113EE 3028 0008                  		move.w	8(a0),d0
000113F2 0240 FF80                  		andi.w	#$FF80,d0
000113F6 3238 F700                  		move.w	($FFFFF700).w,d1
000113FA 0441 0080                  		subi.w	#$80,d1
000113FE 0241 FF80                  		andi.w	#$FF80,d1
00011402 9041                       		sub.w	d1,d0
00011404 0C40 0280                  		cmpi.w	#$280,d0
00011408 6200                       		bhi.s	Obj71_Delete
0001140A 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001140E 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011410 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
00011414                            ; ===========================================================================
00011414                            
00011414                            Obj71_NoDisplay:
00011414 4E75                       		rts	
00011416                            ; ===========================================================================
00011416                            
00011416                            Obj71_Delete:
00011416 4EFA C1AE                  		jmp	DeleteObject
0001141A                            ; ===========================================================================
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            ; Sprite mappings - invisible solid blocks
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            Map_obj71:
0001141A                            	include "_maps\obj71.asm"
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            ; Sprite mappings - invisible solid blocks
0001141A                            ; ---------------------------------------------------------------------------
0001141A 0000                       		dc.w byte_114BC-Map_obj71
0001141C 0000                       		dc.w byte_114D1-Map_obj71
0001141E 0000                       		dc.w byte_114E6-Map_obj71
00011420 04                         byte_114BC:	dc.b 4
00011421 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011426 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001142B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011430 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011435 04                         byte_114D1:	dc.b 4
00011436 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001143B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011440 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011445 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001144A 04                         byte_114E6:	dc.b 4
0001144B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011450 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011455 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001145A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011460 00                         		even
00011460 00                         		even
00011460                            
00011460                            ; ===========================================================================
00011460                            ; ---------------------------------------------------------------------------
00011460                            ; Object 5D - fans (SLZ)
00011460                            ; ---------------------------------------------------------------------------
00011460                            
00011460                            Obj5D:					; XREF: Obj_Index
00011460 7000                       		moveq	#0,d0
00011462 1028 0024                  		move.b	$24(a0),d0
00011466 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001146A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001146E                            ; ===========================================================================
0001146E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011470 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011472                            ; ===========================================================================
00011472                            
00011472                            Obj5D_Main:				; XREF: Obj5D_Index
00011472 5428 0024                  		addq.b	#2,$24(a0)
00011476 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001147E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011484 0028 0004 0001             		ori.b	#4,1(a0)
0001148A 117C 0010 0019             		move.b	#$10,$19(a0)
00011490 117C 0004 0018             		move.b	#4,$18(a0)
00011496                            
00011496                            Obj5D_Delay:				; XREF: Obj5D_Index
00011496 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001149C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001149E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114A2 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000114A4 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000114AA 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000114B0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000114B2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000114B8                            
000114B8                            Obj5D_Blow:
000114B8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000114BC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000114C0 43F8 D000                  		lea	($FFFFD000).w,a1
000114C4 3029 0008                  		move.w	8(a1),d0
000114C8 9068 0008                  		sub.w	8(a0),d0
000114CC 0828 0000 0022             		btst	#0,$22(a0)
000114D2 6600                       		bne.s	Obj5D_ChkSonic
000114D4 4440                       		neg.w	d0
000114D6                            
000114D6                            Obj5D_ChkSonic:
000114D6 0640 0050                  		addi.w	#$50,d0
000114DA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000114DE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000114E0 3229 000C                  		move.w	$C(a1),d1
000114E4 0641 0060                  		addi.w	#$60,d1
000114E8 9268 000C                  		sub.w	$C(a0),d1
000114EC 6500                       		bcs.s	Obj5D_Animate
000114EE 0C41 0070                  		cmpi.w	#$70,d1
000114F2 6400                       		bcc.s	Obj5D_Animate
000114F4 0440 0050                  		subi.w	#$50,d0
000114F8 6400                       		bcc.s	loc_1159A
000114FA 4640                       		not.w	d0
000114FC D040                       		add.w	d0,d0
000114FE                            
000114FE                            loc_1159A:
000114FE 0640 0060                  		addi.w	#$60,d0
00011502 0828 0000 0022             		btst	#0,$22(a0)
00011508 6600                       		bne.s	loc_115A8
0001150A 4440                       		neg.w	d0
0001150C                            
0001150C                            loc_115A8:
0001150C 4400                       		neg.b	d0
0001150E E840                       		asr.w	#4,d0
00011510 0828 0000 0028             		btst	#0,$28(a0)
00011516 6700                       		beq.s	Obj5D_MoveSonic
00011518 4440                       		neg.w	d0
0001151A                            
0001151A                            Obj5D_MoveSonic:
0001151A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001151E                            
0001151E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001151E 5328 001E                  		subq.b	#1,$1E(a0)
00011522 6A00                       		bpl.s	Obj5D_ChkDel
00011524 117C 0000 001E             		move.b	#0,$1E(a0)
0001152A 5228 001B                  		addq.b	#1,$1B(a0)
0001152E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011534 6500                       		bcs.s	loc_115D8
00011536 117C 0000 001B             		move.b	#0,$1B(a0)
0001153C                            
0001153C                            loc_115D8:
0001153C 7000                       		moveq	#0,d0
0001153E 0828 0000 0028             		btst	#0,$28(a0)
00011544 6700                       		beq.s	loc_115E4
00011546 7002                       		moveq	#2,d0
00011548                            
00011548                            loc_115E4:
00011548 D028 001B                  		add.b	$1B(a0),d0
0001154C 1140 001A                  		move.b	d0,$1A(a0)
00011550                            
00011550                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011550 6100 C038                  		bsr.w	DisplaySprite
00011554 3028 0008                  		move.w	8(a0),d0
00011558 0240 FF80                  		andi.w	#$FF80,d0
0001155C 3238 F700                  		move.w	($FFFFF700).w,d1
00011560 0441 0080                  		subi.w	#$80,d1
00011564 0241 FF80                  		andi.w	#$FF80,d1
00011568 9041                       		sub.w	d1,d0
0001156A 0C40 0280                  		cmpi.w	#$280,d0
0001156E 6200 C056                  		bhi.w	DeleteObject
00011572 4E75                       		rts	
00011574                            ; ===========================================================================
00011574                            ; ---------------------------------------------------------------------------
00011574                            ; Sprite mappings - fans (SLZ)
00011574                            ; ---------------------------------------------------------------------------
00011574                            Map_obj5D:
00011574                            	include "_maps\obj5D.asm"
00011574                            ; ---------------------------------------------------------------------------
00011574                            ; Sprite mappings - fans (SLZ)
00011574                            ; ---------------------------------------------------------------------------
00011574 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011578 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001157C 0000                       		dc.w byte_1161A-Map_obj5D
0001157E 02                         byte_1161A:	dc.b 2
0001157F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011584 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011589 02                         byte_11625:	dc.b 2
0001158A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001158F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011594 02                         byte_11630:	dc.b 2
00011595 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001159A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000115A0 00                         		even
000115A0 00                         		even
000115A0                            
000115A0                            ; ===========================================================================
000115A0                            ; ---------------------------------------------------------------------------
000115A0                            ; Object 5E - seesaws (SLZ)
000115A0                            ; ---------------------------------------------------------------------------
000115A0                            
000115A0                            Obj5E:					; XREF: Obj_Index
000115A0 7000                       		moveq	#0,d0
000115A2 1028 0024                  		move.b	$24(a0),d0
000115A6 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000115AA 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000115AE 3028 0030                  		move.w	$30(a0),d0
000115B2 0240 FF80                  		andi.w	#$FF80,d0
000115B6 3238 F700                  		move.w	($FFFFF700).w,d1
000115BA 0441 0080                  		subi.w	#$80,d1
000115BE 0241 FF80                  		andi.w	#$FF80,d1
000115C2 9041                       		sub.w	d1,d0
000115C4 6B00 C000                  		bmi.w	DeleteObject
000115C8 0C40 0280                  		cmpi.w	#$280,d0
000115CC 6200 BFF8                  		bhi.w	DeleteObject
000115D0 6000 BFB8                  		bra.w	DisplaySprite
000115D4                            ; ===========================================================================
000115D4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000115D6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000115D8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000115DA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000115DC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000115DE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000115E0                            ; ===========================================================================
000115E0                            
000115E0                            Obj5E_Main:				; XREF: Obj5E_Index
000115E0 5428 0024                  		addq.b	#2,$24(a0)
000115E4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000115EC 317C 0374 0002             		move.w	#$374,2(a0)
000115F2 0028 0004 0001             		ori.b	#4,1(a0)
000115F8 117C 0004 0018             		move.b	#4,$18(a0)
000115FE 117C 0030 0019             		move.b	#$30,$19(a0)
00011604 3168 0008 0030             		move.w	8(a0),$30(a0)
0001160A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001160E 6600                       		bne.s	loc_116D2	; if not, branch
00011610 6100 C414                  		bsr.w	SingleObjLoad2
00011614 6600                       		bne.s	loc_116D2
00011616 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001161A 5C29 0024                  		addq.b	#6,$24(a1)
0001161E 3368 0008 0008             		move.w	8(a0),8(a1)
00011624 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001162A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011630 2348 003C                  		move.l	a0,$3C(a1)
00011634                            
00011634                            loc_116D2:
00011634 0828 0000 0022             		btst	#0,$22(a0)
0001163A 6700                       		beq.s	loc_116E0
0001163C 117C 0002 001A             		move.b	#2,$1A(a0)
00011642                            
00011642                            loc_116E0:
00011642 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011648                            
00011648                            Obj5E_Slope:				; XREF: Obj5E_Index
00011648 1228 003A                  		move.b	$3A(a0),d1
0001164C 6100 0000                  		bsr.w	loc_11766
00011650 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011656 0828 0000 001A             		btst	#0,$1A(a0)
0001165C 6700                       		beq.s	loc_11702
0001165E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011664                            
00011664                            loc_11702:
00011664 43F8 D000                  		lea	($FFFFD000).w,a1
00011668 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001166E 323C 0030                  		move.w	#$30,d1
00011672 4EB9 0000 74E8             		jsr	(SlopeObject).l
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001167A 6100 0000                  		bsr.w	loc_1174A
0001167E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011684 0828 0000 001A             		btst	#0,$1A(a0)
0001168A 6700                       		beq.s	loc_11730
0001168C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011692                            
00011692                            loc_11730:
00011692 323C 0030                  		move.w	#$30,d1
00011696 4EB9 0000 7588             		jsr	(ExitPlatform).l
0001169C 323C 0030                  		move.w	#$30,d1
000116A0 3428 0008                  		move.w	8(a0),d2
000116A4 4EB9 0000 84E6             		jsr	SlopeObject2
000116AA 4E75                       		rts	
000116AC                            ; ===========================================================================
000116AC                            
000116AC                            loc_1174A:				; XREF: Obj5E_Slope2
000116AC 7202                       		moveq	#2,d1
000116AE 43F8 D000                  		lea	($FFFFD000).w,a1
000116B2 3028 0008                  		move.w	8(a0),d0
000116B6 9069 0008                  		sub.w	8(a1),d0
000116BA 6400                       		bcc.s	loc_1175E
000116BC 4440                       		neg.w	d0
000116BE 7200                       		moveq	#0,d1
000116C0                            
000116C0                            loc_1175E:
000116C0 0C40 0008                  		cmpi.w	#8,d0
000116C4 6400                       		bcc.s	loc_11766
000116C6 7201                       		moveq	#1,d1
000116C8                            
000116C8                            loc_11766:
000116C8 1028 001A                  		move.b	$1A(a0),d0
000116CC B001                       		cmp.b	d1,d0
000116CE 6700                       		beq.s	locret_11790
000116D0 6400                       		bcc.s	loc_11772
000116D2 5400                       		addq.b	#2,d0
000116D4                            
000116D4                            loc_11772:
000116D4 5300                       		subq.b	#1,d0
000116D6 1140 001A                  		move.b	d0,$1A(a0)
000116DA 1141 003A                  		move.b	d1,$3A(a0)
000116DE 08A8 0000 0001             		bclr	#0,1(a0)
000116E4 0828 0001 001A             		btst	#1,$1A(a0)
000116EA 6700                       		beq.s	locret_11790
000116EC 08E8 0000 0001             		bset	#0,1(a0)
000116F2                            
000116F2                            locret_11790:
000116F2 4E75                       		rts	
000116F4                            ; ===========================================================================
000116F4                            
000116F4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000116F4 5428 0024                  		addq.b	#2,$24(a0)
000116F8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011700 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011706 0028 0004 0001             		ori.b	#4,1(a0)
0001170C 117C 0004 0018             		move.b	#4,$18(a0)
00011712 117C 008B 0020             		move.b	#$8B,$20(a0)
00011718 117C 000C 0019             		move.b	#$C,$19(a0)
0001171E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011724 0668 0028 0008             		addi.w	#$28,8(a0)
0001172A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011730 117C 0001 001A             		move.b	#1,$1A(a0)
00011736 0828 0000 0022             		btst	#0,$22(a0)
0001173C 6700                       		beq.s	Obj5E_MoveSpike
0001173E 0468 0050 0008             		subi.w	#$50,8(a0)
00011744 117C 0002 003A             		move.b	#2,$3A(a0)
0001174A                            
0001174A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001174A 2268 003C                  		movea.l	$3C(a0),a1
0001174E 7000                       		moveq	#0,d0
00011750 1028 003A                  		move.b	$3A(a0),d0
00011754 9029 003A                  		sub.b	$3A(a1),d0
00011758 6700                       		beq.s	loc_1183E
0001175A 6400                       		bcc.s	loc_117FC
0001175C 4400                       		neg.b	d0
0001175E                            
0001175E                            loc_117FC:
0001175E 323C F7E8                  		move.w	#-$818,d1
00011762 343C FEEC                  		move.w	#-$114,d2
00011766 0C00 0001                  		cmpi.b	#1,d0
0001176A 6700                       		beq.s	loc_11822
0001176C 323C F510                  		move.w	#-$AF0,d1
00011770 343C FF34                  		move.w	#-$CC,d2
00011774 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001177A 6D00                       		blt.s	loc_11822
0001177C 323C F200                  		move.w	#-$E00,d1
00011780 343C FF60                  		move.w	#-$A0,d2
00011784                            
00011784                            loc_11822:
00011784 3141 0012                  		move.w	d1,$12(a0)
00011788 3142 0010                  		move.w	d2,$10(a0)
0001178C 3028 0008                  		move.w	8(a0),d0
00011790 9068 0030                  		sub.w	$30(a0),d0
00011794 6400                       		bcc.s	loc_11838
00011796 4468 0010                  		neg.w	$10(a0)
0001179A                            
0001179A                            loc_11838:
0001179A 5428 0024                  		addq.b	#2,$24(a0)
0001179E 6000                       		bra.s	Obj5E_SpikeFall
000117A0                            ; ===========================================================================
000117A0                            
000117A0                            loc_1183E:				; XREF: Obj5E_MoveSpike
000117A0 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000117A6 7000                       		moveq	#0,d0
000117A8 1029 001A                  		move.b	$1A(a1),d0
000117AC 343C 0028                  		move.w	#$28,d2
000117B0 3228 0008                  		move.w	8(a0),d1
000117B4 9268 0030                  		sub.w	$30(a0),d1
000117B8 6400                       		bcc.s	loc_1185C
000117BA 4442                       		neg.w	d2
000117BC 5440                       		addq.w	#2,d0
000117BE                            
000117BE                            loc_1185C:
000117BE D040                       		add.w	d0,d0
000117C0 3228 0034                  		move.w	$34(a0),d1
000117C4 D272 0000                  		add.w	(a2,d0.w),d1
000117C8 3141 000C                  		move.w	d1,$C(a0)
000117CC D468 0030                  		add.w	$30(a0),d2
000117D0 3142 0008                  		move.w	d2,8(a0)
000117D4 4268 000E                  		clr.w	$E(a0)
000117D8 4268 000A                  		clr.w	$A(a0)
000117DC 4E75                       		rts	
000117DE                            ; ===========================================================================
000117DE                            
000117DE                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000117DE 4A68 0012                  		tst.w	$12(a0)
000117E2 6A00                       		bpl.s	loc_1189A
000117E4 6100 BD52                  		bsr.w	ObjectFall
000117E8 3028 0034                  		move.w	$34(a0),d0
000117EC 0440 002F                  		subi.w	#$2F,d0
000117F0 B068 000C                  		cmp.w	$C(a0),d0
000117F4 6E00                       		bgt.s	locret_11898
000117F6 6100 BD40                  		bsr.w	ObjectFall
000117FA                            
000117FA                            locret_11898:
000117FA 4E75                       		rts	
000117FC                            ; ===========================================================================
000117FC                            
000117FC                            loc_1189A:				; XREF: Obj5E_SpikeFall
000117FC 6100 BD3A                  		bsr.w	ObjectFall
00011800 2268 003C                  		movea.l	$3C(a0),a1
00011804 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001180A 7000                       		moveq	#0,d0
0001180C 1029 001A                  		move.b	$1A(a1),d0
00011810 3228 0008                  		move.w	8(a0),d1
00011814 9268 0030                  		sub.w	$30(a0),d1
00011818 6400                       		bcc.s	loc_118BA
0001181A 5440                       		addq.w	#2,d0
0001181C                            
0001181C                            loc_118BA:
0001181C D040                       		add.w	d0,d0
0001181E 3228 0034                  		move.w	$34(a0),d1
00011822 D272 0000                  		add.w	(a2,d0.w),d1
00011826 B268 000C                  		cmp.w	$C(a0),d1
0001182A 6E00                       		bgt.s	locret_11938
0001182C 2268 003C                  		movea.l	$3C(a0),a1
00011830 7202                       		moveq	#2,d1
00011832 4A68 0010                  		tst.w	$10(a0)
00011836 6B00                       		bmi.s	Obj5E_Spring
00011838 7200                       		moveq	#0,d1
0001183A                            
0001183A                            Obj5E_Spring:
0001183A 1341 003A                  		move.b	d1,$3A(a1)
0001183E 1141 003A                  		move.b	d1,$3A(a0)
00011842 B229 001A                  		cmp.b	$1A(a1),d1
00011846 6700                       		beq.s	loc_1192C
00011848 08A9 0003 0022             		bclr	#3,$22(a1)
0001184E 6700                       		beq.s	loc_1192C
00011850 4229 0025                  		clr.b	$25(a1)
00011854 137C 0002 0024             		move.b	#2,$24(a1)
0001185A 45F8 D000                  		lea	($FFFFD000).w,a2
0001185E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011864 446A 0012                  		neg.w	$12(a2)
00011868 08EA 0001 0022             		bset	#1,$22(a2)
0001186E 08AA 0003 0022             		bclr	#3,$22(a2)
00011874 422A 003C                  		clr.b	$3C(a2)
00011878 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001187E 157C 0002 0024             		move.b	#2,$24(a2)
00011884 303C 00CC                  		move.w	#$CC,d0
00011888 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play spring sound
0001188E                            
0001188E                            loc_1192C:
0001188E 4268 0010                  		clr.w	$10(a0)
00011892 4268 0012                  		clr.w	$12(a0)
00011896 5528 0024                  		subq.b	#2,$24(a0)
0001189A                            
0001189A                            locret_11938:
0001189A 4E75                       		rts	
0001189C                            ; ===========================================================================
0001189C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000118A6                            
000118A6                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000118D6                            		even
000118D6                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011906                            		even
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - seesaws (SLZ)
00011906                            ; ---------------------------------------------------------------------------
00011906                            Map_obj5E:
00011906                            	include "_maps\obj5E.asm"
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - seesaws (SLZ)
00011906                            ; ---------------------------------------------------------------------------
00011906 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001190A 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001190E 07                         byte_119AC:	dc.b 7
0001190F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011914 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011919 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001191E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011923 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011928 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001192D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011932 04                         byte_119D0:	dc.b 4
00011933 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011938 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001193D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011942 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011948 00                         		even
00011948 00                         		even
00011948                            
00011948                            ; ---------------------------------------------------------------------------
00011948                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011948                            ; ---------------------------------------------------------------------------
00011948                            Map_obj5Ea:
00011948                            	include "_maps\obj5Eballs.asm"
00011948                            ; ---------------------------------------------------------------------------
00011948                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011948                            ; ---------------------------------------------------------------------------
00011948 0000                       		dc.w byte_119EA-Map_obj5Ea
0001194A 0000                       		dc.w byte_119F0-Map_obj5Ea
0001194C 01                         byte_119EA:	dc.b 1
0001194D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011952 01                         byte_119F0:	dc.b 1
00011953 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011958                            		even
00011958                            		even
00011958                            
00011958                            ; ===========================================================================
00011958                            ; ---------------------------------------------------------------------------
00011958                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011958                            ; ---------------------------------------------------------------------------
00011958                            
00011958                            Obj5F:					; XREF: Obj_Index
00011958 7000                       		moveq	#0,d0
0001195A 1028 0024                  		move.b	$24(a0),d0
0001195E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011962 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011966                            ; ===========================================================================
00011966 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011968 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001196A 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001196C 0000                       		dc.w Obj5F_End-Obj5F_Index
0001196E                            ; ===========================================================================
0001196E                            
0001196E                            Obj5F_Main:				; XREF: Obj5F_Index
0001196E 5428 0024                  		addq.b	#2,$24(a0)
00011972 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001197A 317C 0400 0002             		move.w	#$400,2(a0)
00011980 0028 0004 0001             		ori.b	#4,1(a0)
00011986 117C 0003 0018             		move.b	#3,$18(a0)
0001198C 117C 000C 0019             		move.b	#$C,$19(a0)
00011992 1028 0028                  		move.b	$28(a0),d0
00011996 6700                       		beq.s	loc_11A3C
00011998 1140 0024                  		move.b	d0,$24(a0)
0001199C 4E75                       		rts	
0001199E                            ; ===========================================================================
0001199E                            
0001199E                            loc_11A3C:
0001199E 117C 009A 0020             		move.b	#$9A,$20(a0)
000119A4 0868 0000 0022             		bchg	#0,$22(a0)
000119AA                            
000119AA                            Obj5F_Action:				; XREF: Obj5F_Index
000119AA 7000                       		moveq	#0,d0
000119AC 1028 0025                  		move.b	$25(a0),d0
000119B0 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000119B4 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000119B8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000119BE 6100 8CF6                  		bsr.w	AnimateSprite
000119C2 6000 DC5E                  		bra.w	MarkObjGone
000119C6                            ; ===========================================================================
000119C6 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000119C8 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000119CA 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000119CC                            ; ===========================================================================
000119CC                            
000119CC                            Obj5F_Walk:				; XREF: Obj5F_Index2
000119CC 6100 0000                  		bsr.w	Obj5F_ChkSonic
000119D0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000119D4 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000119D6 5428 0025                  		addq.b	#2,$25(a0)
000119DA 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000119E0 317C 0010 0010             		move.w	#$10,$10(a0)
000119E6 117C 0001 001C             		move.b	#1,$1C(a0)
000119EC 0868 0000 0022             		bchg	#0,$22(a0)
000119F2 6700                       		beq.s	locret_11A96
000119F4 4468 0010                  		neg.w	$10(a0)		; change direction
000119F8                            
000119F8                            locret_11A96:
000119F8 4E75                       		rts	
000119FA                            ; ===========================================================================
000119FA                            
000119FA                            Obj5F_Wait:				; XREF: Obj5F_Index2
000119FA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000119FE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A02 6B00                       		bmi.s	loc_11AA8
00011A04 6100 BB5E                  		bsr.w	SpeedToPos
00011A08 4E75                       		rts	
00011A0A                            ; ===========================================================================
00011A0A                            
00011A0A                            loc_11AA8:
00011A0A 5528 0025                  		subq.b	#2,$25(a0)
00011A0E 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011A14 4268 0010                  		clr.w	$10(a0)		; stop walking
00011A18 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011A1E 4E75                       		rts	
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011A20 5368 0030                  		subq.w	#1,$30(a0)
00011A24 6A00                       		bpl.s	locret_11AD0
00011A26 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011A2A 117C 0000 0024             		move.b	#0,$24(a0)
00011A30                            
00011A30                            locret_11AD0:
00011A30 4E75                       		rts	
00011A32                            ; ===========================================================================
00011A32                            
00011A32                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011A32 3038 D008                  		move.w	($FFFFD008).w,d0
00011A36 9068 0008                  		sub.w	8(a0),d0
00011A3A 6400                       		bcc.s	loc_11ADE
00011A3C 4440                       		neg.w	d0
00011A3E                            
00011A3E                            loc_11ADE:
00011A3E 0C40 0060                  		cmpi.w	#$60,d0
00011A42 6400                       		bcc.s	locret_11B5E
00011A44 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A48 9068 000C                  		sub.w	$C(a0),d0
00011A4C 6400                       		bcc.s	Obj5F_MakeFuse
00011A4E 4440                       		neg.w	d0
00011A50                            
00011A50                            Obj5F_MakeFuse:
00011A50 0C40 0060                  		cmpi.w	#$60,d0
00011A54 6400                       		bcc.s	locret_11B5E
00011A56 4A78 FE08                  		tst.w	($FFFFFE08).w
00011A5A 6600                       		bne.s	locret_11B5E
00011A5C 117C 0004 0025             		move.b	#4,$25(a0)
00011A62 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011A68 4268 0010                  		clr.w	$10(a0)
00011A6C 117C 0002 001C             		move.b	#2,$1C(a0)
00011A72 6100 BFB2                  		bsr.w	SingleObjLoad2
00011A76 6600                       		bne.s	locret_11B5E
00011A78 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011A7C 3368 0008 0008             		move.w	8(a0),8(a1)
00011A82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A88 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011A8E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011A94 137C 0004 0028             		move.b	#4,$28(a1)
00011A9A 137C 0003 001C             		move.b	#3,$1C(a1)
00011AA0 337C 0010 0012             		move.w	#$10,$12(a1)
00011AA6 0828 0001 0022             		btst	#1,$22(a0)
00011AAC 6700                       		beq.s	loc_11B54
00011AAE 4469 0012                  		neg.w	$12(a1)
00011AB2                            
00011AB2                            loc_11B54:
00011AB2 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011AB8 2348 003C                  		move.l	a0,$3C(a1)
00011ABC                            
00011ABC                            locret_11B5E:
00011ABC 4E75                       		rts	
00011ABE                            ; ===========================================================================
00011ABE                            
00011ABE                            Obj5F_Display:				; XREF: Obj5F_Index
00011ABE 6100                       		bsr.s	loc_11B70
00011AC0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011AC6 6100 8BEE                  		bsr.w	AnimateSprite
00011ACA 6000 DB56                  		bra.w	MarkObjGone
00011ACE                            ; ===========================================================================
00011ACE                            
00011ACE                            loc_11B70:
00011ACE 5368 0030                  		subq.w	#1,$30(a0)
00011AD2 6B00                       		bmi.s	loc_11B7C
00011AD4 6100 BA8E                  		bsr.w	SpeedToPos
00011AD8 4E75                       		rts	
00011ADA                            ; ===========================================================================
00011ADA                            
00011ADA                            loc_11B7C:
00011ADA 4268 0030                  		clr.w	$30(a0)
00011ADE 4228 0024                  		clr.b	$24(a0)
00011AE2 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011AE8 7203                       		moveq	#3,d1
00011AEA 2248                       		movea.l	a0,a1
00011AEC 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011AF2 6000                       		bra.s	Obj5F_MakeShrap
00011AF4                            ; ===========================================================================
00011AF4                            
00011AF4                            Obj5F_Loop:
00011AF4 6100 BF30                  		bsr.w	SingleObjLoad2
00011AF8 6600                       		bne.s	loc_11BCE
00011AFA                            
00011AFA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011AFA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011AFE 3368 0008 0008             		move.w	8(a0),8(a1)
00011B04 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B0A 137C 0006 0028             		move.b	#6,$28(a1)
00011B10 137C 0004 001C             		move.b	#4,$1C(a1)
00011B16 335A 0010                  		move.w	(a2)+,$10(a1)
00011B1A 335A 0012                  		move.w	(a2)+,$12(a1)
00011B1E 137C 0098 0020             		move.b	#$98,$20(a1)
00011B24 08E9 0007 0001             		bset	#7,1(a1)
00011B2A                            
00011B2A                            loc_11BCE:
00011B2A 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011B2E                            
00011B2E 117C 0006 0024             		move.b	#6,$24(a0)
00011B34                            
00011B34                            Obj5F_End:				; XREF: Obj5F_Index
00011B34 6100 BA2E                  		bsr.w	SpeedToPos
00011B38 0668 0018 0012             		addi.w	#$18,$12(a0)
00011B3E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011B44 6100 8B70                  		bsr.w	AnimateSprite
00011B48 4A28 0001                  		tst.b	1(a0)
00011B4C 6A00 BA78                  		bpl.w	DeleteObject
00011B50 6000 BA38                  		bra.w	DisplaySprite
00011B54                            ; ===========================================================================
00011B54 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011B64                            
00011B64                            Ani_obj5F:
00011B64                            	include "_anim\obj5F.asm"
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            ; Animation script - Bomb enemy
00011B64                            ; ---------------------------------------------------------------------------
00011B64 0000                       		dc.w byte_11C12-Ani_obj5F
00011B66 0000                       		dc.w byte_11C16-Ani_obj5F
00011B68 0000                       		dc.w byte_11C1C-Ani_obj5F
00011B6A 0000                       		dc.w byte_11C20-Ani_obj5F
00011B6C 0000                       		dc.w byte_11C24-Ani_obj5F
00011B6E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011B72 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011B78 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011B7C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011B80 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011B84                            		even
00011B84                            		even
00011B84                            
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            Map_obj5F:
00011B84                            	include "_maps\obj5F.asm"
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011B84                            ; ---------------------------------------------------------------------------
00011B84 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011B88 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011B8C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011B90 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011B94 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011B98 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011B9C 03                         byte_11C40:	dc.b 3
00011B9D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011BA2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BA7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BAC 03                         byte_11C50:	dc.b 3
00011BAD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BB2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BB7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BBC 03                         byte_11C60:	dc.b 3
00011BBD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011BC2 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011BC7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011BCC 03                         byte_11C70:	dc.b 3
00011BCD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BD2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011BD7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BDC 03                         byte_11C80:	dc.b 3
00011BDD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011BE2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011BE7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011BEC 03                         byte_11C90:	dc.b 3
00011BED F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BF2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011BF7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BFC 02                         byte_11CA0:	dc.b 2
00011BFD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011C02 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C07 02                         byte_11CAB:	dc.b 2
00011C08 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011C0D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C12 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011C13 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011C18 01                         byte_11CBC:	dc.b 1			; fuse
00011C19 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011C1E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011C1F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011C24 01                         byte_11CC8:	dc.b 1			; fireball
00011C25 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011C2A                            		even
00011C2A                            		even
00011C2A                            
00011C2A                            ; ===========================================================================
00011C2A                            ; ---------------------------------------------------------------------------
00011C2A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011C2A                            ; ---------------------------------------------------------------------------
00011C2A                            
00011C2A                            Obj60:					; XREF: Obj_Index
00011C2A 7000                       		moveq	#0,d0
00011C2C 1028 0024                  		move.b	$24(a0),d0
00011C30 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011C34 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011C38                            ; ===========================================================================
00011C38 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011C3A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011C3C 0000                       		dc.w Obj60_Display-Obj60_Index
00011C3E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011C40 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011C42                            ; ===========================================================================
00011C42                            
00011C42                            Obj60_Main:				; XREF: Obj60_Index
00011C42 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011C4A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011C50 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011C56 6700                       		beq.s	loc_11D02
00011C58 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011C5E                            
00011C5E                            loc_11D02:
00011C5E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C64 6600                       		bne.s	loc_11D10
00011C66 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011C6C                            
00011C6C                            loc_11D10:
00011C6C 0028 0004 0001             		ori.b	#4,1(a0)
00011C72 117C 0004 0018             		move.b	#4,$18(a0)
00011C78 117C 000B 0020             		move.b	#$B,$20(a0)
00011C7E 117C 000C 0019             		move.b	#$C,$19(a0)
00011C84 7400                       		moveq	#0,d2
00011C86 45E8 0037                  		lea	$37(a0),a2
00011C8A 264A                       		movea.l	a2,a3
00011C8C 524A                       		addq.w	#1,a2
00011C8E 7203                       		moveq	#3,d1
00011C90                            
00011C90                            Obj60_MakeOrbs:
00011C90 6100 BD94                  		bsr.w	SingleObjLoad2
00011C94 6600                       		bne.s	loc_11D90
00011C96 5213                       		addq.b	#1,(a3)
00011C98 3A09                       		move.w	a1,d5
00011C9A 0445 D000                  		subi.w	#-$3000,d5
00011C9E EC4D                       		lsr.w	#6,d5
00011CA0 0245 007F                  		andi.w	#$7F,d5
00011CA4 14C5                       		move.b	d5,(a2)+
00011CA6 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011CA8 137C 0006 0024             		move.b	#6,$24(a1)
00011CAE 2368 0004 0004             		move.l	4(a0),4(a1)
00011CB4 3368 0002 0002             		move.w	2(a0),2(a1)
00011CBA 0029 0004 0001             		ori.b	#4,1(a1)
00011CC0 137C 0004 0018             		move.b	#4,$18(a1)
00011CC6 137C 0008 0019             		move.b	#8,$19(a1)
00011CCC 137C 0003 001A             		move.b	#3,$1A(a1)
00011CD2 137C 0098 0020             		move.b	#$98,$20(a1)
00011CD8 1342 0026                  		move.b	d2,$26(a1)
00011CDC 0602 0040                  		addi.b	#$40,d2
00011CE0 2348 003C                  		move.l	a0,$3C(a1)
00011CE4 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011CE8                            
00011CE8                            loc_11D90:
00011CE8 7001                       		moveq	#1,d0
00011CEA 0828 0000 0022             		btst	#0,$22(a0)
00011CF0 6700                       		beq.s	Obj60_Move
00011CF2 4440                       		neg.w	d0
00011CF4                            
00011CF4                            Obj60_Move:
00011CF4 1140 0036                  		move.b	d0,$36(a0)
00011CF8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011CFE 5428 0024                  		addq.b	#2,$24(a0)
00011D02 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011D08 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011D0E 6700                       		beq.s	locret_11DBC	; if not, branch
00011D10 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011D14                            
00011D14                            locret_11DBC:
00011D14 4E75                       		rts	
00011D16                            ; ===========================================================================
00011D16                            
00011D16                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011D16 3038 D008                  		move.w	($FFFFD008).w,d0
00011D1A 9068 0008                  		sub.w	8(a0),d0
00011D1E 6400                       		bcc.s	loc_11DCA
00011D20 4440                       		neg.w	d0
00011D22                            
00011D22                            loc_11DCA:
00011D22 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011D26 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D28 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011D2C 9068 000C                  		sub.w	$C(a0),d0
00011D30 6400                       		bcc.s	loc_11DDC
00011D32 4440                       		neg.w	d0
00011D34                            
00011D34                            loc_11DDC:
00011D34 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011D38 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D3A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011D3E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011D40 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011D46                            
00011D46                            Obj60_Animate:
00011D46 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011D4C 6100 8968                  		bsr.w	AnimateSprite
00011D50 6000 0000                  		bra.w	Obj60_ChkDel
00011D54                            ; ===========================================================================
00011D54                            
00011D54                            Obj60_Display:				; XREF: Obj60_Index
00011D54 6100 B80E                  		bsr.w	SpeedToPos
00011D58                            
00011D58                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011D58 3028 0008                  		move.w	8(a0),d0
00011D5C 0240 FF80                  		andi.w	#$FF80,d0
00011D60 3238 F700                  		move.w	($FFFFF700).w,d1
00011D64 0441 0080                  		subi.w	#$80,d1
00011D68 0241 FF80                  		andi.w	#$FF80,d1
00011D6C 9041                       		sub.w	d1,d0
00011D6E 0C40 0280                  		cmpi.w	#$280,d0
00011D72 6200 0000                  		bhi.w	Obj60_ChkGone
00011D76 6000 B812                  		bra.w	DisplaySprite
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011D7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011D7E 7000                       		moveq	#0,d0
00011D80 1028 0023                  		move.b	$23(a0),d0
00011D84 6700                       		beq.s	loc_11E34
00011D86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011D8C                            
00011D8C                            loc_11E34:
00011D8C 45E8 0037                  		lea	$37(a0),a2
00011D90 7400                       		moveq	#0,d2
00011D92 141A                       		move.b	(a2)+,d2
00011D94 5342                       		subq.w	#1,d2
00011D96 6500                       		bcs.s	Obj60_Delete
00011D98                            
00011D98                            loc_11E40:
00011D98 7000                       		moveq	#0,d0
00011D9A 101A                       		move.b	(a2)+,d0
00011D9C ED48                       		lsl.w	#6,d0
00011D9E 0680 00FF D000             		addi.l	#$FFD000,d0
00011DA4 2240                       		movea.l	d0,a1
00011DA6 6100 B820                  		bsr.w	DeleteObject2
00011DAA 51CA FFEC                  		dbf	d2,loc_11E40
00011DAE                            
00011DAE                            Obj60_Delete:
00011DAE 6000 B816                  		bra.w	DeleteObject
00011DB2                            ; ===========================================================================
00011DB2                            
00011DB2                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011DB2 2268 003C                  		movea.l	$3C(a0),a1
00011DB6 0C11 0060                  		cmpi.b	#$60,0(a1)
00011DBA 6600 B80A                  		bne.w	DeleteObject
00011DBE 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011DC4 6600                       		bne.s	Obj60_Circle
00011DC6 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011DCC 6600                       		bne.s	Obj60_Circle
00011DCE 5428 0024                  		addq.b	#2,$24(a0)
00011DD2 5329 0037                  		subq.b	#1,$37(a1)
00011DD6 6600                       		bne.s	Obj60_FireOrb
00011DD8 5429 0024                  		addq.b	#2,$24(a1)
00011DDC                            
00011DDC                            Obj60_FireOrb:
00011DDC 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011DE2 0829 0000 0022             		btst	#0,$22(a1)
00011DE8 6700                       		beq.s	Obj60_Display2
00011DEA 4468 0010                  		neg.w	$10(a0)
00011DEE                            
00011DEE                            Obj60_Display2:
00011DEE 6000 B79A                  		bra.w	DisplaySprite
00011DF2                            ; ===========================================================================
00011DF2                            
00011DF2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011DF2 1028 0026                  		move.b	$26(a0),d0
00011DF6 4EB9 0000 29B8             		jsr	(CalcSine).l
00011DFC E841                       		asr.w	#4,d1
00011DFE D269 0008                  		add.w	8(a1),d1
00011E02 3141 0008                  		move.w	d1,8(a0)
00011E06 E840                       		asr.w	#4,d0
00011E08 D069 000C                  		add.w	$C(a1),d0
00011E0C 3140 000C                  		move.w	d0,$C(a0)
00011E10 1029 0036                  		move.b	$36(a1),d0
00011E14 D128 0026                  		add.b	d0,$26(a0)
00011E18 6000 B770                  		bra.w	DisplaySprite
00011E1C                            ; ===========================================================================
00011E1C                            
00011E1C                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011E1C 6100 B746                  		bsr.w	SpeedToPos
00011E20 4A28 0001                  		tst.b	1(a0)
00011E24 6A00 B7A0                  		bpl.w	DeleteObject
00011E28 6000 B760                  		bra.w	DisplaySprite
00011E2C                            ; ===========================================================================
00011E2C                            Ani_obj60:
00011E2C                            	include "_anim\obj60.asm"
00011E2C                            ; ---------------------------------------------------------------------------
00011E2C                            ; Animation script - Orbinaut enemy
00011E2C                            ; ---------------------------------------------------------------------------
00011E2C 0000                       		dc.w byte_11EDA-Ani_obj60
00011E2E 0000                       		dc.w byte_11EDE-Ani_obj60
00011E30 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011E34 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011E3A                            		even
00011E3A                            		even
00011E3A                            
00011E3A                            ; ---------------------------------------------------------------------------
00011E3A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E3A                            ; ---------------------------------------------------------------------------
00011E3A                            Map_obj60:
00011E3A                            	include "_maps\obj60.asm"
00011E3A                            ; ---------------------------------------------------------------------------
00011E3A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E3A                            ; ---------------------------------------------------------------------------
00011E3A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011E3E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011E42 01                         byte_11EEC:	dc.b 1
00011E43 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011E48 01                         byte_11EF2:	dc.b 1
00011E49 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011E4E 01                         byte_11EF8:	dc.b 1
00011E4F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011E54 01                         byte_11EFE:	dc.b 1
00011E55 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011E5A                            		even
00011E5A                            		even
00011E5A                            
00011E5A                            ; ===========================================================================
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A                            ; Object 16 - harpoon (LZ)
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A                            
00011E5A                            Obj16:					; XREF: Obj_Index
00011E5A 7000                       		moveq	#0,d0
00011E5C 1028 0024                  		move.b	$24(a0),d0
00011E60 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011E64 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011E68                            ; ===========================================================================
00011E68 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011E6A 0000                       		dc.w Obj16_Move-Obj16_Index
00011E6C 0000                       		dc.w Obj16_Wait-Obj16_Index
00011E6E                            ; ===========================================================================
00011E6E                            
00011E6E                            Obj16_Main:				; XREF: Obj16_Index
00011E6E 5428 0024                  		addq.b	#2,$24(a0)
00011E72 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011E7A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011E80 0028 0004 0001             		ori.b	#4,1(a0)
00011E86 117C 0004 0018             		move.b	#4,$18(a0)
00011E8C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011E92 117C 0014 0019             		move.b	#$14,$19(a0)
00011E98 317C 003C 0030             		move.w	#60,$30(a0)
00011E9E                            
00011E9E                            Obj16_Move:				; XREF: Obj16_Index
00011E9E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011EA4 6100 8810                  		bsr.w	AnimateSprite
00011EA8 7000                       		moveq	#0,d0
00011EAA 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00011EAE 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00011EB4 6000 D76C                  		bra.w	MarkObjGone
00011EB8                            ; ===========================================================================
00011EB8 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00011EBE                            ; ===========================================================================
00011EBE                            
00011EBE                            Obj16_Wait:				; XREF: Obj16_Index
00011EBE 5368 0030                  		subq.w	#1,$30(a0)
00011EC2 6A00                       		bpl.s	Obj16_ChkDel
00011EC4 317C 003C 0030             		move.w	#60,$30(a0)
00011ECA 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00011ECE 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00011ED4                            
00011ED4                            Obj16_ChkDel:
00011ED4 6000 D74C                  		bra.w	MarkObjGone
00011ED8                            ; ===========================================================================
00011ED8                            Ani_obj16:
00011ED8                            	include "_anim\obj16.asm"
00011ED8                            ; ---------------------------------------------------------------------------
00011ED8                            ; Animation script - harpoon (LZ)
00011ED8                            ; ---------------------------------------------------------------------------
00011ED8 0000                       		dc.w byte_11F8A-Ani_obj16
00011EDA 0000                       		dc.w byte_11F8E-Ani_obj16
00011EDC 0000                       		dc.w byte_11F92-Ani_obj16
00011EDE 0000                       		dc.w byte_11F96-Ani_obj16
00011EE0 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00011EE4 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00011EE8 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00011EEC 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00011EF0                            		even
00011EF0                            		even
00011EF0                            
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - harpoon (LZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            Map_obj16:
00011EF0                            	include "_maps\obj16.asm"
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - harpoon (LZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00011EF4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00011EF8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00011EFC 01                         byte_11FA6:	dc.b 1
00011EFD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00011F02 01                         byte_11FAC:	dc.b 1
00011F03 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00011F08 02                         byte_11FB2:	dc.b 2
00011F09 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00011F0E FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00011F13 01                         byte_11FBD:	dc.b 1
00011F14 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00011F19 01                         byte_11FC3:	dc.b 1
00011F1A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00011F1F 02                         byte_11FC9:	dc.b 2
00011F20 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00011F25 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00011F2A                            		even
00011F2A                            		even
00011F2A                            
00011F2A                            ; ===========================================================================
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A                            ; Object 61 - blocks (LZ)
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A                            
00011F2A                            Obj61:					; XREF: Obj_Index
00011F2A 7000                       		moveq	#0,d0
00011F2C 1028 0024                  		move.b	$24(a0),d0
00011F30 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00011F34 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00011F38                            ; ===========================================================================
00011F38 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00011F3A 0000                       		dc.w Obj61_Action-Obj61_Index
00011F3C                            
00011F3C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00011F3E 200C                       		dc.b $20, $C
00011F40 1010                       		dc.b $10, $10
00011F42 1010                       		dc.b $10, $10
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Obj61_Main:				; XREF: Obj61_Index
00011F44 5428 0024                  		addq.b	#2,$24(a0)
00011F48 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00011F50 317C 43E6 0002             		move.w	#$43E6,2(a0)
00011F56 117C 0004 0001             		move.b	#4,1(a0)
00011F5C 117C 0003 0018             		move.b	#3,$18(a0)
00011F62 7000                       		moveq	#0,d0
00011F64 1028 0028                  		move.b	$28(a0),d0
00011F68 E648                       		lsr.w	#3,d0
00011F6A 0240 000E                  		andi.w	#$E,d0
00011F6E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00011F72 115A 0019                  		move.b	(a2)+,$19(a0)
00011F76 1152 0016                  		move.b	(a2),$16(a0)
00011F7A E248                       		lsr.w	#1,d0
00011F7C 1140 001A                  		move.b	d0,$1A(a0)
00011F80 3168 0008 0034             		move.w	8(a0),$34(a0)
00011F86 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011F8C 1028 0028                  		move.b	$28(a0),d0
00011F90 0200 000F                  		andi.b	#$F,d0
00011F94 6700                       		beq.s	Obj61_Action
00011F96 0C00 0007                  		cmpi.b	#7,d0
00011F9A 6700                       		beq.s	Obj61_Action
00011F9C 117C 0001 0038             		move.b	#1,$38(a0)
00011FA2                            
00011FA2                            Obj61_Action:				; XREF: Obj61_Index
00011FA2 3F28 0008                  		move.w	8(a0),-(sp)
00011FA6 7000                       		moveq	#0,d0
00011FA8 1028 0028                  		move.b	$28(a0),d0
00011FAC 0240 000F                  		andi.w	#$F,d0
00011FB0 D040                       		add.w	d0,d0
00011FB2 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00011FB6 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00011FBA 381F                       		move.w	(sp)+,d4
00011FBC 4A28 0001                  		tst.b	1(a0)
00011FC0 6A00                       		bpl.s	Obj61_ChkDel
00011FC2 7200                       		moveq	#0,d1
00011FC4 1228 0019                  		move.b	$19(a0),d1
00011FC8 0641 000B                  		addi.w	#$B,d1
00011FCC 7400                       		moveq	#0,d2
00011FCE 1428 0016                  		move.b	$16(a0),d2
00011FD2 3602                       		move.w	d2,d3
00011FD4 5243                       		addq.w	#1,d3
00011FD6 6100 D972                  		bsr.w	SolidObject
00011FDA 1144 003F                  		move.b	d4,$3F(a0)
00011FDE 6100 0000                  		bsr.w	loc_12180
00011FE2                            
00011FE2                            Obj61_ChkDel:
00011FE2 3028 0034                  		move.w	$34(a0),d0
00011FE6 0240 FF80                  		andi.w	#$FF80,d0
00011FEA 3238 F700                  		move.w	($FFFFF700).w,d1
00011FEE 0441 0080                  		subi.w	#$80,d1
00011FF2 0241 FF80                  		andi.w	#$FF80,d1
00011FF6 9041                       		sub.w	d1,d0
00011FF8 0C40 0280                  		cmpi.w	#$280,d0
00011FFC 6200 B5C8                  		bhi.w	DeleteObject
00012000 6000 B588                  		bra.w	DisplaySprite
00012004                            ; ===========================================================================
00012004 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012008 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001200C 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012010 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012014                            ; ===========================================================================
00012014                            
00012014                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012014 4E75                       		rts	
00012016                            ; ===========================================================================
00012016                            
00012016                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012016 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001201A 6600                       		bne.s	loc_120D6	; if yes, branch
0001201C 0828 0003 0022             		btst	#3,$22(a0)
00012022 6700                       		beq.s	locret_120D4
00012024 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
0001202A                            
0001202A                            locret_120D4:
0001202A 4E75                       		rts	
0001202C                            ; ===========================================================================
0001202C                            
0001202C                            loc_120D6:
0001202C 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012030 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012032 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012036 4228 0038                  		clr.b	$38(a0)
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001203C 6100 B526                  		bsr.w	SpeedToPos
00012040 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012044 6100 0000                  		bsr.w	ObjHitFloor
00012048 4A41                       		tst.w	d1
0001204A 6A00 0000                  		bpl.w	locret_12106
0001204E 5241                       		addq.w	#1,d1
00012050 D368 000C                  		add.w	d1,$C(a0)
00012054 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012058 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001205C                            
0001205C                            locret_12106:
0001205C 4E75                       		rts	
0001205E                            ; ===========================================================================
0001205E                            
0001205E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001205E 6100 B504                  		bsr.w	SpeedToPos
00012062 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012066 6100 0000                  		bsr.w	ObjHitCeiling
0001206A 4A41                       		tst.w	d1
0001206C 6A00 0000                  		bpl.w	locret_12126
00012070 9368 000C                  		sub.w	d1,$C(a0)
00012074 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012078 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001207C                            
0001207C                            locret_12126:
0001207C 4E75                       		rts	
0001207E                            ; ===========================================================================
0001207E                            
0001207E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001207E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012084 6600                       		bne.s	locret_12138	; if not, branch
00012086 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001208A 4228 0038                  		clr.b	$38(a0)
0001208E                            
0001208E                            locret_12138:
0001208E 4E75                       		rts	
00012090                            ; ===========================================================================
00012090                            
00012090                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012090 3038 F646                  		move.w	($FFFFF646).w,d0
00012094 9068 000C                  		sub.w	$C(a0),d0
00012098 6700                       		beq.s	locret_1217E
0001209A 6400                       		bcc.s	loc_12162
0001209C 0C40 FFFE                  		cmpi.w	#-2,d0
000120A0 6C00                       		bge.s	loc_1214E
000120A2 70FE                       		moveq	#-2,d0
000120A4                            
000120A4                            loc_1214E:
000120A4 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000120A8 6100 0000                  		bsr.w	ObjHitCeiling
000120AC 4A41                       		tst.w	d1
000120AE 6A00 0000                  		bpl.w	locret_12160
000120B2 9368 000C                  		sub.w	d1,$C(a0)
000120B6                            
000120B6                            locret_12160:
000120B6 4E75                       		rts	
000120B8                            ; ===========================================================================
000120B8                            
000120B8                            loc_12162:				; XREF: Obj61_Type07
000120B8 0C40 0002                  		cmpi.w	#2,d0
000120BC 6F00                       		ble.s	loc_1216A
000120BE 7002                       		moveq	#2,d0
000120C0                            
000120C0                            loc_1216A:
000120C0 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000120C4 6100 0000                  		bsr.w	ObjHitFloor
000120C8 4A41                       		tst.w	d1
000120CA 6A00 0000                  		bpl.w	locret_1217E
000120CE 5241                       		addq.w	#1,d1
000120D0 D368 000C                  		add.w	d1,$C(a0)
000120D4                            
000120D4                            locret_1217E:
000120D4 4E75                       		rts	
000120D6                            ; ===========================================================================
000120D6                            
000120D6                            loc_12180:				; XREF: Obj61_Action
000120D6 4A28 0038                  		tst.b	$38(a0)
000120DA 6700                       		beq.s	locret_121C0
000120DC 0828 0003 0022             		btst	#3,$22(a0)
000120E2 6600                       		bne.s	loc_1219A
000120E4 4A28 003E                  		tst.b	$3E(a0)
000120E8 6700                       		beq.s	locret_121C0
000120EA 5928 003E                  		subq.b	#4,$3E(a0)
000120EE 6000                       		bra.s	loc_121A6
000120F0                            ; ===========================================================================
000120F0                            
000120F0                            loc_1219A:
000120F0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000120F6 6700                       		beq.s	locret_121C0
000120F8 5828 003E                  		addq.b	#4,$3E(a0)
000120FC                            
000120FC                            loc_121A6:
000120FC 1028 003E                  		move.b	$3E(a0),d0
00012100 4EB9 0000 29B8             		jsr	(CalcSine).l
00012106 323C 0400                  		move.w	#$400,d1
0001210A C1C1                       		muls.w	d1,d0
0001210C 4840                       		swap	d0
0001210E D068 0030                  		add.w	$30(a0),d0
00012112 3140 000C                  		move.w	d0,$C(a0)
00012116                            
00012116                            locret_121C0:
00012116 4E75                       		rts	
00012118                            ; ===========================================================================
00012118                            ; ---------------------------------------------------------------------------
00012118                            ; Sprite mappings - blocks (LZ)
00012118                            ; ---------------------------------------------------------------------------
00012118                            Map_obj61:
00012118                            	include "_maps\obj61.asm"
00012118                            ; ---------------------------------------------------------------------------
00012118                            ; Sprite mappings - blocks (LZ)
00012118                            ; ---------------------------------------------------------------------------
00012118 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001211C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012120 01                         byte_121CA:	dc.b 1
00012121 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012126 02                         byte_121D0:	dc.b 2
00012127 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001212C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012131 01                         byte_121DB:	dc.b 1
00012132 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012137 01                         byte_121E1:	dc.b 1
00012138 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001213E 00                         		even
0001213E 00                         		even
0001213E                            
0001213E                            ; ===========================================================================
0001213E                            ; ---------------------------------------------------------------------------
0001213E                            ; Object 62 - gargoyle head (LZ)
0001213E                            ; ---------------------------------------------------------------------------
0001213E                            
0001213E                            Obj62:					; XREF: Obj_Index
0001213E 7000                       		moveq	#0,d0
00012140 1028 0024                  		move.b	$24(a0),d0
00012144 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012148 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001214C 6000 D4D4                  		bra.w	MarkObjGone
00012150                            ; ===========================================================================
00012150 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012152 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012154 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012156 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012158                            
00012158 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012160                            ; ===========================================================================
00012160                            
00012160                            Obj62_Main:				; XREF: Obj62_Index
00012160 5428 0024                  		addq.b	#2,$24(a0)
00012164 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001216C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012172 0028 0004 0001             		ori.b	#4,1(a0)
00012178 117C 0003 0018             		move.b	#3,$18(a0)
0001217E 117C 0010 0019             		move.b	#$10,$19(a0)
00012184 1028 0028                  		move.b	$28(a0),d0	; get object type
00012188 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001218C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012192 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012198 0228 000F 0028             		andi.b	#$F,$28(a0)
0001219E                            
0001219E                            Obj62_MakeFire:				; XREF: Obj62_Index
0001219E 5328 001E                  		subq.b	#1,$1E(a0)
000121A2 6600                       		bne.s	Obj62_NoFire
000121A4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000121AA 6100 B658                  		bsr.w	ChkObjOnScreen
000121AE 6600                       		bne.s	Obj62_NoFire
000121B0 6100 B85E                  		bsr.w	SingleObjLoad
000121B4 6600                       		bne.s	Obj62_NoFire
000121B6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000121BA 5829 0024                  		addq.b	#4,$24(a1)
000121BE 3368 0008 0008             		move.w	8(a0),8(a1)
000121C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121CA 1368 0001 0001             		move.b	1(a0),1(a1)
000121D0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121D6                            
000121D6                            Obj62_NoFire:
000121D6 4E75                       		rts	
000121D8                            ; ===========================================================================
000121D8                            
000121D8                            Obj62_FireBall:				; XREF: Obj62_Index
000121D8 5428 0024                  		addq.b	#2,$24(a0)
000121DC 117C 0008 0016             		move.b	#8,$16(a0)
000121E2 117C 0008 0017             		move.b	#8,$17(a0)
000121E8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000121F0 317C 02E9 0002             		move.w	#$2E9,2(a0)
000121F6 0028 0004 0001             		ori.b	#4,1(a0)
000121FC 117C 0004 0018             		move.b	#4,$18(a0)
00012202 117C 0098 0020             		move.b	#$98,$20(a0)
00012208 117C 0008 0019             		move.b	#8,$19(a0)
0001220E 117C 0002 001A             		move.b	#2,$1A(a0)
00012214 5068 000C                  		addq.w	#8,$C(a0)
00012218 317C 0200 0010             		move.w	#$200,$10(a0)
0001221E 0828 0000 0022             		btst	#0,$22(a0)
00012224 6600                       		bne.s	Obj62_Sound
00012226 4468 0010                  		neg.w	$10(a0)
0001222A                            
0001222A                            Obj62_Sound:
0001222A 303C 00AE                  		move.w	#$AE,d0
0001222E 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012234                            
00012234                            Obj62_AniFire:				; XREF: Obj62_Index
00012234 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012238 0200 0007                  		andi.b	#7,d0
0001223C 6600                       		bne.s	Obj62_StopFire
0001223E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012244                            
00012244                            Obj62_StopFire:
00012244 6100 B31E                  		bsr.w	SpeedToPos
00012248 0828 0000 0022             		btst	#0,$22(a0)
0001224E 6600                       		bne.s	Obj62_StopFire2
00012250 76F8                       		moveq	#-8,d3
00012252 6100 0000                  		bsr.w	ObjHitWallLeft
00012256 4A41                       		tst.w	d1
00012258 6B00 B36C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001225C 4E75                       		rts	
0001225E                            ; ===========================================================================
0001225E                            
0001225E                            Obj62_StopFire2:
0001225E 7608                       		moveq	#8,d3
00012260 6100 0000                  		bsr.w	ObjHitWallRight
00012264 4A41                       		tst.w	d1
00012266 6B00 B35E                  		bmi.w	DeleteObject
0001226A 4E75                       		rts	
0001226C                            ; ===========================================================================
0001226C                            ; ---------------------------------------------------------------------------
0001226C                            ; Sprite mappings - gargoyle head (LZ)
0001226C                            ; ---------------------------------------------------------------------------
0001226C                            Map_obj62:
0001226C                            	include "_maps\obj62.asm"
0001226C                            ; ---------------------------------------------------------------------------
0001226C                            ; Sprite mappings - gargoyle head (LZ)
0001226C                            ; ---------------------------------------------------------------------------
0001226C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012270 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012274 03                         byte_12320:	dc.b 3
00012275 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001227A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001227F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012284 01                         byte_12330:	dc.b 1
00012285 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001228A 01                         byte_12336:	dc.b 1
0001228B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012290                            		even
00012290                            		even
00012290                            
00012290                            ; ===========================================================================
00012290                            ; ---------------------------------------------------------------------------
00012290                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012290                            ; ---------------------------------------------------------------------------
00012290                            
00012290                            Obj63:					; XREF: Obj_Index
00012290 7000                       		moveq	#0,d0
00012292 1028 0024                  		move.b	$24(a0),d0
00012296 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001229A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001229E 3028 0030                  		move.w	$30(a0),d0
000122A2 0240 FF80                  		andi.w	#$FF80,d0
000122A6 3238 F700                  		move.w	($FFFFF700).w,d1
000122AA 0441 0080                  		subi.w	#$80,d1
000122AE 0241 FF80                  		andi.w	#$FF80,d1
000122B2 9041                       		sub.w	d1,d0
000122B4 0C40 0280                  		cmpi.w	#$280,d0
000122B8 6200                       		bhi.s	loc_1236A
000122BA                            
000122BA                            Obj63_Display:				; XREF: loc_1236A
000122BA 6000 B2CE                  		bra.w	DisplaySprite
000122BE                            ; ===========================================================================
000122BE                            
000122BE                            loc_1236A:				; XREF: Obj63
000122BE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000122C4 6600                       		bne.s	loc_12378
000122C6 0C40 FF80                  		cmpi.w	#-$80,d0
000122CA 64EE                       		bcc.s	Obj63_Display
000122CC                            
000122CC                            loc_12378:
000122CC 1028 002F                  		move.b	$2F(a0),d0
000122D0 6A00 B2F4                  		bpl.w	DeleteObject
000122D4 0240 007F                  		andi.w	#$7F,d0
000122D8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000122DC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000122E2 6000 B2E2                  		bra.w	DeleteObject
000122E6                            ; ===========================================================================
000122E6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000122E8 0000                       		dc.w loc_124B2-Obj63_Index
000122EA 0000                       		dc.w loc_124C2-Obj63_Index
000122EC 0000                       		dc.w loc_124DE-Obj63_Index
000122EE                            ; ===========================================================================
000122EE                            
000122EE                            Obj63_Main:				; XREF: Obj63_Index
000122EE 1028 0028                  		move.b	$28(a0),d0
000122F2 6B00 0000                  		bmi.w	loc_12460
000122F6 5428 0024                  		addq.b	#2,$24(a0)
000122FA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012302 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012308 0028 0004 0001             		ori.b	#4,1(a0)
0001230E 117C 0010 0019             		move.b	#$10,$19(a0)
00012314 117C 0004 0018             		move.b	#4,$18(a0)
0001231A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012320 6600                       		bne.s	loc_123E2
00012322 5828 0024                  		addq.b	#4,$24(a0)
00012326 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001232C 117C 0001 0018             		move.b	#1,$18(a0)
00012332 6000 0000                  		bra.w	loc_124DE
00012336                            ; ===========================================================================
00012336                            
00012336                            loc_123E2:
00012336 117C 0004 001A             		move.b	#4,$1A(a0)
0001233C 7000                       		moveq	#0,d0
0001233E 1028 0028                  		move.b	$28(a0),d0
00012342 3200                       		move.w	d0,d1
00012344 E648                       		lsr.w	#3,d0
00012346 0240 001E                  		andi.w	#$1E,d0
0001234A 45FA 0000                  		lea	Obj63_Data(pc),a2
0001234E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012352 315A 0038                  		move.w	(a2)+,$38(a0)
00012356 315A 0030                  		move.w	(a2)+,$30(a0)
0001235A 214A 003C                  		move.l	a2,$3C(a0)
0001235E 0241 000F                  		andi.w	#$F,d1
00012362 E549                       		lsl.w	#2,d1
00012364 1141 0038                  		move.b	d1,$38(a0)
00012368 117C 0004 003A             		move.b	#4,$3A(a0)
0001236E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012372 6700                       		beq.s	loc_1244C
00012374 117C 0001 003B             		move.b	#1,$3B(a0)
0001237A 4428 003A                  		neg.b	$3A(a0)
0001237E 7200                       		moveq	#0,d1
00012380 1228 0038                  		move.b	$38(a0),d1
00012384 D228 003A                  		add.b	$3A(a0),d1
00012388 B228 0039                  		cmp.b	$39(a0),d1
0001238C 6500                       		bcs.s	loc_12448
0001238E 1001                       		move.b	d1,d0
00012390 7200                       		moveq	#0,d1
00012392 4A00                       		tst.b	d0
00012394 6A00                       		bpl.s	loc_12448
00012396 1228 0039                  		move.b	$39(a0),d1
0001239A 5901                       		subq.b	#4,d1
0001239C                            
0001239C                            loc_12448:
0001239C 1141 0038                  		move.b	d1,$38(a0)
000123A0                            
000123A0                            loc_1244C:
000123A0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000123A6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000123AC 6100 0000                  		bsr.w	Obj63_ChangeDir
000123B0 6000 0000                  		bra.w	loc_124B2
000123B4                            ; ===========================================================================
000123B4                            
000123B4                            loc_12460:				; XREF: Obj63_Main
000123B4 1140 002F                  		move.b	d0,$2F(a0)
000123B8 0240 007F                  		andi.w	#$7F,d0
000123BC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000123C0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000123C6 6600 B1FE                  		bne.w	DeleteObject
000123CA D040                       		add.w	d0,d0
000123CC 0240 001E                  		andi.w	#$1E,d0
000123D0 0640 0070                  		addi.w	#$70,d0
000123D4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000123DA D4F2 0000                  		adda.w	(a2,d0.w),a2
000123DE 321A                       		move.w	(a2)+,d1
000123E0 2248                       		movea.l	a0,a1
000123E2 6000                       		bra.s	Obj63_MakePtfms
000123E4                            ; ===========================================================================
000123E4                            
000123E4                            Obj63_Loop:
000123E4 6100 B62A                  		bsr.w	SingleObjLoad
000123E8 6600                       		bne.s	loc_124AA
000123EA                            
000123EA                            Obj63_MakePtfms:			; XREF: loc_12460
000123EA 12BC 0063                  		move.b	#$63,0(a1)
000123EE 335A 0008                  		move.w	(a2)+,8(a1)
000123F2 335A 000C                  		move.w	(a2)+,$C(a1)
000123F6 301A                       		move.w	(a2)+,d0
000123F8 1340 0028                  		move.b	d0,$28(a1)
000123FC                            
000123FC                            loc_124AA:
000123FC 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012400                            
00012400 588F                       		addq.l	#4,sp
00012402 4E75                       		rts	
00012404                            ; ===========================================================================
00012404                            
00012404                            loc_124B2:				; XREF: Obj63_Index
00012404 7200                       		moveq	#0,d1
00012406 1228 0019                  		move.b	$19(a0),d1
0001240A 4EB9 0000 7414             		jsr	(PlatformObject).l
00012410 6000 0000                  		bra.w	sub_12502
00012414                            ; ===========================================================================
00012414                            
00012414                            loc_124C2:				; XREF: Obj63_Index
00012414 7200                       		moveq	#0,d1
00012416 1228 0019                  		move.b	$19(a0),d1
0001241A 4EB9 0000 7588             		jsr	(ExitPlatform).l
00012420 3F28 0008                  		move.w	8(a0),-(sp)
00012424 6100 0000                  		bsr.w	sub_12502
00012428 341F                       		move.w	(sp)+,d2
0001242A 4EF9 0000 7AF2             		jmp	(MvSonicOnPtfm2).l
00012430                            ; ===========================================================================
00012430                            
00012430                            loc_124DE:				; XREF: Obj63_Index
00012430 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012434 0240 0003                  		andi.w	#3,d0
00012438 6600                       		bne.s	loc_124FC
0001243A 7201                       		moveq	#1,d1
0001243C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012440 6700                       		beq.s	loc_124F2
00012442 4401                       		neg.b	d1
00012444                            
00012444                            loc_124F2:
00012444 D328 001A                  		add.b	d1,$1A(a0)
00012448 0228 0003 001A             		andi.b	#3,$1A(a0)
0001244E                            
0001244E                            loc_124FC:
0001244E 588F                       		addq.l	#4,sp
00012450 6000 D1D0                  		bra.w	MarkObjGone
00012454                            
00012454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012454                            
00012454                            
00012454                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012454 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012458 6700                       		beq.s	loc_12520
0001245A 4A28 003B                  		tst.b	$3B(a0)
0001245E 6600                       		bne.s	loc_12520
00012460 117C 0001 003B             		move.b	#1,$3B(a0)
00012466 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001246C 4428 003A                  		neg.b	$3A(a0)
00012470 6000                       		bra.s	loc_12534
00012472                            ; ===========================================================================
00012472                            
00012472                            loc_12520:
00012472 3028 0008                  		move.w	8(a0),d0
00012476 B068 0034                  		cmp.w	$34(a0),d0
0001247A 6600                       		bne.s	loc_1256A
0001247C 3028 000C                  		move.w	$C(a0),d0
00012480 B068 0036                  		cmp.w	$36(a0),d0
00012484 6600                       		bne.s	loc_1256A
00012486                            
00012486                            loc_12534:
00012486 7200                       		moveq	#0,d1
00012488 1228 0038                  		move.b	$38(a0),d1
0001248C D228 003A                  		add.b	$3A(a0),d1
00012490 B228 0039                  		cmp.b	$39(a0),d1
00012494 6500                       		bcs.s	loc_12552
00012496 1001                       		move.b	d1,d0
00012498 7200                       		moveq	#0,d1
0001249A 4A00                       		tst.b	d0
0001249C 6A00                       		bpl.s	loc_12552
0001249E 1228 0039                  		move.b	$39(a0),d1
000124A2 5901                       		subq.b	#4,d1
000124A4                            
000124A4                            loc_12552:
000124A4 1141 0038                  		move.b	d1,$38(a0)
000124A8 2268 003C                  		movea.l	$3C(a0),a1
000124AC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000124B2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000124B8 6100 0000                  		bsr.w	Obj63_ChangeDir
000124BC                            
000124BC                            loc_1256A:
000124BC 6100 B0A6                  		bsr.w	SpeedToPos
000124C0 4E75                       		rts	
000124C2                            ; End of function sub_12502
000124C2                            
000124C2                            
000124C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000124C2                            
000124C2                            
000124C2                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000124C2 7000                       		moveq	#0,d0
000124C4 343C FF00                  		move.w	#-$100,d2
000124C8 3028 0008                  		move.w	8(a0),d0
000124CC 9068 0034                  		sub.w	$34(a0),d0
000124D0 6400                       		bcc.s	loc_12584
000124D2 4440                       		neg.w	d0
000124D4 4442                       		neg.w	d2
000124D6                            
000124D6                            loc_12584:
000124D6 7200                       		moveq	#0,d1
000124D8 363C FF00                  		move.w	#-$100,d3
000124DC 3228 000C                  		move.w	$C(a0),d1
000124E0 9268 0036                  		sub.w	$36(a0),d1
000124E4 6400                       		bcc.s	loc_12598
000124E6 4441                       		neg.w	d1
000124E8 4443                       		neg.w	d3
000124EA                            
000124EA                            loc_12598:
000124EA B240                       		cmp.w	d0,d1
000124EC 6500                       		bcs.s	loc_125C2
000124EE 3028 0008                  		move.w	8(a0),d0
000124F2 9068 0034                  		sub.w	$34(a0),d0
000124F6 6700                       		beq.s	loc_125AE
000124F8 48C0                       		ext.l	d0
000124FA E180                       		asl.l	#8,d0
000124FC 81C1                       		divs.w	d1,d0
000124FE 4440                       		neg.w	d0
00012500                            
00012500                            loc_125AE:
00012500 3140 0010                  		move.w	d0,$10(a0)
00012504 3143 0012                  		move.w	d3,$12(a0)
00012508 4840                       		swap	d0
0001250A 3140 000A                  		move.w	d0,$A(a0)
0001250E 4268 000E                  		clr.w	$E(a0)
00012512 4E75                       		rts	
00012514                            ; ===========================================================================
00012514                            
00012514                            loc_125C2:				; XREF: Obj63_ChangeDir
00012514 3228 000C                  		move.w	$C(a0),d1
00012518 9268 0036                  		sub.w	$36(a0),d1
0001251C 6700                       		beq.s	loc_125D4
0001251E 48C1                       		ext.l	d1
00012520 E181                       		asl.l	#8,d1
00012522 83C0                       		divs.w	d0,d1
00012524 4441                       		neg.w	d1
00012526                            
00012526                            loc_125D4:
00012526 3141 0012                  		move.w	d1,$12(a0)
0001252A 3142 0010                  		move.w	d2,$10(a0)
0001252E 4841                       		swap	d1
00012530 3141 000E                  		move.w	d1,$E(a0)
00012534 4268 000A                  		clr.w	$A(a0)
00012538 4E75                       		rts	
0001253A                            ; End of function Obj63_ChangeDir
0001253A                            
0001253A                            ; ===========================================================================
0001253A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001253C 0000                       		dc.w word_12610-Obj63_Data
0001253E 0000                       		dc.w word_12628-Obj63_Data
00012540 0000                       		dc.w word_1263C-Obj63_Data
00012542 0000                       		dc.w word_12650-Obj63_Data
00012544 0000                       		dc.w word_12668-Obj63_Data
00012546 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012556 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012562 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012572 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001257A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001258E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000125A2 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000125BA 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000125CE                            
000125CE                            ; ---------------------------------------------------------------------------
000125CE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125CE                            ; ---------------------------------------------------------------------------
000125CE                            Map_obj63:
000125CE                            	include "_maps\obj63.asm"
000125CE                            ; ---------------------------------------------------------------------------
000125CE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125CE                            ; ---------------------------------------------------------------------------
000125CE 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000125D2 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000125D6 0000                       		dc.w byte_1269E-Map_obj63
000125D8 01                         byte_12686:	dc.b 1
000125D9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000125DE 01                         byte_1268C:	dc.b 1
000125DF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000125E4 01                         byte_12692:	dc.b 1
000125E5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000125EA 01                         byte_12698:	dc.b 1
000125EB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000125F0 01                         byte_1269E:	dc.b 1
000125F1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000125F6                            		even
000125F6                            		even
000125F6                            
000125F6                            ; ===========================================================================
000125F6                            ; ---------------------------------------------------------------------------
000125F6                            ; Object 64 - bubbles (LZ)
000125F6                            ; ---------------------------------------------------------------------------
000125F6                            
000125F6                            Obj64:					; XREF: Obj_Index
000125F6 7000                       		moveq	#0,d0
000125F8 1028 0024                  		move.b	$24(a0),d0
000125FC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012600 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012604                            ; ===========================================================================
00012604 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012606 0000                       		dc.w Obj64_Animate-Obj64_Index
00012608 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001260A 0000                       		dc.w Obj64_Display2-Obj64_Index
0001260C 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001260E 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012610                            ; ===========================================================================
00012610                            
00012610                            Obj64_Main:				; XREF: Obj64_Index
00012610 5428 0024                  		addq.b	#2,$24(a0)
00012614 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001261C 317C 8348 0002             		move.w	#$8348,2(a0)
00012622 117C 0084 0001             		move.b	#$84,1(a0)
00012628 117C 0010 0019             		move.b	#$10,$19(a0)
0001262E 117C 0001 0018             		move.b	#1,$18(a0)
00012634 1028 0028                  		move.b	$28(a0),d0	; get object type
00012638 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001263A 5028 0024                  		addq.b	#8,$24(a0)
0001263E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012642 1140 0032                  		move.b	d0,$32(a0)
00012646 1140 0033                  		move.b	d0,$33(a0)
0001264A 117C 0006 001C             		move.b	#6,$1C(a0)
00012650 6000 0000                  		bra.w	Obj64_BblMaker
00012654                            ; ===========================================================================
00012654                            
00012654                            Obj64_Bubble:				; XREF: Obj64_Main
00012654 1140 001C                  		move.b	d0,$1C(a0)
00012658 3168 0008 0030             		move.w	8(a0),$30(a0)
0001265E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012664 4EB9 0000 2992             		jsr	(RandomNumber).l
0001266A 1140 0026                  		move.b	d0,$26(a0)
0001266E                            
0001266E                            Obj64_Animate:				; XREF: Obj64_Index
0001266E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012674 4EBA 8040                  		jsr	AnimateSprite
00012678 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001267E 6600                       		bne.s	Obj64_ChkWater
00012680 117C 0001 002E             		move.b	#1,$2E(a0)
00012686                            
00012686                            Obj64_ChkWater:				; XREF: Obj64_Index
00012686 3038 F646                  		move.w	($FFFFF646).w,d0
0001268A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001268E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012690                            
00012690                            Obj64_Burst:				; XREF: Obj64_Wobble
00012690 117C 0006 0024             		move.b	#6,$24(a0)
00012696 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001269A 6000 0000                  		bra.w	Obj64_Display2
0001269E                            ; ===========================================================================
0001269E                            
0001269E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001269E 1028 0026                  		move.b	$26(a0),d0
000126A2 5228 0026                  		addq.b	#1,$26(a0)
000126A6 0240 007F                  		andi.w	#$7F,d0
000126AA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000126B0 1031 0000                  		move.b	(a1,d0.w),d0
000126B4 4880                       		ext.w	d0
000126B6 D068 0030                  		add.w	$30(a0),d0
000126BA 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000126BE 4A28 002E                  		tst.b	$2E(a0)
000126C2 6700                       		beq.s	Obj64_Display
000126C4 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000126C8 6700                       		beq.s	Obj64_Display	; if not, branch
000126CA                            
000126CA 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000126CE 303C 00AD                  		move.w	#$AD,d0
000126D2 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000126D8 43F8 D000                  		lea	($FFFFD000).w,a1
000126DC 4269 0010                  		clr.w	$10(a1)
000126E0 4269 0012                  		clr.w	$12(a1)
000126E4 4269 0014                  		clr.w	$14(a1)
000126E8 137C 0015 001C             		move.b	#$15,$1C(a1)
000126EE 337C 0023 003E             		move.w	#$23,$3E(a1)
000126F4 137C 0000 003C             		move.b	#0,$3C(a1)
000126FA 08A9 0005 0022             		bclr	#5,$22(a1)
00012700 08A9 0004 0022             		bclr	#4,$22(a1)
00012706 0829 0002 0022             		btst	#2,$22(a1)
0001270C 6700 FF82                  		beq.w	Obj64_Burst
00012710 08A9 0002 0022             		bclr	#2,$22(a1)
00012716 137C 0013 0016             		move.b	#$13,$16(a1)
0001271C 137C 0009 0017             		move.b	#9,$17(a1)
00012722 5B69 000C                  		subq.w	#5,$C(a1)
00012726 6000 FF68                  		bra.w	Obj64_Burst
0001272A                            ; ===========================================================================
0001272A                            
0001272A                            Obj64_Display:				; XREF: Obj64_Wobble
0001272A 6100 AE38                  		bsr.w	SpeedToPos
0001272E 4A28 0001                  		tst.b	1(a0)
00012732 6A00                       		bpl.s	Obj64_Delete
00012734 4EFA AE54                  		jmp	DisplaySprite
00012738                            ; ===========================================================================
00012738                            
00012738                            Obj64_Delete:
00012738 4EFA AE8C                  		jmp	DeleteObject
0001273C                            ; ===========================================================================
0001273C                            
0001273C                            Obj64_Display2:				; XREF: Obj64_Index
0001273C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012742 4EB9 0000 A6B6             		jsr	AnimateSprite
00012748 4A28 0001                  		tst.b	1(a0)
0001274C 6A00                       		bpl.s	Obj64_Delete2
0001274E 4EFA AE3A                  		jmp	DisplaySprite
00012752                            ; ===========================================================================
00012752                            
00012752                            Obj64_Delete2:
00012752 4EFA AE72                  		jmp	DeleteObject
00012756                            ; ===========================================================================
00012756                            
00012756                            Obj64_Delete3:				; XREF: Obj64_Index
00012756 6000 AE6E                  		bra.w	DeleteObject
0001275A                            ; ===========================================================================
0001275A                            
0001275A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001275A 4A68 0036                  		tst.w	$36(a0)
0001275E 6600                       		bne.s	loc_12874
00012760 3038 F646                  		move.w	($FFFFF646).w,d0
00012764 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012768 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001276C 4A28 0001                  		tst.b	1(a0)
00012770 6A00 0000                  		bpl.w	Obj64_ChkDel
00012774 5368 0038                  		subq.w	#1,$38(a0)
00012778 6A00 0000                  		bpl.w	loc_12914
0001277C 317C 0001 0036             		move.w	#1,$36(a0)
00012782                            
00012782                            loc_1283A:
00012782 4EB9 0000 2992             		jsr	(RandomNumber).l
00012788 3200                       		move.w	d0,d1
0001278A 0240 0007                  		andi.w	#7,d0
0001278E 0C40 0006                  		cmpi.w	#6,d0
00012792 64EE                       		bcc.s	loc_1283A
00012794                            
00012794 1140 0034                  		move.b	d0,$34(a0)
00012798 0241 000C                  		andi.w	#$C,d1
0001279C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000127A2 D2C1                       		adda.w	d1,a1
000127A4 2149 003C                  		move.l	a1,$3C(a0)
000127A8 5328 0032                  		subq.b	#1,$32(a0)
000127AC 6A00                       		bpl.s	loc_12872
000127AE 1168 0033 0032             		move.b	$33(a0),$32(a0)
000127B4 08E8 0007 0036             		bset	#7,$36(a0)
000127BA                            
000127BA                            loc_12872:
000127BA 6000                       		bra.s	loc_1287C
000127BC                            ; ===========================================================================
000127BC                            
000127BC                            loc_12874:				; XREF: Obj64_BblMaker
000127BC 5368 0038                  		subq.w	#1,$38(a0)
000127C0 6A00 0000                  		bpl.w	loc_12914
000127C4                            
000127C4                            loc_1287C:
000127C4 4EB9 0000 2992             		jsr	(RandomNumber).l
000127CA 0240 001F                  		andi.w	#$1F,d0
000127CE 3140 0038                  		move.w	d0,$38(a0)
000127D2 6100 B23C                  		bsr.w	SingleObjLoad
000127D6 6600                       		bne.s	loc_128F8
000127D8 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000127DC 3368 0008 0008             		move.w	8(a0),8(a1)
000127E2 4EB9 0000 2992             		jsr	(RandomNumber).l
000127E8 0240 000F                  		andi.w	#$F,d0
000127EC 5140                       		subq.w	#8,d0
000127EE D169 0008                  		add.w	d0,8(a1)
000127F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127F8 7000                       		moveq	#0,d0
000127FA 1028 0034                  		move.b	$34(a0),d0
000127FE 2468 003C                  		movea.l	$3C(a0),a2
00012802 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012808 0828 0007 0036             		btst	#7,$36(a0)
0001280E 6700                       		beq.s	loc_128F8
00012810 4EB9 0000 2992             		jsr	(RandomNumber).l
00012816 0240 0003                  		andi.w	#3,d0
0001281A 6600                       		bne.s	loc_128E4
0001281C 08E8 0006 0036             		bset	#6,$36(a0)
00012822 6600                       		bne.s	loc_128F8
00012824 137C 0002 0028             		move.b	#2,$28(a1)
0001282A                            
0001282A                            loc_128E4:
0001282A 4A28 0034                  		tst.b	$34(a0)
0001282E 6600                       		bne.s	loc_128F8
00012830 08E8 0006 0036             		bset	#6,$36(a0)
00012836 6600                       		bne.s	loc_128F8
00012838 137C 0002 0028             		move.b	#2,$28(a1)
0001283E                            
0001283E                            loc_128F8:
0001283E 5328 0034                  		subq.b	#1,$34(a0)
00012842 6A00                       		bpl.s	loc_12914
00012844 4EB9 0000 2992             		jsr	(RandomNumber).l
0001284A 0240 007F                  		andi.w	#$7F,d0
0001284E 0640 0080                  		addi.w	#$80,d0
00012852 D168 0038                  		add.w	d0,$38(a0)
00012856 4268 0036                  		clr.w	$36(a0)
0001285A                            
0001285A                            loc_12914:
0001285A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012860 4EB9 0000 A6B6             		jsr	AnimateSprite
00012866                            
00012866                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012866 3028 0008                  		move.w	8(a0),d0
0001286A 0240 FF80                  		andi.w	#$FF80,d0
0001286E 3238 F700                  		move.w	($FFFFF700).w,d1
00012872 0441 0080                  		subi.w	#$80,d1
00012876 0241 FF80                  		andi.w	#$FF80,d1
0001287A 9041                       		sub.w	d1,d0
0001287C 0C40 0280                  		cmpi.w	#$280,d0
00012880 6200 AD44                  		bhi.w	DeleteObject
00012884 3038 F646                  		move.w	($FFFFF646).w,d0
00012888 B068 000C                  		cmp.w	$C(a0),d0
0001288C 6500 ACFC                  		bcs.w	DisplaySprite
00012890 4E75                       		rts	
00012892                            ; ===========================================================================
00012892                            ; bubble production sequence
00012892                            
00012892                            ; 0 = small bubble, 1 =	large bubble
00012892                            
00012892 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000128A4                            
000128A4                            ; ===========================================================================
000128A4                            
000128A4                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000128A4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000128A8 6B00                       		bmi.s	loc_12998
000128AA 43F8 D000                  		lea	($FFFFD000).w,a1
000128AE 3029 0008                  		move.w	8(a1),d0
000128B2 3228 0008                  		move.w	8(a0),d1
000128B6 0441 0010                  		subi.w	#$10,d1
000128BA B240                       		cmp.w	d0,d1
000128BC 6400                       		bcc.s	loc_12998
000128BE 0641 0020                  		addi.w	#$20,d1
000128C2 B240                       		cmp.w	d0,d1
000128C4 6500                       		bcs.s	loc_12998
000128C6 3029 000C                  		move.w	$C(a1),d0
000128CA 3228 000C                  		move.w	$C(a0),d1
000128CE B240                       		cmp.w	d0,d1
000128D0 6400                       		bcc.s	loc_12998
000128D2 0641 0010                  		addi.w	#$10,d1
000128D6 B240                       		cmp.w	d0,d1
000128D8 6500                       		bcs.s	loc_12998
000128DA 7001                       		moveq	#1,d0
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            loc_12998:
000128DE 7000                       		moveq	#0,d0
000128E0 4E75                       		rts	
000128E2                            ; ===========================================================================
000128E2                            Ani_obj64:
000128E2                            	include "_anim\obj64.asm"
000128E2                            ; ---------------------------------------------------------------------------
000128E2                            ; Animation script - bubbles (LZ)
000128E2                            ; ---------------------------------------------------------------------------
000128E2 0000                       		dc.w byte_129AA-Ani_obj64
000128E4 0000                       		dc.w byte_129B0-Ani_obj64
000128E6 0000                       		dc.w byte_129B6-Ani_obj64
000128E8 0000                       		dc.w byte_129BE-Ani_obj64
000128EA 0000                       		dc.w byte_129BE-Ani_obj64
000128EC 0000                       		dc.w byte_129C0-Ani_obj64
000128EE 0000                       		dc.w byte_129C6-Ani_obj64
000128F0 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000128F6 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000128FC 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012904 04FC                       byte_129BE:	dc.b 4,	$FC
00012906 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001290C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012912 00                         		even
00012912 00                         		even
00012912                            
00012912                            ; ---------------------------------------------------------------------------
00012912                            ; Sprite mappings - bubbles (LZ)
00012912                            ; ---------------------------------------------------------------------------
00012912                            Map_obj64:
00012912                            	include "_maps\obj64.asm"
00012912                            ; ---------------------------------------------------------------------------
00012912                            ; Sprite mappings - bubbles (LZ)
00012912                            ; ---------------------------------------------------------------------------
00012912 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012916 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001291A 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001291E 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012922 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012926 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001292A 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001292E 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012932 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012936 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001293A 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001293E 0000                       		dc.w byte_12A9C-Map_obj64
00012940 01                         byte_129FA:	dc.b 1
00012941 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012946 01                         byte_12A00:	dc.b 1
00012947 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001294C 01                         byte_12A06:	dc.b 1
0001294D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012952 01                         byte_12A0C:	dc.b 1
00012953 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012958 01                         byte_12A12:	dc.b 1
00012959 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001295E 01                         byte_12A18:	dc.b 1
0001295F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012964 01                         byte_12A1E:	dc.b 1
00012965 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001296A 04                         byte_12A24:	dc.b 4
0001296B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012970 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012975 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001297A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001297F 04                         byte_12A39:	dc.b 4
00012980 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012985 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001298A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001298F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012994 01                         byte_12A4E:	dc.b 1
00012995 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001299A 01                         byte_12A54:	dc.b 1
0001299B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000129A0 01                         byte_12A5A:	dc.b 1
000129A1 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000129A6 01                         byte_12A60:	dc.b 1
000129A7 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000129AC 01                         byte_12A66:	dc.b 1
000129AD F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000129B2 01                         byte_12A6C:	dc.b 1
000129B3 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000129B8 01                         byte_12A72:	dc.b 1
000129B9 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000129BE 01                         byte_12A78:	dc.b 1
000129BF F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000129C4 01                         byte_12A7E:	dc.b 1
000129C5 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000129CA 01                         byte_12A84:	dc.b 1
000129CB F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000129D0 01                         byte_12A8A:	dc.b 1
000129D1 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000129D6 01                         byte_12A90:	dc.b 1
000129D7 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000129DC 01                         byte_12A96:	dc.b 1
000129DD F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000129E2 00                         byte_12A9C:	dc.b 0
000129E4 00                         		even
000129E4 00                         		even
000129E4                            
000129E4                            ; ===========================================================================
000129E4                            ; ---------------------------------------------------------------------------
000129E4                            ; Object 65 - waterfalls (LZ)
000129E4                            ; ---------------------------------------------------------------------------
000129E4                            
000129E4                            Obj65:					; XREF: Obj_Index
000129E4 7000                       		moveq	#0,d0
000129E6 1028 0024                  		move.b	$24(a0),d0
000129EA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000129EE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000129F2                            ; ===========================================================================
000129F2 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000129F4 0000                       		dc.w Obj65_Animate-Obj65_Index
000129F6 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000129F8 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000129FA 0000                       		dc.w loc_12B36-Obj65_Index
000129FC                            ; ===========================================================================
000129FC                            
000129FC                            Obj65_Main:				; XREF: Obj65_Index
000129FC 5828 0024                  		addq.b	#4,$24(a0)
00012A00 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012A08 317C 4259 0002             		move.w	#$4259,2(a0)
00012A0E 0028 0004 0001             		ori.b	#4,1(a0)
00012A14 117C 0018 0019             		move.b	#$18,$19(a0)
00012A1A 117C 0001 0018             		move.b	#1,$18(a0)
00012A20 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A24 6A00                       		bpl.s	loc_12AE6
00012A26 08E8 0007 0002             		bset	#7,2(a0)
00012A2C                            
00012A2C                            loc_12AE6:
00012A2C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012A30 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012A34 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012A38 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012A3A 4228 0018                  		clr.b	$18(a0)
00012A3E 5528 0024                  		subq.b	#2,$24(a0)
00012A42 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012A48 6700                       		beq.s	loc_12B0A	; if not, branch
00012A4A 117C 0006 0024             		move.b	#6,$24(a0)
00012A50                            
00012A50                            loc_12B0A:
00012A50 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012A56 6700                       		beq.s	Obj65_Animate	; if not, branch
00012A58 117C 0008 0024             		move.b	#8,$24(a0)
00012A5E                            
00012A5E                            Obj65_Animate:				; XREF: Obj65_Index
00012A5E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012A64 4EB9 0000 A6B6             		jsr	AnimateSprite
00012A6A                            
00012A6A                            Obj65_ChkDel:				; XREF: Obj65_Index
00012A6A 6000 CBB6                  		bra.w	MarkObjGone
00012A6E                            ; ===========================================================================
00012A6E                            
00012A6E                            Obj65_FixHeight:			; XREF: Obj65_Index
00012A6E 3038 F646                  		move.w	($FFFFF646).w,d0
00012A72 0440 0010                  		subi.w	#$10,d0
00012A76 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012A7A 60E2                       		bra.s	Obj65_Animate
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            loc_12B36:				; XREF: Obj65_Index
00012A7C 08A8 0007 0002             		bclr	#7,2(a0)
00012A82 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012A88 6600                       		bne.s	Obj65_Animate2
00012A8A 08E8 0007 0002             		bset	#7,2(a0)
00012A90                            
00012A90                            Obj65_Animate2:
00012A90 60CC                       		bra.s	Obj65_Animate
00012A92                            ; ===========================================================================
00012A92                            Ani_obj65:
00012A92                            	include "_anim\obj65.asm"
00012A92                            ; ---------------------------------------------------------------------------
00012A92                            ; Animation script - waterfall (LZ)
00012A92                            ; ---------------------------------------------------------------------------
00012A92 0000                       		dc.w byte_12B4E-Ani_obj65
00012A94 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012A9A 00                         		even
00012A9A 00                         		even
00012A9A                            
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A                            ; Sprite mappings - waterfalls (LZ)
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A                            Map_obj65:
00012A9A                            	include "_maps\obj65.asm"
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A                            ; Sprite mappings - waterfalls (LZ)
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012A9E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012AA2 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012AA6 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012AAA 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012AAE 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012AB2 01                         byte_12B6C:	dc.b 1
00012AB3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012AB8 02                         byte_12B72:	dc.b 2
00012AB9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012ABE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012AC3 02                         byte_12B7D:	dc.b 2
00012AC4 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012AC9 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012ACE 01                         byte_12B88:	dc.b 1
00012ACF F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012AD4 02                         byte_12B8E:	dc.b 2
00012AD5 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012ADA 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012ADF 01                         byte_12B99:	dc.b 1
00012AE0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012AE5 01                         byte_12B9F:	dc.b 1
00012AE6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012AEB 01                         byte_12BA5:	dc.b 1
00012AEC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012AF1 02                         byte_12BAB:	dc.b 2
00012AF2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012AF7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012AFC 02                         byte_12BB6:	dc.b 2
00012AFD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012B02 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012B07 02                         byte_12BC1:	dc.b 2
00012B08 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012B0D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012B12 02                         byte_12BCC:	dc.b 2
00012B13 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012B18 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012B1E 00                         		even
00012B1E 00                         		even
00012B1E                            
00012B1E                            ; ===========================================================================
00012B1E                            ; ---------------------------------------------------------------------------
00012B1E                            ; Object 01 - Sonic
00012B1E                            ; ---------------------------------------------------------------------------
00012B1E                            
00012B1E                            Obj01:					; XREF: Obj_Index
00012B1E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012B22 6700                       		beq.s	Obj01_Normal	; if not, branch
00012B24 4EF9 0000 0000             		jmp	DebugMode
00012B2A                            ; ===========================================================================
00012B2A                            
00012B2A                            Obj01_Normal:
00012B2A 7000                       		moveq	#0,d0
00012B2C 1028 0024                  		move.b	$24(a0),d0
00012B30 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012B34 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012B38                            ; ===========================================================================
00012B38 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012B3A 0000                       		dc.w Obj01_Control-Obj01_Index
00012B3C 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012B3E 0000                       		dc.w Obj01_Death-Obj01_Index
00012B40 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012B42                            ; ===========================================================================
00012B42                            
00012B42                            Obj01_Main:				; XREF: Obj01_Index
00012B42 5428 0024                  		addq.b	#2,$24(a0)
00012B46 117C 0013 0016             		move.b	#$13,$16(a0)
00012B4C 117C 0009 0017             		move.b	#9,$17(a0)
00012B52 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012B5A 317C 0780 0002             		move.w	#$780,2(a0)
00012B60 117C 0002 0018             		move.b	#2,$18(a0)
00012B66 117C 0018 0019             		move.b	#$18,$19(a0)
00012B6C 117C 0004 0001             		move.b	#4,1(a0)
00012B72 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012B78 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012B7E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012B84                            
00012B84                            Obj01_Control:				; XREF: Obj01_Index
00012B84 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012B88 6700                       		beq.s	loc_12C58	; if not, branch
00012B8A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012B90 6700                       		beq.s	loc_12C58	; if not, branch
00012B92 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012B98 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012B9C 4E75                       		rts	
00012B9E                            ; ===========================================================================
00012B9E                            
00012B9E                            loc_12C58:
00012B9E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012BA2 6600                       		bne.s	loc_12C64	; if yes, branch
00012BA4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012BAA                            
00012BAA                            loc_12C64:
00012BAA 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012BB0 6600                       		bne.s	loc_12C7E	; if yes, branch
00012BB2 7000                       		moveq	#0,d0
00012BB4 1028 0022                  		move.b	$22(a0),d0
00012BB8 0240 0006                  		andi.w	#6,d0
00012BBC 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012BC0 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012BC4                            
00012BC4                            loc_12C7E:
00012BC4 6100                       		bsr.s	Sonic_Display
00012BC6 6100 0000                  		bsr.w	Sonic_RecordPos
00012BCA 6100 0000                  		bsr.w	Sonic_Water
00012BCE 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012BD4 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012BDA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012BDE 6700                       		beq.s	loc_12CA6
00012BE0 4A28 001C                  		tst.b	$1C(a0)
00012BE4 6600                       		bne.s	loc_12CA6
00012BE6 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012BEC                            
00012BEC                            loc_12CA6:
00012BEC 6100 0000                  		bsr.w	Sonic_Animate
00012BF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012BF4 6B00                       		bmi.s	loc_12CB6
00012BF6 4EB9 0000 0000             		jsr	TouchResponse
00012BFC                            
00012BFC                            loc_12CB6:
00012BFC 6100 0000                  		bsr.w	Sonic_Loops
00012C00 6100 0000                  		bsr.w	LoadSonicDynPLC
00012C04 4E75                       		rts	
00012C06                            ; ===========================================================================
00012C06 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012C08 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012C0A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012C0C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012C0E                            ; ---------------------------------------------------------------------------
00012C0E                            ; Music	to play	after invincibility wears off
00012C0E                            ; ---------------------------------------------------------------------------
00012C0E                            MusicList2:	incbin	misc\muslist2.bin
00012C14                            		even
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            Sonic_Display:				; XREF: loc_12C7E
00012C14 3028 0030                  		move.w	$30(a0),d0
00012C18 6700                       		beq.s	Obj01_Display
00012C1A 5368 0030                  		subq.w	#1,$30(a0)
00012C1E E648                       		lsr.w	#3,d0
00012C20 6400                       		bcc.s	Obj01_ChkInvin
00012C22                            
00012C22                            Obj01_Display:
00012C22 4EBA A966                  		jsr	DisplaySprite
00012C26                            
00012C26                            Obj01_ChkInvin:
00012C26 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012C2A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012C2C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012C30 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012C32 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012C36 6600                       		bne.s	Obj01_ChkShoes
00012C38 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012C3C 6600                       		bne.s	Obj01_RmvInvin
00012C3E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012C44 6500                       		bcs.s	Obj01_RmvInvin
00012C46 7000                       		moveq	#0,d0
00012C48 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012C4C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012C52 6600                       		bne.s	Obj01_PlayMusic
00012C54 7005                       		moveq	#5,d0		; play SBZ music
00012C56                            
00012C56                            Obj01_PlayMusic:
00012C56 43F9 0001 2C0E             		lea	(MusicList2).l,a1
00012C5C 1031 0000                  		move.b	(a1,d0.w),d0
00012C60 4EB9 0000 1374             		jsr	(PlaySound).l	; play normal music
00012C66                            
00012C66                            Obj01_RmvInvin:
00012C66 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012C6C                            
00012C6C                            Obj01_ChkShoes:
00012C6C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012C70 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012C72 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012C76 6700                       		beq.s	Obj01_ExitChk
00012C78 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012C7C 6600                       		bne.s	Obj01_ExitChk
00012C7E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012C84 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012C8A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012C90 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012C96 303C 00E3                  		move.w	#$E3,d0
00012C9A 4EF9 0000 1374             		jmp	(PlaySound).l	; run music at normal speed
00012CA0                            ; ===========================================================================
00012CA0                            
00012CA0                            Obj01_ExitChk:
00012CA0 4E75                       		rts	
00012CA2                            
00012CA2                            ; ---------------------------------------------------------------------------
00012CA2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012CA2                            ; ---------------------------------------------------------------------------
00012CA2                            
00012CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CA2                            
00012CA2                            
00012CA2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012CA2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012CA6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012CAA 43F1 0000                  		lea	(a1,d0.w),a1
00012CAE 32E8 0008                  		move.w	8(a0),(a1)+
00012CB2 32E8 000C                  		move.w	$C(a0),(a1)+
00012CB6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012CBA 4E75                       		rts	
00012CBC                            ; End of function Sonic_RecordPos
00012CBC                            
00012CBC                            ; ---------------------------------------------------------------------------
00012CBC                            ; Subroutine for Sonic when he's underwater
00012CBC                            ; ---------------------------------------------------------------------------
00012CBC                            
00012CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CBC                            
00012CBC                            
00012CBC                            Sonic_Water:				; XREF: loc_12C7E
00012CBC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012CC2 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012CC4                            
00012CC4                            locret_12D80:
00012CC4 4E75                       		rts	
00012CC6                            ; ===========================================================================
00012CC6                            
00012CC6                            Obj01_InWater:
00012CC6 3038 F646                  		move.w	($FFFFF646).w,d0
00012CCA B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012CCE 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012CD0 08E8 0006 0022             		bset	#6,$22(a0)
00012CD6 66EC                       		bne.s	locret_12D80
00012CD8 6100 0000                  		bsr.w	ResumeMusic
00012CDC 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012CE2 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012CE8 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012CEE 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012CF4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012CFA E0E8 0010                  		asr	$10(a0)
00012CFE E0E8 0012                  		asr	$12(a0)
00012D02 E0E8 0012                  		asr	$12(a0)
00012D06 67BC                       		beq.s	locret_12D80
00012D08 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012D0E 303C 00AA                  		move.w	#$AA,d0
00012D12 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play splash sound
00012D18                            ; ===========================================================================
00012D18                            
00012D18                            Obj01_OutWater:
00012D18 08A8 0006 0022             		bclr	#6,$22(a0)
00012D1E 67A4                       		beq.s	locret_12D80
00012D20 6100 0000                  		bsr.w	ResumeMusic
00012D24 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012D2A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012D30 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012D36 E1E8 0012                  		asl	$12(a0)
00012D3A 6700 FF88                  		beq.w	locret_12D80
00012D3E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012D44 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012D4A 6E00                       		bgt.s	loc_12E0E
00012D4C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012D52                            
00012D52                            loc_12E0E:
00012D52 303C 00AA                  		move.w	#$AA,d0
00012D56 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play splash sound
00012D5C                            ; End of function Sonic_Water
00012D5C                            
00012D5C                            ; ===========================================================================
00012D5C                            ; ---------------------------------------------------------------------------
00012D5C                            ; Modes	for controlling	Sonic
00012D5C                            ; ---------------------------------------------------------------------------
00012D5C                            
00012D5C                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012D5C 6100 0000                  		bsr.w	Sonic_Jump
00012D60 6100 0000                  		bsr.w	Sonic_SlopeResist
00012D64 6100 0000                  		bsr.w	Sonic_Move
00012D68 6100 0000                  		bsr.w	Sonic_Roll
00012D6C 6100 0000                  		bsr.w	Sonic_LevelBound
00012D70 4EBA A7F2                  		jsr	SpeedToPos
00012D74 6100 0000                  		bsr.w	Sonic_AnglePos
00012D78 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012D7C 4E75                       		rts	
00012D7E                            ; ===========================================================================
00012D7E                            
00012D7E                            Obj01_MdJump:				; XREF: Obj01_Modes
00012D7E 6100 0000                  		bsr.w	Sonic_JumpHeight
00012D82 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012D86 6100 0000                  		bsr.w	Sonic_LevelBound
00012D8A 4EBA A7AC                  		jsr	ObjectFall
00012D8E 0828 0006 0022             		btst	#6,$22(a0)
00012D94 6700                       		beq.s	loc_12E5C
00012D96 0468 0028 0012             		subi.w	#$28,$12(a0)
00012D9C                            
00012D9C                            loc_12E5C:
00012D9C 6100 0000                  		bsr.w	Sonic_JumpAngle
00012DA0 6100 0000                  		bsr.w	Sonic_Floor
00012DA4 4E75                       		rts	
00012DA6                            ; ===========================================================================
00012DA6                            
00012DA6                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012DA6 6100 0000                  		bsr.w	Sonic_Jump
00012DAA 6100 0000                  		bsr.w	Sonic_RollRepel
00012DAE 6100 0000                  		bsr.w	Sonic_RollSpeed
00012DB2 6100 0000                  		bsr.w	Sonic_LevelBound
00012DB6 4EBA A7AC                  		jsr	SpeedToPos
00012DBA 6100 0000                  		bsr.w	Sonic_AnglePos
00012DBE 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012DC2 4E75                       		rts	
00012DC4                            ; ===========================================================================
00012DC4                            
00012DC4                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012DC4 6100 0000                  		bsr.w	Sonic_JumpHeight
00012DC8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012DCC 6100 0000                  		bsr.w	Sonic_LevelBound
00012DD0 4EBA A766                  		jsr	ObjectFall
00012DD4 0828 0006 0022             		btst	#6,$22(a0)
00012DDA 6700                       		beq.s	loc_12EA6
00012DDC 0468 0028 0012             		subi.w	#$28,$12(a0)
00012DE2                            
00012DE2                            loc_12EA6:
00012DE2 6100 0000                  		bsr.w	Sonic_JumpAngle
00012DE6 6100 0000                  		bsr.w	Sonic_Floor
00012DEA 4E75                       		rts	
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC                            ; Subroutine to	make Sonic walk/run
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC                            
00012DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DEC                            
00012DEC                            
00012DEC                            Sonic_Move:				; XREF: Obj01_MdNormal
00012DEC 3C38 F760                  		move.w	($FFFFF760).w,d6
00012DF0 3A38 F762                  		move.w	($FFFFF762).w,d5
00012DF4 3838 F764                  		move.w	($FFFFF764).w,d4
00012DF8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012DFC 6600 0000                  		bne.w	loc_12FEE
00012E00 4A68 003E                  		tst.w	$3E(a0)
00012E04 6600 0000                  		bne.w	Obj01_ResetScr
00012E08 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012E0E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012E10 6100 0000                  		bsr.w	Sonic_MoveLeft
00012E14                            
00012E14                            Obj01_NotLeft:
00012E14 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012E1A 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012E1C 6100 0000                  		bsr.w	Sonic_MoveRight
00012E20                            
00012E20                            Obj01_NotRight:
00012E20 1028 0026                  		move.b	$26(a0),d0
00012E24 0600 0020                  		addi.b	#$20,d0
00012E28 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00012E2C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012E30 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00012E34 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012E38 08A8 0005 0022             		bclr	#5,$22(a0)
00012E3E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00012E44 0828 0003 0022             		btst	#3,$22(a0)
00012E4A 6700                       		beq.s	Sonic_Balance
00012E4C 7000                       		moveq	#0,d0
00012E4E 1028 003D                  		move.b	$3D(a0),d0
00012E52 ED48                       		lsl.w	#6,d0
00012E54 43F8 D000                  		lea	($FFFFD000).w,a1
00012E58 43F1 0000                  		lea	(a1,d0.w),a1
00012E5C 4A29 0022                  		tst.b	$22(a1)
00012E60 6B00                       		bmi.s	Sonic_LookUp
00012E62 7200                       		moveq	#0,d1
00012E64 1229 0019                  		move.b	$19(a1),d1
00012E68 3401                       		move.w	d1,d2
00012E6A D442                       		add.w	d2,d2
00012E6C 5942                       		subq.w	#4,d2
00012E6E D268 0008                  		add.w	8(a0),d1
00012E72 9269 0008                  		sub.w	8(a1),d1
00012E76 0C41 0004                  		cmpi.w	#4,d1
00012E7A 6D00                       		blt.s	loc_12F6A
00012E7C B242                       		cmp.w	d2,d1
00012E7E 6C00                       		bge.s	loc_12F5A
00012E80 6000                       		bra.s	Sonic_LookUp
00012E82                            ; ===========================================================================
00012E82                            
00012E82                            Sonic_Balance:
00012E82 4EB9 0000 0000             		jsr	ObjHitFloor
00012E88 0C41 000C                  		cmpi.w	#$C,d1
00012E8C 6D00                       		blt.s	Sonic_LookUp
00012E8E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00012E94 6600                       		bne.s	loc_12F62
00012E96                            
00012E96                            loc_12F5A:
00012E96 08A8 0000 0022             		bclr	#0,$22(a0)
00012E9C 6000                       		bra.s	loc_12F70
00012E9E                            ; ===========================================================================
00012E9E                            
00012E9E                            loc_12F62:
00012E9E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00012EA4 6600                       		bne.s	Sonic_LookUp
00012EA6                            
00012EA6                            loc_12F6A:
00012EA6 08E8 0000 0022             		bset	#0,$22(a0)
00012EAC                            
00012EAC                            loc_12F70:
00012EAC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00012EB2 6000                       		bra.s	Obj01_ResetScr
00012EB4                            ; ===========================================================================
00012EB4                            
00012EB4                            Sonic_LookUp:
00012EB4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00012EBA 6700                       		beq.s	Sonic_Duck	; if not, branch
00012EBC 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00012EC2 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00012EC8 6700                       		beq.s	loc_12FC2
00012ECA 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00012ECE 6000                       		bra.s	loc_12FC2
00012ED0                            ; ===========================================================================
00012ED0                            
00012ED0                            Sonic_Duck:
00012ED0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00012ED6 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00012ED8 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00012EDE 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00012EE4 6700                       		beq.s	loc_12FC2
00012EE6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00012EEA 6000                       		bra.s	loc_12FC2
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            Obj01_ResetScr:
00012EEC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00012EF2 6700                       		beq.s	loc_12FC2	; if yes, branch
00012EF4 6400                       		bcc.s	loc_12FBE
00012EF6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00012EFA                            
00012EFA                            loc_12FBE:
00012EFA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00012EFE                            
00012EFE                            loc_12FC2:
00012EFE 1038 F602                  		move.b	($FFFFF602).w,d0
00012F02 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00012F06 6600                       		bne.s	loc_12FEE	; if yes, branch
00012F08 3028 0014                  		move.w	$14(a0),d0
00012F0C 6700                       		beq.s	loc_12FEE
00012F0E 6B00                       		bmi.s	loc_12FE2
00012F10 9045                       		sub.w	d5,d0
00012F12 6400                       		bcc.s	loc_12FDC
00012F14 303C 0000                  		move.w	#0,d0
00012F18                            
00012F18                            loc_12FDC:
00012F18 3140 0014                  		move.w	d0,$14(a0)
00012F1C 6000                       		bra.s	loc_12FEE
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            loc_12FE2:
00012F1E D045                       		add.w	d5,d0
00012F20 6400                       		bcc.s	loc_12FEA
00012F22 303C 0000                  		move.w	#0,d0
00012F26                            
00012F26                            loc_12FEA:
00012F26 3140 0014                  		move.w	d0,$14(a0)
00012F2A                            
00012F2A                            loc_12FEE:
00012F2A 1028 0026                  		move.b	$26(a0),d0
00012F2E 4EB9 0000 29B8             		jsr	(CalcSine).l
00012F34 C3E8 0014                  		muls.w	$14(a0),d1
00012F38 E081                       		asr.l	#8,d1
00012F3A 3141 0010                  		move.w	d1,$10(a0)
00012F3E C1E8 0014                  		muls.w	$14(a0),d0
00012F42 E080                       		asr.l	#8,d0
00012F44 3140 0012                  		move.w	d0,$12(a0)
00012F48                            
00012F48                            loc_1300C:
00012F48 1028 0026                  		move.b	$26(a0),d0
00012F4C 0600 0040                  		addi.b	#$40,d0
00012F50 6B00                       		bmi.s	locret_1307C
00012F52 123C 0040                  		move.b	#$40,d1
00012F56 4A68 0014                  		tst.w	$14(a0)
00012F5A 6700                       		beq.s	locret_1307C
00012F5C 6B00                       		bmi.s	loc_13024
00012F5E 4441                       		neg.w	d1
00012F60                            
00012F60                            loc_13024:
00012F60 1028 0026                  		move.b	$26(a0),d0
00012F64 D001                       		add.b	d1,d0
00012F66 3F00                       		move.w	d0,-(sp)
00012F68 6100 0000                  		bsr.w	Sonic_WalkSpeed
00012F6C 301F                       		move.w	(sp)+,d0
00012F6E 4A41                       		tst.w	d1
00012F70 6A00                       		bpl.s	locret_1307C
00012F72 E141                       		asl.w	#8,d1
00012F74 0600 0020                  		addi.b	#$20,d0
00012F78 0200 00C0                  		andi.b	#$C0,d0
00012F7C 6700                       		beq.s	loc_13078
00012F7E 0C00 0040                  		cmpi.b	#$40,d0
00012F82 6700                       		beq.s	loc_13066
00012F84 0C00 0080                  		cmpi.b	#$80,d0
00012F88 6700                       		beq.s	loc_13060
00012F8A D368 0010                  		add.w	d1,$10(a0)
00012F8E 08E8 0005 0022             		bset	#5,$22(a0)
00012F94 317C 0000 0014             		move.w	#0,$14(a0)
00012F9A 4E75                       		rts	
00012F9C                            ; ===========================================================================
00012F9C                            
00012F9C                            loc_13060:
00012F9C 9368 0012                  		sub.w	d1,$12(a0)
00012FA0 4E75                       		rts	
00012FA2                            ; ===========================================================================
00012FA2                            
00012FA2                            loc_13066:
00012FA2 9368 0010                  		sub.w	d1,$10(a0)
00012FA6 08E8 0005 0022             		bset	#5,$22(a0)
00012FAC 317C 0000 0014             		move.w	#0,$14(a0)
00012FB2 4E75                       		rts	
00012FB4                            ; ===========================================================================
00012FB4                            
00012FB4                            loc_13078:
00012FB4 D368 0012                  		add.w	d1,$12(a0)
00012FB8                            
00012FB8                            locret_1307C:
00012FB8 4E75                       		rts	
00012FBA                            ; End of function Sonic_Move
00012FBA                            
00012FBA                            
00012FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FBA                            
00012FBA                            
00012FBA                            Sonic_MoveLeft:				; XREF: Sonic_Move
00012FBA 3028 0014                  		move.w	$14(a0),d0
00012FBE 6700                       		beq.s	loc_13086
00012FC0 6A00                       		bpl.s	loc_130B2
00012FC2                            
00012FC2                            loc_13086:
00012FC2 08E8 0000 0022             		bset	#0,$22(a0)
00012FC8 6600                       		bne.s	loc_1309A
00012FCA 08A8 0005 0022             		bclr	#5,$22(a0)
00012FD0 117C 0001 001D             		move.b	#1,$1D(a0)
00012FD6                            
00012FD6                            loc_1309A:
00012FD6 9045                       		sub.w	d5,d0
00012FD8 3206                       		move.w	d6,d1
00012FDA 4441                       		neg.w	d1
00012FDC B041                       		cmp.w	d1,d0
00012FDE 6E00                       		bgt.s	loc_130A6
00012FE0 3001                       		move.w	d1,d0
00012FE2                            
00012FE2                            loc_130A6:
00012FE2 3140 0014                  		move.w	d0,$14(a0)
00012FE6 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00012FEC 4E75                       		rts	
00012FEE                            ; ===========================================================================
00012FEE                            
00012FEE                            loc_130B2:				; XREF: Sonic_MoveLeft
00012FEE 9044                       		sub.w	d4,d0
00012FF0 6400                       		bcc.s	loc_130BA
00012FF2 303C FF80                  		move.w	#-$80,d0
00012FF6                            
00012FF6                            loc_130BA:
00012FF6 3140 0014                  		move.w	d0,$14(a0)
00012FFA 1028 0026                  		move.b	$26(a0),d0
00012FFE 0600 0020                  		addi.b	#$20,d0
00013002 0200 00C0                  		andi.b	#$C0,d0
00013006 6600                       		bne.s	locret_130E8
00013008 0C40 0400                  		cmpi.w	#$400,d0
0001300C 6D00                       		blt.s	locret_130E8
0001300E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013014 08A8 0000 0022             		bclr	#0,$22(a0)
0001301A 303C 00A4                  		move.w	#$A4,d0
0001301E 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013024                            
00013024                            locret_130E8:
00013024 4E75                       		rts	
00013026                            ; End of function Sonic_MoveLeft
00013026                            
00013026                            
00013026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013026                            
00013026                            
00013026                            Sonic_MoveRight:			; XREF: Sonic_Move
00013026 3028 0014                  		move.w	$14(a0),d0
0001302A 6B00                       		bmi.s	loc_13118
0001302C 08A8 0000 0022             		bclr	#0,$22(a0)
00013032 6700                       		beq.s	loc_13104
00013034 08A8 0005 0022             		bclr	#5,$22(a0)
0001303A 117C 0001 001D             		move.b	#1,$1D(a0)
00013040                            
00013040                            loc_13104:
00013040 D045                       		add.w	d5,d0
00013042 B046                       		cmp.w	d6,d0
00013044 6D00                       		blt.s	loc_1310C
00013046 3006                       		move.w	d6,d0
00013048                            
00013048                            loc_1310C:
00013048 3140 0014                  		move.w	d0,$14(a0)
0001304C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013052 4E75                       		rts	
00013054                            ; ===========================================================================
00013054                            
00013054                            loc_13118:				; XREF: Sonic_MoveRight
00013054 D044                       		add.w	d4,d0
00013056 6400                       		bcc.s	loc_13120
00013058 303C 0080                  		move.w	#$80,d0
0001305C                            
0001305C                            loc_13120:
0001305C 3140 0014                  		move.w	d0,$14(a0)
00013060 1028 0026                  		move.b	$26(a0),d0
00013064 0600 0020                  		addi.b	#$20,d0
00013068 0200 00C0                  		andi.b	#$C0,d0
0001306C 6600                       		bne.s	locret_1314E
0001306E 0C40 FC00                  		cmpi.w	#-$400,d0
00013072 6E00                       		bgt.s	locret_1314E
00013074 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001307A 08E8 0000 0022             		bset	#0,$22(a0)
00013080 303C 00A4                  		move.w	#$A4,d0
00013084 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play stopping sound
0001308A                            
0001308A                            locret_1314E:
0001308A 4E75                       		rts	
0001308C                            ; End of function Sonic_MoveRight
0001308C                            
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Subroutine to	change Sonic's speed as he rolls
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            
0001308C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001308C                            
0001308C                            
0001308C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001308C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013090 E346                       		asl.w	#1,d6
00013092 3A38 F762                  		move.w	($FFFFF762).w,d5
00013096 E245                       		asr.w	#1,d5
00013098 3838 F764                  		move.w	($FFFFF764).w,d4
0001309C E444                       		asr.w	#2,d4
0001309E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000130A2 6600 0000                  		bne.w	loc_131CC
000130A6 4A68 003E                  		tst.w	$3E(a0)
000130AA 6600                       		bne.s	loc_13188
000130AC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000130B2 6700                       		beq.s	loc_1317C	; if not, branch
000130B4 6100 0000                  		bsr.w	Sonic_RollLeft
000130B8                            
000130B8                            loc_1317C:
000130B8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000130BE 6700                       		beq.s	loc_13188	; if not, branch
000130C0 6100 0000                  		bsr.w	Sonic_RollRight
000130C4                            
000130C4                            loc_13188:
000130C4 3028 0014                  		move.w	$14(a0),d0
000130C8 6700                       		beq.s	loc_131AA
000130CA 6B00                       		bmi.s	loc_1319E
000130CC 9045                       		sub.w	d5,d0
000130CE 6400                       		bcc.s	loc_13198
000130D0 303C 0000                  		move.w	#0,d0
000130D4                            
000130D4                            loc_13198:
000130D4 3140 0014                  		move.w	d0,$14(a0)
000130D8 6000                       		bra.s	loc_131AA
000130DA                            ; ===========================================================================
000130DA                            
000130DA                            loc_1319E:				; XREF: Sonic_RollSpeed
000130DA D045                       		add.w	d5,d0
000130DC 6400                       		bcc.s	loc_131A6
000130DE 303C 0000                  		move.w	#0,d0
000130E2                            
000130E2                            loc_131A6:
000130E2 3140 0014                  		move.w	d0,$14(a0)
000130E6                            
000130E6                            loc_131AA:
000130E6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000130EA 6600                       		bne.s	loc_131CC	; if yes, branch
000130EC 08A8 0002 0022             		bclr	#2,$22(a0)
000130F2 117C 0013 0016             		move.b	#$13,$16(a0)
000130F8 117C 0009 0017             		move.b	#9,$17(a0)
000130FE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013104 5B68 000C                  		subq.w	#5,$C(a0)
00013108                            
00013108                            loc_131CC:
00013108 1028 0026                  		move.b	$26(a0),d0
0001310C 4EB9 0000 29B8             		jsr	(CalcSine).l
00013112 C1E8 0014                  		muls.w	$14(a0),d0
00013116 E080                       		asr.l	#8,d0
00013118 3140 0012                  		move.w	d0,$12(a0)
0001311C C3E8 0014                  		muls.w	$14(a0),d1
00013120 E081                       		asr.l	#8,d1
00013122 0C41 1000                  		cmpi.w	#$1000,d1
00013126 6F00                       		ble.s	loc_131F0
00013128 323C 1000                  		move.w	#$1000,d1
0001312C                            
0001312C                            loc_131F0:
0001312C 0C41 F000                  		cmpi.w	#-$1000,d1
00013130 6C00                       		bge.s	loc_131FA
00013132 323C F000                  		move.w	#-$1000,d1
00013136                            
00013136                            loc_131FA:
00013136 3141 0010                  		move.w	d1,$10(a0)
0001313A 6000 FE0C                  		bra.w	loc_1300C
0001313E                            ; End of function Sonic_RollSpeed
0001313E                            
0001313E                            
0001313E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001313E                            
0001313E                            
0001313E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001313E 3028 0014                  		move.w	$14(a0),d0
00013142 6700                       		beq.s	loc_1320A
00013144 6A00                       		bpl.s	loc_13218
00013146                            
00013146                            loc_1320A:
00013146 08E8 0000 0022             		bset	#0,$22(a0)
0001314C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013152 4E75                       		rts	
00013154                            ; ===========================================================================
00013154                            
00013154                            loc_13218:
00013154 9044                       		sub.w	d4,d0
00013156 6400                       		bcc.s	loc_13220
00013158 303C FF80                  		move.w	#-$80,d0
0001315C                            
0001315C                            loc_13220:
0001315C 3140 0014                  		move.w	d0,$14(a0)
00013160 4E75                       		rts	
00013162                            ; End of function Sonic_RollLeft
00013162                            
00013162                            
00013162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013162                            
00013162                            
00013162                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013162 3028 0014                  		move.w	$14(a0),d0
00013166 6B00                       		bmi.s	loc_1323A
00013168 08A8 0000 0022             		bclr	#0,$22(a0)
0001316E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013174 4E75                       		rts	
00013176                            ; ===========================================================================
00013176                            
00013176                            loc_1323A:
00013176 D044                       		add.w	d4,d0
00013178 6400                       		bcc.s	loc_13242
0001317A 303C 0080                  		move.w	#$80,d0
0001317E                            
0001317E                            loc_13242:
0001317E 3140 0014                  		move.w	d0,$14(a0)
00013182 4E75                       		rts	
00013184                            ; End of function Sonic_RollRight
00013184                            
00013184                            ; ---------------------------------------------------------------------------
00013184                            ; Subroutine to	change Sonic's direction while jumping
00013184                            ; ---------------------------------------------------------------------------
00013184                            
00013184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013184                            
00013184                            
00013184                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013184 3C38 F760                  		move.w	($FFFFF760).w,d6
00013188 3A38 F762                  		move.w	($FFFFF762).w,d5
0001318C E345                       		asl.w	#1,d5
0001318E 0828 0004 0022             		btst	#4,$22(a0)
00013194 6600                       		bne.s	Obj01_ResetScr2
00013196 3028 0010                  		move.w	$10(a0),d0
0001319A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000131A0 6700                       		beq.s	loc_13278	; if not, branch
000131A2 08E8 0000 0022             		bset	#0,$22(a0)
000131A8 9045                       		sub.w	d5,d0
000131AA 3206                       		move.w	d6,d1
000131AC 4441                       		neg.w	d1
000131AE B041                       		cmp.w	d1,d0
000131B0 6E00                       		bgt.s	loc_13278
000131B2 3001                       		move.w	d1,d0
000131B4                            
000131B4                            loc_13278:
000131B4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000131BA 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000131BC 08A8 0000 0022             		bclr	#0,$22(a0)
000131C2 D045                       		add.w	d5,d0
000131C4 B046                       		cmp.w	d6,d0
000131C6 6D00                       		blt.s	Obj01_JumpMove
000131C8 3006                       		move.w	d6,d0
000131CA                            
000131CA                            Obj01_JumpMove:
000131CA 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000131CE                            
000131CE                            Obj01_ResetScr2:
000131CE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000131D4 6700                       		beq.s	loc_132A4	; if yes, branch
000131D6 6400                       		bcc.s	loc_132A0
000131D8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000131DC                            
000131DC                            loc_132A0:
000131DC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000131E0                            
000131E0                            loc_132A4:
000131E0 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000131E6 6500                       		bcs.s	locret_132D2	; if yes, branch
000131E8 3028 0010                  		move.w	$10(a0),d0
000131EC 3200                       		move.w	d0,d1
000131EE EA41                       		asr.w	#5,d1
000131F0 6700                       		beq.s	locret_132D2
000131F2 6B00                       		bmi.s	loc_132C6
000131F4 9041                       		sub.w	d1,d0
000131F6 6400                       		bcc.s	loc_132C0
000131F8 303C 0000                  		move.w	#0,d0
000131FC                            
000131FC                            loc_132C0:
000131FC 3140 0010                  		move.w	d0,$10(a0)
00013200 4E75                       		rts	
00013202                            ; ===========================================================================
00013202                            
00013202                            loc_132C6:
00013202 9041                       		sub.w	d1,d0
00013204 6500                       		bcs.s	loc_132CE
00013206 303C 0000                  		move.w	#0,d0
0001320A                            
0001320A                            loc_132CE:
0001320A 3140 0010                  		move.w	d0,$10(a0)
0001320E                            
0001320E                            locret_132D2:
0001320E 4E75                       		rts	
00013210                            ; End of function Sonic_ChgJumpDir
00013210                            
00013210                            ; ===========================================================================
00013210                            ; ---------------------------------------------------------------------------
00013210                            ; Unused subroutine to squash Sonic
00013210                            ; ---------------------------------------------------------------------------
00013210 1028 0026                  		move.b	$26(a0),d0
00013214 0600 0020                  		addi.b	#$20,d0
00013218 0200 00C0                  		andi.b	#$C0,d0
0001321C 6600                       		bne.s	locret_13302
0001321E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013222 4A41                       		tst.w	d1
00013224 6A00                       		bpl.s	locret_13302
00013226 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
0001322C 317C 0000 0010             		move.w	#0,$10(a0)
00013232 317C 0000 0012             		move.w	#0,$12(a0)
00013238 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
0001323E                            
0001323E                            locret_13302:
0001323E 4E75                       		rts	
00013240                            ; ---------------------------------------------------------------------------
00013240                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013240                            ; ---------------------------------------------------------------------------
00013240                            
00013240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013240                            
00013240                            
00013240                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013240 2228 0008                  		move.l	8(a0),d1
00013244 3028 0010                  		move.w	$10(a0),d0
00013248 48C0                       		ext.l	d0
0001324A E180                       		asl.l	#8,d0
0001324C D280                       		add.l	d0,d1
0001324E 4841                       		swap	d1
00013250 3038 F728                  		move.w	($FFFFF728).w,d0
00013254 0640 0010                  		addi.w	#$10,d0
00013258 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001325A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001325C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013260 0640 0128                  		addi.w	#$128,d0
00013264 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013268 6600                       		bne.s	loc_13332
0001326A 0640 0040                  		addi.w	#$40,d0
0001326E                            
0001326E                            loc_13332:
0001326E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013270 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013272                            
00013272                            loc_13336:
00013272 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013276 0640 00E0                  		addi.w	#$E0,d0
0001327A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001327E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013280 4E75                       		rts	
00013282                            ; ===========================================================================
00013282                            
00013282                            Boundary_Bottom:
00013282 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013288 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001328C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013292 6500 0000                  		bcs.w	KillSonic
00013296 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001329A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000132A0 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000132A6 4E75                       		rts	
000132A8                            ; ===========================================================================
000132A8                            
000132A8                            Boundary_Sides:
000132A8 3140 0008                  		move.w	d0,8(a0)
000132AC 317C 0000 000A             		move.w	#0,$A(a0)
000132B2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
000132B8 317C 0000 0014             		move.w	#0,$14(a0)
000132BE 60B2                       		bra.s	loc_13336
000132C0                            ; End of function Sonic_LevelBound
000132C0                            
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            ; Subroutine allowing Sonic to roll when he's moving
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            
000132C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132C0                            
000132C0                            
000132C0                            Sonic_Roll:				; XREF: Obj01_MdNormal
000132C0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000132C4 6600                       		bne.s	Obj01_NoRoll
000132C6 3028 0014                  		move.w	$14(a0),d0
000132CA 6A00                       		bpl.s	loc_13392
000132CC 4440                       		neg.w	d0
000132CE                            
000132CE                            loc_13392:
000132CE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000132D2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000132D4 1038 F602                  		move.b	($FFFFF602).w,d0
000132D8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000132DC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000132DE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000132E4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000132E6                            
000132E6                            Obj01_NoRoll:
000132E6 4E75                       		rts	
000132E8                            ; ===========================================================================
000132E8                            
000132E8                            Obj01_ChkRoll:
000132E8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000132EE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000132F0 4E75                       		rts	
000132F2                            ; ===========================================================================
000132F2                            
000132F2                            Obj01_DoRoll:
000132F2 08E8 0002 0022             		bset	#2,$22(a0)
000132F8 117C 000E 0016             		move.b	#$E,$16(a0)
000132FE 117C 0007 0017             		move.b	#7,$17(a0)
00013304 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001330A 5A68 000C                  		addq.w	#5,$C(a0)
0001330E 303C 00BE                  		move.w	#$BE,d0
00013312 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play rolling sound
00013318 4A68 0014                  		tst.w	$14(a0)
0001331C 6600                       		bne.s	locret_133E8
0001331E 317C 0200 0014             		move.w	#$200,$14(a0)
00013324                            
00013324                            locret_133E8:
00013324 4E75                       		rts	
00013326                            ; End of function Sonic_Roll
00013326                            
00013326                            ; ---------------------------------------------------------------------------
00013326                            ; Subroutine allowing Sonic to jump
00013326                            ; ---------------------------------------------------------------------------
00013326                            
00013326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013326                            
00013326                            
00013326                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013326 1038 F603                  		move.b	($FFFFF603).w,d0
0001332A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001332E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013332 7000                       		moveq	#0,d0
00013334 1028 0026                  		move.b	$26(a0),d0
00013338 0600 0080                  		addi.b	#$80,d0
0001333C 6100 0000                  		bsr.w	sub_14D48
00013340 0C41 0006                  		cmpi.w	#6,d1
00013344 6D00 0000                  		blt.w	locret_1348E
00013348 343C 0680                  		move.w	#$680,d2
0001334C 0828 0006 0022             		btst	#6,$22(a0)
00013352 6700                       		beq.s	loc_1341C
00013354 343C 0380                  		move.w	#$380,d2
00013358                            
00013358                            loc_1341C:
00013358 7000                       		moveq	#0,d0
0001335A 1028 0026                  		move.b	$26(a0),d0
0001335E 0400 0040                  		subi.b	#$40,d0
00013362 4EB9 0000 29B8             		jsr	(CalcSine).l
00013368 C3C2                       		muls.w	d2,d1
0001336A E081                       		asr.l	#8,d1
0001336C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013370 C1C2                       		muls.w	d2,d0
00013372 E080                       		asr.l	#8,d0
00013374 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013378 08E8 0001 0022             		bset	#1,$22(a0)
0001337E 08A8 0005 0022             		bclr	#5,$22(a0)
00013384 588F                       		addq.l	#4,sp
00013386 117C 0001 003C             		move.b	#1,$3C(a0)
0001338C 4228 0038                  		clr.b	$38(a0)
00013390 303C 00A0                  		move.w	#$A0,d0
00013394 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play jumping sound
0001339A 117C 0013 0016             		move.b	#$13,$16(a0)
000133A0 117C 0009 0017             		move.b	#9,$17(a0)
000133A6 0828 0002 0022             		btst	#2,$22(a0)
000133AC 6600                       		bne.s	loc_13490
000133AE 117C 000E 0016             		move.b	#$E,$16(a0)
000133B4 117C 0007 0017             		move.b	#7,$17(a0)
000133BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000133C0 08E8 0002 0022             		bset	#2,$22(a0)
000133C6 5A68 000C                  		addq.w	#5,$C(a0)
000133CA                            
000133CA                            locret_1348E:
000133CA 4E75                       		rts	
000133CC                            ; ===========================================================================
000133CC                            
000133CC                            loc_13490:
000133CC 08E8 0004 0022             		bset	#4,$22(a0)
000133D2 4E75                       		rts	
000133D4                            ; End of function Sonic_Jump
000133D4                            
000133D4                            
000133D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133D4                            
000133D4                            
000133D4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000133D4 4A28 003C                  		tst.b	$3C(a0)
000133D8 6700                       		beq.s	loc_134C4
000133DA 323C FC00                  		move.w	#-$400,d1
000133DE 0828 0006 0022             		btst	#6,$22(a0)
000133E4 6700                       		beq.s	loc_134AE
000133E6 323C FE00                  		move.w	#-$200,d1
000133EA                            
000133EA                            loc_134AE:
000133EA B268 0012                  		cmp.w	$12(a0),d1
000133EE 6F00                       		ble.s	locret_134C2
000133F0 1038 F602                  		move.b	($FFFFF602).w,d0
000133F4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000133F8 6600                       		bne.s	locret_134C2	; if yes, branch
000133FA 3141 0012                  		move.w	d1,$12(a0)
000133FE                            
000133FE                            locret_134C2:
000133FE 4E75                       		rts	
00013400                            ; ===========================================================================
00013400                            
00013400                            loc_134C4:
00013400 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013406 6C00                       		bge.s	locret_134D2
00013408 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001340E                            
0001340E                            locret_134D2:
0001340E 4E75                       		rts	
00013410                            ; End of function Sonic_JumpHeight
00013410                            
00013410                            ; ---------------------------------------------------------------------------
00013410                            ; Subroutine to	slow Sonic walking up a	slope
00013410                            ; ---------------------------------------------------------------------------
00013410                            
00013410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013410                            
00013410                            
00013410                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013410 1028 0026                  		move.b	$26(a0),d0
00013414 0600 0060                  		addi.b	#$60,d0
00013418 0C00 00C0                  		cmpi.b	#$C0,d0
0001341C 6400                       		bcc.s	locret_13508
0001341E 1028 0026                  		move.b	$26(a0),d0
00013422 4EB9 0000 29B8             		jsr	(CalcSine).l
00013428 C1FC 0020                  		muls.w	#$20,d0
0001342C E080                       		asr.l	#8,d0
0001342E 4A68 0014                  		tst.w	$14(a0)
00013432 6700                       		beq.s	locret_13508
00013434 6B00                       		bmi.s	loc_13504
00013436 4A40                       		tst.w	d0
00013438 6700                       		beq.s	locret_13502
0001343A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001343E                            
0001343E                            locret_13502:
0001343E 4E75                       		rts	
00013440                            ; ===========================================================================
00013440                            
00013440                            loc_13504:
00013440 D168 0014                  		add.w	d0,$14(a0)
00013444                            
00013444                            locret_13508:
00013444 4E75                       		rts	
00013446                            ; End of function Sonic_SlopeResist
00013446                            
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013446                            ; ---------------------------------------------------------------------------
00013446                            
00013446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013446                            
00013446                            
00013446                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013446 1028 0026                  		move.b	$26(a0),d0
0001344A 0600 0060                  		addi.b	#$60,d0
0001344E 0C00 00C0                  		cmpi.b	#-$40,d0
00013452 6400                       		bcc.s	locret_13544
00013454 1028 0026                  		move.b	$26(a0),d0
00013458 4EB9 0000 29B8             		jsr	(CalcSine).l
0001345E C1FC 0050                  		muls.w	#$50,d0
00013462 E080                       		asr.l	#8,d0
00013464 4A68 0014                  		tst.w	$14(a0)
00013468 6B00                       		bmi.s	loc_1353A
0001346A 4A40                       		tst.w	d0
0001346C 6A00                       		bpl.s	loc_13534
0001346E E480                       		asr.l	#2,d0
00013470                            
00013470                            loc_13534:
00013470 D168 0014                  		add.w	d0,$14(a0)
00013474 4E75                       		rts	
00013476                            ; ===========================================================================
00013476                            
00013476                            loc_1353A:
00013476 4A40                       		tst.w	d0
00013478 6B00                       		bmi.s	loc_13540
0001347A E480                       		asr.l	#2,d0
0001347C                            
0001347C                            loc_13540:
0001347C D168 0014                  		add.w	d0,$14(a0)
00013480                            
00013480                            locret_13544:
00013480 4E75                       		rts	
00013482                            ; End of function Sonic_RollRepel
00013482                            
00013482                            ; ---------------------------------------------------------------------------
00013482                            ; Subroutine to	push Sonic down	a slope
00013482                            ; ---------------------------------------------------------------------------
00013482                            
00013482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013482                            
00013482                            
00013482                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013482 4E71                       		nop	
00013484 4A28 0038                  		tst.b	$38(a0)
00013488 6600                       		bne.s	locret_13580
0001348A 4A68 003E                  		tst.w	$3E(a0)
0001348E 6600                       		bne.s	loc_13582
00013490 1028 0026                  		move.b	$26(a0),d0
00013494 0600 0020                  		addi.b	#$20,d0
00013498 0200 00C0                  		andi.b	#$C0,d0
0001349C 6700                       		beq.s	locret_13580
0001349E 3028 0014                  		move.w	$14(a0),d0
000134A2 6A00                       		bpl.s	loc_1356A
000134A4 4440                       		neg.w	d0
000134A6                            
000134A6                            loc_1356A:
000134A6 0C40 0280                  		cmpi.w	#$280,d0
000134AA 6400                       		bcc.s	locret_13580
000134AC 4268 0014                  		clr.w	$14(a0)
000134B0 08E8 0001 0022             		bset	#1,$22(a0)
000134B6 317C 001E 003E             		move.w	#$1E,$3E(a0)
000134BC                            
000134BC                            locret_13580:
000134BC 4E75                       		rts	
000134BE                            ; ===========================================================================
000134BE                            
000134BE                            loc_13582:
000134BE 5368 003E                  		subq.w	#1,$3E(a0)
000134C2 4E75                       		rts	
000134C4                            ; End of function Sonic_SlopeRepel
000134C4                            
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            
000134C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134C4                            
000134C4                            
000134C4                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000134C4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000134C8 6700                       		beq.s	locret_135A2	; if already 0,	branch
000134CA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000134CC                            
000134CC 5400                       		addq.b	#2,d0		; increase angle
000134CE 6400                       		bcc.s	loc_13596
000134D0 7000                       		moveq	#0,d0
000134D2                            
000134D2                            loc_13596:
000134D2 6000                       		bra.s	loc_1359E
000134D4                            ; ===========================================================================
000134D4                            
000134D4                            loc_13598:
000134D4 5500                       		subq.b	#2,d0		; decrease angle
000134D6 6400                       		bcc.s	loc_1359E
000134D8 7000                       		moveq	#0,d0
000134DA                            
000134DA                            loc_1359E:
000134DA 1140 0026                  		move.b	d0,$26(a0)
000134DE                            
000134DE                            locret_135A2:
000134DE 4E75                       		rts	
000134E0                            ; End of function Sonic_JumpAngle
000134E0                            
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            
000134E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134E0                            
000134E0                            
000134E0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000134E0 3228 0010                  		move.w	$10(a0),d1
000134E4 3428 0012                  		move.w	$12(a0),d2
000134E8 4EB9 0000 2C86             		jsr	(CalcAngle).l
000134EE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000134F2 0400 0020                  		subi.b	#$20,d0
000134F6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000134FA 0200 00C0                  		andi.b	#$C0,d0
000134FE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013502 0C00 0040                  		cmpi.b	#$40,d0
00013506 6700 0000                  		beq.w	loc_13680
0001350A 0C00 0080                  		cmpi.b	#$80,d0
0001350E 6700 0000                  		beq.w	loc_136E2
00013512 0C00 00C0                  		cmpi.b	#-$40,d0
00013516 6700 0000                  		beq.w	loc_1373E
0001351A 6100 0000                  		bsr.w	Sonic_HitWall
0001351E 4A41                       		tst.w	d1
00013520 6A00                       		bpl.s	loc_135F0
00013522 9368 0008                  		sub.w	d1,8(a0)
00013526 317C 0000 0010             		move.w	#0,$10(a0)
0001352C                            
0001352C                            loc_135F0:
0001352C 6100 0000                  		bsr.w	sub_14EB4
00013530 4A41                       		tst.w	d1
00013532 6A00                       		bpl.s	loc_13602
00013534 D368 0008                  		add.w	d1,8(a0)
00013538 317C 0000 0010             		move.w	#0,$10(a0)
0001353E                            
0001353E                            loc_13602:
0001353E 6100 0000                  		bsr.w	Sonic_HitFloor
00013542 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013546 4A41                       		tst.w	d1
00013548 6A00                       		bpl.s	locret_1367E
0001354A 1428 0012                  		move.b	$12(a0),d2
0001354E 5002                       		addq.b	#8,d2
00013550 4402                       		neg.b	d2
00013552 B202                       		cmp.b	d2,d1
00013554 6C00                       		bge.s	loc_1361E
00013556 B002                       		cmp.b	d2,d0
00013558 6D00                       		blt.s	locret_1367E
0001355A                            
0001355A                            loc_1361E:
0001355A D368 000C                  		add.w	d1,$C(a0)
0001355E 1143 0026                  		move.b	d3,$26(a0)
00013562 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013566 117C 0000 001C             		move.b	#0,$1C(a0)
0001356C 1003                       		move.b	d3,d0
0001356E 0600 0020                  		addi.b	#$20,d0
00013572 0200 0040                  		andi.b	#$40,d0
00013576 6600                       		bne.s	loc_1365C
00013578 1003                       		move.b	d3,d0
0001357A 0600 0010                  		addi.b	#$10,d0
0001357E 0200 0020                  		andi.b	#$20,d0
00013582 6700                       		beq.s	loc_1364E
00013584 E0E8 0012                  		asr	$12(a0)
00013588 6000                       		bra.s	loc_13670
0001358A                            ; ===========================================================================
0001358A                            
0001358A                            loc_1364E:
0001358A 317C 0000 0012             		move.w	#0,$12(a0)
00013590 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013596 4E75                       		rts	
00013598                            ; ===========================================================================
00013598                            
00013598                            loc_1365C:
00013598 317C 0000 0010             		move.w	#0,$10(a0)
0001359E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000135A4 6F00                       		ble.s	loc_13670
000135A6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000135AC                            
000135AC                            loc_13670:
000135AC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000135B2 4A03                       		tst.b	d3
000135B4 6A00                       		bpl.s	locret_1367E
000135B6 4468 0014                  		neg.w	$14(a0)
000135BA                            
000135BA                            locret_1367E:
000135BA 4E75                       		rts	
000135BC                            ; ===========================================================================
000135BC                            
000135BC                            loc_13680:
000135BC 6100 0000                  		bsr.w	Sonic_HitWall
000135C0 4A41                       		tst.w	d1
000135C2 6A00                       		bpl.s	loc_1369A
000135C4 9368 0008                  		sub.w	d1,8(a0)
000135C8 317C 0000 0010             		move.w	#0,$10(a0)
000135CE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000135D4 4E75                       		rts	
000135D6                            ; ===========================================================================
000135D6                            
000135D6                            loc_1369A:
000135D6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000135DA 4A41                       		tst.w	d1
000135DC 6A00                       		bpl.s	loc_136B4
000135DE 9368 000C                  		sub.w	d1,$C(a0)
000135E2 4A68 0012                  		tst.w	$12(a0)
000135E6 6A00                       		bpl.s	locret_136B2
000135E8 317C 0000 0012             		move.w	#0,$12(a0)
000135EE                            
000135EE                            locret_136B2:
000135EE 4E75                       		rts	
000135F0                            ; ===========================================================================
000135F0                            
000135F0                            loc_136B4:
000135F0 4A68 0012                  		tst.w	$12(a0)
000135F4 6B00                       		bmi.s	locret_136E0
000135F6 6100 0000                  		bsr.w	Sonic_HitFloor
000135FA 4A41                       		tst.w	d1
000135FC 6A00                       		bpl.s	locret_136E0
000135FE D368 000C                  		add.w	d1,$C(a0)
00013602 1143 0026                  		move.b	d3,$26(a0)
00013606 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001360A 117C 0000 001C             		move.b	#0,$1C(a0)
00013610 317C 0000 0012             		move.w	#0,$12(a0)
00013616 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001361C                            
0001361C                            locret_136E0:
0001361C 4E75                       		rts	
0001361E                            ; ===========================================================================
0001361E                            
0001361E                            loc_136E2:
0001361E 6100 0000                  		bsr.w	Sonic_HitWall
00013622 4A41                       		tst.w	d1
00013624 6A00                       		bpl.s	loc_136F4
00013626 9368 0008                  		sub.w	d1,8(a0)
0001362A 317C 0000 0010             		move.w	#0,$10(a0)
00013630                            
00013630                            loc_136F4:
00013630 6100 0000                  		bsr.w	sub_14EB4
00013634 4A41                       		tst.w	d1
00013636 6A00                       		bpl.s	loc_13706
00013638 D368 0008                  		add.w	d1,8(a0)
0001363C 317C 0000 0010             		move.w	#0,$10(a0)
00013642                            
00013642                            loc_13706:
00013642 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013646 4A41                       		tst.w	d1
00013648 6A00                       		bpl.s	locret_1373C
0001364A 9368 000C                  		sub.w	d1,$C(a0)
0001364E 1003                       		move.b	d3,d0
00013650 0600 0020                  		addi.b	#$20,d0
00013654 0200 0040                  		andi.b	#$40,d0
00013658 6600                       		bne.s	loc_13726
0001365A 317C 0000 0012             		move.w	#0,$12(a0)
00013660 4E75                       		rts	
00013662                            ; ===========================================================================
00013662                            
00013662                            loc_13726:
00013662 1143 0026                  		move.b	d3,$26(a0)
00013666 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001366A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013670 4A03                       		tst.b	d3
00013672 6A00                       		bpl.s	locret_1373C
00013674 4468 0014                  		neg.w	$14(a0)
00013678                            
00013678                            locret_1373C:
00013678 4E75                       		rts	
0001367A                            ; ===========================================================================
0001367A                            
0001367A                            loc_1373E:
0001367A 6100 0000                  		bsr.w	sub_14EB4
0001367E 4A41                       		tst.w	d1
00013680 6A00                       		bpl.s	loc_13758
00013682 D368 0008                  		add.w	d1,8(a0)
00013686 317C 0000 0010             		move.w	#0,$10(a0)
0001368C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013692 4E75                       		rts	
00013694                            ; ===========================================================================
00013694                            
00013694                            loc_13758:
00013694 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013698 4A41                       		tst.w	d1
0001369A 6A00                       		bpl.s	loc_13772
0001369C 9368 000C                  		sub.w	d1,$C(a0)
000136A0 4A68 0012                  		tst.w	$12(a0)
000136A4 6A00                       		bpl.s	locret_13770
000136A6 317C 0000 0012             		move.w	#0,$12(a0)
000136AC                            
000136AC                            locret_13770:
000136AC 4E75                       		rts	
000136AE                            ; ===========================================================================
000136AE                            
000136AE                            loc_13772:
000136AE 4A68 0012                  		tst.w	$12(a0)
000136B2 6B00                       		bmi.s	locret_1379E
000136B4 6100 0000                  		bsr.w	Sonic_HitFloor
000136B8 4A41                       		tst.w	d1
000136BA 6A00                       		bpl.s	locret_1379E
000136BC D368 000C                  		add.w	d1,$C(a0)
000136C0 1143 0026                  		move.b	d3,$26(a0)
000136C4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000136C8 117C 0000 001C             		move.b	#0,$1C(a0)
000136CE 317C 0000 0012             		move.w	#0,$12(a0)
000136D4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000136DA                            
000136DA                            locret_1379E:
000136DA 4E75                       		rts	
000136DC                            ; End of function Sonic_Floor
000136DC                            
000136DC                            ; ---------------------------------------------------------------------------
000136DC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000136DC                            ; ---------------------------------------------------------------------------
000136DC                            
000136DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136DC                            
000136DC                            
000136DC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000136DC 0828 0004 0022             		btst	#4,$22(a0)
000136E2 6700                       		beq.s	loc_137AE
000136E4 4E71                       		nop	
000136E6 4E71                       		nop	
000136E8 4E71                       		nop	
000136EA                            
000136EA                            loc_137AE:
000136EA 08A8 0005 0022             		bclr	#5,$22(a0)
000136F0 08A8 0001 0022             		bclr	#1,$22(a0)
000136F6 08A8 0004 0022             		bclr	#4,$22(a0)
000136FC 0828 0002 0022             		btst	#2,$22(a0)
00013702 6700                       		beq.s	loc_137E4
00013704 08A8 0002 0022             		bclr	#2,$22(a0)
0001370A 117C 0013 0016             		move.b	#$13,$16(a0)
00013710 117C 0009 0017             		move.b	#9,$17(a0)
00013716 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001371C 5B68 000C                  		subq.w	#5,$C(a0)
00013720                            
00013720                            loc_137E4:
00013720 117C 0000 003C             		move.b	#0,$3C(a0)
00013726 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001372C 4E75                       		rts	
0001372E                            ; End of function Sonic_ResetOnFloor
0001372E                            
0001372E                            ; ===========================================================================
0001372E                            ; ---------------------------------------------------------------------------
0001372E                            ; Sonic	when he	gets hurt
0001372E                            ; ---------------------------------------------------------------------------
0001372E                            
0001372E                            Obj01_Hurt:				; XREF: Obj01_Index
0001372E 4EBA 9E34                  		jsr	SpeedToPos
00013732 0668 0030 0012             		addi.w	#$30,$12(a0)
00013738 0828 0006 0022             		btst	#6,$22(a0)
0001373E 6700                       		beq.s	loc_1380C
00013740 0468 0020 0012             		subi.w	#$20,$12(a0)
00013746                            
00013746                            loc_1380C:
00013746 6100 0000                  		bsr.w	Sonic_HurtStop
0001374A 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001374E 6100 F552                  		bsr.w	Sonic_RecordPos
00013752 6100 0000                  		bsr.w	Sonic_Animate
00013756 6100 0000                  		bsr.w	LoadSonicDynPLC
0001375A 4EFA 9E2E                  		jmp	DisplaySprite
0001375E                            
0001375E                            ; ---------------------------------------------------------------------------
0001375E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001375E                            ; ---------------------------------------------------------------------------
0001375E                            
0001375E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001375E                            
0001375E                            
0001375E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001375E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013762 0640 00E0                  		addi.w	#$E0,d0
00013766 B068 000C                  		cmp.w	$C(a0),d0
0001376A 6500 0000                  		bcs.w	KillSonic
0001376E 6100 FD70                  		bsr.w	Sonic_Floor
00013772 0828 0001 0022             		btst	#1,$22(a0)
00013778 6600                       		bne.s	locret_13860
0001377A 7000                       		moveq	#0,d0
0001377C 3140 0012                  		move.w	d0,$12(a0)
00013780 3140 0010                  		move.w	d0,$10(a0)
00013784 3140 0014                  		move.w	d0,$14(a0)
00013788 117C 0000 001C             		move.b	#0,$1C(a0)
0001378E 5528 0024                  		subq.b	#2,$24(a0)
00013792 317C 0078 0030             		move.w	#$78,$30(a0)
00013798                            
00013798                            locret_13860:
00013798 4E75                       		rts	
0001379A                            ; End of function Sonic_HurtStop
0001379A                            
0001379A                            ; ===========================================================================
0001379A                            ; ---------------------------------------------------------------------------
0001379A                            ; Sonic	when he	dies
0001379A                            ; ---------------------------------------------------------------------------
0001379A                            
0001379A                            Obj01_Death:				; XREF: Obj01_Index
0001379A 6100 0000                  		bsr.w	GameOver
0001379E 4EBA 9D98                  		jsr	ObjectFall
000137A2 6100 F4FE                  		bsr.w	Sonic_RecordPos
000137A6 6100 0000                  		bsr.w	Sonic_Animate
000137AA 6100 0000                  		bsr.w	LoadSonicDynPLC
000137AE 4EFA 9DDA                  		jmp	DisplaySprite
000137B2                            
000137B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137B2                            
000137B2                            
000137B2                            GameOver:				; XREF: Obj01_Death
000137B2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000137B6 0640 0100                  		addi.w	#$100,d0
000137BA B068 000C                  		cmp.w	$C(a0),d0
000137BE 6400 0000                  		bcc.w	locret_13900
000137C2 317C FFC8 0012             		move.w	#-$38,$12(a0)
000137C8 5428 0024                  		addq.b	#2,$24(a0)
000137CC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000137D0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000137D4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000137D8 6600                       		bne.s	loc_138D4
000137DA 317C 0000 003A             		move.w	#0,$3A(a0)
000137E0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000137E6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000137EC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000137F2 4238 FE1A                  		clr.b	($FFFFFE1A).w
000137F6                            
000137F6                            loc_138C2:
000137F6 303C 008F                  		move.w	#$8F,d0
000137FA 4EB9 0000 1374             		jsr	(PlaySound).l	; play game over music
00013800 7003                       		moveq	#3,d0
00013802 4EF9 0000 155E             		jmp	(LoadPLC).l	; load game over patterns
00013808                            ; ===========================================================================
00013808                            
00013808                            loc_138D4:
00013808 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001380E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013812 6700                       		beq.s	locret_13900	; if not, branch
00013814 317C 0000 003A             		move.w	#0,$3A(a0)
0001381A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013820 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013826 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001382C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013832 60C2                       		bra.s	loc_138C2
00013834                            ; ===========================================================================
00013834                            
00013834                            locret_13900:
00013834 4E75                       		rts	
00013836                            ; End of function GameOver
00013836                            
00013836                            ; ===========================================================================
00013836                            ; ---------------------------------------------------------------------------
00013836                            ; Sonic	when the level is restarted
00013836                            ; ---------------------------------------------------------------------------
00013836                            
00013836                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013836 4A68 003A                  		tst.w	$3A(a0)
0001383A 6700                       		beq.s	locret_13914
0001383C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013840 6600                       		bne.s	locret_13914
00013842 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013848                            
00013848                            locret_13914:
00013848 4E75                       		rts	
0001384A                            
0001384A                            ; ---------------------------------------------------------------------------
0001384A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001384A                            ; ---------------------------------------------------------------------------
0001384A                            
0001384A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001384A                            
0001384A                            
0001384A                            Sonic_Loops:				; XREF: Obj01_Control
0001384A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013850 6700                       		beq.s	loc_13926	; if yes, branch
00013852 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013856 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001385A                            
0001385A                            loc_13926:
0001385A 3028 000C                  		move.w	$C(a0),d0
0001385E E248                       		lsr.w	#1,d0
00013860 0240 0380                  		andi.w	#$380,d0
00013864 1228 0008                  		move.b	8(a0),d1
00013868 0241 007F                  		andi.w	#$7F,d1
0001386C D041                       		add.w	d1,d0
0001386E 43F8 A400                  		lea	($FFFFA400).w,a1
00013872 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013876 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001387A 6700 FA6C                  		beq.w	Obj01_ChkRoll
0001387E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013882 6700 FA64                  		beq.w	Obj01_ChkRoll
00013886 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001388A 6700                       		beq.s	loc_13976
0001388C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013890 6700                       		beq.s	loc_13966
00013892 08A8 0006 0001             		bclr	#6,1(a0)
00013898 4E75                       		rts	
0001389A                            ; ===========================================================================
0001389A                            
0001389A                            loc_13966:
0001389A 0828 0001 0022             		btst	#1,$22(a0)
000138A0 6700                       		beq.s	loc_13976
000138A2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000138A8 4E75                       		rts	
000138AA                            ; ===========================================================================
000138AA                            
000138AA                            loc_13976:
000138AA 3428 0008                  		move.w	8(a0),d2
000138AE 0C02 002C                  		cmpi.b	#$2C,d2
000138B2 6400                       		bcc.s	loc_13988
000138B4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000138BA 4E75                       		rts	
000138BC                            ; ===========================================================================
000138BC                            
000138BC                            loc_13988:
000138BC 0C02 00E0                  		cmpi.b	#-$20,d2
000138C0 6500                       		bcs.s	loc_13996
000138C2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000138C8 4E75                       		rts	
000138CA                            ; ===========================================================================
000138CA                            
000138CA                            loc_13996:
000138CA 0828 0006 0001             		btst	#6,1(a0)
000138D0 6600                       		bne.s	loc_139B2
000138D2 1228 0026                  		move.b	$26(a0),d1
000138D6 6700                       		beq.s	locret_139C2
000138D8 0C01 0080                  		cmpi.b	#-$80,d1
000138DC 6200                       		bhi.s	locret_139C2
000138DE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000138E4 4E75                       		rts	
000138E6                            ; ===========================================================================
000138E6                            
000138E6                            loc_139B2:
000138E6 1228 0026                  		move.b	$26(a0),d1
000138EA 0C01 0080                  		cmpi.b	#-$80,d1
000138EE 6300                       		bls.s	locret_139C2
000138F0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000138F6                            
000138F6                            locret_139C2:
000138F6 4E75                       		rts	
000138F8                            ; End of function Sonic_Loops
000138F8                            
000138F8                            ; ---------------------------------------------------------------------------
000138F8                            ; Subroutine to	animate	Sonic's sprites
000138F8                            ; ---------------------------------------------------------------------------
000138F8                            
000138F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138F8                            
000138F8                            
000138F8                            Sonic_Animate:				; XREF: Obj01_Control; et al
000138F8 43F9 0000 0000             		lea	(SonicAniData).l,a1
000138FE 7000                       		moveq	#0,d0
00013900 1028 001C                  		move.b	$1C(a0),d0
00013904 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013908 6700                       		beq.s	SAnim_Do	; if not, branch
0001390A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001390E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013914 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001391A                            
0001391A                            SAnim_Do:
0001391A D040                       		add.w	d0,d0
0001391C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013920 1011                       		move.b	(a1),d0
00013922 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013924 1228 0022                  		move.b	$22(a0),d1
00013928 0201 0001                  		andi.b	#1,d1
0001392C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013932 8328 0001                  		or.b	d1,1(a0)
00013936 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001393A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001393C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013940                            
00013940                            SAnim_Do2:
00013940 7200                       		moveq	#0,d1
00013942 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013946 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001394A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001394C                            
0001394C                            SAnim_Next:
0001394C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013950 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013954                            
00013954                            SAnim_Delay:
00013954 4E75                       		rts	
00013956                            ; ===========================================================================
00013956                            
00013956                            SAnim_End_FF:
00013956 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013958 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001395A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013960 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013964 60E6                       		bra.s	SAnim_Next
00013966                            ; ===========================================================================
00013966                            
00013966                            SAnim_End_FE:
00013966 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013968 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001396A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001396E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013972 9200                       		sub.b	d0,d1
00013974 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013978 60D2                       		bra.s	SAnim_Next
0001397A                            ; ===========================================================================
0001397A                            
0001397A                            SAnim_End_FD:
0001397A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001397C 6600                       		bne.s	SAnim_End	; if not, branch
0001397E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013984                            
00013984                            SAnim_End:
00013984 4E75                       		rts	
00013986                            ; ===========================================================================
00013986                            
00013986                            SAnim_WalkRun:				; XREF: SAnim_Do
00013986 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001398A 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001398C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001398E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013992 7200                       		moveq	#0,d1
00013994 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013998 1428 0022                  		move.b	$22(a0),d2
0001399C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000139A0 6600                       		bne.s	loc_13A70	; if yes, branch
000139A2 4600                       		not.b	d0		; reverse angle
000139A4                            
000139A4                            loc_13A70:
000139A4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000139A8 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000139AA 7203                       		moveq	#3,d1
000139AC                            
000139AC                            loc_13A78:
000139AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000139B2 B302                       		eor.b	d1,d2
000139B4 8528 0001                  		or.b	d2,1(a0)
000139B8 0828 0005 0022             		btst	#5,$22(a0)
000139BE 6600 0000                  		bne.w	SAnim_Push
000139C2 E808                       		lsr.b	#4,d0		; divide angle by $10
000139C4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000139C8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000139CC 6A00                       		bpl.s	loc_13A9C
000139CE 4442                       		neg.w	d2
000139D0                            
000139D0                            loc_13A9C:
000139D0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000139D6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000139DA 6400                       		bcc.s	loc_13AB4	; if yes, branch
000139DC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000139E2 1200                       		move.b	d0,d1
000139E4 E209                       		lsr.b	#1,d1
000139E6 D001                       		add.b	d1,d0
000139E8                            
000139E8                            loc_13AB4:
000139E8 D000                       		add.b	d0,d0
000139EA 1600                       		move.b	d0,d3
000139EC 4442                       		neg.w	d2
000139EE 0642 0800                  		addi.w	#$800,d2
000139F2 6A00                       		bpl.s	loc_13AC2
000139F4 7400                       		moveq	#0,d2
000139F6                            
000139F6                            loc_13AC2:
000139F6 E04A                       		lsr.w	#8,d2
000139F8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000139FC 6100 FF42                  		bsr.w	SAnim_Do2
00013A00 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013A04 4E75                       		rts	
00013A06                            ; ===========================================================================
00013A06                            
00013A06                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013A06 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013A08 6600                       		bne.s	SAnim_Push	; if not, branch
00013A0A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013A0E 6A00                       		bpl.s	loc_13ADE
00013A10 4442                       		neg.w	d2
00013A12                            
00013A12                            loc_13ADE:
00013A12 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013A18 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013A1C 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013A1E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013A24                            
00013A24                            loc_13AF0:
00013A24 4442                       		neg.w	d2
00013A26 0642 0400                  		addi.w	#$400,d2
00013A2A 6A00                       		bpl.s	loc_13AFA
00013A2C 7400                       		moveq	#0,d2
00013A2E                            
00013A2E                            loc_13AFA:
00013A2E E04A                       		lsr.w	#8,d2
00013A30 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013A34 1228 0022                  		move.b	$22(a0),d1
00013A38 0201 0001                  		andi.b	#1,d1
00013A3C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013A42 8328 0001                  		or.b	d1,1(a0)
00013A46 6000 FEF8                  		bra.w	SAnim_Do2
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            SAnim_Push:				; XREF: SAnim_RollJump
00013A4A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013A4E 6B00                       		bmi.s	loc_13B1E
00013A50 4442                       		neg.w	d2
00013A52                            
00013A52                            loc_13B1E:
00013A52 0642 0800                  		addi.w	#$800,d2
00013A56 6A00                       		bpl.s	loc_13B26
00013A58 7400                       		moveq	#0,d2
00013A5A                            
00013A5A                            loc_13B26:
00013A5A EC4A                       		lsr.w	#6,d2
00013A5C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013A60 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013A66 1228 0022                  		move.b	$22(a0),d1
00013A6A 0201 0001                  		andi.b	#1,d1
00013A6E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013A74 8328 0001                  		or.b	d1,1(a0)
00013A78 6000 FEC6                  		bra.w	SAnim_Do2
00013A7C                            ; End of function Sonic_Animate
00013A7C                            
00013A7C                            ; ===========================================================================
00013A7C                            SonicAniData:
00013A7C                            	include "_anim\Sonic.asm"
00013A7C                            ; ---------------------------------------------------------------------------
00013A7C                            ; Animation script - Sonic
00013A7C                            ; ---------------------------------------------------------------------------
00013A7C 0000                       		dc.w SonAni_Walk-SonicAniData
00013A7E 0000                       		dc.w SonAni_Run-SonicAniData
00013A80 0000                       		dc.w SonAni_Roll-SonicAniData
00013A82 0000                       		dc.w SonAni_Roll2-SonicAniData
00013A84 0000                       		dc.w SonAni_Push-SonicAniData
00013A86 0000                       		dc.w SonAni_Wait-SonicAniData
00013A88 0000                       		dc.w SonAni_Balance-SonicAniData
00013A8A 0000                       		dc.w SonAni_LookUp-SonicAniData
00013A8C 0000                       		dc.w SonAni_Duck-SonicAniData
00013A8E 0000                       		dc.w SonAni_Warp1-SonicAniData
00013A90 0000                       		dc.w SonAni_Warp2-SonicAniData
00013A92 0000                       		dc.w SonAni_Warp3-SonicAniData
00013A94 0000                       		dc.w SonAni_Warp4-SonicAniData
00013A96 0000                       		dc.w SonAni_Stop-SonicAniData
00013A98 0000                       		dc.w SonAni_Float1-SonicAniData
00013A9A 0000                       		dc.w SonAni_Float2-SonicAniData
00013A9C 0000                       		dc.w SonAni_Spring-SonicAniData
00013A9E 0000                       		dc.w SonAni_LZHang-SonicAniData
00013AA0 0000                       		dc.w SonAni_Leap1-SonicAniData
00013AA2 0000                       		dc.w SonAni_Leap2-SonicAniData
00013AA4 0000                       		dc.w SonAni_Surf-SonicAniData
00013AA6 0000                       		dc.w SonAni_Bubble-SonicAniData
00013AA8 0000                       		dc.w SonAni_Death1-SonicAniData
00013AAA 0000                       		dc.w SonAni_Drown-SonicAniData
00013AAC 0000                       		dc.w SonAni_Death2-SonicAniData
00013AAE 0000                       		dc.w SonAni_Shrink-SonicAniData
00013AB0 0000                       		dc.w SonAni_Hurt-SonicAniData
00013AB2 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013AB4 0000                       		dc.w SonAni_Blank-SonicAniData
00013AB6 0000                       		dc.w SonAni_Float3-SonicAniData
00013AB8 0000                       		dc.w SonAni_Float4-SonicAniData
00013ABA FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013AC2 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013ACA FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013AD2 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013ADA FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013AE2 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013AF8 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013AFC 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013B00 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013B04 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013B08 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013B0C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013B10 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013B14 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013B18 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013B1C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013B24 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013B28 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013B2C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013B32 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013B38 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013B3C 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013B44 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013B48 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013B4C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013B50 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013B5A 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013B5E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013B62 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013B66 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013B6E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013B72                            		even
00013B72                            		even
00013B72                            
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            ; Sonic	pattern	loading	subroutine
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            
00013B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B72                            
00013B72                            
00013B72                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013B72 7000                       		moveq	#0,d0
00013B74 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013B78 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013B7C 6700                       		beq.s	locret_13C96
00013B7E 11C0 F766                  		move.b	d0,($FFFFF766).w
00013B82 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013B88 D040                       		add.w	d0,d0
00013B8A D4F2 0000                  		adda.w	(a2,d0.w),a2
00013B8E 7200                       		moveq	#0,d1
00013B90 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013B92 5301                       		subq.b	#1,d1
00013B94 6B00                       		bmi.s	locret_13C96
00013B96 47F8 C800                  		lea	($FFFFC800).w,a3
00013B9A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013BA0                            
00013BA0                            SPLC_ReadEntry:
00013BA0 7400                       		moveq	#0,d2
00013BA2 141A                       		move.b	(a2)+,d2
00013BA4 3002                       		move.w	d2,d0
00013BA6 E808                       		lsr.b	#4,d0
00013BA8 E14A                       		lsl.w	#8,d2
00013BAA 141A                       		move.b	(a2)+,d2
00013BAC EB4A                       		lsl.w	#5,d2
00013BAE 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013BB4 D3C2                       		adda.l	d2,a1
00013BB6                            
00013BB6                            SPLC_LoadTile:
00013BB6 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013BBA 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013BBE 47EB 0020                  		lea	$20(a3),a3	; next tile
00013BC2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013BC6                            
00013BC6 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013BCA                            
00013BCA                            locret_13C96:
00013BCA 4E75                       		rts	
00013BCC                            ; End of function LoadSonicDynPLC
00013BCC                            
00013BCC                            ; ===========================================================================
00013BCC                            ; ---------------------------------------------------------------------------
00013BCC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013BCC                            ; ---------------------------------------------------------------------------
00013BCC                            
00013BCC                            Obj0A:					; XREF: Obj_Index
00013BCC 7000                       		moveq	#0,d0
00013BCE 1028 0024                  		move.b	$24(a0),d0
00013BD2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013BD6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013BDA                            ; ===========================================================================
00013BDA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013BDE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013BE2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013BE6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013BEA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013BEC                            ; ===========================================================================
00013BEC                            
00013BEC                            Obj0A_Main:				; XREF: Obj0A_Index
00013BEC 5428 0024                  		addq.b	#2,$24(a0)
00013BF0 217C 0001 2912 0004        		move.l	#Map_obj64,4(a0)
00013BF8 317C 8348 0002             		move.w	#$8348,2(a0)
00013BFE 117C 0084 0001             		move.b	#$84,1(a0)
00013C04 117C 0010 0019             		move.b	#$10,$19(a0)
00013C0A 117C 0001 0018             		move.b	#1,$18(a0)
00013C10 1028 0028                  		move.b	$28(a0),d0
00013C14 6A00                       		bpl.s	loc_13D00
00013C16 5028 0024                  		addq.b	#8,$24(a0)
00013C1A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013C22 317C 0440 0002             		move.w	#$440,2(a0)
00013C28 0240 007F                  		andi.w	#$7F,d0
00013C2C 1140 0033                  		move.b	d0,$33(a0)
00013C30 6000 0000                  		bra.w	Obj0A_Countdown
00013C34                            ; ===========================================================================
00013C34                            
00013C34                            loc_13D00:
00013C34 1140 001C                  		move.b	d0,$1C(a0)
00013C38 3168 0008 0030             		move.w	8(a0),$30(a0)
00013C3E 317C FF78 0012             		move.w	#-$88,$12(a0)
00013C44                            
00013C44                            Obj0A_Animate:				; XREF: Obj0A_Index
00013C44 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013C4A 4EB9 0000 A6B6             		jsr	AnimateSprite
00013C50                            
00013C50                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013C50 3038 F646                  		move.w	($FFFFF646).w,d0
00013C54 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013C58 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013C5A 117C 0006 0024             		move.b	#6,$24(a0)
00013C60 5E28 001C                  		addq.b	#7,$1C(a0)
00013C64 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013C6A 6700                       		beq.s	Obj0A_Display
00013C6C 6000                       		bra.s	Obj0A_Display
00013C6E                            ; ===========================================================================
00013C6E                            
00013C6E                            Obj0A_Wobble:
00013C6E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013C72 6700                       		beq.s	loc_13D44
00013C74 5868 0030                  		addq.w	#4,$30(a0)
00013C78                            
00013C78                            loc_13D44:
00013C78 1028 0026                  		move.b	$26(a0),d0
00013C7C 5228 0026                  		addq.b	#1,$26(a0)
00013C80 0240 007F                  		andi.w	#$7F,d0
00013C84 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013C8A 1031 0000                  		move.b	(a1,d0.w),d0
00013C8E 4880                       		ext.w	d0
00013C90 D068 0030                  		add.w	$30(a0),d0
00013C94 3140 0008                  		move.w	d0,8(a0)
00013C98 6100                       		bsr.s	Obj0A_ShowNumber
00013C9A 4EBA 98C8                  		jsr	SpeedToPos
00013C9E 4A28 0001                  		tst.b	1(a0)
00013CA2 6A00                       		bpl.s	Obj0A_Delete
00013CA4 4EFA 98E4                  		jmp	DisplaySprite
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            Obj0A_Delete:
00013CA8 4EFA 991C                  		jmp	DeleteObject
00013CAC                            ; ===========================================================================
00013CAC                            
00013CAC                            Obj0A_Display:				; XREF: Obj0A_Index
00013CAC 6100                       		bsr.s	Obj0A_ShowNumber
00013CAE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013CB4 4EB9 0000 A6B6             		jsr	AnimateSprite
00013CBA 4EFA 98CE                  		jmp	DisplaySprite
00013CBE                            ; ===========================================================================
00013CBE                            
00013CBE                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013CBE 4EFA 9906                  		jmp	DeleteObject
00013CC2                            ; ===========================================================================
00013CC2                            
00013CC2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013CC2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013CC8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013CCA 5368 0038                  		subq.w	#1,$38(a0)
00013CCE 6600                       		bne.s	Obj0A_Display2
00013CD0 117C 000E 0024             		move.b	#$E,$24(a0)
00013CD6 5E28 001C                  		addq.b	#7,$1C(a0)
00013CDA 60D0                       		bra.s	Obj0A_Display
00013CDC                            ; ===========================================================================
00013CDC                            
00013CDC                            Obj0A_Display2:
00013CDC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013CE2 4EB9 0000 A6B6             		jsr	AnimateSprite
00013CE8 4A28 0001                  		tst.b	1(a0)
00013CEC 6A00                       		bpl.s	Obj0A_Delete3
00013CEE 4EFA 989A                  		jmp	DisplaySprite
00013CF2                            ; ===========================================================================
00013CF2                            
00013CF2                            Obj0A_Delete3:
00013CF2 4EFA 98D2                  		jmp	DeleteObject
00013CF6                            ; ===========================================================================
00013CF6                            
00013CF6                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013CF6 4A68 0038                  		tst.w	$38(a0)
00013CFA 6700                       		beq.s	locret_13E1A
00013CFC 5368 0038                  		subq.w	#1,$38(a0)
00013D00 6600                       		bne.s	locret_13E1A
00013D02 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013D08 6400                       		bcc.s	locret_13E1A
00013D0A 317C 000F 0038             		move.w	#$F,$38(a0)
00013D10 4268 0012                  		clr.w	$12(a0)
00013D14 117C 0080 0001             		move.b	#$80,1(a0)
00013D1A 3028 0008                  		move.w	8(a0),d0
00013D1E 9078 F700                  		sub.w	($FFFFF700).w,d0
00013D22 0640 0080                  		addi.w	#$80,d0
00013D26 3140 0008                  		move.w	d0,8(a0)
00013D2A 3028 000C                  		move.w	$C(a0),d0
00013D2E 9078 F704                  		sub.w	($FFFFF704).w,d0
00013D32 0640 0080                  		addi.w	#$80,d0
00013D36 3140 000A                  		move.w	d0,$A(a0)
00013D3A 117C 000C 0024             		move.b	#$C,$24(a0)
00013D40                            
00013D40                            locret_13E1A:
00013D40 4E75                       		rts	
00013D42                            ; ===========================================================================
00013D42                            Obj0A_WobbleData:
00013D42 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013D53 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013D64 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013D75 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013D85 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013D92 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013D9F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013DAC FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00013DB9 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            Obj0A_Countdown:			; XREF: Obj0A_Index
00013DC2 4A68 002C                  		tst.w	$2C(a0)
00013DC6 6600 0000                  		bne.w	loc_13F86
00013DCA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00013DD0 6400 0000                  		bcc.w	locret_1408C
00013DD4 0838 0006 D022             		btst	#6,($FFFFD022).w
00013DDA 6700 0000                  		beq.w	locret_1408C
00013DDE 5368 0038                  		subq.w	#1,$38(a0)
00013DE2 6A00 0000                  		bpl.w	loc_13FAC
00013DE6 317C 003B 0038             		move.w	#59,$38(a0)
00013DEC 317C 0001 0036             		move.w	#1,$36(a0)
00013DF2 4EB9 0000 2992             		jsr	(RandomNumber).l
00013DF8 0240 0001                  		andi.w	#1,d0
00013DFC 1140 0034                  		move.b	d0,$34(a0)
00013E00 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00013E04 0C40 0019                  		cmpi.w	#$19,d0
00013E08 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00013E0A 0C40 0014                  		cmpi.w	#$14,d0
00013E0E 6700                       		beq.s	Obj0A_WarnSound
00013E10 0C40 000F                  		cmpi.w	#$F,d0
00013E14 6700                       		beq.s	Obj0A_WarnSound
00013E16 0C40 000C                  		cmpi.w	#$C,d0
00013E1A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00013E1C 6600                       		bne.s	loc_13F02
00013E1E 303C 0092                  		move.w	#$92,d0
00013E22 4EB9 0000 1374             		jsr	(PlaySound).l	; play countdown music
00013E28                            
00013E28                            loc_13F02:
00013E28 5328 0032                  		subq.b	#1,$32(a0)
00013E2C 6A00                       		bpl.s	Obj0A_ReduceAir
00013E2E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013E34 08E8 0007 0036             		bset	#7,$36(a0)
00013E3A 6000                       		bra.s	Obj0A_ReduceAir
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00013E3C 303C 00C2                  		move.w	#$C2,d0
00013E40 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00013E46                            
00013E46                            Obj0A_ReduceAir:
00013E46 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00013E4A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00013E4E 6100 0000                  		bsr.w	ResumeMusic
00013E52 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00013E58 303C 00B2                  		move.w	#$B2,d0
00013E5C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play drowning sound
00013E62 117C 000A 0034             		move.b	#$A,$34(a0)
00013E68 317C 0001 0036             		move.w	#1,$36(a0)
00013E6E 317C 0078 002C             		move.w	#$78,$2C(a0)
00013E74 2F08                       		move.l	a0,-(sp)
00013E76 41F8 D000                  		lea	($FFFFD000).w,a0
00013E7A 6100 F860                  		bsr.w	Sonic_ResetOnFloor
00013E7E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00013E84 08E8 0001 0022             		bset	#1,$22(a0)
00013E8A 08E8 0007 0002             		bset	#7,2(a0)
00013E90 317C 0000 0012             		move.w	#0,$12(a0)
00013E96 317C 0000 0010             		move.w	#0,$10(a0)
00013E9C 317C 0000 0014             		move.w	#0,$14(a0)
00013EA2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00013EA8 205F                       		movea.l	(sp)+,a0
00013EAA 4E75                       		rts	
00013EAC                            ; ===========================================================================
00013EAC                            
00013EAC                            loc_13F86:
00013EAC 5368 002C                  		subq.w	#1,$2C(a0)
00013EB0 6600                       		bne.s	loc_13F94
00013EB2 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00013EB8 4E75                       		rts	
00013EBA                            ; ===========================================================================
00013EBA                            
00013EBA                            loc_13F94:
00013EBA 2F08                       		move.l	a0,-(sp)
00013EBC 41F8 D000                  		lea	($FFFFD000).w,a0
00013EC0 4EBA 96A2                  		jsr	SpeedToPos
00013EC4 0668 0010 0012             		addi.w	#$10,$12(a0)
00013ECA 205F                       		movea.l	(sp)+,a0
00013ECC 6000                       		bra.s	loc_13FAC
00013ECE                            ; ===========================================================================
00013ECE                            
00013ECE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00013ECE 6000                       		bra.s	Obj0A_MakeItem
00013ED0                            ; ===========================================================================
00013ED0                            
00013ED0                            loc_13FAC:
00013ED0 4A68 0036                  		tst.w	$36(a0)
00013ED4 6700 0000                  		beq.w	locret_1408C
00013ED8 5368 003A                  		subq.w	#1,$3A(a0)
00013EDC 6A00 0000                  		bpl.w	locret_1408C
00013EE0                            
00013EE0                            Obj0A_MakeItem:
00013EE0 4EB9 0000 2992             		jsr	(RandomNumber).l
00013EE6 0240 000F                  		andi.w	#$F,d0
00013EEA 3140 003A                  		move.w	d0,$3A(a0)
00013EEE 4EBA 9B20                  		jsr	SingleObjLoad
00013EF2 6600 0000                  		bne.w	locret_1408C
00013EF6 12BC 000A                  		move.b	#$A,0(a1)	; load object
00013EFA 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00013F00 7006                       		moveq	#6,d0
00013F02 0838 0000 D022             		btst	#0,($FFFFD022).w
00013F08 6700                       		beq.s	loc_13FF2
00013F0A 4440                       		neg.w	d0
00013F0C 137C 0040 0026             		move.b	#$40,$26(a1)
00013F12                            
00013F12                            loc_13FF2:
00013F12 D169 0008                  		add.w	d0,8(a1)
00013F16 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00013F1C 137C 0006 0028             		move.b	#6,$28(a1)
00013F22 4A68 002C                  		tst.w	$2C(a0)
00013F26 6700 0000                  		beq.w	loc_1403E
00013F2A 0268 0007 003A             		andi.w	#7,$3A(a0)
00013F30 0668 0000 003A             		addi.w	#0,$3A(a0)
00013F36 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013F3A 0440 000C                  		subi.w	#$C,d0
00013F3E 3340 000C                  		move.w	d0,$C(a1)
00013F42 4EB9 0000 2992             		jsr	(RandomNumber).l
00013F48 1340 0026                  		move.b	d0,$26(a1)
00013F4C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013F50 0200 0003                  		andi.b	#3,d0
00013F54 6600                       		bne.s	loc_14082
00013F56 137C 000E 0028             		move.b	#$E,$28(a1)
00013F5C 6000                       		bra.s	loc_14082
00013F5E                            ; ===========================================================================
00013F5E                            
00013F5E                            loc_1403E:
00013F5E 0828 0007 0036             		btst	#7,$36(a0)
00013F64 6700                       		beq.s	loc_14082
00013F66 3438 FE14                  		move.w	($FFFFFE14).w,d2
00013F6A E24A                       		lsr.w	#1,d2
00013F6C 4EB9 0000 2992             		jsr	(RandomNumber).l
00013F72 0240 0003                  		andi.w	#3,d0
00013F76 6600                       		bne.s	loc_1406A
00013F78 08E8 0006 0036             		bset	#6,$36(a0)
00013F7E 6600                       		bne.s	loc_14082
00013F80 1342 0028                  		move.b	d2,$28(a1)
00013F84 337C 001C 0038             		move.w	#$1C,$38(a1)
00013F8A                            
00013F8A                            loc_1406A:
00013F8A 4A28 0034                  		tst.b	$34(a0)
00013F8E 6600                       		bne.s	loc_14082
00013F90 08E8 0006 0036             		bset	#6,$36(a0)
00013F96 6600                       		bne.s	loc_14082
00013F98 1342 0028                  		move.b	d2,$28(a1)
00013F9C 337C 001C 0038             		move.w	#$1C,$38(a1)
00013FA2                            
00013FA2                            loc_14082:
00013FA2 5328 0034                  		subq.b	#1,$34(a0)
00013FA6 6A00                       		bpl.s	locret_1408C
00013FA8 4268 0036                  		clr.w	$36(a0)
00013FAC                            
00013FAC                            locret_1408C:
00013FAC 4E75                       		rts	
00013FAE                            
00013FAE                            ; ---------------------------------------------------------------------------
00013FAE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00013FAE                            ; ---------------------------------------------------------------------------
00013FAE                            
00013FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FAE                            
00013FAE                            
00013FAE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00013FAE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013FB4 6200                       		bhi.s	loc_140AC
00013FB6 303C 0082                  		move.w	#$82,d0		; play LZ music
00013FBA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00013FC0 6600                       		bne.s	loc_140A6
00013FC2 303C 0086                  		move.w	#$86,d0		; play SBZ music
00013FC6                            
00013FC6                            loc_140A6:
00013FC6 4EB9 0000 1374             		jsr	(PlaySound).l
00013FCC                            
00013FCC                            loc_140AC:
00013FCC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00013FD2 4238 D372                  		clr.b	($FFFFD372).w
00013FD6 4E75                       		rts	
00013FD8                            ; End of function ResumeMusic
00013FD8                            
00013FD8                            ; ===========================================================================
00013FD8                            Ani_obj0A:
00013FD8                            	include "_anim\obj0A.asm"
00013FD8                            ; ---------------------------------------------------------------------------
00013FD8                            ; Animation script - countdown numbers and bubbles (LZ)
00013FD8                            ; ---------------------------------------------------------------------------
00013FD8 0000                       		dc.w byte_140D6-Ani_obj0A
00013FDA 0000                       		dc.w byte_140E0-Ani_obj0A
00013FDC 0000                       		dc.w byte_140EA-Ani_obj0A
00013FDE 0000                       		dc.w byte_140F4-Ani_obj0A
00013FE0 0000                       		dc.w byte_140FE-Ani_obj0A
00013FE2 0000                       		dc.w byte_14108-Ani_obj0A
00013FE4 0000                       		dc.w byte_14112-Ani_obj0A
00013FE6 0000                       		dc.w byte_14118-Ani_obj0A
00013FE8 0000                       		dc.w byte_14120-Ani_obj0A
00013FEA 0000                       		dc.w byte_14128-Ani_obj0A
00013FEC 0000                       		dc.w byte_14130-Ani_obj0A
00013FEE 0000                       		dc.w byte_14138-Ani_obj0A
00013FF0 0000                       		dc.w byte_14140-Ani_obj0A
00013FF2 0000                       		dc.w byte_14148-Ani_obj0A
00013FF4 0000                       		dc.w byte_1414A-Ani_obj0A
00013FF6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014000 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001400A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014014 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001401E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014028 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014032 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014038 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014040 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014048 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014050 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014058 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014060 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014068 0EFC                       byte_14148:	dc.b $E, $FC
0001406A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014070                            		even
00014070                            		even
00014070                            
00014070                            ; ---------------------------------------------------------------------------
00014070                            ; Sprite mappings - drowning countdown numbers (LZ)
00014070                            ; ---------------------------------------------------------------------------
00014070                            Map_obj0A:
00014070                            	include "_maps\obj0A.asm"
00014070                            ; ---------------------------------------------------------------------------
00014070                            ; Sprite mappings - drowning countdown numbers (LZ)
00014070                            ; ---------------------------------------------------------------------------
00014070 0000                       		dc.w byte_14152-Map_obj0A
00014072 01                         byte_14152:	dc.b 1
00014073 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014078                            		even
00014078                            		even
00014078                            
00014078                            ; ===========================================================================
00014078                            ; ---------------------------------------------------------------------------
00014078                            ; Object 38 - shield and invincibility stars
00014078                            ; ---------------------------------------------------------------------------
00014078                            
00014078                            Obj38:					; XREF: Obj_Index
00014078 7000                       		moveq	#0,d0
0001407A 1028 0024                  		move.b	$24(a0),d0
0001407E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014082 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014086                            ; ===========================================================================
00014086 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014088 0000                       		dc.w Obj38_Shield-Obj38_Index
0001408A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            Obj38_Main:				; XREF: Obj38_Index
0001408C 5428 0024                  		addq.b	#2,$24(a0)
00014090 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014098 117C 0004 0001             		move.b	#4,1(a0)
0001409E 117C 0001 0018             		move.b	#1,$18(a0)
000140A4 117C 0010 0019             		move.b	#$10,$19(a0)
000140AA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000140AE 6600                       		bne.s	Obj38_DoStars	; if not, branch
000140B0 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000140B6 4E75                       		rts	
000140B8                            ; ===========================================================================
000140B8                            
000140B8                            Obj38_DoStars:
000140B8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000140BC 317C 055C 0002             		move.w	#$55C,2(a0)
000140C2 4E75                       		rts	
000140C4                            ; ===========================================================================
000140C4                            
000140C4                            Obj38_Shield:				; XREF: Obj38_Index
000140C4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000140C8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000140CA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000140CE 6700                       		beq.s	Obj38_Delete	; if not, branch
000140D0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000140D6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000140DC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000140E2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000140E8 4EB9 0000 A6B6             		jsr	AnimateSprite
000140EE 4EFA 949A                  		jmp	DisplaySprite
000140F2                            ; ===========================================================================
000140F2                            
000140F2                            Obj38_RmvShield:
000140F2 4E75                       		rts	
000140F4                            ; ===========================================================================
000140F4                            
000140F4                            Obj38_Delete:
000140F4 4EFA 94D0                  		jmp	DeleteObject
000140F8                            ; ===========================================================================
000140F8                            
000140F8                            Obj38_Stars:				; XREF: Obj38_Index
000140F8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000140FC 6700                       		beq.s	Obj38_Delete2	; if not, branch
000140FE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014102 1228 001C                  		move.b	$1C(a0),d1
00014106 5301                       		subq.b	#1,d1
00014108 6000                       		bra.s	Obj38_StarTrail
0001410A                            ; ===========================================================================
0001410A E909                       		lsl.b	#4,d1
0001410C 5801                       		addq.b	#4,d1
0001410E 9001                       		sub.b	d1,d0
00014110 1228 0030                  		move.b	$30(a0),d1
00014114 9001                       		sub.b	d1,d0
00014116 5801                       		addq.b	#4,d1
00014118 0201 000F                  		andi.b	#$F,d1
0001411C 1141 0030                  		move.b	d1,$30(a0)
00014120 6000                       		bra.s	Obj38_StarTrail2a
00014122                            ; ===========================================================================
00014122                            
00014122                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014122 E709                       		lsl.b	#3,d1
00014124 1401                       		move.b	d1,d2
00014126 D201                       		add.b	d1,d1
00014128 D202                       		add.b	d2,d1
0001412A 5801                       		addq.b	#4,d1
0001412C 9001                       		sub.b	d1,d0
0001412E 1228 0030                  		move.b	$30(a0),d1
00014132 9001                       		sub.b	d1,d0
00014134 5801                       		addq.b	#4,d1
00014136 0C01 0018                  		cmpi.b	#$18,d1
0001413A 6500                       		bcs.s	Obj38_StarTrail2
0001413C 7200                       		moveq	#0,d1
0001413E                            
0001413E                            Obj38_StarTrail2:
0001413E 1141 0030                  		move.b	d1,$30(a0)
00014142                            
00014142                            Obj38_StarTrail2a:
00014142 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014146 43F1 0000                  		lea	(a1,d0.w),a1
0001414A 3159 0008                  		move.w	(a1)+,8(a0)
0001414E 3159 000C                  		move.w	(a1)+,$C(a0)
00014152 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014158 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001415E 4EB9 0000 A6B6             		jsr	AnimateSprite
00014164 4EFA 9424                  		jmp	DisplaySprite
00014168                            ; ===========================================================================
00014168                            
00014168                            Obj38_Delete2:				; XREF: Obj38_Stars
00014168 4EFA 945C                  		jmp	DeleteObject
0001416C                            ; ===========================================================================
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            ; Object 4A - special stage entry from beta
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            
0001416C                            Obj4A:					; XREF: Obj_Index
0001416C 7000                       		moveq	#0,d0
0001416E 1028 0024                  		move.b	$24(a0),d0
00014172 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014176 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001417A                            ; ===========================================================================
0001417A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001417C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001417E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014180                            ; ===========================================================================
00014180                            
00014180                            Obj4A_Main:				; XREF: Obj4A_Index
00014180 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014184 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014186 4E75                       		rts	
00014188                            ; ===========================================================================
00014188                            
00014188                            Obj4A_Main2:
00014188 5428 0024                  		addq.b	#2,$24(a0)
0001418C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014194 117C 0004 0001             		move.b	#4,1(a0)
0001419A 117C 0001 0018             		move.b	#1,$18(a0)
000141A0 117C 0038 0019             		move.b	#$38,$19(a0)
000141A6 317C 0541 0002             		move.w	#$541,2(a0)
000141AC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000141B2                            
000141B2                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000141B2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000141B8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000141BE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000141C4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000141CA 4EB9 0000 A6B6             		jsr	AnimateSprite
000141D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000141D6 6600                       		bne.s	Obj4A_Display
000141D8 4A38 D000                  		tst.b	($FFFFD000).w
000141DC 6700                       		beq.s	Obj4A_Display
000141DE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000141E4 303C 00A8                  		move.w	#$A8,d0
000141E8 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000141EE                            
000141EE                            Obj4A_Display:
000141EE 4EFA 939A                  		jmp	DisplaySprite
000141F2                            ; ===========================================================================
000141F2                            
000141F2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000141F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000141F6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000141F8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000141FE 4EFA 93C6                  		jmp	DeleteObject
00014202                            ; ===========================================================================
00014202                            
00014202                            Obj4A_Wait:
00014202 4E75                       		rts	
00014204                            ; ===========================================================================
00014204                            ; ---------------------------------------------------------------------------
00014204                            ; Object 08 - water splash (LZ)
00014204                            ; ---------------------------------------------------------------------------
00014204                            
00014204                            Obj08:					; XREF: Obj_Index
00014204 7000                       		moveq	#0,d0
00014206 1028 0024                  		move.b	$24(a0),d0
0001420A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001420E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014212                            ; ===========================================================================
00014212 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014214 0000                       		dc.w Obj08_Display-Obj08_Index
00014216 0000                       		dc.w Obj08_Delete-Obj08_Index
00014218                            ; ===========================================================================
00014218                            
00014218                            Obj08_Main:				; XREF: Obj08_Index
00014218 5428 0024                  		addq.b	#2,$24(a0)
0001421C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014224 0028 0004 0001             		ori.b	#4,1(a0)
0001422A 117C 0001 0018             		move.b	#1,$18(a0)
00014230 117C 0010 0019             		move.b	#$10,$19(a0)
00014236 317C 4259 0002             		move.w	#$4259,2(a0)
0001423C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014242                            
00014242                            Obj08_Display:				; XREF: Obj08_Index
00014242 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014248 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001424E 4EB9 0000 A6B6             		jsr	AnimateSprite
00014254 4EFA 9334                  		jmp	DisplaySprite
00014258                            ; ===========================================================================
00014258                            
00014258                            Obj08_Delete:				; XREF: Obj08_Index
00014258 4EFA 936C                  		jmp	DeleteObject	; delete when animation	is complete
0001425C                            ; ===========================================================================
0001425C                            Ani_obj38:
0001425C                            	include "_anim\obj38.asm"
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            ; Animation script - shield and invincibility stars
0001425C                            ; ---------------------------------------------------------------------------
0001425C 0000                       		dc.w byte_14356-Ani_obj38
0001425E 0000                       		dc.w byte_1435E-Ani_obj38
00014260 0000                       		dc.w byte_14364-Ani_obj38
00014262 0000                       		dc.w byte_1437E-Ani_obj38
00014264 0000                       		dc.w byte_14398-Ani_obj38
00014266 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001426E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014274 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014285 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001428E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001429F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000142A8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000142B9 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000142C2                            		even
000142C2                            		even
000142C2                            
000142C2                            ; ---------------------------------------------------------------------------
000142C2                            ; Sprite mappings - shield and invincibility stars
000142C2                            ; ---------------------------------------------------------------------------
000142C2                            Map_obj38:
000142C2                            	include "_maps\obj38.asm"
000142C2                            ; ---------------------------------------------------------------------------
000142C2                            ; Sprite mappings - shield and invincibility stars
000142C2                            ; ---------------------------------------------------------------------------
000142C2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000142C6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000142CA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000142CE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000142D2 04                         byte_143C2:	dc.b 4
000142D3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000142D8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000142DD 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000142E2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000142E7 04                         byte_143D7:	dc.b 4
000142E8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000142ED E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000142F2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000142F7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000142FC 04                         byte_143EC:	dc.b 4
000142FD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014302 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014307 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001430C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014311 04                         byte_14401:	dc.b 4
00014312 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014317 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001431C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014321 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014326 04                         byte_14416:	dc.b 4
00014327 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001432C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014331 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014336 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001433B 04                         byte_1442B:	dc.b 4
0001433C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014341 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014346 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0001434B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014350 04                         byte_14440:	dc.b 4
00014351 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014356 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0001435B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014360 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014366 00                         		even
00014366 00                         		even
00014366                            
00014366                            Ani_obj4A:
00014366                            	include "_anim\obj4A.asm"
00014366                            ; ---------------------------------------------------------------------------
00014366                            ; Animation script - special stage entry effect from beta
00014366                            ; ---------------------------------------------------------------------------
00014366 0000                       		dc.w byte_14458-Ani_obj4A
00014368 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001437C                            		even
0001437C                            		even
0001437C                            
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Sprite mappings - special stage entry	from beta
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            Map_obj4A:
0001437C                            	include "_maps\obj4A.asm"
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Sprite mappings - special stage entry	from beta
0001437C                            ; ---------------------------------------------------------------------------
0001437C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014380 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014384 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014388 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001438C 03                         byte_1447C:	dc.b 3
0001438D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014392 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014397 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001439C 03                         byte_1448C:	dc.b 3
0001439D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000143A2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000143A7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000143AC 05                         byte_1449C:	dc.b 5
000143AD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000143B2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000143B7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000143BC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000143C1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000143C6 09                         byte_144B6:	dc.b 9
000143C7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000143CC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000143D1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000143D6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000143DB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000143E0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000143E5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000143EA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000143EF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000143F4 12                         byte_144E4:	dc.b $12
000143F5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000143FA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000143FF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014404 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014409 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001440E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014413 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014418 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001441D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014422 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014427 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001442C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014431 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014436 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001443B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014440 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014445 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001444A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001444F 11                         byte_1453F:	dc.b $11
00014450 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014455 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001445A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001445F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014464 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014469 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001446E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014473 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014478 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001447D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014482 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014487 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001448C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014491 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014496 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001449B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000144A0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000144A5 09                         byte_14595:	dc.b 9
000144A6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000144AB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000144B0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000144B5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000144BA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000144BF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000144C4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000144C9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000144CE 04                         		dc.b 4
000144CF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000144D4                            		even
000144D4                            		even
000144D4                            
000144D4                            Ani_obj08:
000144D4                            	include "_anim\obj08.asm"
000144D4                            ; ---------------------------------------------------------------------------
000144D4                            ; Animation script - water splash (LZ)
000144D4                            ; ---------------------------------------------------------------------------
000144D4 0000                       		dc.w byte_145C6-Ani_obj08
000144D6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000144DC                            		even
000144DC                            		even
000144DC                            
000144DC                            ; ---------------------------------------------------------------------------
000144DC                            ; Sprite mappings - water splash (LZ)
000144DC                            ; ---------------------------------------------------------------------------
000144DC                            Map_obj08:
000144DC                            	include "_maps\obj08.asm"
000144DC                            ; ---------------------------------------------------------------------------
000144DC                            ; Sprite mappings - water splash (LZ)
000144DC                            ; ---------------------------------------------------------------------------
000144DC 0000                       		dc.w byte_145D2-Map_obj08
000144DE 0000                       		dc.w byte_145DD-Map_obj08
000144E0 0000                       		dc.w byte_145E8-Map_obj08
000144E2 02                         byte_145D2:	dc.b 2
000144E3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000144E8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000144ED 02                         byte_145DD:	dc.b 2
000144EE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000144F3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000144F8 01                         byte_145E8:	dc.b 1
000144F9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000144FE                            		even
000144FE                            		even
000144FE                            
000144FE                            ; ---------------------------------------------------------------------------
000144FE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000144FE                            ; ---------------------------------------------------------------------------
000144FE                            
000144FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144FE                            
000144FE                            
000144FE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000144FE 0828 0003 0022             		btst	#3,$22(a0)
00014504 6700                       		beq.s	loc_14602
00014506 7000                       		moveq	#0,d0
00014508 11C0 F768                  		move.b	d0,($FFFFF768).w
0001450C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014510 4E75                       		rts	
00014512                            ; ===========================================================================
00014512                            
00014512                            loc_14602:
00014512 7003                       		moveq	#3,d0
00014514 11C0 F768                  		move.b	d0,($FFFFF768).w
00014518 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001451C 1028 0026                  		move.b	$26(a0),d0
00014520 0600 0020                  		addi.b	#$20,d0
00014524 6A00                       		bpl.s	loc_14624
00014526 1028 0026                  		move.b	$26(a0),d0
0001452A 6A00                       		bpl.s	loc_1461E
0001452C 5300                       		subq.b	#1,d0
0001452E                            
0001452E                            loc_1461E:
0001452E 0600 0020                  		addi.b	#$20,d0
00014532 6000                       		bra.s	loc_14630
00014534                            ; ===========================================================================
00014534                            
00014534                            loc_14624:
00014534 1028 0026                  		move.b	$26(a0),d0
00014538 6A00                       		bpl.s	loc_1462C
0001453A 5200                       		addq.b	#1,d0
0001453C                            
0001453C                            loc_1462C:
0001453C 0600 001F                  		addi.b	#$1F,d0
00014540                            
00014540                            loc_14630:
00014540 0200 00C0                  		andi.b	#$C0,d0
00014544 0C00 0040                  		cmpi.b	#$40,d0
00014548 6700 0000                  		beq.w	Sonic_WalkVertL
0001454C 0C00 0080                  		cmpi.b	#$80,d0
00014550 6700 0000                  		beq.w	Sonic_WalkCeiling
00014554 0C00 00C0                  		cmpi.b	#$C0,d0
00014558 6700 0000                  		beq.w	Sonic_WalkVertR
0001455C 3428 000C                  		move.w	$C(a0),d2
00014560 3628 0008                  		move.w	8(a0),d3
00014564 7000                       		moveq	#0,d0
00014566 1028 0016                  		move.b	$16(a0),d0
0001456A 4880                       		ext.w	d0
0001456C D440                       		add.w	d0,d2
0001456E 1028 0017                  		move.b	$17(a0),d0
00014572 4880                       		ext.w	d0
00014574 D640                       		add.w	d0,d3
00014576 49F8 F768                  		lea	($FFFFF768).w,a4
0001457A 367C 0010                  		movea.w	#$10,a3
0001457E 3C3C 0000                  		move.w	#0,d6
00014582 7A0D                       		moveq	#$D,d5
00014584 6100 0000                  		bsr.w	FindFloor
00014588 3F01                       		move.w	d1,-(sp)
0001458A 3428 000C                  		move.w	$C(a0),d2
0001458E 3628 0008                  		move.w	8(a0),d3
00014592 7000                       		moveq	#0,d0
00014594 1028 0016                  		move.b	$16(a0),d0
00014598 4880                       		ext.w	d0
0001459A D440                       		add.w	d0,d2
0001459C 1028 0017                  		move.b	$17(a0),d0
000145A0 4880                       		ext.w	d0
000145A2 4440                       		neg.w	d0
000145A4 D640                       		add.w	d0,d3
000145A6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000145AA 367C 0010                  		movea.w	#$10,a3
000145AE 3C3C 0000                  		move.w	#0,d6
000145B2 7A0D                       		moveq	#$D,d5
000145B4 6100 0000                  		bsr.w	FindFloor
000145B8 301F                       		move.w	(sp)+,d0
000145BA 6100 0000                  		bsr.w	Sonic_Angle
000145BE 4A41                       		tst.w	d1
000145C0 6700                       		beq.s	locret_146BE
000145C2 6A00                       		bpl.s	loc_146C0
000145C4 0C41 FFF2                  		cmpi.w	#-$E,d1
000145C8 6D00                       		blt.s	locret_146E6
000145CA D368 000C                  		add.w	d1,$C(a0)
000145CE                            
000145CE                            locret_146BE:
000145CE 4E75                       		rts	
000145D0                            ; ===========================================================================
000145D0                            
000145D0                            loc_146C0:
000145D0 0C41 000E                  		cmpi.w	#$E,d1
000145D4 6E00                       		bgt.s	loc_146CC
000145D6                            
000145D6                            loc_146C6:
000145D6 D368 000C                  		add.w	d1,$C(a0)
000145DA 4E75                       		rts	
000145DC                            ; ===========================================================================
000145DC                            
000145DC                            loc_146CC:
000145DC 4A28 0038                  		tst.b	$38(a0)
000145E0 66F4                       		bne.s	loc_146C6
000145E2 08E8 0001 0022             		bset	#1,$22(a0)
000145E8 08A8 0005 0022             		bclr	#5,$22(a0)
000145EE 117C 0001 001D             		move.b	#1,$1D(a0)
000145F4 4E75                       		rts	
000145F6                            ; ===========================================================================
000145F6                            
000145F6                            locret_146E6:
000145F6 4E75                       		rts	
000145F8                            ; End of function Sonic_AnglePos
000145F8                            
000145F8                            ; ===========================================================================
000145F8 2428 0008                  		move.l	8(a0),d2
000145FC 3028 0010                  		move.w	$10(a0),d0
00014600 48C0                       		ext.l	d0
00014602 E180                       		asl.l	#8,d0
00014604 9480                       		sub.l	d0,d2
00014606 2142 0008                  		move.l	d2,8(a0)
0001460A 303C 0038                  		move.w	#$38,d0
0001460E 48C0                       		ext.l	d0
00014610 E180                       		asl.l	#8,d0
00014612 9680                       		sub.l	d0,d3
00014614 2143 000C                  		move.l	d3,$C(a0)
00014618 4E75                       		rts	
0001461A                            ; ===========================================================================
0001461A                            
0001461A                            locret_1470A:
0001461A 4E75                       		rts	
0001461C                            ; ===========================================================================
0001461C 2628 000C                  		move.l	$C(a0),d3
00014620 3028 0012                  		move.w	$12(a0),d0
00014624 0440 0038                  		subi.w	#$38,d0
00014628 3140 0012                  		move.w	d0,$12(a0)
0001462C 48C0                       		ext.l	d0
0001462E E180                       		asl.l	#8,d0
00014630 9680                       		sub.l	d0,d3
00014632 2143 000C                  		move.l	d3,$C(a0)
00014636 4E75                       		rts	
00014638 4E75                       		rts	
0001463A                            ; ===========================================================================
0001463A 2428 0008                  		move.l	8(a0),d2
0001463E 2628 000C                  		move.l	$C(a0),d3
00014642 3028 0010                  		move.w	$10(a0),d0
00014646 48C0                       		ext.l	d0
00014648 E180                       		asl.l	#8,d0
0001464A 9480                       		sub.l	d0,d2
0001464C 3028 0012                  		move.w	$12(a0),d0
00014650 48C0                       		ext.l	d0
00014652 E180                       		asl.l	#8,d0
00014654 9680                       		sub.l	d0,d3
00014656 2142 0008                  		move.l	d2,8(a0)
0001465A 2143 000C                  		move.l	d3,$C(a0)
0001465E 4E75                       		rts	
00014660                            
00014660                            ; ---------------------------------------------------------------------------
00014660                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014660                            ; ---------------------------------------------------------------------------
00014660                            
00014660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014660                            
00014660                            
00014660                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014660 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014664 B240                       		cmp.w	d0,d1
00014666 6F00                       		ble.s	loc_1475E
00014668 1438 F768                  		move.b	($FFFFF768).w,d2
0001466C 3200                       		move.w	d0,d1
0001466E                            
0001466E                            loc_1475E:
0001466E 0802 0000                  		btst	#0,d2
00014672 6600                       		bne.s	loc_1476A
00014674 1142 0026                  		move.b	d2,$26(a0)
00014678 4E75                       		rts	
0001467A                            ; ===========================================================================
0001467A                            
0001467A                            loc_1476A:
0001467A 1428 0026                  		move.b	$26(a0),d2
0001467E 0602 0020                  		addi.b	#$20,d2
00014682 0202 00C0                  		andi.b	#$C0,d2
00014686 1142 0026                  		move.b	d2,$26(a0)
0001468A 4E75                       		rts	
0001468C                            ; End of function Sonic_Angle
0001468C                            
0001468C                            ; ---------------------------------------------------------------------------
0001468C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001468C                            ; ---------------------------------------------------------------------------
0001468C                            
0001468C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001468C                            
0001468C                            
0001468C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001468C 3428 000C                  		move.w	$C(a0),d2
00014690 3628 0008                  		move.w	8(a0),d3
00014694 7000                       		moveq	#0,d0
00014696 1028 0017                  		move.b	$17(a0),d0
0001469A 4880                       		ext.w	d0
0001469C 4440                       		neg.w	d0
0001469E D440                       		add.w	d0,d2
000146A0 1028 0016                  		move.b	$16(a0),d0
000146A4 4880                       		ext.w	d0
000146A6 D640                       		add.w	d0,d3
000146A8 49F8 F768                  		lea	($FFFFF768).w,a4
000146AC 367C 0010                  		movea.w	#$10,a3
000146B0 3C3C 0000                  		move.w	#0,d6
000146B4 7A0D                       		moveq	#$D,d5
000146B6 6100 0000                  		bsr.w	FindWall
000146BA 3F01                       		move.w	d1,-(sp)
000146BC 3428 000C                  		move.w	$C(a0),d2
000146C0 3628 0008                  		move.w	8(a0),d3
000146C4 7000                       		moveq	#0,d0
000146C6 1028 0017                  		move.b	$17(a0),d0
000146CA 4880                       		ext.w	d0
000146CC D440                       		add.w	d0,d2
000146CE 1028 0016                  		move.b	$16(a0),d0
000146D2 4880                       		ext.w	d0
000146D4 D640                       		add.w	d0,d3
000146D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000146DA 367C 0010                  		movea.w	#$10,a3
000146DE 3C3C 0000                  		move.w	#0,d6
000146E2 7A0D                       		moveq	#$D,d5
000146E4 6100 0000                  		bsr.w	FindWall
000146E8 301F                       		move.w	(sp)+,d0
000146EA 6100 FF74                  		bsr.w	Sonic_Angle
000146EE 4A41                       		tst.w	d1
000146F0 6700                       		beq.s	locret_147F0
000146F2 6A00                       		bpl.s	loc_147F2
000146F4 0C41 FFF2                  		cmpi.w	#-$E,d1
000146F8 6D00 FF20                  		blt.w	locret_1470A
000146FC D368 0008                  		add.w	d1,8(a0)
00014700                            
00014700                            locret_147F0:
00014700 4E75                       		rts	
00014702                            ; ===========================================================================
00014702                            
00014702                            loc_147F2:
00014702 0C41 000E                  		cmpi.w	#$E,d1
00014706 6E00                       		bgt.s	loc_147FE
00014708                            
00014708                            loc_147F8:
00014708 D368 0008                  		add.w	d1,8(a0)
0001470C 4E75                       		rts	
0001470E                            ; ===========================================================================
0001470E                            
0001470E                            loc_147FE:
0001470E 4A28 0038                  		tst.b	$38(a0)
00014712 66F4                       		bne.s	loc_147F8
00014714 08E8 0001 0022             		bset	#1,$22(a0)
0001471A 08A8 0005 0022             		bclr	#5,$22(a0)
00014720 117C 0001 001D             		move.b	#1,$1D(a0)
00014726 4E75                       		rts	
00014728                            ; End of function Sonic_WalkVertR
00014728                            
00014728                            ; ---------------------------------------------------------------------------
00014728                            ; Subroutine allowing Sonic to walk upside-down
00014728                            ; ---------------------------------------------------------------------------
00014728                            
00014728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014728                            
00014728                            
00014728                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014728 3428 000C                  		move.w	$C(a0),d2
0001472C 3628 0008                  		move.w	8(a0),d3
00014730 7000                       		moveq	#0,d0
00014732 1028 0016                  		move.b	$16(a0),d0
00014736 4880                       		ext.w	d0
00014738 9440                       		sub.w	d0,d2
0001473A 0A42 000F                  		eori.w	#$F,d2
0001473E 1028 0017                  		move.b	$17(a0),d0
00014742 4880                       		ext.w	d0
00014744 D640                       		add.w	d0,d3
00014746 49F8 F768                  		lea	($FFFFF768).w,a4
0001474A 367C FFF0                  		movea.w	#-$10,a3
0001474E 3C3C 1000                  		move.w	#$1000,d6
00014752 7A0D                       		moveq	#$D,d5
00014754 6100 0000                  		bsr.w	FindFloor
00014758 3F01                       		move.w	d1,-(sp)
0001475A 3428 000C                  		move.w	$C(a0),d2
0001475E 3628 0008                  		move.w	8(a0),d3
00014762 7000                       		moveq	#0,d0
00014764 1028 0016                  		move.b	$16(a0),d0
00014768 4880                       		ext.w	d0
0001476A 9440                       		sub.w	d0,d2
0001476C 0A42 000F                  		eori.w	#$F,d2
00014770 1028 0017                  		move.b	$17(a0),d0
00014774 4880                       		ext.w	d0
00014776 9640                       		sub.w	d0,d3
00014778 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001477C 367C FFF0                  		movea.w	#-$10,a3
00014780 3C3C 1000                  		move.w	#$1000,d6
00014784 7A0D                       		moveq	#$D,d5
00014786 6100 0000                  		bsr.w	FindFloor
0001478A 301F                       		move.w	(sp)+,d0
0001478C 6100 FED2                  		bsr.w	Sonic_Angle
00014790 4A41                       		tst.w	d1
00014792 6700                       		beq.s	locret_14892
00014794 6A00                       		bpl.s	loc_14894
00014796 0C41 FFF2                  		cmpi.w	#-$E,d1
0001479A 6D00 FE5A                  		blt.w	locret_146E6
0001479E 9368 000C                  		sub.w	d1,$C(a0)
000147A2                            
000147A2                            locret_14892:
000147A2 4E75                       		rts	
000147A4                            ; ===========================================================================
000147A4                            
000147A4                            loc_14894:
000147A4 0C41 000E                  		cmpi.w	#$E,d1
000147A8 6E00                       		bgt.s	loc_148A0
000147AA                            
000147AA                            loc_1489A:
000147AA 9368 000C                  		sub.w	d1,$C(a0)
000147AE 4E75                       		rts	
000147B0                            ; ===========================================================================
000147B0                            
000147B0                            loc_148A0:
000147B0 4A28 0038                  		tst.b	$38(a0)
000147B4 66F4                       		bne.s	loc_1489A
000147B6 08E8 0001 0022             		bset	#1,$22(a0)
000147BC 08A8 0005 0022             		bclr	#5,$22(a0)
000147C2 117C 0001 001D             		move.b	#1,$1D(a0)
000147C8 4E75                       		rts	
000147CA                            ; End of function Sonic_WalkCeiling
000147CA                            
000147CA                            ; ---------------------------------------------------------------------------
000147CA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000147CA                            ; ---------------------------------------------------------------------------
000147CA                            
000147CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147CA                            
000147CA                            
000147CA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000147CA 3428 000C                  		move.w	$C(a0),d2
000147CE 3628 0008                  		move.w	8(a0),d3
000147D2 7000                       		moveq	#0,d0
000147D4 1028 0017                  		move.b	$17(a0),d0
000147D8 4880                       		ext.w	d0
000147DA 9440                       		sub.w	d0,d2
000147DC 1028 0016                  		move.b	$16(a0),d0
000147E0 4880                       		ext.w	d0
000147E2 9640                       		sub.w	d0,d3
000147E4 0A43 000F                  		eori.w	#$F,d3
000147E8 49F8 F768                  		lea	($FFFFF768).w,a4
000147EC 367C FFF0                  		movea.w	#-$10,a3
000147F0 3C3C 0800                  		move.w	#$800,d6
000147F4 7A0D                       		moveq	#$D,d5
000147F6 6100 0000                  		bsr.w	FindWall
000147FA 3F01                       		move.w	d1,-(sp)
000147FC 3428 000C                  		move.w	$C(a0),d2
00014800 3628 0008                  		move.w	8(a0),d3
00014804 7000                       		moveq	#0,d0
00014806 1028 0017                  		move.b	$17(a0),d0
0001480A 4880                       		ext.w	d0
0001480C D440                       		add.w	d0,d2
0001480E 1028 0016                  		move.b	$16(a0),d0
00014812 4880                       		ext.w	d0
00014814 9640                       		sub.w	d0,d3
00014816 0A43 000F                  		eori.w	#$F,d3
0001481A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001481E 367C FFF0                  		movea.w	#-$10,a3
00014822 3C3C 0800                  		move.w	#$800,d6
00014826 7A0D                       		moveq	#$D,d5
00014828 6100 0000                  		bsr.w	FindWall
0001482C 301F                       		move.w	(sp)+,d0
0001482E 6100 FE30                  		bsr.w	Sonic_Angle
00014832 4A41                       		tst.w	d1
00014834 6700                       		beq.s	locret_14934
00014836 6A00                       		bpl.s	loc_14936
00014838 0C41 FFF2                  		cmpi.w	#-$E,d1
0001483C 6D00 FDDC                  		blt.w	locret_1470A
00014840 9368 0008                  		sub.w	d1,8(a0)
00014844                            
00014844                            locret_14934:
00014844 4E75                       		rts	
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_14936:
00014846 0C41 000E                  		cmpi.w	#$E,d1
0001484A 6E00                       		bgt.s	loc_14942
0001484C                            
0001484C                            loc_1493C:
0001484C 9368 0008                  		sub.w	d1,8(a0)
00014850 4E75                       		rts	
00014852                            ; ===========================================================================
00014852                            
00014852                            loc_14942:
00014852 4A28 0038                  		tst.b	$38(a0)
00014856 66F4                       		bne.s	loc_1493C
00014858 08E8 0001 0022             		bset	#1,$22(a0)
0001485E 08A8 0005 0022             		bclr	#5,$22(a0)
00014864 117C 0001 001D             		move.b	#1,$1D(a0)
0001486A 4E75                       		rts	
0001486C                            ; End of function Sonic_WalkVertL
0001486C                            
0001486C                            ; ---------------------------------------------------------------------------
0001486C                            ; Subroutine to	find which tile	the object is standing on
0001486C                            ; ---------------------------------------------------------------------------
0001486C                            
0001486C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001486C                            
0001486C                            
0001486C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001486C 3002                       		move.w	d2,d0
0001486E E248                       		lsr.w	#1,d0
00014870 0240 0380                  		andi.w	#$380,d0
00014874 3203                       		move.w	d3,d1
00014876 E049                       		lsr.w	#8,d1
00014878 0241 007F                  		andi.w	#$7F,d1
0001487C D041                       		add.w	d1,d0
0001487E 72FF                       		moveq	#-1,d1
00014880 43F8 A400                  		lea	($FFFFA400).w,a1
00014884 1231 0000                  		move.b	(a1,d0.w),d1
00014888 6700                       		beq.s	loc_14996
0001488A 6B00                       		bmi.s	loc_1499A
0001488C 5301                       		subq.b	#1,d1
0001488E 4881                       		ext.w	d1
00014890 EE59                       		ror.w	#7,d1
00014892 3002                       		move.w	d2,d0
00014894 D040                       		add.w	d0,d0
00014896 0240 01E0                  		andi.w	#$1E0,d0
0001489A D240                       		add.w	d0,d1
0001489C 3003                       		move.w	d3,d0
0001489E E648                       		lsr.w	#3,d0
000148A0 0240 001E                  		andi.w	#$1E,d0
000148A4 D240                       		add.w	d0,d1
000148A6                            
000148A6                            loc_14996:
000148A6 2241                       		movea.l	d1,a1
000148A8 4E75                       		rts	
000148AA                            ; ===========================================================================
000148AA                            
000148AA                            loc_1499A:
000148AA 0241 007F                  		andi.w	#$7F,d1
000148AE 0828 0006 0001             		btst	#6,1(a0)
000148B4 6700                       		beq.s	loc_149B2
000148B6 5241                       		addq.w	#1,d1
000148B8 0C41 0029                  		cmpi.w	#$29,d1
000148BC 6600                       		bne.s	loc_149B2
000148BE 323C 0051                  		move.w	#$51,d1
000148C2                            
000148C2                            loc_149B2:
000148C2 5301                       		subq.b	#1,d1
000148C4 EE59                       		ror.w	#7,d1
000148C6 3002                       		move.w	d2,d0
000148C8 D040                       		add.w	d0,d0
000148CA 0240 01E0                  		andi.w	#$1E0,d0
000148CE D240                       		add.w	d0,d1
000148D0 3003                       		move.w	d3,d0
000148D2 E648                       		lsr.w	#3,d0
000148D4 0240 001E                  		andi.w	#$1E,d0
000148D8 D240                       		add.w	d0,d1
000148DA 2241                       		movea.l	d1,a1
000148DC 4E75                       		rts	
000148DE                            ; End of function Floor_ChkTile
000148DE                            
000148DE                            
000148DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148DE                            
000148DE                            
000148DE                            FindFloor:				; XREF: Sonic_AnglePos; et al
000148DE 618C                       		bsr.s	Floor_ChkTile
000148E0 3011                       		move.w	(a1),d0
000148E2 3800                       		move.w	d0,d4
000148E4 0240 07FF                  		andi.w	#$7FF,d0
000148E8 6700                       		beq.s	loc_149DE
000148EA 0B04                       		btst	d5,d4
000148EC 6600                       		bne.s	loc_149EC
000148EE                            
000148EE                            loc_149DE:
000148EE D44B                       		add.w	a3,d2
000148F0 6100 0000                  		bsr.w	FindFloor2
000148F4 944B                       		sub.w	a3,d2
000148F6 0641 0010                  		addi.w	#$10,d1
000148FA 4E75                       		rts	
000148FC                            ; ===========================================================================
000148FC                            
000148FC                            loc_149EC:
000148FC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014900 1032 0000                  		move.b	(a2,d0.w),d0
00014904 0240 00FF                  		andi.w	#$FF,d0
00014908 67E4                       		beq.s	loc_149DE
0001490A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014910 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014914 E948                       		lsl.w	#4,d0
00014916 3203                       		move.w	d3,d1
00014918 0804 000B                  		btst	#$B,d4
0001491C 6700                       		beq.s	loc_14A12
0001491E 4641                       		not.w	d1
00014920 4414                       		neg.b	(a4)
00014922                            
00014922                            loc_14A12:
00014922 0804 000C                  		btst	#$C,d4
00014926 6700                       		beq.s	loc_14A22
00014928 0614 0040                  		addi.b	#$40,(a4)
0001492C 4414                       		neg.b	(a4)
0001492E 0414 0040                  		subi.b	#$40,(a4)
00014932                            
00014932                            loc_14A22:
00014932 0241 000F                  		andi.w	#$F,d1
00014936 D240                       		add.w	d0,d1
00014938 45F9 0000 0000             		lea	(CollArray1).l,a2
0001493E 1032 1000                  		move.b	(a2,d1.w),d0
00014942 4880                       		ext.w	d0
00014944 BD44                       		eor.w	d6,d4
00014946 0804 000C                  		btst	#$C,d4
0001494A 6700                       		beq.s	loc_14A3E
0001494C 4440                       		neg.w	d0
0001494E                            
0001494E                            loc_14A3E:
0001494E 4A40                       		tst.w	d0
00014950 679C                       		beq.s	loc_149DE
00014952 6B00                       		bmi.s	loc_14A5A
00014954 0C00 0010                  		cmpi.b	#$10,d0
00014958 6700                       		beq.s	loc_14A66
0001495A 3202                       		move.w	d2,d1
0001495C 0241 000F                  		andi.w	#$F,d1
00014960 D041                       		add.w	d1,d0
00014962 323C 000F                  		move.w	#$F,d1
00014966 9240                       		sub.w	d0,d1
00014968 4E75                       		rts	
0001496A                            ; ===========================================================================
0001496A                            
0001496A                            loc_14A5A:
0001496A 3202                       		move.w	d2,d1
0001496C 0241 000F                  		andi.w	#$F,d1
00014970 D041                       		add.w	d1,d0
00014972 6A00 FF7A                  		bpl.w	loc_149DE
00014976                            
00014976                            loc_14A66:
00014976 944B                       		sub.w	a3,d2
00014978 6100 0000                  		bsr.w	FindFloor2
0001497C D44B                       		add.w	a3,d2
0001497E 0441 0010                  		subi.w	#$10,d1
00014982 4E75                       		rts	
00014984                            ; End of function FindFloor
00014984                            
00014984                            
00014984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014984                            
00014984                            
00014984                            FindFloor2:				; XREF: FindFloor
00014984 6100 FEE6                  		bsr.w	Floor_ChkTile
00014988 3011                       		move.w	(a1),d0
0001498A 3800                       		move.w	d0,d4
0001498C 0240 07FF                  		andi.w	#$7FF,d0
00014990 6700                       		beq.s	loc_14A86
00014992 0B04                       		btst	d5,d4
00014994 6600                       		bne.s	loc_14A94
00014996                            
00014996                            loc_14A86:
00014996 323C 000F                  		move.w	#$F,d1
0001499A 3002                       		move.w	d2,d0
0001499C 0240 000F                  		andi.w	#$F,d0
000149A0 9240                       		sub.w	d0,d1
000149A2 4E75                       		rts	
000149A4                            ; ===========================================================================
000149A4                            
000149A4                            loc_14A94:
000149A4 2478 F796                  		movea.l	($FFFFF796).w,a2
000149A8 1032 0000                  		move.b	(a2,d0.w),d0
000149AC 0240 00FF                  		andi.w	#$FF,d0
000149B0 67E4                       		beq.s	loc_14A86
000149B2 45F9 0000 0000             		lea	(AngleMap).l,a2
000149B8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000149BC E948                       		lsl.w	#4,d0
000149BE 3203                       		move.w	d3,d1
000149C0 0804 000B                  		btst	#$B,d4
000149C4 6700                       		beq.s	loc_14ABA
000149C6 4641                       		not.w	d1
000149C8 4414                       		neg.b	(a4)
000149CA                            
000149CA                            loc_14ABA:
000149CA 0804 000C                  		btst	#$C,d4
000149CE 6700                       		beq.s	loc_14ACA
000149D0 0614 0040                  		addi.b	#$40,(a4)
000149D4 4414                       		neg.b	(a4)
000149D6 0414 0040                  		subi.b	#$40,(a4)
000149DA                            
000149DA                            loc_14ACA:
000149DA 0241 000F                  		andi.w	#$F,d1
000149DE D240                       		add.w	d0,d1
000149E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000149E6 1032 1000                  		move.b	(a2,d1.w),d0
000149EA 4880                       		ext.w	d0
000149EC BD44                       		eor.w	d6,d4
000149EE 0804 000C                  		btst	#$C,d4
000149F2 6700                       		beq.s	loc_14AE6
000149F4 4440                       		neg.w	d0
000149F6                            
000149F6                            loc_14AE6:
000149F6 4A40                       		tst.w	d0
000149F8 679C                       		beq.s	loc_14A86
000149FA 6B00                       		bmi.s	loc_14AFC
000149FC 3202                       		move.w	d2,d1
000149FE 0241 000F                  		andi.w	#$F,d1
00014A02 D041                       		add.w	d1,d0
00014A04 323C 000F                  		move.w	#$F,d1
00014A08 9240                       		sub.w	d0,d1
00014A0A 4E75                       		rts	
00014A0C                            ; ===========================================================================
00014A0C                            
00014A0C                            loc_14AFC:
00014A0C 3202                       		move.w	d2,d1
00014A0E 0241 000F                  		andi.w	#$F,d1
00014A12 D041                       		add.w	d1,d0
00014A14 6A00 FF80                  		bpl.w	loc_14A86
00014A18 4641                       		not.w	d1
00014A1A 4E75                       		rts	
00014A1C                            ; End of function FindFloor2
00014A1C                            
00014A1C                            
00014A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A1C                            
00014A1C                            
00014A1C                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014A1C 6100 FE4E                  		bsr.w	Floor_ChkTile
00014A20 3011                       		move.w	(a1),d0
00014A22 3800                       		move.w	d0,d4
00014A24 0240 07FF                  		andi.w	#$7FF,d0
00014A28 6700                       		beq.s	loc_14B1E
00014A2A 0B04                       		btst	d5,d4
00014A2C 6600                       		bne.s	loc_14B2C
00014A2E                            
00014A2E                            loc_14B1E:
00014A2E D64B                       		add.w	a3,d3
00014A30 6100 0000                  		bsr.w	FindWall2
00014A34 964B                       		sub.w	a3,d3
00014A36 0641 0010                  		addi.w	#$10,d1
00014A3A 4E75                       		rts	
00014A3C                            ; ===========================================================================
00014A3C                            
00014A3C                            loc_14B2C:
00014A3C 2478 F796                  		movea.l	($FFFFF796).w,a2
00014A40 1032 0000                  		move.b	(a2,d0.w),d0
00014A44 0240 00FF                  		andi.w	#$FF,d0
00014A48 67E4                       		beq.s	loc_14B1E
00014A4A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014A50 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014A54 E948                       		lsl.w	#4,d0
00014A56 3202                       		move.w	d2,d1
00014A58 0804 000C                  		btst	#$C,d4
00014A5C 6700                       		beq.s	loc_14B5A
00014A5E 4641                       		not.w	d1
00014A60 0614 0040                  		addi.b	#$40,(a4)
00014A64 4414                       		neg.b	(a4)
00014A66 0414 0040                  		subi.b	#$40,(a4)
00014A6A                            
00014A6A                            loc_14B5A:
00014A6A 0804 000B                  		btst	#$B,d4
00014A6E 6700                       		beq.s	loc_14B62
00014A70 4414                       		neg.b	(a4)
00014A72                            
00014A72                            loc_14B62:
00014A72 0241 000F                  		andi.w	#$F,d1
00014A76 D240                       		add.w	d0,d1
00014A78 45F9 0000 0000             		lea	(CollArray2).l,a2
00014A7E 1032 1000                  		move.b	(a2,d1.w),d0
00014A82 4880                       		ext.w	d0
00014A84 BD44                       		eor.w	d6,d4
00014A86 0804 000B                  		btst	#$B,d4
00014A8A 6700                       		beq.s	loc_14B7E
00014A8C 4440                       		neg.w	d0
00014A8E                            
00014A8E                            loc_14B7E:
00014A8E 4A40                       		tst.w	d0
00014A90 679C                       		beq.s	loc_14B1E
00014A92 6B00                       		bmi.s	loc_14B9A
00014A94 0C00 0010                  		cmpi.b	#$10,d0
00014A98 6700                       		beq.s	loc_14BA6
00014A9A 3203                       		move.w	d3,d1
00014A9C 0241 000F                  		andi.w	#$F,d1
00014AA0 D041                       		add.w	d1,d0
00014AA2 323C 000F                  		move.w	#$F,d1
00014AA6 9240                       		sub.w	d0,d1
00014AA8 4E75                       		rts	
00014AAA                            ; ===========================================================================
00014AAA                            
00014AAA                            loc_14B9A:
00014AAA 3203                       		move.w	d3,d1
00014AAC 0241 000F                  		andi.w	#$F,d1
00014AB0 D041                       		add.w	d1,d0
00014AB2 6A00 FF7A                  		bpl.w	loc_14B1E
00014AB6                            
00014AB6                            loc_14BA6:
00014AB6 964B                       		sub.w	a3,d3
00014AB8 6100 0000                  		bsr.w	FindWall2
00014ABC D64B                       		add.w	a3,d3
00014ABE 0441 0010                  		subi.w	#$10,d1
00014AC2 4E75                       		rts	
00014AC4                            ; End of function FindWall
00014AC4                            
00014AC4                            
00014AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AC4                            
00014AC4                            
00014AC4                            FindWall2:				; XREF: FindWall
00014AC4 6100 FDA6                  		bsr.w	Floor_ChkTile
00014AC8 3011                       		move.w	(a1),d0
00014ACA 3800                       		move.w	d0,d4
00014ACC 0240 07FF                  		andi.w	#$7FF,d0
00014AD0 6700                       		beq.s	loc_14BC6
00014AD2 0B04                       		btst	d5,d4
00014AD4 6600                       		bne.s	loc_14BD4
00014AD6                            
00014AD6                            loc_14BC6:
00014AD6 323C 000F                  		move.w	#$F,d1
00014ADA 3003                       		move.w	d3,d0
00014ADC 0240 000F                  		andi.w	#$F,d0
00014AE0 9240                       		sub.w	d0,d1
00014AE2 4E75                       		rts	
00014AE4                            ; ===========================================================================
00014AE4                            
00014AE4                            loc_14BD4:
00014AE4 2478 F796                  		movea.l	($FFFFF796).w,a2
00014AE8 1032 0000                  		move.b	(a2,d0.w),d0
00014AEC 0240 00FF                  		andi.w	#$FF,d0
00014AF0 67E4                       		beq.s	loc_14BC6
00014AF2 45F9 0000 0000             		lea	(AngleMap).l,a2
00014AF8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014AFC E948                       		lsl.w	#4,d0
00014AFE 3202                       		move.w	d2,d1
00014B00 0804 000C                  		btst	#$C,d4
00014B04 6700                       		beq.s	loc_14C02
00014B06 4641                       		not.w	d1
00014B08 0614 0040                  		addi.b	#$40,(a4)
00014B0C 4414                       		neg.b	(a4)
00014B0E 0414 0040                  		subi.b	#$40,(a4)
00014B12                            
00014B12                            loc_14C02:
00014B12 0804 000B                  		btst	#$B,d4
00014B16 6700                       		beq.s	loc_14C0A
00014B18 4414                       		neg.b	(a4)
00014B1A                            
00014B1A                            loc_14C0A:
00014B1A 0241 000F                  		andi.w	#$F,d1
00014B1E D240                       		add.w	d0,d1
00014B20 45F9 0000 0000             		lea	(CollArray2).l,a2
00014B26 1032 1000                  		move.b	(a2,d1.w),d0
00014B2A 4880                       		ext.w	d0
00014B2C BD44                       		eor.w	d6,d4
00014B2E 0804 000B                  		btst	#$B,d4
00014B32 6700                       		beq.s	loc_14C26
00014B34 4440                       		neg.w	d0
00014B36                            
00014B36                            loc_14C26:
00014B36 4A40                       		tst.w	d0
00014B38 679C                       		beq.s	loc_14BC6
00014B3A 6B00                       		bmi.s	loc_14C3C
00014B3C 3203                       		move.w	d3,d1
00014B3E 0241 000F                  		andi.w	#$F,d1
00014B42 D041                       		add.w	d1,d0
00014B44 323C 000F                  		move.w	#$F,d1
00014B48 9240                       		sub.w	d0,d1
00014B4A 4E75                       		rts	
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            loc_14C3C:
00014B4C 3203                       		move.w	d3,d1
00014B4E 0241 000F                  		andi.w	#$F,d1
00014B52 D041                       		add.w	d1,d0
00014B54 6A00 FF80                  		bpl.w	loc_14BC6
00014B58 4641                       		not.w	d1
00014B5A 4E75                       		rts	
00014B5C                            ; End of function FindWall2
00014B5C                            
00014B5C                            ; ---------------------------------------------------------------------------
00014B5C                            ; Unused floor/wall subroutine - logs something	to do with collision
00014B5C                            ; ---------------------------------------------------------------------------
00014B5C                            
00014B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B5C                            
00014B5C                            
00014B5C                            FloorLog_Unk:				; XREF: Level
00014B5C 4E75                       		rts	
00014B5E                            
00014B5E 43F9 0000 0000             		lea	(CollArray1).l,a1
00014B64 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B6A 363C 00FF                  		move.w	#$FF,d3
00014B6E                            
00014B6E                            loc_14C5E:
00014B6E 7A10                       		moveq	#$10,d5
00014B70 343C 000F                  		move.w	#$F,d2
00014B74                            
00014B74                            loc_14C64:
00014B74 7800                       		moveq	#0,d4
00014B76 323C 000F                  		move.w	#$F,d1
00014B7A                            
00014B7A                            loc_14C6A:
00014B7A 3019                       		move.w	(a1)+,d0
00014B7C EAA8                       		lsr.l	d5,d0
00014B7E D944                       		addx.w	d4,d4
00014B80 51C9 FFF8                  		dbf	d1,loc_14C6A
00014B84                            
00014B84 34C4                       		move.w	d4,(a2)+
00014B86 92FC 0020                  		suba.w	#$20,a1
00014B8A 5345                       		subq.w	#1,d5
00014B8C 51CA FFE6                  		dbf	d2,loc_14C64
00014B90                            
00014B90 D2FC 0020                  		adda.w	#$20,a1
00014B94 51CB FFD8                  		dbf	d3,loc_14C5E
00014B98                            
00014B98 43F9 0000 0000             		lea	(CollArray1).l,a1
00014B9E 45F9 0000 0000             		lea	(CollArray2).l,a2
00014BA4 6100                       		bsr.s	FloorLog_Unk2
00014BA6 43F9 0000 0000             		lea	(CollArray1).l,a1
00014BAC 45F9 0000 0000             		lea	(CollArray1).l,a2
00014BB2                            
00014BB2                            ; End of function FloorLog_Unk
00014BB2                            
00014BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BB2                            
00014BB2                            
00014BB2                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014BB2 363C 0FFF                  		move.w	#$FFF,d3
00014BB6                            
00014BB6                            loc_14CA6:
00014BB6 7400                       		moveq	#0,d2
00014BB8 323C 000F                  		move.w	#$F,d1
00014BBC 3019                       		move.w	(a1)+,d0
00014BBE 6700                       		beq.s	loc_14CD4
00014BC0 6B00                       		bmi.s	loc_14CBE
00014BC2                            
00014BC2                            loc_14CB2:
00014BC2 E248                       		lsr.w	#1,d0
00014BC4 6400                       		bcc.s	loc_14CB8
00014BC6 5202                       		addq.b	#1,d2
00014BC8                            
00014BC8                            loc_14CB8:
00014BC8 51C9 FFF8                  		dbf	d1,loc_14CB2
00014BCC                            
00014BCC 6000                       		bra.s	loc_14CD6
00014BCE                            ; ===========================================================================
00014BCE                            
00014BCE                            loc_14CBE:
00014BCE 0C40 FFFF                  		cmpi.w	#-1,d0
00014BD2 6700                       		beq.s	loc_14CD0
00014BD4                            
00014BD4                            loc_14CC4:
00014BD4 E348                       		lsl.w	#1,d0
00014BD6 6400                       		bcc.s	loc_14CCA
00014BD8 5302                       		subq.b	#1,d2
00014BDA                            
00014BDA                            loc_14CCA:
00014BDA 51C9 FFF8                  		dbf	d1,loc_14CC4
00014BDE                            
00014BDE 6000                       		bra.s	loc_14CD6
00014BE0                            ; ===========================================================================
00014BE0                            
00014BE0                            loc_14CD0:
00014BE0 303C 0010                  		move.w	#$10,d0
00014BE4                            
00014BE4                            loc_14CD4:
00014BE4 3400                       		move.w	d0,d2
00014BE6                            
00014BE6                            loc_14CD6:
00014BE6 14C2                       		move.b	d2,(a2)+
00014BE8 51CB FFCC                  		dbf	d3,loc_14CA6
00014BEC                            
00014BEC 4E75                       		rts	
00014BEE                            
00014BEE                            ; End of function FloorLog_Unk2
00014BEE                            
00014BEE                            
00014BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BEE                            
00014BEE                            
00014BEE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014BEE 2628 0008                  		move.l	8(a0),d3
00014BF2 2428 000C                  		move.l	$C(a0),d2
00014BF6 3228 0010                  		move.w	$10(a0),d1
00014BFA 48C1                       		ext.l	d1
00014BFC E181                       		asl.l	#8,d1
00014BFE D681                       		add.l	d1,d3
00014C00 3228 0012                  		move.w	$12(a0),d1
00014C04 48C1                       		ext.l	d1
00014C06 E181                       		asl.l	#8,d1
00014C08 D481                       		add.l	d1,d2
00014C0A 4842                       		swap	d2
00014C0C 4843                       		swap	d3
00014C0E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C12 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C16 1200                       		move.b	d0,d1
00014C18 0600 0020                  		addi.b	#$20,d0
00014C1C 6A00                       		bpl.s	loc_14D1A
00014C1E 1001                       		move.b	d1,d0
00014C20 6A00                       		bpl.s	loc_14D14
00014C22 5300                       		subq.b	#1,d0
00014C24                            
00014C24                            loc_14D14:
00014C24 0600 0020                  		addi.b	#$20,d0
00014C28 6000                       		bra.s	loc_14D24
00014C2A                            ; ===========================================================================
00014C2A                            
00014C2A                            loc_14D1A:
00014C2A 1001                       		move.b	d1,d0
00014C2C 6A00                       		bpl.s	loc_14D20
00014C2E 5200                       		addq.b	#1,d0
00014C30                            
00014C30                            loc_14D20:
00014C30 0600 001F                  		addi.b	#$1F,d0
00014C34                            
00014C34                            loc_14D24:
00014C34 0200 00C0                  		andi.b	#$C0,d0
00014C38 6700 0000                  		beq.w	loc_14DF0
00014C3C 0C00 0080                  		cmpi.b	#$80,d0
00014C40 6700 0000                  		beq.w	loc_14F7C
00014C44 0201 0038                  		andi.b	#$38,d1
00014C48 6600                       		bne.s	loc_14D3C
00014C4A 5042                       		addq.w	#8,d2
00014C4C                            
00014C4C                            loc_14D3C:
00014C4C 0C00 0040                  		cmpi.b	#$40,d0
00014C50 6700 0000                  		beq.w	loc_1504A
00014C54 6000 0000                  		bra.w	loc_14EBC
00014C58                            
00014C58                            ; End of function Sonic_WalkSpeed
00014C58                            
00014C58                            
00014C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C58                            
00014C58                            
00014C58                            sub_14D48:				; XREF: Sonic_Jump
00014C58 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C5C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C60 0600 0020                  		addi.b	#$20,d0
00014C64 0200 00C0                  		andi.b	#$C0,d0
00014C68 0C00 0040                  		cmpi.b	#$40,d0
00014C6C 6700 0000                  		beq.w	loc_14FD6
00014C70 0C00 0080                  		cmpi.b	#$80,d0
00014C74 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014C78 0C00 00C0                  		cmpi.b	#$C0,d0
00014C7C 6700 0000                  		beq.w	sub_14E50
00014C80                            
00014C80                            ; End of function sub_14D48
00014C80                            
00014C80                            ; ---------------------------------------------------------------------------
00014C80                            ; Subroutine to	make Sonic land	on the floor after jumping
00014C80                            ; ---------------------------------------------------------------------------
00014C80                            
00014C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C80                            
00014C80                            
00014C80                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014C80 3428 000C                  		move.w	$C(a0),d2
00014C84 3628 0008                  		move.w	8(a0),d3
00014C88 7000                       		moveq	#0,d0
00014C8A 1028 0016                  		move.b	$16(a0),d0
00014C8E 4880                       		ext.w	d0
00014C90 D440                       		add.w	d0,d2
00014C92 1028 0017                  		move.b	$17(a0),d0
00014C96 4880                       		ext.w	d0
00014C98 D640                       		add.w	d0,d3
00014C9A 49F8 F768                  		lea	($FFFFF768).w,a4
00014C9E 367C 0010                  		movea.w	#$10,a3
00014CA2 3C3C 0000                  		move.w	#0,d6
00014CA6 7A0D                       		moveq	#$D,d5
00014CA8 6100 FC34                  		bsr.w	FindFloor
00014CAC 3F01                       		move.w	d1,-(sp)
00014CAE 3428 000C                  		move.w	$C(a0),d2
00014CB2 3628 0008                  		move.w	8(a0),d3
00014CB6 7000                       		moveq	#0,d0
00014CB8 1028 0016                  		move.b	$16(a0),d0
00014CBC 4880                       		ext.w	d0
00014CBE D440                       		add.w	d0,d2
00014CC0 1028 0017                  		move.b	$17(a0),d0
00014CC4 4880                       		ext.w	d0
00014CC6 9640                       		sub.w	d0,d3
00014CC8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CCC 367C 0010                  		movea.w	#$10,a3
00014CD0 3C3C 0000                  		move.w	#0,d6
00014CD4 7A0D                       		moveq	#$D,d5
00014CD6 6100 FC06                  		bsr.w	FindFloor
00014CDA 301F                       		move.w	(sp)+,d0
00014CDC 143C 0000                  		move.b	#0,d2
00014CE0                            
00014CE0                            loc_14DD0:
00014CE0 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014CE4 B240                       		cmp.w	d0,d1
00014CE6 6F00                       		ble.s	loc_14DDE
00014CE8 1638 F768                  		move.b	($FFFFF768).w,d3
00014CEC C141                       		exg	d0,d1
00014CEE                            
00014CEE                            loc_14DDE:
00014CEE 0803 0000                  		btst	#0,d3
00014CF2 6700                       		beq.s	locret_14DE6
00014CF4 1602                       		move.b	d2,d3
00014CF6                            
00014CF6                            locret_14DE6:
00014CF6 4E75                       		rts	
00014CF8                            
00014CF8                            ; End of function Sonic_HitFloor
00014CF8                            
00014CF8                            ; ===========================================================================
00014CF8 3428 000C                  		move.w	$C(a0),d2
00014CFC 3628 0008                  		move.w	8(a0),d3
00014D00                            
00014D00                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014D00 0642 000A                  		addi.w	#$A,d2
00014D04 49F8 F768                  		lea	($FFFFF768).w,a4
00014D08 367C 0010                  		movea.w	#$10,a3
00014D0C 3C3C 0000                  		move.w	#0,d6
00014D10 7A0E                       		moveq	#$E,d5
00014D12 6100 FBCA                  		bsr.w	FindFloor
00014D16 143C 0000                  		move.b	#0,d2
00014D1A                            
00014D1A                            loc_14E0A:				; XREF: sub_14EB4
00014D1A 1638 F768                  		move.b	($FFFFF768).w,d3
00014D1E 0803 0000                  		btst	#0,d3
00014D22 6700                       		beq.s	locret_14E16
00014D24 1602                       		move.b	d2,d3
00014D26                            
00014D26                            locret_14E16:
00014D26 4E75                       		rts	
00014D28                            
00014D28                            ; ---------------------------------------------------------------------------
00014D28                            ; Subroutine allowing objects to interact with the floor
00014D28                            ; ---------------------------------------------------------------------------
00014D28                            
00014D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D28                            
00014D28                            
00014D28                            ObjHitFloor:
00014D28 3628 0008                  		move.w	8(a0),d3
00014D2C                            
00014D2C                            ; End of function ObjHitFloor
00014D2C                            
00014D2C                            
00014D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D2C                            
00014D2C                            
00014D2C                            ObjHitFloor2:
00014D2C 3428 000C                  		move.w	$C(a0),d2
00014D30 7000                       		moveq	#0,d0
00014D32 1028 0016                  		move.b	$16(a0),d0
00014D36 4880                       		ext.w	d0
00014D38 D440                       		add.w	d0,d2
00014D3A 49F8 F768                  		lea	($FFFFF768).w,a4
00014D3E 18BC 0000                  		move.b	#0,(a4)
00014D42 367C 0010                  		movea.w	#$10,a3
00014D46 3C3C 0000                  		move.w	#0,d6
00014D4A 7A0D                       		moveq	#$D,d5
00014D4C 6100 FB90                  		bsr.w	FindFloor
00014D50 1638 F768                  		move.b	($FFFFF768).w,d3
00014D54 0803 0000                  		btst	#0,d3
00014D58 6700                       		beq.s	locret_14E4E
00014D5A 163C 0000                  		move.b	#0,d3
00014D5E                            
00014D5E                            locret_14E4E:
00014D5E 4E75                       		rts	
00014D60                            ; End of function ObjHitFloor2
00014D60                            
00014D60                            
00014D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D60                            
00014D60                            
00014D60                            sub_14E50:				; XREF: sub_14D48
00014D60 3428 000C                  		move.w	$C(a0),d2
00014D64 3628 0008                  		move.w	8(a0),d3
00014D68 7000                       		moveq	#0,d0
00014D6A 1028 0017                  		move.b	$17(a0),d0
00014D6E 4880                       		ext.w	d0
00014D70 9440                       		sub.w	d0,d2
00014D72 1028 0016                  		move.b	$16(a0),d0
00014D76 4880                       		ext.w	d0
00014D78 D640                       		add.w	d0,d3
00014D7A 49F8 F768                  		lea	($FFFFF768).w,a4
00014D7E 367C 0010                  		movea.w	#$10,a3
00014D82 3C3C 0000                  		move.w	#0,d6
00014D86 7A0E                       		moveq	#$E,d5
00014D88 6100 FC92                  		bsr.w	FindWall
00014D8C 3F01                       		move.w	d1,-(sp)
00014D8E 3428 000C                  		move.w	$C(a0),d2
00014D92 3628 0008                  		move.w	8(a0),d3
00014D96 7000                       		moveq	#0,d0
00014D98 1028 0017                  		move.b	$17(a0),d0
00014D9C 4880                       		ext.w	d0
00014D9E D440                       		add.w	d0,d2
00014DA0 1028 0016                  		move.b	$16(a0),d0
00014DA4 4880                       		ext.w	d0
00014DA6 D640                       		add.w	d0,d3
00014DA8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DAC 367C 0010                  		movea.w	#$10,a3
00014DB0 3C3C 0000                  		move.w	#0,d6
00014DB4 7A0E                       		moveq	#$E,d5
00014DB6 6100 FC64                  		bsr.w	FindWall
00014DBA 301F                       		move.w	(sp)+,d0
00014DBC 143C 00C0                  		move.b	#-$40,d2
00014DC0 6000 FF1E                  		bra.w	loc_14DD0
00014DC4                            
00014DC4                            ; End of function sub_14E50
00014DC4                            
00014DC4                            
00014DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC4                            
00014DC4                            
00014DC4                            sub_14EB4:				; XREF: Sonic_Floor
00014DC4 3428 000C                  		move.w	$C(a0),d2
00014DC8 3628 0008                  		move.w	8(a0),d3
00014DCC                            
00014DCC                            loc_14EBC:
00014DCC 0643 000A                  		addi.w	#$A,d3
00014DD0 49F8 F768                  		lea	($FFFFF768).w,a4
00014DD4 367C 0010                  		movea.w	#$10,a3
00014DD8 3C3C 0000                  		move.w	#0,d6
00014DDC 7A0E                       		moveq	#$E,d5
00014DDE 6100 FC3C                  		bsr.w	FindWall
00014DE2 143C 00C0                  		move.b	#-$40,d2
00014DE6 6000 FF32                  		bra.w	loc_14E0A
00014DEA                            
00014DEA                            ; End of function sub_14EB4
00014DEA                            
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            ; Subroutine to	detect when an object hits a wall to its right
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            
00014DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DEA                            
00014DEA                            
00014DEA                            ObjHitWallRight:
00014DEA D668 0008                  		add.w	8(a0),d3
00014DEE 3428 000C                  		move.w	$C(a0),d2
00014DF2 49F8 F768                  		lea	($FFFFF768).w,a4
00014DF6 18BC 0000                  		move.b	#0,(a4)
00014DFA 367C 0010                  		movea.w	#$10,a3
00014DFE 3C3C 0000                  		move.w	#0,d6
00014E02 7A0E                       		moveq	#$E,d5
00014E04 6100 FC16                  		bsr.w	FindWall
00014E08 1638 F768                  		move.b	($FFFFF768).w,d3
00014E0C 0803 0000                  		btst	#0,d3
00014E10 6700                       		beq.s	locret_14F06
00014E12 163C 00C0                  		move.b	#-$40,d3
00014E16                            
00014E16                            locret_14F06:
00014E16 4E75                       		rts	
00014E18                            
00014E18                            ; End of function ObjHitWallRight
00014E18                            
00014E18                            ; ---------------------------------------------------------------------------
00014E18                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00014E18                            ; touches them
00014E18                            ; ---------------------------------------------------------------------------
00014E18                            
00014E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E18                            
00014E18                            
00014E18                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00014E18 3428 000C                  		move.w	$C(a0),d2
00014E1C 3628 0008                  		move.w	8(a0),d3
00014E20 7000                       		moveq	#0,d0
00014E22 1028 0016                  		move.b	$16(a0),d0
00014E26 4880                       		ext.w	d0
00014E28 9440                       		sub.w	d0,d2
00014E2A 0A42 000F                  		eori.w	#$F,d2
00014E2E 1028 0017                  		move.b	$17(a0),d0
00014E32 4880                       		ext.w	d0
00014E34 D640                       		add.w	d0,d3
00014E36 49F8 F768                  		lea	($FFFFF768).w,a4
00014E3A 367C FFF0                  		movea.w	#-$10,a3
00014E3E 3C3C 1000                  		move.w	#$1000,d6
00014E42 7A0E                       		moveq	#$E,d5
00014E44 6100 FA98                  		bsr.w	FindFloor
00014E48 3F01                       		move.w	d1,-(sp)
00014E4A 3428 000C                  		move.w	$C(a0),d2
00014E4E 3628 0008                  		move.w	8(a0),d3
00014E52 7000                       		moveq	#0,d0
00014E54 1028 0016                  		move.b	$16(a0),d0
00014E58 4880                       		ext.w	d0
00014E5A 9440                       		sub.w	d0,d2
00014E5C 0A42 000F                  		eori.w	#$F,d2
00014E60 1028 0017                  		move.b	$17(a0),d0
00014E64 4880                       		ext.w	d0
00014E66 9640                       		sub.w	d0,d3
00014E68 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E6C 367C FFF0                  		movea.w	#-$10,a3
00014E70 3C3C 1000                  		move.w	#$1000,d6
00014E74 7A0E                       		moveq	#$E,d5
00014E76 6100 FA66                  		bsr.w	FindFloor
00014E7A 301F                       		move.w	(sp)+,d0
00014E7C 143C 0080                  		move.b	#-$80,d2
00014E80 6000 FE5E                  		bra.w	loc_14DD0
00014E84                            ; End of function Sonic_DontRunOnWalls
00014E84                            
00014E84                            ; ===========================================================================
00014E84 3428 000C                  		move.w	$C(a0),d2
00014E88 3628 0008                  		move.w	8(a0),d3
00014E8C                            
00014E8C                            loc_14F7C:
00014E8C 0442 000A                  		subi.w	#$A,d2
00014E90 0A42 000F                  		eori.w	#$F,d2
00014E94 49F8 F768                  		lea	($FFFFF768).w,a4
00014E98 367C FFF0                  		movea.w	#-$10,a3
00014E9C 3C3C 1000                  		move.w	#$1000,d6
00014EA0 7A0E                       		moveq	#$E,d5
00014EA2 6100 FA3A                  		bsr.w	FindFloor
00014EA6 143C 0080                  		move.b	#-$80,d2
00014EAA 6000 FE6E                  		bra.w	loc_14E0A
00014EAE                            
00014EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EAE                            
00014EAE                            
00014EAE                            ObjHitCeiling:
00014EAE 3428 000C                  		move.w	$C(a0),d2
00014EB2 3628 0008                  		move.w	8(a0),d3
00014EB6 7000                       		moveq	#0,d0
00014EB8 1028 0016                  		move.b	$16(a0),d0
00014EBC 4880                       		ext.w	d0
00014EBE 9440                       		sub.w	d0,d2
00014EC0 0A42 000F                  		eori.w	#$F,d2
00014EC4 49F8 F768                  		lea	($FFFFF768).w,a4
00014EC8 367C FFF0                  		movea.w	#-$10,a3
00014ECC 3C3C 1000                  		move.w	#$1000,d6
00014ED0 7A0E                       		moveq	#$E,d5
00014ED2 6100 FA0A                  		bsr.w	FindFloor
00014ED6 1638 F768                  		move.b	($FFFFF768).w,d3
00014EDA 0803 0000                  		btst	#0,d3
00014EDE 6700                       		beq.s	locret_14FD4
00014EE0 163C 0080                  		move.b	#-$80,d3
00014EE4                            
00014EE4                            locret_14FD4:
00014EE4 4E75                       		rts	
00014EE6                            ; End of function ObjHitCeiling
00014EE6                            
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            loc_14FD6:				; XREF: sub_14D48
00014EE6 3428 000C                  		move.w	$C(a0),d2
00014EEA 3628 0008                  		move.w	8(a0),d3
00014EEE 7000                       		moveq	#0,d0
00014EF0 1028 0017                  		move.b	$17(a0),d0
00014EF4 4880                       		ext.w	d0
00014EF6 9440                       		sub.w	d0,d2
00014EF8 1028 0016                  		move.b	$16(a0),d0
00014EFC 4880                       		ext.w	d0
00014EFE 9640                       		sub.w	d0,d3
00014F00 0A43 000F                  		eori.w	#$F,d3
00014F04 49F8 F768                  		lea	($FFFFF768).w,a4
00014F08 367C FFF0                  		movea.w	#-$10,a3
00014F0C 3C3C 0800                  		move.w	#$800,d6
00014F10 7A0E                       		moveq	#$E,d5
00014F12 6100 FB08                  		bsr.w	FindWall
00014F16 3F01                       		move.w	d1,-(sp)
00014F18 3428 000C                  		move.w	$C(a0),d2
00014F1C 3628 0008                  		move.w	8(a0),d3
00014F20 7000                       		moveq	#0,d0
00014F22 1028 0017                  		move.b	$17(a0),d0
00014F26 4880                       		ext.w	d0
00014F28 D440                       		add.w	d0,d2
00014F2A 1028 0016                  		move.b	$16(a0),d0
00014F2E 4880                       		ext.w	d0
00014F30 9640                       		sub.w	d0,d3
00014F32 0A43 000F                  		eori.w	#$F,d3
00014F36 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F3A 367C FFF0                  		movea.w	#-$10,a3
00014F3E 3C3C 0800                  		move.w	#$800,d6
00014F42 7A0E                       		moveq	#$E,d5
00014F44 6100 FAD6                  		bsr.w	FindWall
00014F48 301F                       		move.w	(sp)+,d0
00014F4A 143C 0040                  		move.b	#$40,d2
00014F4E 6000 FD90                  		bra.w	loc_14DD0
00014F52                            
00014F52                            ; ---------------------------------------------------------------------------
00014F52                            ; Subroutine to	stop Sonic when	he jumps at a wall
00014F52                            ; ---------------------------------------------------------------------------
00014F52                            
00014F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F52                            
00014F52                            
00014F52                            Sonic_HitWall:				; XREF: Sonic_Floor
00014F52 3428 000C                  		move.w	$C(a0),d2
00014F56 3628 0008                  		move.w	8(a0),d3
00014F5A                            
00014F5A                            loc_1504A:
00014F5A 0443 000A                  		subi.w	#$A,d3
00014F5E 0A43 000F                  		eori.w	#$F,d3
00014F62 49F8 F768                  		lea	($FFFFF768).w,a4
00014F66 367C FFF0                  		movea.w	#-$10,a3
00014F6A 3C3C 0800                  		move.w	#$800,d6
00014F6E 7A0E                       		moveq	#$E,d5
00014F70 6100 FAAA                  		bsr.w	FindWall
00014F74 143C 0040                  		move.b	#$40,d2
00014F78 6000 FDA0                  		bra.w	loc_14E0A
00014F7C                            ; End of function Sonic_HitWall
00014F7C                            
00014F7C                            ; ---------------------------------------------------------------------------
00014F7C                            ; Subroutine to	detect when an object hits a wall to its left
00014F7C                            ; ---------------------------------------------------------------------------
00014F7C                            
00014F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F7C                            
00014F7C                            
00014F7C                            ObjHitWallLeft:
00014F7C D668 0008                  		add.w	8(a0),d3
00014F80 3428 000C                  		move.w	$C(a0),d2
00014F84 49F8 F768                  		lea	($FFFFF768).w,a4
00014F88 18BC 0000                  		move.b	#0,(a4)
00014F8C 367C FFF0                  		movea.w	#-$10,a3
00014F90 3C3C 0800                  		move.w	#$800,d6
00014F94 7A0E                       		moveq	#$E,d5
00014F96 6100 FA84                  		bsr.w	FindWall
00014F9A 1638 F768                  		move.b	($FFFFF768).w,d3
00014F9E 0803 0000                  		btst	#0,d3
00014FA2 6700                       		beq.s	locret_15098
00014FA4 163C 0040                  		move.b	#$40,d3
00014FA8                            
00014FA8                            locret_15098:
00014FA8 4E75                       		rts	
00014FAA                            ; End of function ObjHitWallLeft
00014FAA                            
00014FAA                            ; ===========================================================================
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            
00014FAA                            Obj66:					; XREF: Obj_Index
00014FAA 7000                       		moveq	#0,d0
00014FAC 1028 0024                  		move.b	$24(a0),d0
00014FB0 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00014FB4 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00014FB8                            ; ===========================================================================
00014FB8 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00014FBA 0000                       		dc.w Obj66_Action-Obj66_Index
00014FBC 0000                       		dc.w Obj66_Display-Obj66_Index
00014FBE 0000                       		dc.w Obj66_Release-Obj66_Index
00014FC0                            ; ===========================================================================
00014FC0                            
00014FC0                            Obj66_Main:				; XREF: Obj66_Index
00014FC0 5428 0024                  		addq.b	#2,$24(a0)
00014FC4 323C 0001                  		move.w	#1,d1
00014FC8 2248                       		movea.l	a0,a1
00014FCA 6000                       		bra.s	Obj66_MakeItem
00014FCC                            ; ===========================================================================
00014FCC                            
00014FCC                            Obj66_Loop:
00014FCC 6100 8A42                  		bsr.w	SingleObjLoad
00014FD0 6600                       		bne.s	loc_150FE
00014FD2 12BC 0066                  		move.b	#$66,0(a1)
00014FD6 5829 0024                  		addq.b	#4,$24(a1)
00014FDA 3368 0008 0008             		move.w	8(a0),8(a1)
00014FE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014FE6 137C 0003 0018             		move.b	#3,$18(a1)
00014FEC 137C 0010 001A             		move.b	#$10,$1A(a1)
00014FF2                            
00014FF2                            Obj66_MakeItem:				; XREF: Obj66_Main
00014FF2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00014FFA 337C 4348 0002             		move.w	#$4348,2(a1)
00015000 0029 0004 0001             		ori.b	#4,1(a1)
00015006 137C 0038 0019             		move.b	#$38,$19(a1)
0001500C                            
0001500C                            loc_150FE:
0001500C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015010                            
00015010 117C 0030 0019             		move.b	#$30,$19(a0)
00015016 117C 0004 0018             		move.b	#4,$18(a0)
0001501C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015022 117C 0001 0034             		move.b	#1,$34(a0)
00015028 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001502E                            
0001502E                            Obj66_Action:				; XREF: Obj66_Index
0001502E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015032 4A28 0001                  		tst.b	1(a0)
00015036 6A00 0000                  		bpl.w	Obj66_Display
0001503A 323C 0030                  		move.w	#$30,d1
0001503E 3401                       		move.w	d1,d2
00015040 3602                       		move.w	d2,d3
00015042 5243                       		addq.w	#1,d3
00015044 3828 0008                  		move.w	8(a0),d4
00015048 6100 A900                  		bsr.w	SolidObject
0001504C 0828 0005 0022             		btst	#5,$22(a0)
00015052 6700 0000                  		beq.w	Obj66_Display
00015056 43F8 D000                  		lea	($FFFFD000).w,a1
0001505A 720E                       		moveq	#$E,d1
0001505C 3029 0008                  		move.w	8(a1),d0
00015060 B068 0008                  		cmp.w	8(a0),d0
00015064 6500                       		bcs.s	Obj66_GrabSonic
00015066 7207                       		moveq	#7,d1
00015068                            
00015068                            Obj66_GrabSonic:
00015068 B228 001A                  		cmp.b	$1A(a0),d1
0001506C 6600                       		bne.s	Obj66_Display
0001506E 1141 0032                  		move.b	d1,$32(a0)
00015072 5828 0024                  		addq.b	#4,$24(a0)
00015076 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001507C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015082 337C 0800 0014             		move.w	#$800,$14(a1)
00015088 337C 0000 0010             		move.w	#0,$10(a1)
0001508E 337C 0000 0012             		move.w	#0,$12(a1)
00015094 08A8 0005 0022             		bclr	#5,$22(a0)
0001509A 08A9 0005 0022             		bclr	#5,$22(a1)
000150A0 08E9 0001 0022             		bset	#1,$22(a1)
000150A6 3429 0008                  		move.w	8(a1),d2
000150AA 3629 000C                  		move.w	$C(a1),d3
000150AE 6100 0000                  		bsr.w	Obj66_ChgPos
000150B2 D569 0008                  		add.w	d2,8(a1)
000150B6 D769 000C                  		add.w	d3,$C(a1)
000150BA E0E9 0008                  		asr	8(a1)
000150BE E0E9 000C                  		asr	$C(a1)
000150C2                            
000150C2                            Obj66_Display:				; XREF: Obj66_Index
000150C2 6000 A55E                  		bra.w	MarkObjGone
000150C6                            ; ===========================================================================
000150C6                            
000150C6                            Obj66_Release:				; XREF: Obj66_Index
000150C6 1028 001A                  		move.b	$1A(a0),d0
000150CA 0C00 0004                  		cmpi.b	#4,d0
000150CE 6700                       		beq.s	loc_151C8
000150D0 0C00 0007                  		cmpi.b	#7,d0
000150D4 6600                       		bne.s	loc_151F8
000150D6                            
000150D6                            loc_151C8:
000150D6 B028 0032                  		cmp.b	$32(a0),d0
000150DA 6700                       		beq.s	loc_151F8
000150DC 43F8 D000                  		lea	($FFFFD000).w,a1
000150E0 337C 0000 0010             		move.w	#0,$10(a1)
000150E6 337C 0800 0012             		move.w	#$800,$12(a1)
000150EC 0C00 0004                  		cmpi.b	#4,d0
000150F0 6700                       		beq.s	loc_151F0
000150F2 337C 0800 0010             		move.w	#$800,$10(a1)
000150F8 337C 0800 0012             		move.w	#$800,$12(a1)
000150FE                            
000150FE                            loc_151F0:
000150FE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015102 5928 0024                  		subq.b	#4,$24(a0)
00015106                            
00015106                            loc_151F8:
00015106 6100                       		bsr.s	Obj66_ChkSwitch
00015108 6100                       		bsr.s	Obj66_ChgPos
0001510A 6000 A516                  		bra.w	MarkObjGone
0001510E                            
0001510E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510E                            
0001510E                            
0001510E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001510E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015112 7000                       		moveq	#0,d0
00015114 1028 0038                  		move.b	$38(a0),d0
00015118 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001511E 6700                       		beq.s	loc_15224	; if not, branch
00015120 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015124 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015126 4428 0034                  		neg.b	$34(a0)
0001512A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015130 6000                       		bra.s	Obj66_Animate
00015132                            ; ===========================================================================
00015132                            
00015132                            loc_15224:
00015132 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015136                            
00015136                            Obj66_Animate:
00015136 5328 001E                  		subq.b	#1,$1E(a0)
0001513A 6A00                       		bpl.s	locret_15246
0001513C 117C 0007 001E             		move.b	#7,$1E(a0)
00015142 1228 0034                  		move.b	$34(a0),d1
00015146 1028 001A                  		move.b	$1A(a0),d0
0001514A D001                       		add.b	d1,d0
0001514C 0200 000F                  		andi.b	#$F,d0
00015150 1140 001A                  		move.b	d0,$1A(a0)
00015154                            
00015154                            locret_15246:
00015154 4E75                       		rts	
00015156                            ; End of function Obj66_ChkSwitch
00015156                            
00015156                            
00015156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015156                            
00015156                            
00015156                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015156 43F8 D000                  		lea	($FFFFD000).w,a1
0001515A 7000                       		moveq	#0,d0
0001515C 1028 001A                  		move.b	$1A(a0),d0
00015160 D040                       		add.w	d0,d0
00015162 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015166 101A                       		move.b	(a2)+,d0
00015168 4880                       		ext.w	d0
0001516A D068 0008                  		add.w	8(a0),d0
0001516E 3340 0008                  		move.w	d0,8(a1)
00015172 101A                       		move.b	(a2)+,d0
00015174 4880                       		ext.w	d0
00015176 D068 000C                  		add.w	$C(a0),d0
0001517A 3340 000C                  		move.w	d0,$C(a1)
0001517E 4E75                       		rts	
00015180                            ; End of function Obj66_ChgPos
00015180                            
00015180                            ; ===========================================================================
00015180 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015184 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015188 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001518C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015190 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015194 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015198 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001519C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            Map_obj66:
000151A0                            	include "_maps\obj66.asm"
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000151A0                            ; ---------------------------------------------------------------------------
000151A0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000151A4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000151A8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000151AC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000151B0 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000151B4 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000151B8 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000151BC 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000151C0 0000                       		dc.w byte_154A4-Map_obj66
000151C2 06                         byte_152B4:	dc.b 6
000151C3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000151C8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000151CD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000151D2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000151D7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000151DC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000151E1 06                         byte_152D3:	dc.b 6
000151E2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000151E7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000151EC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000151F1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000151F6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000151FB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015200 06                         byte_152F2:	dc.b 6
00015201 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015206 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001520B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015210 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015215 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001521A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001521F 06                         byte_15311:	dc.b 6
00015220 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015225 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001522A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001522F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015234 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015239 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001523E 06                         byte_15330:	dc.b 6
0001523F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015244 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015249 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001524E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015253 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015258 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001525D 06                         byte_1534F:	dc.b 6
0001525E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015263 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015268 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001526D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015272 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015277 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001527C 06                         byte_1536E:	dc.b 6
0001527D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015282 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015287 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001528C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015291 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015296 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001529B 06                         byte_1538D:	dc.b 6
0001529C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000152A1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000152A6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000152AB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000152B0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000152B5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000152BA 06                         byte_153AC:	dc.b 6
000152BB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000152C0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000152C5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000152CA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000152CF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000152D4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000152D9 06                         byte_153CB:	dc.b 6
000152DA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000152DF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000152E4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000152E9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000152EE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000152F3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000152F8 06                         byte_153EA:	dc.b 6
000152F9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000152FE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015303 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015308 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001530D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015312 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015317 06                         byte_15409:	dc.b 6
00015318 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001531D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015322 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015327 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001532C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015331 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015336 06                         byte_15428:	dc.b 6
00015337 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001533C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015341 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015346 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001534B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015350 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015355 06                         byte_15447:	dc.b 6
00015356 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001535B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015360 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015365 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001536A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001536F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015374 06                         byte_15466:	dc.b 6
00015375 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001537A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001537F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015384 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015389 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001538E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015393 06                         byte_15485:	dc.b 6
00015394 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015399 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001539E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000153A3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000153A8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000153AD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000153B2 0C                         byte_154A4:	dc.b $C
000153B3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000153B8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000153BD E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000153C2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000153C7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000153CC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000153D1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000153D6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000153DB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000153E0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000153E5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000153EA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000153F0 00                         		even
000153F0 00                         		even
000153F0                            
000153F0                            ; ===========================================================================
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            ; Object 67 - disc that	you run	around (SBZ)
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            
000153F0                            Obj67:					; XREF: Obj_Index
000153F0 7000                       		moveq	#0,d0
000153F2 1028 0024                  		move.b	$24(a0),d0
000153F6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000153FA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000153FE                            ; ===========================================================================
000153FE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015400 0000                       		dc.w Obj67_Action-Obj67_Index
00015402                            ; ===========================================================================
00015402                            
00015402                            Obj67_Main:				; XREF: Obj67_Index
00015402 5428 0024                  		addq.b	#2,$24(a0)
00015406 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001540E 317C C344 0002             		move.w	#$C344,2(a0)
00015414 117C 0004 0001             		move.b	#4,1(a0)
0001541A 117C 0004 0018             		move.b	#4,$18(a0)
00015420 117C 0008 0019             		move.b	#8,$19(a0)
00015426 3168 0008 0032             		move.w	8(a0),$32(a0)
0001542C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015432 117C 0018 0034             		move.b	#$18,$34(a0)
00015438 117C 0048 0038             		move.b	#$48,$38(a0)
0001543E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015442 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015446 6700                       		beq.s	loc_15546
00015448 117C 0010 0034             		move.b	#$10,$34(a0)
0001544E 117C 0038 0038             		move.b	#$38,$38(a0)
00015454                            
00015454                            loc_15546:
00015454 1228 0028                  		move.b	$28(a0),d1	; get object type
00015458 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001545C 4881                       		ext.w	d1
0001545E E741                       		asl.w	#3,d1
00015460 3141 0036                  		move.w	d1,$36(a0)
00015464 1028 0022                  		move.b	$22(a0),d0
00015468 E418                       		ror.b	#2,d0
0001546A 0200 00C0                  		andi.b	#-$40,d0
0001546E 1140 0026                  		move.b	d0,$26(a0)
00015472                            
00015472                            Obj67_Action:				; XREF: Obj67_Index
00015472 6100 0000                  		bsr.w	Obj67_MoveSonic
00015476 6100 0000                  		bsr.w	Obj67_MoveSpot
0001547A 6000 0000                  		bra.w	Obj67_ChkDel
0001547E                            ; ===========================================================================
0001547E                            
0001547E                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001547E 7400                       		moveq	#0,d2
00015480 1428 0038                  		move.b	$38(a0),d2
00015484 3602                       		move.w	d2,d3
00015486 D643                       		add.w	d3,d3
00015488 43F8 D000                  		lea	($FFFFD000).w,a1
0001548C 3029 0008                  		move.w	8(a1),d0
00015490 9068 0032                  		sub.w	$32(a0),d0
00015494 D042                       		add.w	d2,d0
00015496 B043                       		cmp.w	d3,d0
00015498 6400                       		bcc.s	loc_155A8
0001549A 3229 000C                  		move.w	$C(a1),d1
0001549E 9268 0030                  		sub.w	$30(a0),d1
000154A2 D242                       		add.w	d2,d1
000154A4 B243                       		cmp.w	d3,d1
000154A6 6400                       		bcc.s	loc_155A8
000154A8 0829 0001 0022             		btst	#1,$22(a1)
000154AE 6700                       		beq.s	loc_155B8
000154B0 4228 003A                  		clr.b	$3A(a0)
000154B4 4E75                       		rts	
000154B6                            ; ===========================================================================
000154B6                            
000154B6                            loc_155A8:
000154B6 4A28 003A                  		tst.b	$3A(a0)
000154BA 6700                       		beq.s	locret_155B6
000154BC 4229 0038                  		clr.b	$38(a1)
000154C0 4228 003A                  		clr.b	$3A(a0)
000154C4                            
000154C4                            locret_155B6:
000154C4 4E75                       		rts	
000154C6                            ; ===========================================================================
000154C6                            
000154C6                            loc_155B8:
000154C6 4A28 003A                  		tst.b	$3A(a0)
000154CA 6600                       		bne.s	loc_155E2
000154CC 117C 0001 003A             		move.b	#1,$3A(a0)
000154D2 0829 0002 0022             		btst	#2,$22(a1)
000154D8 6600                       		bne.s	loc_155D0
000154DA 4229 001C                  		clr.b	$1C(a1)
000154DE                            
000154DE                            loc_155D0:
000154DE 08A9 0005 0022             		bclr	#5,$22(a1)
000154E4 137C 0001 001D             		move.b	#1,$1D(a1)
000154EA 137C 0001 0038             		move.b	#1,$38(a1)
000154F0                            
000154F0                            loc_155E2:
000154F0 3029 0014                  		move.w	$14(a1),d0
000154F4 4A68 0036                  		tst.w	$36(a0)
000154F8 6A00                       		bpl.s	loc_15608
000154FA 0C40 FC00                  		cmpi.w	#-$400,d0
000154FE 6F00                       		ble.s	loc_155FA
00015500 337C FC00 0014             		move.w	#-$400,$14(a1)
00015506 4E75                       		rts	
00015508                            ; ===========================================================================
00015508                            
00015508                            loc_155FA:
00015508 0C40 F100                  		cmpi.w	#-$F00,d0
0001550C 6C00                       		bge.s	locret_15606
0001550E 337C F100 0014             		move.w	#-$F00,$14(a1)
00015514                            
00015514                            locret_15606:
00015514 4E75                       		rts	
00015516                            ; ===========================================================================
00015516                            
00015516                            loc_15608:
00015516 0C40 0400                  		cmpi.w	#$400,d0
0001551A 6C00                       		bge.s	loc_15616
0001551C 337C 0400 0014             		move.w	#$400,$14(a1)
00015522 4E75                       		rts	
00015524                            ; ===========================================================================
00015524                            
00015524                            loc_15616:
00015524 0C40 0F00                  		cmpi.w	#$F00,d0
00015528 6F00                       		ble.s	locret_15622
0001552A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015530                            
00015530                            locret_15622:
00015530 4E75                       		rts	
00015532                            ; ===========================================================================
00015532                            
00015532                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015532 3028 0036                  		move.w	$36(a0),d0
00015536 D168 0026                  		add.w	d0,$26(a0)
0001553A 1028 0026                  		move.b	$26(a0),d0
0001553E 4EB9 0000 29B8             		jsr	(CalcSine).l
00015544 3428 0030                  		move.w	$30(a0),d2
00015548 3628 0032                  		move.w	$32(a0),d3
0001554C 7800                       		moveq	#0,d4
0001554E 1828 0034                  		move.b	$34(a0),d4
00015552 E14C                       		lsl.w	#8,d4
00015554 2A04                       		move.l	d4,d5
00015556 C9C0                       		muls.w	d0,d4
00015558 4844                       		swap	d4
0001555A CBC1                       		muls.w	d1,d5
0001555C 4845                       		swap	d5
0001555E D842                       		add.w	d2,d4
00015560 DA43                       		add.w	d3,d5
00015562 3144 000C                  		move.w	d4,$C(a0)
00015566 3145 0008                  		move.w	d5,8(a0)
0001556A 4E75                       		rts	
0001556C                            ; ===========================================================================
0001556C                            
0001556C                            Obj67_ChkDel:				; XREF: Obj67_Action
0001556C 3028 0032                  		move.w	$32(a0),d0
00015570 0240 FF80                  		andi.w	#-$80,d0
00015574 3238 F700                  		move.w	($FFFFF700).w,d1
00015578 0441 0080                  		subi.w	#$80,d1
0001557C 0241 FF80                  		andi.w	#-$80,d1
00015580 9041                       		sub.w	d1,d0
00015582 0C40 0280                  		cmpi.w	#$280,d0
00015586 6200                       		bhi.s	Obj67_Delete
00015588 4EF9 0000 D58A             		jmp	DisplaySprite
0001558E                            ; ===========================================================================
0001558E                            
0001558E                            Obj67_Delete:
0001558E 4EFA 8036                  		jmp	DeleteObject
00015592                            ; ===========================================================================
00015592                            ; ---------------------------------------------------------------------------
00015592                            ; Sprite mappings - disc that you run around (SBZ)
00015592                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015592                            ; part of the level tiles.)
00015592                            ; ---------------------------------------------------------------------------
00015592                            Map_obj67:
00015592                            	include "_maps\obj67.asm"
00015592                            ; ---------------------------------------------------------------------------
00015592                            ; Sprite mappings - disc that you run around (SBZ)
00015592                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015592                            ; part of the level tiles.)
00015592                            ; ---------------------------------------------------------------------------
00015592 0000                       		dc.w byte_15688-Map_obj67
00015594 01                         byte_15688:	dc.b 1
00015595 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001559A                            		even
0001559A                            		even
0001559A                            
0001559A                            ; ===========================================================================
0001559A                            ; ---------------------------------------------------------------------------
0001559A                            ; Object 68 - conveyor belts (SBZ)
0001559A                            ; ---------------------------------------------------------------------------
0001559A                            
0001559A                            Obj68:					; XREF: Obj_Index
0001559A 7000                       		moveq	#0,d0
0001559C 1028 0024                  		move.b	$24(a0),d0
000155A0 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000155A4 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000155A8                            ; ===========================================================================
000155A8 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000155AA 0000                       		dc.w Obj68_Action-Obj68_Index
000155AC                            ; ===========================================================================
000155AC                            
000155AC                            Obj68_Main:				; XREF: Obj68_Index
000155AC 5428 0024                  		addq.b	#2,$24(a0)
000155B0 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000155B6 1228 0028                  		move.b	$28(a0),d1	; get object type
000155BA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000155BE 6700                       		beq.s	loc_156BA	; if zero, branch
000155C0 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000155C6                            
000155C6                            loc_156BA:
000155C6 1228 0028                  		move.b	$28(a0),d1	; get object type
000155CA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000155CE 4881                       		ext.w	d1
000155D0 E841                       		asr.w	#4,d1
000155D2 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000155D6                            
000155D6                            Obj68_Action:				; XREF: Obj68_Index
000155D6 6100                       		bsr.s	Obj68_MoveSonic
000155D8 3028 0008                  		move.w	8(a0),d0
000155DC 0240 FF80                  		andi.w	#$FF80,d0
000155E0 3238 F700                  		move.w	($FFFFF700).w,d1
000155E4 0441 0080                  		subi.w	#$80,d1
000155E8 0241 FF80                  		andi.w	#$FF80,d1
000155EC 9041                       		sub.w	d1,d0
000155EE 0C40 0280                  		cmpi.w	#$280,d0
000155F2 6200                       		bhi.s	Obj68_Delete
000155F4 4E75                       		rts	
000155F6                            ; ===========================================================================
000155F6                            
000155F6                            Obj68_Delete:
000155F6 4EF9 0000 D5C6             		jmp	DeleteObject
000155FC                            ; ===========================================================================
000155FC                            
000155FC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000155FC 7400                       		moveq	#0,d2
000155FE 1428 0038                  		move.b	$38(a0),d2
00015602 3602                       		move.w	d2,d3
00015604 D643                       		add.w	d3,d3
00015606 43F8 D000                  		lea	($FFFFD000).w,a1
0001560A 3029 0008                  		move.w	8(a1),d0
0001560E 9068 0008                  		sub.w	8(a0),d0
00015612 D042                       		add.w	d2,d0
00015614 B043                       		cmp.w	d3,d0
00015616 6400                       		bcc.s	locret_1572E
00015618 3229 000C                  		move.w	$C(a1),d1
0001561C 9268 000C                  		sub.w	$C(a0),d1
00015620 0641 0030                  		addi.w	#$30,d1
00015624 0C41 0030                  		cmpi.w	#$30,d1
00015628 6400                       		bcc.s	locret_1572E
0001562A 0829 0001 0022             		btst	#1,$22(a1)
00015630 6600                       		bne.s	locret_1572E
00015632 3028 0036                  		move.w	$36(a0),d0
00015636 D169 0008                  		add.w	d0,8(a1)
0001563A                            
0001563A                            locret_1572E:
0001563A 4E75                       		rts	
0001563C                            
0001563C                            ; ===========================================================================
0001563C                            ; ---------------------------------------------------------------------------
0001563C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001563C                            ; ---------------------------------------------------------------------------
0001563C                            
0001563C                            Obj69:					; XREF: Obj_Index
0001563C 7000                       		moveq	#0,d0
0001563E 1028 0024                  		move.b	$24(a0),d0
00015642 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015646 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001564A                            ; ===========================================================================
0001564A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001564C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001564E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015650                            ; ===========================================================================
00015650                            
00015650                            Obj69_Main:				; XREF: Obj69_Index
00015650 5428 0024                  		addq.b	#2,$24(a0)
00015654 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001565C 317C 4492 0002             		move.w	#$4492,2(a0)
00015662 0028 0004 0001             		ori.b	#4,1(a0)
00015668 117C 0080 0019             		move.b	#$80,$19(a0)
0001566E 7000                       		moveq	#0,d0
00015670 1028 0028                  		move.b	$28(a0),d0
00015674 0240 000F                  		andi.w	#$F,d0
00015678 C0FC 003C                  		mulu.w	#$3C,d0
0001567C 3140 0032                  		move.w	d0,$32(a0)
00015680 4A28 0028                  		tst.b	$28(a0)
00015684 6A00                       		bpl.s	Obj69_Trapdoor
00015686 5428 0024                  		addq.b	#2,$24(a0)
0001568A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015692 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015698 117C 0010 0019             		move.b	#$10,$19(a0)
0001569E 117C 0002 001C             		move.b	#2,$1C(a0)
000156A4 7000                       		moveq	#0,d0
000156A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000156AA 3200                       		move.w	d0,d1
000156AC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000156B0 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000156B4 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000156B8 3140 0032                  		move.w	d0,$32(a0)
000156BC 0241 0070                  		andi.w	#$70,d1
000156C0 0641 0010                  		addi.w	#$10,d1
000156C4 E549                       		lsl.w	#2,d1
000156C6 5341                       		subq.w	#1,d1
000156C8 3141 0036                  		move.w	d1,$36(a0)
000156CC 6000                       		bra.s	Obj69_Spinner
000156CE                            ; ===========================================================================
000156CE                            
000156CE                            Obj69_Trapdoor:				; XREF: Obj69_Index
000156CE 5368 0030                  		subq.w	#1,$30(a0)
000156D2 6A00                       		bpl.s	Obj69_Animate
000156D4 3168 0032 0030             		move.w	$32(a0),$30(a0)
000156DA 0868 0000 001C             		bchg	#0,$1C(a0)
000156E0 4A28 0001                  		tst.b	1(a0)
000156E4 6A00                       		bpl.s	Obj69_Animate
000156E6 303C 00BB                  		move.w	#$BB,d0
000156EA 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play door sound
000156F0                            
000156F0                            Obj69_Animate:
000156F0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000156F6 4EB9 0000 A6B6             		jsr	AnimateSprite
000156FC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015700 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015702 323C 004B                  		move.w	#$4B,d1
00015706 343C 000C                  		move.w	#$C,d2
0001570A 3602                       		move.w	d2,d3
0001570C 5243                       		addq.w	#1,d3
0001570E 3828 0008                  		move.w	8(a0),d4
00015712 6100 A236                  		bsr.w	SolidObject
00015716 6000 9F0A                  		bra.w	MarkObjGone
0001571A                            ; ===========================================================================
0001571A                            
0001571A                            Obj69_NotSolid:
0001571A 0828 0003 0022             		btst	#3,$22(a0)
00015720 6700                       		beq.s	Obj69_Display
00015722 43F8 D000                  		lea	($FFFFD000).w,a1
00015726 08A9 0003 0022             		bclr	#3,$22(a1)
0001572C 08A8 0003 0022             		bclr	#3,$22(a0)
00015732 4228 0025                  		clr.b	$25(a0)
00015736                            
00015736                            Obj69_Display:
00015736 6000 9EEA                  		bra.w	MarkObjGone
0001573A                            ; ===========================================================================
0001573A                            
0001573A                            Obj69_Spinner:				; XREF: Obj69_Index
0001573A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001573E C068 0036                  		and.w	$36(a0),d0
00015742 6600                       		bne.s	Obj69_Delay
00015744 117C 0001 0034             		move.b	#1,$34(a0)
0001574A                            
0001574A                            Obj69_Delay:
0001574A 4A28 0034                  		tst.b	$34(a0)
0001574E 6700                       		beq.s	Obj69_Animate2
00015750 5368 0030                  		subq.w	#1,$30(a0)
00015754 6A00                       		bpl.s	Obj69_Animate2
00015756 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001575C 4228 0034                  		clr.b	$34(a0)
00015760 0868 0000 001C             		bchg	#0,$1C(a0)
00015766                            
00015766                            Obj69_Animate2:
00015766 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001576C 4EB9 0000 A6B6             		jsr	AnimateSprite
00015772 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015776 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015778 323C 001B                  		move.w	#$1B,d1
0001577C 343C 0007                  		move.w	#7,d2
00015780 3602                       		move.w	d2,d3
00015782 5243                       		addq.w	#1,d3
00015784 3828 0008                  		move.w	8(a0),d4
00015788 6100 A1C0                  		bsr.w	SolidObject
0001578C 6000 9E94                  		bra.w	MarkObjGone
00015790                            ; ===========================================================================
00015790                            
00015790                            Obj69_NotSolid2:
00015790 0828 0003 0022             		btst	#3,$22(a0)
00015796 6700                       		beq.s	Obj69_Display2
00015798 43F8 D000                  		lea	($FFFFD000).w,a1
0001579C 08A9 0003 0022             		bclr	#3,$22(a1)
000157A2 08A8 0003 0022             		bclr	#3,$22(a0)
000157A8 4228 0025                  		clr.b	$25(a0)
000157AC                            
000157AC                            Obj69_Display2:
000157AC 6000 9E74                  		bra.w	MarkObjGone
000157B0                            ; ===========================================================================
000157B0                            Ani_obj69:
000157B0                            	include "_anim\obj69.asm"
000157B0                            ; ---------------------------------------------------------------------------
000157B0                            ; Animation script - trapdoor (SBZ)
000157B0                            ; ---------------------------------------------------------------------------
000157B0 0000                       		dc.w byte_158AC-Ani_obj69
000157B2 0000                       		dc.w byte_158B2-Ani_obj69
000157B4 0000                       		dc.w byte_158B8-Ani_obj69
000157B6 0000                       		dc.w byte_158CC-Ani_obj69
000157B8 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000157BE 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000157C4 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000157D1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000157D8 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000157E5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000157EC                            		even
000157EC                            		even
000157EC                            
000157EC                            ; ---------------------------------------------------------------------------
000157EC                            ; Sprite mappings - trapdoor (SBZ)
000157EC                            ; ---------------------------------------------------------------------------
000157EC                            Map_obj69:
000157EC                            	include "_maps\obj69.asm"
000157EC                            ; ---------------------------------------------------------------------------
000157EC                            ; Sprite mappings - trapdoor (SBZ)
000157EC                            ; ---------------------------------------------------------------------------
000157EC 0000                       		dc.w byte_158E6-Map_obj69
000157EE 0000                       		dc.w byte_158FB-Map_obj69
000157F0 0000                       		dc.w byte_15924-Map_obj69
000157F2 04                         byte_158E6:	dc.b 4
000157F3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000157F8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000157FD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015802 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015807 08                         byte_158FB:	dc.b 8
00015808 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001580D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015812 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015817 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001581C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015821 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015826 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001582B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015830 04                         byte_15924:	dc.b 4
00015831 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015836 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001583B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015840 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015846 00                         		even
00015846 00                         		even
00015846                            
00015846                            ; ---------------------------------------------------------------------------
00015846                            ; Sprite mappings - spinning platforms (SBZ)
00015846                            ; ---------------------------------------------------------------------------
00015846                            Map_obj69a:
00015846                            	include "_maps\obj69a.asm"
00015846                            ; ---------------------------------------------------------------------------
00015846                            ; Sprite mappings - spinning platforms (SBZ)
00015846                            ; ---------------------------------------------------------------------------
00015846 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001584A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001584E 0000                       		dc.w byte_15970-Map_obj69a
00015850 02                         byte_15944:	dc.b 2
00015851 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015856 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001585B 02                         byte_1594F:	dc.b 2
0001585C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015861 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015866 02                         byte_1595A:	dc.b 2
00015867 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001586C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015871 02                         byte_15965:	dc.b 2
00015872 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015877 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001587C 02                         byte_15970:	dc.b 2
0001587D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015882 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015888 00                         		even
00015888 00                         		even
00015888                            
00015888                            ; ===========================================================================
00015888                            ; ---------------------------------------------------------------------------
00015888                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015888                            ; ---------------------------------------------------------------------------
00015888                            
00015888                            Obj6A:					; XREF: Obj_Index
00015888 7000                       		moveq	#0,d0
0001588A 1028 0024                  		move.b	$24(a0),d0
0001588E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015892 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015896                            ; ===========================================================================
00015896 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015898 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001589A                            ; ===========================================================================
0001589A                            
0001589A                            Obj6A_Main:				; XREF: Obj6A_Index
0001589A 5428 0024                  		addq.b	#2,$24(a0)
0001589E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000158A6 317C 43B5 0002             		move.w	#$43B5,2(a0)
000158AC 117C 0004 0001             		move.b	#4,1(a0)
000158B2 117C 0004 0018             		move.b	#4,$18(a0)
000158B8 117C 0020 0019             		move.b	#$20,$19(a0)
000158BE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000158C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000158CA 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000158D0 6400                       		bcc.s	Obj6A_Action
000158D2 117C 00A2 0020             		move.b	#$A2,$20(a0)
000158D8                            
000158D8                            Obj6A_Action:				; XREF: Obj6A_Index
000158D8 7000                       		moveq	#0,d0
000158DA 1028 0028                  		move.b	$28(a0),d0
000158DE 0240 0007                  		andi.w	#7,d0
000158E2 D040                       		add.w	d0,d0
000158E4 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000158E8 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000158EC 3028 003A                  		move.w	$3A(a0),d0
000158F0 0240 FF80                  		andi.w	#$FF80,d0
000158F4 3238 F700                  		move.w	($FFFFF700).w,d1
000158F8 0441 0080                  		subi.w	#$80,d1
000158FC 0241 FF80                  		andi.w	#$FF80,d1
00015900 9041                       		sub.w	d1,d0
00015902 0C40 0280                  		cmpi.w	#$280,d0
00015906 6200                       		bhi.s	Obj6A_Delete
00015908 4EF9 0000 D58A             		jmp	DisplaySprite
0001590E                            ; ===========================================================================
0001590E                            
0001590E                            Obj6A_Delete:
0001590E 4EF9 0000 D5C6             		jmp	DeleteObject
00015914                            ; ===========================================================================
00015914 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015918 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001591C 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001591E                            ; ===========================================================================
0001591E                            
0001591E                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001591E 4E75                       		rts	
00015920                            ; ===========================================================================
00015920                            
00015920                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015920 323C 0060                  		move.w	#$60,d1
00015924 7000                       		moveq	#0,d0
00015926 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001592A 0828 0000 0022             		btst	#0,$22(a0)
00015930 6700                       		beq.s	Obj6A_Animate01
00015932 4440                       		neg.w	d0
00015934 D041                       		add.w	d1,d0
00015936                            
00015936                            Obj6A_Animate01:
00015936 3228 003A                  		move.w	$3A(a0),d1
0001593A 9240                       		sub.w	d0,d1
0001593C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015940 5328 001E                  		subq.b	#1,$1E(a0)
00015944 6A00                       		bpl.s	loc_15A46
00015946 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001594C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015952                            
00015952                            loc_15A46:
00015952 4A28 0001                  		tst.b	1(a0)
00015956 6A00                       		bpl.s	locret_15A60
00015958 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001595C 0240 000F                  		andi.w	#$F,d0
00015960 6600                       		bne.s	locret_15A60
00015962 303C 00B0                  		move.w	#$B0,d0
00015966 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play saw sound
0001596C                            
0001596C                            locret_15A60:
0001596C 4E75                       		rts	
0001596E                            ; ===========================================================================
0001596E                            
0001596E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001596E 323C 0030                  		move.w	#$30,d1
00015972 7000                       		moveq	#0,d0
00015974 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015978 0828 0000 0022             		btst	#0,$22(a0)
0001597E 6700                       		beq.s	Obj6A_Animate02
00015980 4440                       		neg.w	d0
00015982 0640 0080                  		addi.w	#$80,d0
00015986                            
00015986                            Obj6A_Animate02:
00015986 3228 0038                  		move.w	$38(a0),d1
0001598A 9240                       		sub.w	d0,d1
0001598C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015990 5328 001E                  		subq.b	#1,$1E(a0)
00015994 6A00                       		bpl.s	loc_15A96
00015996 117C 0002 001E             		move.b	#2,$1E(a0)
0001599C 0868 0000 001A             		bchg	#0,$1A(a0)
000159A2                            
000159A2                            loc_15A96:
000159A2 4A28 0001                  		tst.b	1(a0)
000159A6 6A00                       		bpl.s	locret_15AB0
000159A8 1038 FE64                  		move.b	($FFFFFE64).w,d0
000159AC 0C00 0018                  		cmpi.b	#$18,d0
000159B0 6600                       		bne.s	locret_15AB0
000159B2 303C 00B0                  		move.w	#$B0,d0
000159B6 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play saw sound
000159BC                            
000159BC                            locret_15AB0:
000159BC 4E75                       		rts	
000159BE                            ; ===========================================================================
000159BE                            
000159BE                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000159BE 4A28 003D                  		tst.b	$3D(a0)
000159C2 6600                       		bne.s	Obj6A_Animate03
000159C4 3038 D008                  		move.w	($FFFFD008).w,d0
000159C8 0440 00C0                  		subi.w	#$C0,d0
000159CC 6500                       		bcs.s	loc_15B02
000159CE 9068 0008                  		sub.w	8(a0),d0
000159D2 6500                       		bcs.s	loc_15B02
000159D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000159D8 0440 0080                  		subi.w	#$80,d0
000159DC B068 000C                  		cmp.w	$C(a0),d0
000159E0 6400                       		bcc.s	locret_15B04
000159E2 0640 0100                  		addi.w	#$100,d0
000159E6 B068 000C                  		cmp.w	$C(a0),d0
000159EA 6500                       		bcs.s	locret_15B04
000159EC 117C 0001 003D             		move.b	#1,$3D(a0)
000159F2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000159F8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000159FE 117C 0002 001A             		move.b	#2,$1A(a0)
00015A04 303C 00B0                  		move.w	#$B0,d0
00015A08 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play saw sound
00015A0E                            
00015A0E                            loc_15B02:
00015A0E 588F                       		addq.l	#4,sp
00015A10                            
00015A10                            locret_15B04:
00015A10 4E75                       		rts	
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015A12 4EB9 0000 D564             		jsr	SpeedToPos
00015A18 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015A1E 5328 001E                  		subq.b	#1,$1E(a0)
00015A22 6A00                       		bpl.s	locret_15B24
00015A24 117C 0002 001E             		move.b	#2,$1E(a0)
00015A2A 0868 0000 001A             		bchg	#0,$1A(a0)
00015A30                            
00015A30                            locret_15B24:
00015A30 4E75                       		rts	
00015A32                            ; ===========================================================================
00015A32                            
00015A32                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015A32 4A28 003D                  		tst.b	$3D(a0)
00015A36 6600                       		bne.s	Obj6A_Animate04
00015A38 3038 D008                  		move.w	($FFFFD008).w,d0
00015A3C 0640 00E0                  		addi.w	#$E0,d0
00015A40 9068 0008                  		sub.w	8(a0),d0
00015A44 6400                       		bcc.s	loc_15B74
00015A46 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015A4A 0440 0080                  		subi.w	#$80,d0
00015A4E B068 000C                  		cmp.w	$C(a0),d0
00015A52 6400                       		bcc.s	locret_15B76
00015A54 0640 0100                  		addi.w	#$100,d0
00015A58 B068 000C                  		cmp.w	$C(a0),d0
00015A5C 6500                       		bcs.s	locret_15B76
00015A5E 117C 0001 003D             		move.b	#1,$3D(a0)
00015A64 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015A6A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015A70 117C 0002 001A             		move.b	#2,$1A(a0)
00015A76 303C 00B0                  		move.w	#$B0,d0
00015A7A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play saw sound
00015A80                            
00015A80                            loc_15B74:
00015A80 588F                       		addq.l	#4,sp
00015A82                            
00015A82                            locret_15B76:
00015A82 4E75                       		rts	
00015A84                            ; ===========================================================================
00015A84                            
00015A84                            Obj6A_Animate04:
00015A84 4EB9 0000 D564             		jsr	SpeedToPos
00015A8A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015A90 5328 001E                  		subq.b	#1,$1E(a0)
00015A94 6A00                       		bpl.s	locret_15B96
00015A96 117C 0002 001E             		move.b	#2,$1E(a0)
00015A9C 0868 0000 001A             		bchg	#0,$1A(a0)
00015AA2                            
00015AA2                            locret_15B96:
00015AA2 4E75                       		rts	
00015AA4                            ; ===========================================================================
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4                            Map_obj6A:
00015AA4                            	include "_maps\obj6A.asm"
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015AA8 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015AAC 07                         byte_15BA0:	dc.b 7
00015AAD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015AB2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015AB7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015ABC E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015AC1 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015AC6 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015ACB 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015AD0 07                         byte_15BC4:	dc.b 7
00015AD1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015AD6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015ADB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015AE0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015AE5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015AEA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015AEF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015AF4 04                         byte_15BE8:	dc.b 4
00015AF5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015AFA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015AFF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015B04 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015B09 04                         byte_15BFD:	dc.b 4
00015B0A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015B0F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015B14 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015B19 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015B1E                            		even
00015B1E                            		even
00015B1E                            
00015B1E                            ; ===========================================================================
00015B1E                            ; ---------------------------------------------------------------------------
00015B1E                            ; Object 6B - stomper (SBZ)
00015B1E                            ; ---------------------------------------------------------------------------
00015B1E                            
00015B1E                            Obj6B:					; XREF: Obj_Index
00015B1E 7000                       		moveq	#0,d0
00015B20 1028 0024                  		move.b	$24(a0),d0
00015B24 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015B28 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015B2C                            ; ===========================================================================
00015B2C 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015B2E 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015B30                            
00015B30 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015B34 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015B38 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015B3C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015B40 8040 0005                  		dc.b  $80, $40,	  0,   5
00015B44                            ; ===========================================================================
00015B44                            
00015B44                            Obj6B_Main:				; XREF: Obj6B_Index
00015B44 5428 0024                  		addq.b	#2,$24(a0)
00015B48 7000                       		moveq	#0,d0
00015B4A 1028 0028                  		move.b	$28(a0),d0
00015B4E E448                       		lsr.w	#2,d0
00015B50 0240 001C                  		andi.w	#$1C,d0
00015B54 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015B58 115B 0019                  		move.b	(a3)+,$19(a0)
00015B5C 115B 0016                  		move.b	(a3)+,$16(a0)
00015B60 E448                       		lsr.w	#2,d0
00015B62 1140 001A                  		move.b	d0,$1A(a0)
00015B66 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015B6E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015B74 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015B7A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015B7C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015B82 6700                       		beq.s	Obj6B_SBZ3
00015B84                            
00015B84                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015B84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015B88 7000                       		moveq	#0,d0
00015B8A 1028 0023                  		move.b	$23(a0),d0
00015B8E 6700                       		beq.s	Obj6B_Delete
00015B90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015B96                            
00015B96                            Obj6B_Delete:
00015B96 4EF9 0000 D5C6             		jmp	DeleteObject
00015B9C                            ; ===========================================================================
00015B9C                            
00015B9C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015B9C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015BA2 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015BA8 6600                       		bne.s	Obj6B_SBZ12
00015BAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015BAE 7000                       		moveq	#0,d0
00015BB0 1028 0023                  		move.b	$23(a0),d0
00015BB4 6700                       		beq.s	Obj6B_SBZ12
00015BB6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015BBC 6700                       		beq.s	Obj6B_SBZ12
00015BBE 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015BC2 60C0                       		bra.s	Obj6B_ChkGone
00015BC4                            ; ===========================================================================
00015BC4                            
00015BC4                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015BC4 0028 0004 0001             		ori.b	#4,1(a0)
00015BCA 117C 0004 0018             		move.b	#4,$18(a0)
00015BD0 3168 0008 0034             		move.w	8(a0),$34(a0)
00015BD6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015BDC 7000                       		moveq	#0,d0
00015BDE 101B                       		move.b	(a3)+,d0
00015BE0 3140 003C                  		move.w	d0,$3C(a0)
00015BE4 7000                       		moveq	#0,d0
00015BE6 1028 0028                  		move.b	$28(a0),d0
00015BEA 6A00                       		bpl.s	Obj6B_Action
00015BEC 0200 000F                  		andi.b	#$F,d0
00015BF0 1140 003E                  		move.b	d0,$3E(a0)
00015BF4 1153 0028                  		move.b	(a3),$28(a0)
00015BF8 0C13 0005                  		cmpi.b	#5,(a3)
00015BFC 6600                       		bne.s	Obj6B_ChkGone2
00015BFE 08E8 0004 0001             		bset	#4,1(a0)
00015C04                            
00015C04                            Obj6B_ChkGone2:
00015C04 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015C08 7000                       		moveq	#0,d0
00015C0A 1028 0023                  		move.b	$23(a0),d0
00015C0E 6700                       		beq.s	Obj6B_Action
00015C10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015C16                            
00015C16                            Obj6B_Action:				; XREF: Obj6B_Index
00015C16 3F28 0008                  		move.w	8(a0),-(sp)
00015C1A 7000                       		moveq	#0,d0
00015C1C 1028 0028                  		move.b	$28(a0),d0
00015C20 0240 000F                  		andi.w	#$F,d0
00015C24 D040                       		add.w	d0,d0
00015C26 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015C2A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015C2E 381F                       		move.w	(sp)+,d4
00015C30 4A28 0001                  		tst.b	1(a0)
00015C34 6A00                       		bpl.s	Obj6B_ChkDel
00015C36 7200                       		moveq	#0,d1
00015C38 1228 0019                  		move.b	$19(a0),d1
00015C3C 0641 000B                  		addi.w	#$B,d1
00015C40 7400                       		moveq	#0,d2
00015C42 1428 0016                  		move.b	$16(a0),d2
00015C46 3602                       		move.w	d2,d3
00015C48 5243                       		addq.w	#1,d3
00015C4A 6100 9CFE                  		bsr.w	SolidObject
00015C4E                            
00015C4E                            Obj6B_ChkDel:
00015C4E 3028 0034                  		move.w	$34(a0),d0
00015C52 0240 FF80                  		andi.w	#$FF80,d0
00015C56 3238 F700                  		move.w	($FFFFF700).w,d1
00015C5A 0441 0080                  		subi.w	#$80,d1
00015C5E 0241 FF80                  		andi.w	#$FF80,d1
00015C62 9041                       		sub.w	d1,d0
00015C64 0C40 0280                  		cmpi.w	#$280,d0
00015C68 6200                       		bhi.s	loc_15D64
00015C6A 4EF9 0000 D58A             		jmp	DisplaySprite
00015C70                            ; ===========================================================================
00015C70                            
00015C70                            loc_15D64:
00015C70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015C76 6600                       		bne.s	Obj6B_Delete2
00015C78 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015C7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015C80 7000                       		moveq	#0,d0
00015C82 1028 0023                  		move.b	$23(a0),d0
00015C86 6700                       		beq.s	Obj6B_Delete2
00015C88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015C8E                            
00015C8E                            Obj6B_Delete2:
00015C8E 4EF9 0000 D5C6             		jmp	DeleteObject
00015C94                            ; ===========================================================================
00015C94 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015C98 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015C9C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015CA0                            ; ===========================================================================
00015CA0                            
00015CA0                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015CA0 4E75                       		rts	
00015CA2                            ; ===========================================================================
00015CA2                            
00015CA2                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015CA2 4A28 0038                  		tst.b	$38(a0)
00015CA6 6600                       		bne.s	loc_15DB4
00015CA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CAC 7000                       		moveq	#0,d0
00015CAE 1028 003E                  		move.b	$3E(a0),d0
00015CB2 0832 0000 0000             		btst	#0,(a2,d0.w)
00015CB8 6700                       		beq.s	loc_15DC2
00015CBA 117C 0001 0038             		move.b	#1,$38(a0)
00015CC0                            
00015CC0                            loc_15DB4:
00015CC0 3028 003C                  		move.w	$3C(a0),d0
00015CC4 B068 003A                  		cmp.w	$3A(a0),d0
00015CC8 6700                       		beq.s	loc_15DE0
00015CCA 5468 003A                  		addq.w	#2,$3A(a0)
00015CCE                            
00015CCE                            loc_15DC2:
00015CCE 3028 003A                  		move.w	$3A(a0),d0
00015CD2 0828 0000 0022             		btst	#0,$22(a0)
00015CD8 6700                       		beq.s	loc_15DD4
00015CDA 4440                       		neg.w	d0
00015CDC 0640 0080                  		addi.w	#$80,d0
00015CE0                            
00015CE0                            loc_15DD4:
00015CE0 3228 0034                  		move.w	$34(a0),d1
00015CE4 9240                       		sub.w	d0,d1
00015CE6 3141 0008                  		move.w	d1,8(a0)
00015CEA 4E75                       		rts	
00015CEC                            ; ===========================================================================
00015CEC                            
00015CEC                            loc_15DE0:
00015CEC 5228 0028                  		addq.b	#1,$28(a0)
00015CF0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015CF6 4228 0038                  		clr.b	$38(a0)
00015CFA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015CFE 7000                       		moveq	#0,d0
00015D00 1028 0023                  		move.b	$23(a0),d0
00015D04 67C8                       		beq.s	loc_15DC2
00015D06 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015D0C 60C0                       		bra.s	loc_15DC2
00015D0E                            ; ===========================================================================
00015D0E                            
00015D0E                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015D0E 4A28 0038                  		tst.b	$38(a0)
00015D12 6600                       		bne.s	loc_15E14
00015D14 5368 0036                  		subq.w	#1,$36(a0)
00015D18 6600                       		bne.s	loc_15E1E
00015D1A 117C 0001 0038             		move.b	#1,$38(a0)
00015D20                            
00015D20                            loc_15E14:
00015D20 4A68 003A                  		tst.w	$3A(a0)
00015D24 6700                       		beq.s	loc_15E3C
00015D26 5568 003A                  		subq.w	#2,$3A(a0)
00015D2A                            
00015D2A                            loc_15E1E:
00015D2A 3028 003A                  		move.w	$3A(a0),d0
00015D2E 0828 0000 0022             		btst	#0,$22(a0)
00015D34 6700                       		beq.s	loc_15E30
00015D36 4440                       		neg.w	d0
00015D38 0640 0080                  		addi.w	#$80,d0
00015D3C                            
00015D3C                            loc_15E30:
00015D3C 3228 0034                  		move.w	$34(a0),d1
00015D40 9240                       		sub.w	d0,d1
00015D42 3141 0008                  		move.w	d1,8(a0)
00015D46 4E75                       		rts	
00015D48                            ; ===========================================================================
00015D48                            
00015D48                            loc_15E3C:
00015D48 5328 0028                  		subq.b	#1,$28(a0)
00015D4C 4228 0038                  		clr.b	$38(a0)
00015D50 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D54 7000                       		moveq	#0,d0
00015D56 1028 0023                  		move.b	$23(a0),d0
00015D5A 67CE                       		beq.s	loc_15E1E
00015D5C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015D62 60C6                       		bra.s	loc_15E1E
00015D64                            ; ===========================================================================
00015D64                            
00015D64                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015D64 4A28 0038                  		tst.b	$38(a0)
00015D68 6600                       		bne.s	loc_15E7C
00015D6A 4A68 003A                  		tst.w	$3A(a0)
00015D6E 6700                       		beq.s	loc_15E6A
00015D70 5368 003A                  		subq.w	#1,$3A(a0)
00015D74 6000                       		bra.s	loc_15E8E
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            loc_15E6A:
00015D76 5368 0036                  		subq.w	#1,$36(a0)
00015D7A 6A00                       		bpl.s	loc_15E8E
00015D7C 317C 003C 0036             		move.w	#$3C,$36(a0)
00015D82 117C 0001 0038             		move.b	#1,$38(a0)
00015D88                            
00015D88                            loc_15E7C:
00015D88 5068 003A                  		addq.w	#8,$3A(a0)
00015D8C 3028 003A                  		move.w	$3A(a0),d0
00015D90 B068 003C                  		cmp.w	$3C(a0),d0
00015D94 6600                       		bne.s	loc_15E8E
00015D96 4228 0038                  		clr.b	$38(a0)
00015D9A                            
00015D9A                            loc_15E8E:
00015D9A 3028 003A                  		move.w	$3A(a0),d0
00015D9E 0828 0000 0022             		btst	#0,$22(a0)
00015DA4 6700                       		beq.s	loc_15EA0
00015DA6 4440                       		neg.w	d0
00015DA8 0640 0038                  		addi.w	#$38,d0
00015DAC                            
00015DAC                            loc_15EA0:
00015DAC 3228 0030                  		move.w	$30(a0),d1
00015DB0 D240                       		add.w	d0,d1
00015DB2 3141 000C                  		move.w	d1,$C(a0)
00015DB6 4E75                       		rts	
00015DB8                            ; ===========================================================================
00015DB8                            
00015DB8                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00015DB8 4A28 0038                  		tst.b	$38(a0)
00015DBC 6600                       		bne.s	loc_15ED0
00015DBE 4A68 003A                  		tst.w	$3A(a0)
00015DC2 6700                       		beq.s	loc_15EBE
00015DC4 5168 003A                  		subq.w	#8,$3A(a0)
00015DC8 6000                       		bra.s	loc_15EF0
00015DCA                            ; ===========================================================================
00015DCA                            
00015DCA                            loc_15EBE:
00015DCA 5368 0036                  		subq.w	#1,$36(a0)
00015DCE 6A00                       		bpl.s	loc_15EF0
00015DD0 317C 003C 0036             		move.w	#$3C,$36(a0)
00015DD6 117C 0001 0038             		move.b	#1,$38(a0)
00015DDC                            
00015DDC                            loc_15ED0:
00015DDC 3028 003A                  		move.w	$3A(a0),d0
00015DE0 B068 003C                  		cmp.w	$3C(a0),d0
00015DE4 6700                       		beq.s	loc_15EE0
00015DE6 5068 003A                  		addq.w	#8,$3A(a0)
00015DEA 6000                       		bra.s	loc_15EF0
00015DEC                            ; ===========================================================================
00015DEC                            
00015DEC                            loc_15EE0:
00015DEC 5368 0036                  		subq.w	#1,$36(a0)
00015DF0 6A00                       		bpl.s	loc_15EF0
00015DF2 317C 003C 0036             		move.w	#$3C,$36(a0)
00015DF8 4228 0038                  		clr.b	$38(a0)
00015DFC                            
00015DFC                            loc_15EF0:
00015DFC 3028 003A                  		move.w	$3A(a0),d0
00015E00 0828 0000 0022             		btst	#0,$22(a0)
00015E06 6700                       		beq.s	loc_15F02
00015E08 4440                       		neg.w	d0
00015E0A 0640 0038                  		addi.w	#$38,d0
00015E0E                            
00015E0E                            loc_15F02:
00015E0E 3228 0030                  		move.w	$30(a0),d1
00015E12 D240                       		add.w	d0,d1
00015E14 3141 000C                  		move.w	d1,$C(a0)
00015E18 4E75                       		rts	
00015E1A                            ; ===========================================================================
00015E1A                            
00015E1A                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00015E1A 4A28 0038                  		tst.b	$38(a0)
00015E1E 6600                       		bne.s	loc_15F3E
00015E20 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015E24 7000                       		moveq	#0,d0
00015E26 1028 003E                  		move.b	$3E(a0),d0
00015E2A 0832 0000 0000             		btst	#0,(a2,d0.w)
00015E30 6700                       		beq.s	locret_15F5C
00015E32 117C 0001 0038             		move.b	#1,$38(a0)
00015E38 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E3C 7000                       		moveq	#0,d0
00015E3E 1028 0023                  		move.b	$23(a0),d0
00015E42 6700                       		beq.s	loc_15F3E
00015E44 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015E4A                            
00015E4A                            loc_15F3E:
00015E4A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00015E52 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00015E5A 3168 0008 0034             		move.w	8(a0),$34(a0)
00015E60 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00015E66 6700                       		beq.s	loc_15F5E
00015E68                            
00015E68                            locret_15F5C:
00015E68 4E75                       		rts	
00015E6A                            ; ===========================================================================
00015E6A                            
00015E6A                            loc_15F5E:
00015E6A 4228 0028                  		clr.b	$28(a0)
00015E6E 4228 0038                  		clr.b	$38(a0)
00015E72 4E75                       		rts	
00015E74                            ; ===========================================================================
00015E74                            ; ---------------------------------------------------------------------------
00015E74                            ; Sprite mappings - stomper and	platforms (SBZ)
00015E74                            ; ---------------------------------------------------------------------------
00015E74                            Map_obj6B:
00015E74                            	include "_maps\obj6B.asm"
00015E74                            ; ---------------------------------------------------------------------------
00015E74                            ; Sprite mappings - stomper and	platforms (SBZ)
00015E74                            ; ---------------------------------------------------------------------------
00015E74 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00015E78 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00015E7C 0000                       		dc.w byte_15FB0-Map_obj6B
00015E7E 04                         byte_15F72:	dc.b 4
00015E7F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00015E84 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00015E89 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00015E8E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00015E93 08                         byte_15F87:	dc.b 8
00015E94 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00015E99 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00015E9E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00015EA3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00015EA8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00015EAD 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00015EB2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00015EB7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00015EBC 0E                         byte_15FB0:	dc.b $E
00015EBD C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00015EC2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00015EC7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00015ECC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00015ED1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00015ED6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00015EDB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00015EE0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00015EE5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00015EEA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00015EEF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00015EF4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00015EF9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00015EFE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00015F04 00                         		even
00015F04 00                         		even
00015F04                            
00015F04                            ; ===========================================================================
00015F04                            ; ---------------------------------------------------------------------------
00015F04                            ; Object 6C - vanishing	platforms (SBZ)
00015F04                            ; ---------------------------------------------------------------------------
00015F04                            
00015F04                            Obj6C:					; XREF: Obj_Index
00015F04 7000                       		moveq	#0,d0
00015F06 1028 0024                  		move.b	$24(a0),d0
00015F0A 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00015F0E 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00015F12                            ; ===========================================================================
00015F12 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00015F14 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00015F16 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00015F18 0000                       		dc.w loc_16068-Obj6C_Index
00015F1A                            ; ===========================================================================
00015F1A                            
00015F1A                            Obj6C_Main:				; XREF: Obj6C_Index
00015F1A 5C28 0024                  		addq.b	#6,$24(a0)
00015F1E 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00015F26 317C 44C3 0002             		move.w	#$44C3,2(a0)
00015F2C 0028 0004 0001             		ori.b	#4,1(a0)
00015F32 117C 0010 0019             		move.b	#$10,$19(a0)
00015F38 117C 0004 0018             		move.b	#4,$18(a0)
00015F3E 7000                       		moveq	#0,d0
00015F40 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F44 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015F48 5240                       		addq.w	#1,d0		; add 1
00015F4A EF48                       		lsl.w	#7,d0		; multiply by $80
00015F4C 3200                       		move.w	d0,d1
00015F4E 5340                       		subq.w	#1,d0
00015F50 3140 0030                  		move.w	d0,$30(a0)
00015F54 3140 0032                  		move.w	d0,$32(a0)
00015F58 7000                       		moveq	#0,d0
00015F5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F5E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00015F62 0641 0080                  		addi.w	#$80,d1
00015F66 C0C1                       		mulu.w	d1,d0
00015F68 E088                       		lsr.l	#8,d0
00015F6A 3140 0036                  		move.w	d0,$36(a0)
00015F6E 5341                       		subq.w	#1,d1
00015F70 3141 0038                  		move.w	d1,$38(a0)
00015F74                            
00015F74                            loc_16068:				; XREF: Obj6C_Index
00015F74 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F78 9068 0036                  		sub.w	$36(a0),d0
00015F7C C068 0038                  		and.w	$38(a0),d0
00015F80 6600                       		bne.s	Obj6C_Animate
00015F82 5928 0024                  		subq.b	#4,$24(a0)
00015F86 6000                       		bra.s	Obj6C_Vanish
00015F88                            ; ===========================================================================
00015F88                            
00015F88                            Obj6C_Animate:
00015F88 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00015F8E 4EB9 0000 A6B6             		jsr	AnimateSprite
00015F94 6000 968C                  		bra.w	MarkObjGone
00015F98                            ; ===========================================================================
00015F98                            
00015F98                            Obj6C_Vanish:				; XREF: Obj6C_Index
00015F98 5368 0030                  		subq.w	#1,$30(a0)
00015F9C 6A00                       		bpl.s	loc_160AA
00015F9E 317C 007F 0030             		move.w	#127,$30(a0)
00015FA4 4A28 001C                  		tst.b	$1C(a0)
00015FA8 6700                       		beq.s	loc_160A4
00015FAA 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015FB0                            
00015FB0                            loc_160A4:
00015FB0 0868 0000 001C             		bchg	#0,$1C(a0)
00015FB6                            
00015FB6                            loc_160AA:
00015FB6 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00015FBC 4EB9 0000 A6B6             		jsr	AnimateSprite
00015FC2 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00015FC8 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00015FCA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00015FD0 6600                       		bne.s	loc_160D6
00015FD2 7200                       		moveq	#0,d1
00015FD4 1228 0019                  		move.b	$19(a0),d1
00015FD8 4EB9 0000 7414             		jsr	(PlatformObject).l
00015FDE 6000 9642                  		bra.w	MarkObjGone
00015FE2                            ; ===========================================================================
00015FE2                            
00015FE2                            loc_160D6:
00015FE2 7200                       		moveq	#0,d1
00015FE4 1228 0019                  		move.b	$19(a0),d1
00015FE8 4EB9 0000 7588             		jsr	(ExitPlatform).l
00015FEE 3428 0008                  		move.w	8(a0),d2
00015FF2 4EB9 0000 7AF2             		jsr	(MvSonicOnPtfm2).l
00015FF8 6000 9628                  		bra.w	MarkObjGone
00015FFC                            ; ===========================================================================
00015FFC                            
00015FFC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00015FFC 0828 0003 0022             		btst	#3,$22(a0)
00016002 6700                       		beq.s	Obj6C_Display
00016004 43F8 D000                  		lea	($FFFFD000).w,a1
00016008 08A9 0003 0022             		bclr	#3,$22(a1)
0001600E 08A8 0003 0022             		bclr	#3,$22(a0)
00016014 117C 0002 0024             		move.b	#2,$24(a0)
0001601A 4228 0025                  		clr.b	$25(a0)
0001601E                            
0001601E                            Obj6C_Display:
0001601E 6000 9602                  		bra.w	MarkObjGone
00016022                            ; ===========================================================================
00016022                            Ani_obj6C:
00016022                            	include "_anim\obj6C.asm"
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Animation script - vanishing platforms (SBZ)
00016022                            ; ---------------------------------------------------------------------------
00016022 0000                       		dc.w byte_1611A-Ani_obj6C
00016024 0000                       		dc.w byte_16122-Ani_obj6C
00016026 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001602E 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016036                            		even
00016036                            		even
00016036                            
00016036                            ; ---------------------------------------------------------------------------
00016036                            ; Sprite mappings - vanishing platforms	(SBZ)
00016036                            ; ---------------------------------------------------------------------------
00016036                            Map_obj6C:
00016036                            	include "_maps\obj6C.asm"
00016036                            ; ---------------------------------------------------------------------------
00016036                            ; Sprite mappings - vanishing platforms	(SBZ)
00016036                            ; ---------------------------------------------------------------------------
00016036 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001603A 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001603E 01                         byte_16132:	dc.b 1
0001603F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016044 01                         byte_16138:	dc.b 1
00016045 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001604A 01                         byte_1613E:	dc.b 1
0001604B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016050 00                         byte_16144:	dc.b 0
00016052 00                         		even
00016052 00                         		even
00016052                            
00016052                            ; ===========================================================================
00016052                            ; ---------------------------------------------------------------------------
00016052                            ; Object 6E - electrocution orbs (SBZ)
00016052                            ; ---------------------------------------------------------------------------
00016052                            
00016052                            Obj6E:					; XREF: Obj_Index
00016052 7000                       		moveq	#0,d0
00016054 1028 0024                  		move.b	$24(a0),d0
00016058 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001605C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016060                            ; ===========================================================================
00016060 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016062 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016064                            ; ===========================================================================
00016064                            
00016064                            Obj6E_Main:				; XREF: Obj6E_Index
00016064 5428 0024                  		addq.b	#2,$24(a0)
00016068 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016070 317C 047E 0002             		move.w	#$47E,2(a0)
00016076 0028 0004 0001             		ori.b	#4,1(a0)
0001607C 117C 0028 0019             		move.b	#$28,$19(a0)
00016082 7000                       		moveq	#0,d0
00016084 1028 0028                  		move.b	$28(a0),d0	; read object type
00016088 E948                       		lsl.w	#4,d0		; multiply by $10
0001608A 5340                       		subq.w	#1,d0
0001608C 3140 0034                  		move.w	d0,$34(a0)
00016090                            
00016090                            Obj6E_Shock:				; XREF: Obj6E_Index
00016090 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016094 C068 0034                  		and.w	$34(a0),d0
00016098 6600                       		bne.s	Obj6E_Animate
0001609A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000160A0 4A28 0001                  		tst.b	1(a0)
000160A4 6A00                       		bpl.s	Obj6E_Animate
000160A6 303C 00B1                  		move.w	#$B1,d0
000160AA 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play electricity sound
000160B0                            
000160B0                            Obj6E_Animate:
000160B0 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000160B6 4EB9 0000 A6B6             		jsr	AnimateSprite
000160BC 117C 0000 0020             		move.b	#0,$20(a0)
000160C2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000160C8 6600                       		bne.s	Obj6E_Display	; if not, branch
000160CA 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000160D0                            
000160D0                            Obj6E_Display:
000160D0 6000 9550                  		bra.w	MarkObjGone
000160D4                            ; ===========================================================================
000160D4                            Ani_obj6E:
000160D4                            	include "_anim\obj6E.asm"
000160D4                            ; ---------------------------------------------------------------------------
000160D4                            ; Animation script - electrocution orbs (SBZ)
000160D4                            ; ---------------------------------------------------------------------------
000160D4 0000                       		dc.w byte_161CC-Ani_obj6E
000160D6 0000                       		dc.w byte_161D0-Ani_obj6E
000160D8 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000160DC 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000160EC                            		even
000160EC                            		even
000160EC                            
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            ; Sprite mappings - electrocution orbs (SBZ)
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            Map_obj6E:
000160EC                            	include "_maps\obj6E.asm"
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            ; Sprite mappings - electrocution orbs (SBZ)
000160EC                            ; ---------------------------------------------------------------------------
000160EC 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000160F0 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000160F4 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000160F8 02                         byte_161EC:	dc.b 2
000160F9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000160FE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016103 03                         byte_161F7:	dc.b 3
00016104 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016109 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001610E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016113 05                         byte_16207:	dc.b 5
00016114 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016119 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001611E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016123 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016128 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001612D 04                         byte_16221:	dc.b 4
0001612E F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016133 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016138 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001613D F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016142 06                         byte_16236:	dc.b 6
00016143 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016148 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001614D F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016152 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016157 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001615C F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016161 04                         byte_16255:	dc.b 4
00016162 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016167 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001616C F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016171 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016176                            		even
00016176                            		even
00016176                            
00016176                            ; ===========================================================================
00016176                            ; ---------------------------------------------------------------------------
00016176                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016176                            ; ---------------------------------------------------------------------------
00016176                            
00016176                            Obj6F:					; XREF: Obj_Index
00016176 7000                       		moveq	#0,d0
00016178 1028 0024                  		move.b	$24(a0),d0
0001617C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016180 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016184 3028 0030                  		move.w	$30(a0),d0
00016188 0240 FF80                  		andi.w	#$FF80,d0
0001618C 3238 F700                  		move.w	($FFFFF700).w,d1
00016190 0441 0080                  		subi.w	#$80,d1
00016194 0241 FF80                  		andi.w	#$FF80,d1
00016198 9041                       		sub.w	d1,d0
0001619A 0C40 0280                  		cmpi.w	#$280,d0
0001619E 6200                       		bhi.s	loc_1629A
000161A0                            
000161A0                            Obj6F_Display:
000161A0 4EF9 0000 D58A             		jmp	DisplaySprite
000161A6                            ; ===========================================================================
000161A6                            
000161A6                            loc_1629A:
000161A6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000161AC 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000161AE 0C40 FF80                  		cmpi.w	#-$80,d0
000161B2 64EC                       		bcc.s	Obj6F_Display
000161B4                            
000161B4                            Obj6F_Act1or2:
000161B4 1028 002F                  		move.b	$2F(a0),d0
000161B8 6A00                       		bpl.s	Obj6F_Delete
000161BA 0240 007F                  		andi.w	#$7F,d0
000161BE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000161C2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000161C8                            
000161C8                            Obj6F_Delete:
000161C8 4EF9 0000 D5C6             		jmp	DeleteObject
000161CE                            ; ===========================================================================
000161CE 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000161D0 0000                       		dc.w loc_163D8-Obj6F_Index
000161D2                            ; ===========================================================================
000161D2                            
000161D2                            Obj6F_Main:				; XREF: Obj6F_Index
000161D2 1028 0028                  		move.b	$28(a0),d0
000161D6 6B00 0000                  		bmi.w	loc_16380
000161DA 5428 0024                  		addq.b	#2,$24(a0)
000161DE 217C 0001 5846 0004        		move.l	#Map_obj69a,4(a0)
000161E6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000161EC 117C 0010 0019             		move.b	#$10,$19(a0)
000161F2 0028 0004 0001             		ori.b	#4,1(a0)
000161F8 117C 0004 0018             		move.b	#4,$18(a0)
000161FE 7000                       		moveq	#0,d0
00016200 1028 0028                  		move.b	$28(a0),d0
00016204 3200                       		move.w	d0,d1
00016206 E648                       		lsr.w	#3,d0
00016208 0240 001E                  		andi.w	#$1E,d0
0001620C 45FA 0000                  		lea	off_164A6(pc),a2
00016210 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016214 315A 0038                  		move.w	(a2)+,$38(a0)
00016218 315A 0030                  		move.w	(a2)+,$30(a0)
0001621C 214A 003C                  		move.l	a2,$3C(a0)
00016220 0241 000F                  		andi.w	#$F,d1
00016224 E549                       		lsl.w	#2,d1
00016226 1141 0038                  		move.b	d1,$38(a0)
0001622A 117C 0004 003A             		move.b	#4,$3A(a0)
00016230 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016234 6700                       		beq.s	loc_16356
00016236 117C 0001 003B             		move.b	#1,$3B(a0)
0001623C 4428 003A                  		neg.b	$3A(a0)
00016240 7200                       		moveq	#0,d1
00016242 1228 0038                  		move.b	$38(a0),d1
00016246 D228 003A                  		add.b	$3A(a0),d1
0001624A B228 0039                  		cmp.b	$39(a0),d1
0001624E 6500                       		bcs.s	loc_16352
00016250 1001                       		move.b	d1,d0
00016252 7200                       		moveq	#0,d1
00016254 4A00                       		tst.b	d0
00016256 6A00                       		bpl.s	loc_16352
00016258 1228 0039                  		move.b	$39(a0),d1
0001625C 5901                       		subq.b	#4,d1
0001625E                            
0001625E                            loc_16352:
0001625E 1141 0038                  		move.b	d1,$38(a0)
00016262                            
00016262                            loc_16356:
00016262 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016268 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001626E 4A41                       		tst.w	d1
00016270 6600                       		bne.s	loc_1636C
00016272 117C 0001 001C             		move.b	#1,$1C(a0)
00016278                            
00016278                            loc_1636C:
00016278 0C41 0008                  		cmpi.w	#8,d1
0001627C 6600                       		bne.s	loc_16378
0001627E 117C 0000 001C             		move.b	#0,$1C(a0)
00016284                            
00016284                            loc_16378:
00016284 6100 C23C                  		bsr.w	Obj63_ChangeDir
00016288 6000 0000                  		bra.w	loc_163D8
0001628C                            ; ===========================================================================
0001628C                            
0001628C                            loc_16380:				; XREF: Obj6F_Main
0001628C 1140 002F                  		move.b	d0,$2F(a0)
00016290 0240 007F                  		andi.w	#$7F,d0
00016294 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016298 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001629E 6700                       		beq.s	loc_1639A
000162A0 4EF9 0000 D5C6             		jmp	DeleteObject
000162A6                            ; ===========================================================================
000162A6                            
000162A6                            loc_1639A:
000162A6 D040                       		add.w	d0,d0
000162A8 0240 001E                  		andi.w	#$1E,d0
000162AC 0640 0080                  		addi.w	#$80,d0
000162B0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000162B6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000162BA 321A                       		move.w	(a2)+,d1
000162BC 2248                       		movea.l	a0,a1
000162BE 6000                       		bra.s	Obj6F_LoadPform
000162C0                            ; ===========================================================================
000162C0                            
000162C0                            Obj6F_Loop:
000162C0 4EB9 0000 DA10             		jsr	SingleObjLoad
000162C6 6600                       		bne.s	loc_163D0
000162C8                            
000162C8                            Obj6F_LoadPform:			; XREF: loc_1639A
000162C8 12BC 006F                  		move.b	#$6F,0(a1)
000162CC 335A 0008                  		move.w	(a2)+,8(a1)
000162D0 335A 000C                  		move.w	(a2)+,$C(a1)
000162D4 301A                       		move.w	(a2)+,d0
000162D6 1340 0028                  		move.b	d0,$28(a1)
000162DA                            
000162DA                            loc_163D0:
000162DA 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000162DE                            
000162DE 588F                       		addq.l	#4,sp
000162E0 4E75                       		rts	
000162E2                            ; ===========================================================================
000162E2                            
000162E2                            loc_163D8:				; XREF: Obj6F_Index
000162E2 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000162E8 4EB9 0000 A6B6             		jsr	AnimateSprite
000162EE 4A28 001A                  		tst.b	$1A(a0)
000162F2 6600                       		bne.s	loc_16404
000162F4 3F28 0008                  		move.w	8(a0),-(sp)
000162F8 6100 0000                  		bsr.w	loc_16424
000162FC 323C 001B                  		move.w	#$1B,d1
00016300 343C 0007                  		move.w	#7,d2
00016304 3602                       		move.w	d2,d3
00016306 5243                       		addq.w	#1,d3
00016308 381F                       		move.w	(sp)+,d4
0001630A 6000 963E                  		bra.w	SolidObject
0001630E                            ; ===========================================================================
0001630E                            
0001630E                            loc_16404:
0001630E 0828 0003 0022             		btst	#3,$22(a0)
00016314 6700                       		beq.s	loc_16420
00016316 43F8 D000                  		lea	($FFFFD000).w,a1
0001631A 08A9 0003 0022             		bclr	#3,$22(a1)
00016320 08A8 0003 0022             		bclr	#3,$22(a0)
00016326 4228 0025                  		clr.b	$25(a0)
0001632A                            
0001632A                            loc_16420:
0001632A 6000 0002                  		bra.w	*+4
0001632E                            
0001632E                            loc_16424:
0001632E 3028 0008                  		move.w	8(a0),d0
00016332 B068 0034                  		cmp.w	$34(a0),d0
00016336 6600                       		bne.s	loc_16484
00016338 3028 000C                  		move.w	$C(a0),d0
0001633C B068 0036                  		cmp.w	$36(a0),d0
00016340 6600                       		bne.s	loc_16484
00016342 7200                       		moveq	#0,d1
00016344 1228 0038                  		move.b	$38(a0),d1
00016348 D228 003A                  		add.b	$3A(a0),d1
0001634C B228 0039                  		cmp.b	$39(a0),d1
00016350 6500                       		bcs.s	loc_16456
00016352 1001                       		move.b	d1,d0
00016354 7200                       		moveq	#0,d1
00016356 4A00                       		tst.b	d0
00016358 6A00                       		bpl.s	loc_16456
0001635A 1228 0039                  		move.b	$39(a0),d1
0001635E 5901                       		subq.b	#4,d1
00016360                            
00016360                            loc_16456:
00016360 1141 0038                  		move.b	d1,$38(a0)
00016364 2268 003C                  		movea.l	$3C(a0),a1
00016368 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001636E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016374 4A41                       		tst.w	d1
00016376 6600                       		bne.s	loc_16474
00016378 117C 0001 001C             		move.b	#1,$1C(a0)
0001637E                            
0001637E                            loc_16474:
0001637E 0C41 0008                  		cmpi.w	#8,d1
00016382 6600                       		bne.s	loc_16480
00016384 117C 0000 001C             		move.b	#0,$1C(a0)
0001638A                            
0001638A                            loc_16480:
0001638A 6100 C136                  		bsr.w	Obj63_ChangeDir
0001638E                            
0001638E                            loc_16484:
0001638E 4EF9 0000 D564             		jmp	SpeedToPos
00016394                            ; ===========================================================================
00016394                            Ani_obj6F:
00016394                            	include "_anim\obj6F.asm"
00016394                            ; ---------------------------------------------------------------------------
00016394                            ; Animation script - platform on conveyor belt (SBZ)
00016394                            ; ---------------------------------------------------------------------------
00016394 0000                       		dc.w byte_1648E-Ani_obj6F
00016396 0000                       		dc.w byte_164A2-Ani_obj6F
00016398 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163A5 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000163AC 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000163B0 00                         		even
000163B0 00                         		even
000163B0                            
000163B0 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000163B6 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000163BC 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000163D0 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000163E4 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000163F8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001640C 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016420 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016434                            ; ===========================================================================
00016434                            ; ---------------------------------------------------------------------------
00016434                            ; Object 70 - large girder block (SBZ)
00016434                            ; ---------------------------------------------------------------------------
00016434                            
00016434                            Obj70:					; XREF: Obj_Index
00016434 7000                       		moveq	#0,d0
00016436 1028 0024                  		move.b	$24(a0),d0
0001643A 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001643E 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016442                            ; ===========================================================================
00016442 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016444 0000                       		dc.w Obj70_Action-Obj70_Index
00016446                            ; ===========================================================================
00016446                            
00016446                            Obj70_Main:				; XREF: Obj70_Index
00016446 5428 0024                  		addq.b	#2,$24(a0)
0001644A 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016452 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016458 0028 0004 0001             		ori.b	#4,1(a0)
0001645E 117C 0004 0018             		move.b	#4,$18(a0)
00016464 117C 0060 0019             		move.b	#$60,$19(a0)
0001646A 117C 0018 0016             		move.b	#$18,$16(a0)
00016470 3168 0008 0032             		move.w	8(a0),$32(a0)
00016476 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001647C 6100 0000                  		bsr.w	Obj70_Move2
00016480                            
00016480                            Obj70_Action:				; XREF: Obj70_Index
00016480 3F28 0008                  		move.w	8(a0),-(sp)
00016484 4A68 003A                  		tst.w	$3A(a0)
00016488 6700                       		beq.s	Obj70_Move
0001648A 5368 003A                  		subq.w	#1,$3A(a0)
0001648E 6600                       		bne.s	Obj70_Solid
00016490                            
00016490                            Obj70_Move:
00016490 4EB9 0000 D564             		jsr	SpeedToPos
00016496 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001649A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001649C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000164A0                            
000164A0                            Obj70_Solid:
000164A0 381F                       		move.w	(sp)+,d4
000164A2 4A28 0001                  		tst.b	1(a0)
000164A6 6A00                       		bpl.s	Obj70_ChkDel
000164A8 7200                       		moveq	#0,d1
000164AA 1228 0019                  		move.b	$19(a0),d1
000164AE 0641 000B                  		addi.w	#$B,d1
000164B2 7400                       		moveq	#0,d2
000164B4 1428 0016                  		move.b	$16(a0),d2
000164B8 3602                       		move.w	d2,d3
000164BA 5243                       		addq.w	#1,d3
000164BC 6100 948C                  		bsr.w	SolidObject
000164C0                            
000164C0                            Obj70_ChkDel:
000164C0 3028 0032                  		move.w	$32(a0),d0
000164C4 0240 FF80                  		andi.w	#$FF80,d0
000164C8 3238 F700                  		move.w	($FFFFF700).w,d1
000164CC 0441 0080                  		subi.w	#$80,d1
000164D0 0241 FF80                  		andi.w	#$FF80,d1
000164D4 9041                       		sub.w	d1,d0
000164D6 0C40 0280                  		cmpi.w	#$280,d0
000164DA 6200                       		bhi.s	Obj70_Delete
000164DC 4EF9 0000 D58A             		jmp	DisplaySprite
000164E2                            ; ===========================================================================
000164E2                            
000164E2                            Obj70_Delete:
000164E2 4EF9 0000 D5C6             		jmp	DeleteObject
000164E8                            ; ===========================================================================
000164E8                            
000164E8                            Obj70_Move2:				; XREF: Obj70_Main
000164E8 1028 0038                  		move.b	$38(a0),d0
000164EC 0240 0018                  		andi.w	#$18,d0
000164F0 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000164F6 43F1 0000                  		lea	(a1,d0.w),a1
000164FA 3159 0010                  		move.w	(a1)+,$10(a0)
000164FE 3159 0012                  		move.w	(a1)+,$12(a0)
00016502 3159 0034                  		move.w	(a1)+,$34(a0)
00016506 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001650A 317C 0007 003A             		move.w	#7,$3A(a0)
00016510 4E75                       		rts	
00016512                            ; ===========================================================================
00016512 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001651A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016522 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001652A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016532                            ; ---------------------------------------------------------------------------
00016532                            ; Sprite mappings - large girder block (SBZ)
00016532                            ; ---------------------------------------------------------------------------
00016532                            Map_obj70:
00016532                            	include "_maps\obj70.asm"
00016532                            ; ---------------------------------------------------------------------------
00016532                            ; Sprite mappings - large girder block (SBZ)
00016532                            ; ---------------------------------------------------------------------------
00016532 0000                       		dc.w byte_1662A-Map_obj70
00016534 0C                         byte_1662A:	dc.b $C
00016535 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001653A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001653F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016544 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016549 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001654E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016553 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016558 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001655D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016562 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016567 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001656C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016572 00                         		even
00016572 00                         		even
00016572                            
00016572                            ; ===========================================================================
00016572                            ; ---------------------------------------------------------------------------
00016572                            ; Object 72 - teleporter (SBZ)
00016572                            ; ---------------------------------------------------------------------------
00016572                            
00016572                            Obj72:					; XREF: Obj_Index
00016572 7000                       		moveq	#0,d0
00016574 1028 0024                  		move.b	$24(a0),d0
00016578 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001657C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016580 3028 0008                  		move.w	8(a0),d0
00016584 0240 FF80                  		andi.w	#$FF80,d0
00016588 3238 F700                  		move.w	($FFFFF700).w,d1
0001658C 0441 0080                  		subi.w	#$80,d1
00016590 0241 FF80                  		andi.w	#$FF80,d1
00016594 9041                       		sub.w	d1,d0
00016596 0C40 0280                  		cmpi.w	#$280,d0
0001659A 6200                       		bhi.s	Obj72_Delete
0001659C 4E75                       		rts	
0001659E                            ; ===========================================================================
0001659E                            
0001659E                            Obj72_Delete:
0001659E 4EF9 0000 D5C6             		jmp	DeleteObject
000165A4                            ; ===========================================================================
000165A4 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000165A6 0000                       		dc.w loc_166C8-Obj72_Index
000165A8 0000                       		dc.w loc_1675E-Obj72_Index
000165AA 0000                       		dc.w loc_16798-Obj72_Index
000165AC                            ; ===========================================================================
000165AC                            
000165AC                            Obj72_Main:				; XREF: Obj72_Index
000165AC 5428 0024                  		addq.b	#2,$24(a0)
000165B0 1028 0028                  		move.b	$28(a0),d0
000165B4 D040                       		add.w	d0,d0
000165B6 0240 001E                  		andi.w	#$1E,d0
000165BA 45FA 0000                  		lea	Obj72_Data(pc),a2
000165BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000165C2 315A 003A                  		move.w	(a2)+,$3A(a0)
000165C6 214A 003C                  		move.l	a2,$3C(a0)
000165CA 315A 0036                  		move.w	(a2)+,$36(a0)
000165CE 315A 0038                  		move.w	(a2)+,$38(a0)
000165D2                            
000165D2                            loc_166C8:				; XREF: Obj72_Index
000165D2 43F8 D000                  		lea	($FFFFD000).w,a1
000165D6 3029 0008                  		move.w	8(a1),d0
000165DA 9068 0008                  		sub.w	8(a0),d0
000165DE 0828 0000 0022             		btst	#0,$22(a0)
000165E4 6700                       		beq.s	loc_166E0
000165E6 0640 000F                  		addi.w	#$F,d0
000165EA                            
000165EA                            loc_166E0:
000165EA 0C40 0010                  		cmpi.w	#$10,d0
000165EE 6400                       		bcc.s	locret_1675C
000165F0 3229 000C                  		move.w	$C(a1),d1
000165F4 9268 000C                  		sub.w	$C(a0),d1
000165F8 0641 0020                  		addi.w	#$20,d1
000165FC 0C41 0040                  		cmpi.w	#$40,d1
00016600 6400                       		bcc.s	locret_1675C
00016602 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016606 6600                       		bne.s	locret_1675C
00016608 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001660E 6600                       		bne.s	loc_1670E
00016610 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016616 6500                       		bcs.s	locret_1675C
00016618                            
00016618                            loc_1670E:
00016618 5428 0024                  		addq.b	#2,$24(a0)
0001661C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016622 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016628 337C 0800 0014             		move.w	#$800,$14(a1)
0001662E 337C 0000 0010             		move.w	#0,$10(a1)
00016634 337C 0000 0012             		move.w	#0,$12(a1)
0001663A 08A8 0005 0022             		bclr	#5,$22(a0)
00016640 08A9 0005 0022             		bclr	#5,$22(a1)
00016646 08E9 0001 0022             		bset	#1,$22(a1)
0001664C 3368 0008 0008             		move.w	8(a0),8(a1)
00016652 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016658 4228 0032                  		clr.b	$32(a0)
0001665C 303C 00BE                  		move.w	#$BE,d0
00016660 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016666                            
00016666                            locret_1675C:
00016666 4E75                       		rts	
00016668                            ; ===========================================================================
00016668                            
00016668                            loc_1675E:				; XREF: Obj72_Index
00016668 43F8 D000                  		lea	($FFFFD000).w,a1
0001666C 1028 0032                  		move.b	$32(a0),d0
00016670 5428 0032                  		addq.b	#2,$32(a0)
00016674 4EB9 0000 29B8             		jsr	(CalcSine).l
0001667A EA40                       		asr.w	#5,d0
0001667C 3428 000C                  		move.w	$C(a0),d2
00016680 9440                       		sub.w	d0,d2
00016682 3342 000C                  		move.w	d2,$C(a1)
00016686 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001668C 6600                       		bne.s	locret_16796
0001668E 6100 0000                  		bsr.w	sub_1681C
00016692 5428 0024                  		addq.b	#2,$24(a0)
00016696 303C 00BC                  		move.w	#$BC,d0
0001669A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play teleport sound
000166A0                            
000166A0                            locret_16796:
000166A0 4E75                       		rts	
000166A2                            ; ===========================================================================
000166A2                            
000166A2                            loc_16798:				; XREF: Obj72_Index
000166A2 588F                       		addq.l	#4,sp
000166A4 43F8 D000                  		lea	($FFFFD000).w,a1
000166A8 5328 002E                  		subq.b	#1,$2E(a0)
000166AC 6A00                       		bpl.s	loc_167DA
000166AE 3368 0036 0008             		move.w	$36(a0),8(a1)
000166B4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000166BA 7200                       		moveq	#0,d1
000166BC 1228 003A                  		move.b	$3A(a0),d1
000166C0 5801                       		addq.b	#4,d1
000166C2 B228 003B                  		cmp.b	$3B(a0),d1
000166C6 6500                       		bcs.s	loc_167C2
000166C8 7200                       		moveq	#0,d1
000166CA 6000                       		bra.s	loc_16800
000166CC                            ; ===========================================================================
000166CC                            
000166CC                            loc_167C2:
000166CC 1141 003A                  		move.b	d1,$3A(a0)
000166D0 2468 003C                  		movea.l	$3C(a0),a2
000166D4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000166DA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000166E0 6000 0000                  		bra.w	sub_1681C
000166E4                            ; ===========================================================================
000166E4                            
000166E4                            loc_167DA:
000166E4 2429 0008                  		move.l	8(a1),d2
000166E8 2629 000C                  		move.l	$C(a1),d3
000166EC 3029 0010                  		move.w	$10(a1),d0
000166F0 48C0                       		ext.l	d0
000166F2 E180                       		asl.l	#8,d0
000166F4 D480                       		add.l	d0,d2
000166F6 3029 0012                  		move.w	$12(a1),d0
000166FA 48C0                       		ext.l	d0
000166FC E180                       		asl.l	#8,d0
000166FE D680                       		add.l	d0,d3
00016700 2342 0008                  		move.l	d2,8(a1)
00016704 2343 000C                  		move.l	d3,$C(a1)
00016708 4E75                       		rts	
0001670A                            ; ===========================================================================
0001670A                            
0001670A                            loc_16800:
0001670A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016710 4228 0024                  		clr.b	$24(a0)
00016714 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016718 337C 0000 0010             		move.w	#0,$10(a1)
0001671E 337C 0200 0012             		move.w	#$200,$12(a1)
00016724 4E75                       		rts	
00016726                            
00016726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016726                            
00016726                            
00016726                            sub_1681C:
00016726 7000                       		moveq	#0,d0
00016728 343C 1000                  		move.w	#$1000,d2
0001672C 3028 0036                  		move.w	$36(a0),d0
00016730 9069 0008                  		sub.w	8(a1),d0
00016734 6C00                       		bge.s	loc_16830
00016736 4440                       		neg.w	d0
00016738 4442                       		neg.w	d2
0001673A                            
0001673A                            loc_16830:
0001673A 7200                       		moveq	#0,d1
0001673C 363C 1000                  		move.w	#$1000,d3
00016740 3228 0038                  		move.w	$38(a0),d1
00016744 9269 000C                  		sub.w	$C(a1),d1
00016748 6C00                       		bge.s	loc_16844
0001674A 4441                       		neg.w	d1
0001674C 4443                       		neg.w	d3
0001674E                            
0001674E                            loc_16844:
0001674E B240                       		cmp.w	d0,d1
00016750 6500                       		bcs.s	loc_1687A
00016752 7200                       		moveq	#0,d1
00016754 3228 0038                  		move.w	$38(a0),d1
00016758 9269 000C                  		sub.w	$C(a1),d1
0001675C 4841                       		swap	d1
0001675E 83C3                       		divs.w	d3,d1
00016760 7000                       		moveq	#0,d0
00016762 3028 0036                  		move.w	$36(a0),d0
00016766 9069 0008                  		sub.w	8(a1),d0
0001676A 6700                       		beq.s	loc_16866
0001676C 4840                       		swap	d0
0001676E 81C1                       		divs.w	d1,d0
00016770                            
00016770                            loc_16866:
00016770 3340 0010                  		move.w	d0,$10(a1)
00016774 3343 0012                  		move.w	d3,$12(a1)
00016778 4A41                       		tst.w	d1
0001677A 6A00                       		bpl.s	loc_16874
0001677C 4441                       		neg.w	d1
0001677E                            
0001677E                            loc_16874:
0001677E 3141 002E                  		move.w	d1,$2E(a0)
00016782 4E75                       		rts	
00016784                            ; ===========================================================================
00016784                            
00016784                            loc_1687A:
00016784 7000                       		moveq	#0,d0
00016786 3028 0036                  		move.w	$36(a0),d0
0001678A 9069 0008                  		sub.w	8(a1),d0
0001678E 4840                       		swap	d0
00016790 81C2                       		divs.w	d2,d0
00016792 7200                       		moveq	#0,d1
00016794 3228 0038                  		move.w	$38(a0),d1
00016798 9269 000C                  		sub.w	$C(a1),d1
0001679C 6700                       		beq.s	loc_16898
0001679E 4841                       		swap	d1
000167A0 83C0                       		divs.w	d0,d1
000167A2                            
000167A2                            loc_16898:
000167A2 3341 0012                  		move.w	d1,$12(a1)
000167A6 3342 0010                  		move.w	d2,$10(a1)
000167AA 4A40                       		tst.w	d0
000167AC 6A00                       		bpl.s	loc_168A6
000167AE 4440                       		neg.w	d0
000167B0                            
000167B0                            loc_168A6:
000167B0 3140 002E                  		move.w	d0,$2E(a0)
000167B4 4E75                       		rts	
000167B6                            ; End of function sub_1681C
000167B6                            
000167B6                            ; ===========================================================================
000167B6 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000167BC 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000167C2 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000167C6 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000167CC 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000167D2 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000167D8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000167DE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000167E4 0884 0298 0894             		dc.w $884, $298, $894
000167EA 0270 0894 0190             		dc.w $270, $894, $190
000167F0 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000167F6 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000167FC 1184 0498 1158             		dc.w $1184, $498, $1158
00016802 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016808 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001680E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016814 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001681A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016820 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016826 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001682C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016832 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016838 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001683E                            ; ===========================================================================
0001683E                            ; ---------------------------------------------------------------------------
0001683E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001683E                            ; ---------------------------------------------------------------------------
0001683E                            
0001683E                            Obj78:					; XREF: Obj_Index
0001683E 7000                       		moveq	#0,d0
00016840 1028 0024                  		move.b	$24(a0),d0
00016844 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016848 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001684C                            ; ===========================================================================
0001684C 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001684E 0000                       		dc.w Obj78_Action-Obj78_Index
00016850 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016852 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016854 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016856 0000                       		dc.w Obj78_Delete-Obj78_Index
00016858 0000                       		dc.w loc_16CC0-Obj78_Index
0001685A                            ; ===========================================================================
0001685A                            
0001685A                            locret_16950:
0001685A 4E75                       		rts	
0001685C                            ; ===========================================================================
0001685C                            
0001685C                            Obj78_Main:				; XREF: Obj78_Index
0001685C 117C 0007 0016             		move.b	#7,$16(a0)
00016862 117C 0008 0017             		move.b	#8,$17(a0)
00016868 4EB9 0000 D538             		jsr	ObjectFall
0001686E 4EBA E4B8                  		jsr	ObjHitFloor
00016872 4A41                       		tst.w	d1
00016874 6AE4                       		bpl.s	locret_16950
00016876 D368 000C                  		add.w	d1,$C(a0)
0001687A 4268 0012                  		clr.w	$12(a0)
0001687E 5428 0024                  		addq.b	#2,$24(a0)
00016882 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001688A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016890 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016896 6700                       		beq.s	loc_16996
00016898 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001689E                            
0001689E                            loc_16996:
0001689E 0228 0003 0001             		andi.b	#3,1(a0)
000168A4 0028 0004 0001             		ori.b	#4,1(a0)
000168AA 1168 0001 0022             		move.b	1(a0),$22(a0)
000168B0 117C 0004 0018             		move.b	#4,$18(a0)
000168B6 117C 0008 0019             		move.b	#8,$19(a0)
000168BC 117C 000B 0020             		move.b	#$B,$20(a0)
000168C2 3428 0008                  		move.w	8(a0),d2
000168C6 7A0C                       		moveq	#$C,d5
000168C8 0828 0000 0022             		btst	#0,$22(a0)
000168CE 6700                       		beq.s	loc_169CA
000168D0 4445                       		neg.w	d5
000168D2                            
000168D2                            loc_169CA:
000168D2 1C3C 0004                  		move.b	#4,d6
000168D6 7600                       		moveq	#0,d3
000168D8 7804                       		moveq	#4,d4
000168DA 2448                       		movea.l	a0,a2
000168DC 7202                       		moveq	#2,d1
000168DE                            
000168DE                            Obj78_LoadBody:
000168DE 4EB9 0000 DA26             		jsr	SingleObjLoad2
000168E4 6600                       		bne.s	Obj78_QuitLoad
000168E6 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000168EA 1346 0024                  		move.b	d6,$24(a1)
000168EE 5406                       		addq.b	#2,d6
000168F0 2368 0004 0004             		move.l	4(a0),4(a1)
000168F6 3368 0002 0002             		move.w	2(a0),2(a1)
000168FC 137C 0005 0018             		move.b	#5,$18(a1)
00016902 137C 0008 0019             		move.b	#8,$19(a1)
00016908 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001690E D445                       		add.w	d5,d2
00016910 3342 0008                  		move.w	d2,8(a1)
00016914 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001691A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016920 1368 0022 0001             		move.b	$22(a0),1(a1)
00016926 137C 0008 001A             		move.b	#8,$1A(a1)
0001692C 234A 003C                  		move.l	a2,$3C(a1)
00016930 1344 003C                  		move.b	d4,$3C(a1)
00016934 5804                       		addq.b	#4,d4
00016936 2449                       		movea.l	a1,a2
00016938                            
00016938                            Obj78_QuitLoad:
00016938 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001693C                            
0001693C 117C 0007 002A             		move.b	#7,$2A(a0)
00016942 4228 003C                  		clr.b	$3C(a0)
00016946                            
00016946                            Obj78_Action:				; XREF: Obj78_Index
00016946 4A28 0022                  		tst.b	$22(a0)
0001694A 6B00 0000                  		bmi.w	loc_16C96
0001694E 7000                       		moveq	#0,d0
00016950 1028 0025                  		move.b	$25(a0),d0
00016954 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016958 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001695C 1228 002B                  		move.b	$2B(a0),d1
00016960 6A00                       		bpl.s	Obj78_Display
00016962 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016968 1028 0026                  		move.b	$26(a0),d0
0001696C 0240 007F                  		andi.w	#$7F,d0
00016970 5828 0026                  		addq.b	#4,$26(a0)
00016974 1031 0000                  		move.b	(a1,d0.w),d0
00016978 6A00                       		bpl.s	Obj78_AniHead
0001697A 08A8 0007 002B             		bclr	#7,$2B(a0)
00016980 6000                       		bra.s	Obj78_Display
00016982                            ; ===========================================================================
00016982                            
00016982                            Obj78_AniHead:
00016982 0201 0010                  		andi.b	#$10,d1
00016986 D001                       		add.b	d1,d0
00016988 1140 001A                  		move.b	d0,$1A(a0)
0001698C                            
0001698C                            Obj78_Display:
0001698C 3028 0008                  		move.w	8(a0),d0
00016990 0240 FF80                  		andi.w	#$FF80,d0
00016994 3238 F700                  		move.w	($FFFFF700).w,d1
00016998 0441 0080                  		subi.w	#$80,d1
0001699C 0241 FF80                  		andi.w	#$FF80,d1
000169A0 9041                       		sub.w	d1,d0
000169A2 0C40 0280                  		cmpi.w	#$280,d0
000169A6 6200 0000                  		bhi.w	Obj78_ChkGone
000169AA 4EF9 0000 D58A             		jmp	DisplaySprite
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            Obj78_ChkGone:
000169B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169B4 7000                       		moveq	#0,d0
000169B6 1028 0023                  		move.b	$23(a0),d0
000169BA 6700                       		beq.s	loc_16ABC
000169BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169C2                            
000169C2                            loc_16ABC:
000169C2 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000169C8 4E75                       		rts	
000169CA                            ; ===========================================================================
000169CA                            
000169CA                            Obj78_Delete:				; XREF: Obj78_Index
000169CA 4EF9 0000 D5C6             		jmp	DeleteObject
000169D0                            ; ===========================================================================
000169D0 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000169D2 0000                       		dc.w loc_16B02-Obj78_Index2
000169D4                            ; ===========================================================================
000169D4                            
000169D4                            Obj78_Move:				; XREF: Obj78_Index2
000169D4 5328 002A                  		subq.b	#1,$2A(a0)
000169D8 6B00                       		bmi.s	Obj78_Move2
000169DA 4E75                       		rts	
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            Obj78_Move2:
000169DC 5428 0025                  		addq.b	#2,$25(a0)
000169E0 117C 0010 002A             		move.b	#$10,$2A(a0)
000169E6 317C FF40 0010             		move.w	#-$C0,$10(a0)
000169EC 317C 0040 0014             		move.w	#$40,$14(a0)
000169F2 0868 0004 002B             		bchg	#4,$2B(a0)
000169F8 6600                       		bne.s	loc_16AFC
000169FA 4268 0010                  		clr.w	$10(a0)
000169FE 4468 0014                  		neg.w	$14(a0)
00016A02                            
00016A02                            loc_16AFC:
00016A02 08E8 0007 002B             		bset	#7,$2B(a0)
00016A08                            
00016A08                            loc_16B02:				; XREF: Obj78_Index2
00016A08 5328 002A                  		subq.b	#1,$2A(a0)
00016A0C 6B00                       		bmi.s	loc_16B5E
00016A0E 2F28 0008                  		move.l	8(a0),-(sp)
00016A12 2428 0008                  		move.l	8(a0),d2
00016A16 3028 0010                  		move.w	$10(a0),d0
00016A1A 0828 0000 0022             		btst	#0,$22(a0)
00016A20 6700                       		beq.s	loc_16B1E
00016A22 4440                       		neg.w	d0
00016A24                            
00016A24                            loc_16B1E:
00016A24 48C0                       		ext.l	d0
00016A26 E180                       		asl.l	#8,d0
00016A28 D480                       		add.l	d0,d2
00016A2A 2142 0008                  		move.l	d2,8(a0)
00016A2E 4EBA E2F8                  		jsr	ObjHitFloor
00016A32 241F                       		move.l	(sp)+,d2
00016A34 0C41 FFF8                  		cmpi.w	#-8,d1
00016A38 6D00                       		blt.s	loc_16B70
00016A3A 0C41 000C                  		cmpi.w	#$C,d1
00016A3E 6C00                       		bge.s	loc_16B70
00016A40 D368 000C                  		add.w	d1,$C(a0)
00016A44 4842                       		swap	d2
00016A46 B468 0008                  		cmp.w	8(a0),d2
00016A4A 6700                       		beq.s	locret_16B5C
00016A4C 7000                       		moveq	#0,d0
00016A4E 1028 003C                  		move.b	$3C(a0),d0
00016A52 5228 003C                  		addq.b	#1,$3C(a0)
00016A56 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016A5C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016A60                            
00016A60                            locret_16B5C:
00016A60 4E75                       		rts	
00016A62                            ; ===========================================================================
00016A62                            
00016A62                            loc_16B5E:
00016A62 5528 0025                  		subq.b	#2,$25(a0)
00016A66 117C 0007 002A             		move.b	#7,$2A(a0)
00016A6C 317C 0000 0010             		move.w	#0,$10(a0)
00016A72 4E75                       		rts	
00016A74                            ; ===========================================================================
00016A74                            
00016A74                            loc_16B70:
00016A74 2142 0008                  		move.l	d2,8(a0)
00016A78 0868 0000 0022             		bchg	#0,$22(a0)
00016A7E 1168 0022 0001             		move.b	$22(a0),1(a0)
00016A84 7000                       		moveq	#0,d0
00016A86 1028 003C                  		move.b	$3C(a0),d0
00016A8A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016A90 5228 003C                  		addq.b	#1,$3C(a0)
00016A94 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016A9A 4E75                       		rts	
00016A9C                            ; ===========================================================================
00016A9C                            
00016A9C                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016A9C 2268 003C                  		movea.l	$3C(a0),a1
00016AA0 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016AA6 6A00                       		bpl.s	Obj78_BodySeg1
00016AA8 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016AAE 1028 0026                  		move.b	$26(a0),d0
00016AB2 0240 007F                  		andi.w	#$7F,d0
00016AB6 5828 0026                  		addq.b	#4,$26(a0)
00016ABA 4A31 0004                  		tst.b	4(a1,d0.w)
00016ABE 6A00                       		bpl.s	Obj78_AniBody
00016AC0 5828 0026                  		addq.b	#4,$26(a0)
00016AC4                            
00016AC4                            Obj78_AniBody:
00016AC4 1031 0000                  		move.b	(a1,d0.w),d0
00016AC8 5000                       		addq.b	#8,d0
00016ACA 1140 001A                  		move.b	d0,$1A(a0)
00016ACE                            
00016ACE                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016ACE 2268 003C                  		movea.l	$3C(a0),a1
00016AD2 4A28 0022                  		tst.b	$22(a0)
00016AD6 6B00 0000                  		bmi.w	loc_16C90
00016ADA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016AE0 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016AE6 6700 0000                  		beq.w	loc_16C64
00016AEA 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016AF0 3029 0010                  		move.w	$10(a1),d0
00016AF4 D069 0014                  		add.w	$14(a1),d0
00016AF8 3140 0010                  		move.w	d0,$10(a0)
00016AFC 2428 0008                  		move.l	8(a0),d2
00016B00 2602                       		move.l	d2,d3
00016B02 3028 0010                  		move.w	$10(a0),d0
00016B06 0828 0000 0022             		btst	#0,$22(a0)
00016B0C 6700                       		beq.s	loc_16C0C
00016B0E 4440                       		neg.w	d0
00016B10                            
00016B10                            loc_16C0C:
00016B10 48C0                       		ext.l	d0
00016B12 E180                       		asl.l	#8,d0
00016B14 D480                       		add.l	d0,d2
00016B16 2142 0008                  		move.l	d2,8(a0)
00016B1A 4843                       		swap	d3
00016B1C B668 0008                  		cmp.w	8(a0),d3
00016B20 6700                       		beq.s	loc_16C64
00016B22 7000                       		moveq	#0,d0
00016B24 1028 003C                  		move.b	$3C(a0),d0
00016B28 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016B2C 0C01 0080                  		cmpi.b	#-$80,d1
00016B30 6600                       		bne.s	loc_16C50
00016B32 4843                       		swap	d3
00016B34 2143 0008                  		move.l	d3,8(a0)
00016B38 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016B3C 0868 0000 0022             		bchg	#0,$22(a0)
00016B42 1168 0022 0001             		move.b	$22(a0),1(a0)
00016B48 5228 003C                  		addq.b	#1,$3C(a0)
00016B4C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016B52 6000                       		bra.s	loc_16C64
00016B54                            ; ===========================================================================
00016B54                            
00016B54                            loc_16C50:
00016B54 4881                       		ext.w	d1
00016B56 D368 000C                  		add.w	d1,$C(a0)
00016B5A 5228 003C                  		addq.b	#1,$3C(a0)
00016B5E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016B64 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016B68                            
00016B68                            loc_16C64:
00016B68 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016B6E 6700                       		beq.s	loc_16C90
00016B70 0C11 0027                  		cmpi.b	#$27,0(a1)
00016B74 6700                       		beq.s	loc_16C7C
00016B76 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016B7C 6600                       		bne.s	loc_16C82
00016B7E                            
00016B7E                            loc_16C7C:
00016B7E 117C 000A 0024             		move.b	#$A,$24(a0)
00016B84                            
00016B84                            loc_16C82:
00016B84 4EF9 0000 D58A             		jmp	DisplaySprite
00016B8A                            
00016B8A                            ; ===========================================================================
00016B8A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016B92                            ; ===========================================================================
00016B92                            
00016B92                            loc_16C90:
00016B92 08E9 0007 0022             		bset	#7,$22(a1)
00016B98                            
00016B98                            loc_16C96:
00016B98 7000                       		moveq	#0,d0
00016B9A 1028 0024                  		move.b	$24(a0),d0
00016B9E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016BA2 0828 0000 0022             		btst	#0,$22(a0)
00016BA8 6700                       		beq.s	loc_16CAA
00016BAA 4440                       		neg.w	d0
00016BAC                            
00016BAC                            loc_16CAA:
00016BAC 3140 0010                  		move.w	d0,$10(a0)
00016BB0 317C FC00 0012             		move.w	#-$400,$12(a0)
00016BB6 117C 000C 0024             		move.b	#$C,$24(a0)
00016BBC 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016BC2                            
00016BC2                            loc_16CC0:				; XREF: Obj78_Index
00016BC2 4EB9 0000 D538             		jsr	ObjectFall
00016BC8 4A68 0012                  		tst.w	$12(a0)
00016BCC 6B00                       		bmi.s	loc_16CE0
00016BCE 4EBA E158                  		jsr	ObjHitFloor
00016BD2 4A41                       		tst.w	d1
00016BD4 6A00                       		bpl.s	loc_16CE0
00016BD6 D368 000C                  		add.w	d1,$C(a0)
00016BDA 317C FC00 0012             		move.w	#-$400,$12(a0)
00016BE0                            
00016BE0                            loc_16CE0:
00016BE0 4A28 0001                  		tst.b	1(a0)
00016BE4 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016BE8 4EF9 0000 D58A             		jmp	DisplaySprite
00016BEE                            ; ===========================================================================
00016BEE                            Ani_obj78:
00016BEE                            	include "_anim\obj78.asm"
00016BEE                            ; ---------------------------------------------------------------------------
00016BEE                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016BEE                            ; ---------------------------------------------------------------------------
00016BEE 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016BFE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016C0E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016C1E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016C2E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016C3E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016C4E 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016C5E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016C6E                            	even
00016C6E                            	even
00016C6E                            
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            Map_obj78:
00016C6E                            	include "_maps\obj78.asm"
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016C72 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016C76 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016C7A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016C7E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016C82 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016C86 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016C8A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016C8E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016C92 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016C96 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016C9A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016C9E 01                         byte_16D9E:	dc.b 1
00016C9F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016CA4 01                         byte_16DA4:	dc.b 1
00016CA5 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016CAA 01                         byte_16DAA:	dc.b 1
00016CAB F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016CB0 01                         byte_16DB0:	dc.b 1
00016CB1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016CB6 01                         byte_16DB6:	dc.b 1
00016CB7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016CBC 01                         byte_16DBC:	dc.b 1
00016CBD ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016CC2 01                         byte_16DC2:	dc.b 1
00016CC3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016CC8 01                         byte_16DC8:	dc.b 1
00016CC9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016CCE 01                         byte_16DCE:	dc.b 1
00016CCF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016CD4 01                         byte_16DD4:	dc.b 1
00016CD5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016CDA 01                         byte_16DDA:	dc.b 1
00016CDB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016CE0 01                         byte_16DE0:	dc.b 1
00016CE1 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016CE6 01                         byte_16DE6:	dc.b 1
00016CE7 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016CEC 01                         byte_16DEC:	dc.b 1
00016CED F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016CF2 01                         byte_16DF2:	dc.b 1
00016CF3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016CF8 01                         byte_16DF8:	dc.b 1
00016CF9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016CFE 01                         byte_16DFE:	dc.b 1
00016CFF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016D04 01                         byte_16E04:	dc.b 1
00016D05 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016D0A 01                         byte_16E0A:	dc.b 1
00016D0B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016D10 01                         byte_16E10:	dc.b 1
00016D11 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016D16 01                         byte_16E16:	dc.b 1
00016D17 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016D1C 01                         byte_16E1C:	dc.b 1
00016D1D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016D22 01                         byte_16E22:	dc.b 1
00016D23 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016D28 01                         byte_16E28:	dc.b 1
00016D29 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016D2E                            		even
00016D2E                            		even
00016D2E                            
00016D2E                            ; ===========================================================================
00016D2E                            ; ---------------------------------------------------------------------------
00016D2E                            ; Object 79 - lamppost
00016D2E                            ; ---------------------------------------------------------------------------
00016D2E                            
00016D2E                            Obj79:					; XREF: Obj_Index
00016D2E 7000                       		moveq	#0,d0
00016D30 1028 0024                  		move.b	$24(a0),d0
00016D34 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016D38 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016D3C 4EFA 88E4                  		jmp	MarkObjGone
00016D40                            ; ===========================================================================
00016D40 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016D42 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016D44 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016D46 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016D48                            ; ===========================================================================
00016D48                            
00016D48                            Obj79_Main:				; XREF: Obj79_Index
00016D48 5428 0024                  		addq.b	#2,$24(a0)
00016D4C 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016D54 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016D5A 117C 0004 0001             		move.b	#4,1(a0)
00016D60 117C 0008 0019             		move.b	#8,$19(a0)
00016D66 117C 0005 0018             		move.b	#5,$18(a0)
00016D6C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016D70 7000                       		moveq	#0,d0
00016D72 1028 0023                  		move.b	$23(a0),d0
00016D76 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016D7C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016D82 6600                       		bne.s	Obj79_RedLamp
00016D84 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016D88 0201 007F                  		andi.b	#$7F,d1
00016D8C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016D90 0202 007F                  		andi.b	#$7F,d2
00016D94 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016D96 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016D98                            
00016D98                            Obj79_RedLamp:
00016D98 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016D9E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016DA4 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016DAA 4E75                       		rts	
00016DAC                            ; ===========================================================================
00016DAC                            
00016DAC                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016DAC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016DB0 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00016DB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016DB8 6B00 0000                  		bmi.w	locret_16F90
00016DBC 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016DC0 0201 007F                  		andi.b	#$7F,d1
00016DC4 1428 0028                  		move.b	$28(a0),d2
00016DC8 0202 007F                  		andi.b	#$7F,d2
00016DCC B202                       		cmp.b	d2,d1
00016DCE 6500                       		bcs.s	Obj79_HitLamp
00016DD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016DD4 7000                       		moveq	#0,d0
00016DD6 1028 0023                  		move.b	$23(a0),d0
00016DDA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016DE0 117C 0004 0024             		move.b	#4,$24(a0)
00016DE6 117C 0003 001A             		move.b	#3,$1A(a0)
00016DEC 6000 0000                  		bra.w	locret_16F90
00016DF0                            ; ===========================================================================
00016DF0                            
00016DF0                            Obj79_HitLamp:
00016DF0 3038 D008                  		move.w	($FFFFD008).w,d0
00016DF4 9068 0008                  		sub.w	8(a0),d0
00016DF8 5040                       		addq.w	#8,d0
00016DFA 0C40 0010                  		cmpi.w	#$10,d0
00016DFE 6400 0000                  		bcc.w	locret_16F90
00016E02 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016E06 9068 000C                  		sub.w	$C(a0),d0
00016E0A 0640 0040                  		addi.w	#$40,d0
00016E0E 0C40 0068                  		cmpi.w	#$68,d0
00016E12 6400                       		bcc.s	locret_16F90
00016E14 303C 00A1                  		move.w	#$A1,d0
00016E18 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play lamppost sound
00016E1E 5428 0024                  		addq.b	#2,$24(a0)
00016E22 4EB9 0000 DA10             		jsr	SingleObjLoad
00016E28 6600                       		bne.s	loc_16F76
00016E2A 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00016E2E 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00016E34 3368 0008 0030             		move.w	8(a0),$30(a1)
00016E3A 3368 000C 0032             		move.w	$C(a0),$32(a1)
00016E40 0469 0018 0032             		subi.w	#$18,$32(a1)
00016E46 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00016E4E 337C 07A0 0002             		move.w	#$7A0,2(a1)
00016E54 137C 0004 0001             		move.b	#4,1(a1)
00016E5A 137C 0008 0019             		move.b	#8,$19(a1)
00016E60 137C 0004 0018             		move.b	#4,$18(a1)
00016E66 137C 0002 001A             		move.b	#2,$1A(a1)
00016E6C 337C 0020 0036             		move.w	#$20,$36(a1)
00016E72                            
00016E72                            loc_16F76:
00016E72 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00016E78 6100 0000                  		bsr.w	Obj79_StoreInfo
00016E7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016E80 7000                       		moveq	#0,d0
00016E82 1028 0023                  		move.b	$23(a0),d0
00016E86 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016E8C                            
00016E8C                            locret_16F90:
00016E8C 4E75                       		rts	
00016E8E                            ; ===========================================================================
00016E8E                            
00016E8E                            Obj79_AfterHit:				; XREF: Obj79_Index
00016E8E 4E75                       		rts	
00016E90                            ; ===========================================================================
00016E90                            
00016E90                            Obj79_Twirl:				; XREF: Obj79_Index
00016E90 5368 0036                  		subq.w	#1,$36(a0)
00016E94 6A00                       		bpl.s	loc_16FA0
00016E96 117C 0004 0024             		move.b	#4,$24(a0)
00016E9C                            
00016E9C                            loc_16FA0:
00016E9C 1028 0026                  		move.b	$26(a0),d0
00016EA0 0428 0010 0026             		subi.b	#$10,$26(a0)
00016EA6 0400 0040                  		subi.b	#$40,d0
00016EAA 4EB9 0000 29B8             		jsr	(CalcSine).l
00016EB0 C3FC 0C00                  		muls.w	#$C00,d1
00016EB4 4841                       		swap	d1
00016EB6 D268 0030                  		add.w	$30(a0),d1
00016EBA 3141 0008                  		move.w	d1,8(a0)
00016EBE C1FC 0C00                  		muls.w	#$C00,d0
00016EC2 4840                       		swap	d0
00016EC4 D068 0032                  		add.w	$32(a0),d0
00016EC8 3140 000C                  		move.w	d0,$C(a0)
00016ECC 4E75                       		rts	
00016ECE                            ; ===========================================================================
00016ECE                            ; ---------------------------------------------------------------------------
00016ECE                            ; Subroutine to	store information when you hit a lamppost
00016ECE                            ; ---------------------------------------------------------------------------
00016ECE                            
00016ECE                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00016ECE 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00016ED4 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00016EDA 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00016EE0 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00016EE6 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00016EEC 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00016EF2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00016EF8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00016EFE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00016F04 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00016F0A 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00016F10 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00016F16 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00016F1C 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00016F22 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00016F28 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00016F2E 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00016F34 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00016F3A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00016F40 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00016F46 4E75                       		rts	
00016F48                            
00016F48                            ; ---------------------------------------------------------------------------
00016F48                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00016F48                            ; ---------------------------------------------------------------------------
00016F48                            
00016F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F48                            
00016F48                            
00016F48                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00016F48 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00016F4E 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00016F54 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00016F5A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00016F60 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00016F66 4278 FE20                  		clr.w	($FFFFFE20).w
00016F6A 4238 FE1B                  		clr.b	($FFFFFE1B).w
00016F6E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00016F74 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00016F7A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00016F7E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00016F84 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00016F8A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00016F90 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00016F96 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00016F9C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00016FA2 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00016FA8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00016FAE 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00016FB4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00016FBA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00016FC0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00016FC6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016FCC 6600                       		bne.s	loc_170E4
00016FCE 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00016FD4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00016FDA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00016FE0                            
00016FE0                            loc_170E4:
00016FE0 4A38 FE30                  		tst.b	($FFFFFE30).w
00016FE4 6A00                       		bpl.s	locret_170F6
00016FE6 3038 FE32                  		move.w	($FFFFFE32).w,d0
00016FEA 0440 00A0                  		subi.w	#$A0,d0
00016FEE 31C0 F728                  		move.w	d0,($FFFFF728).w
00016FF2                            
00016FF2                            locret_170F6:
00016FF2 4E75                       		rts	
00016FF4                            ; End of function Obj79_LoadInfo
00016FF4                            
00016FF4                            ; ===========================================================================
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4                            ; Sprite mappings - lamppost
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4                            Map_obj79:
00016FF4                            	include "_maps\obj79.asm"
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4                            ; Sprite mappings - lamppost
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00016FF8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00016FFC 06                         byte_17100:	dc.b 6
00016FFD E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017002 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017007 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001700C F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017011 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017016 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001701B 04                         byte_1711F:	dc.b 4
0001701C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017021 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017026 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001702B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017030 02                         byte_17134:	dc.b 2
00017031 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017036 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001703B 06                         byte_1713F:	dc.b 6
0001703C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017041 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017046 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001704B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017050 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017055 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001705A                            		even
0001705A                            		even
0001705A                            
0001705A                            ; ===========================================================================
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Object 7D - hidden points at the end of a level
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            
0001705A                            Obj7D:					; XREF: Obj_Index
0001705A 7000                       		moveq	#0,d0
0001705C 1028 0024                  		move.b	$24(a0),d0
00017060 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017064 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017068                            ; ===========================================================================
00017068 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001706A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001706C                            ; ===========================================================================
0001706C                            
0001706C                            Obj7D_Main:				; XREF: Obj7D_Index
0001706C 7410                       		moveq	#$10,d2
0001706E 3602                       		move.w	d2,d3
00017070 D643                       		add.w	d3,d3
00017072 43F8 D000                  		lea	($FFFFD000).w,a1
00017076 3029 0008                  		move.w	8(a1),d0
0001707A 9068 0008                  		sub.w	8(a0),d0
0001707E D042                       		add.w	d2,d0
00017080 B043                       		cmp.w	d3,d0
00017082 6400                       		bcc.s	Obj7D_ChkDel
00017084 3229 000C                  		move.w	$C(a1),d1
00017088 9268 000C                  		sub.w	$C(a0),d1
0001708C D242                       		add.w	d2,d1
0001708E B243                       		cmp.w	d3,d1
00017090 6400                       		bcc.s	Obj7D_ChkDel
00017092 4A78 FE08                  		tst.w	($FFFFFE08).w
00017096 6600                       		bne.s	Obj7D_ChkDel
00017098 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001709C 6600                       		bne.s	Obj7D_ChkDel
0001709E 5428 0024                  		addq.b	#2,$24(a0)
000170A2 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000170AA 317C 84B6 0002             		move.w	#$84B6,2(a0)
000170B0 0028 0004 0001             		ori.b	#4,1(a0)
000170B6 117C 0000 0018             		move.b	#0,$18(a0)
000170BC 117C 0010 0019             		move.b	#$10,$19(a0)
000170C2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000170C8 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000170CE 303C 00C9                  		move.w	#$C9,d0
000170D2 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play bonus sound
000170D8 7000                       		moveq	#0,d0
000170DA 1028 0028                  		move.b	$28(a0),d0
000170DE D040                       		add.w	d0,d0
000170E0 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000170E4 4EB9 0000 0000             		jsr	AddPoints
000170EA                            
000170EA                            Obj7D_ChkDel:
000170EA 3028 0008                  		move.w	8(a0),d0
000170EE 0240 FF80                  		andi.w	#$FF80,d0
000170F2 3238 F700                  		move.w	($FFFFF700).w,d1
000170F6 0441 0080                  		subi.w	#$80,d1
000170FA 0241 FF80                  		andi.w	#$FF80,d1
000170FE 9041                       		sub.w	d1,d0
00017100 0C40 0280                  		cmpi.w	#$280,d0
00017104 6200                       		bhi.s	Obj7D_Delete
00017106 4E75                       		rts	
00017108                            ; ===========================================================================
00017108                            
00017108                            Obj7D_Delete:
00017108 4EF9 0000 D5C6             		jmp	DeleteObject
0001710E                            ; ===========================================================================
0001710E 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017110 03E8                       		dc.w 1000
00017112 0064                       		dc.w 100
00017114 0001                       		dc.w 1
00017116                            ; ===========================================================================
00017116                            
00017116                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017116 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001711A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001711C 3028 0008                  		move.w	8(a0),d0
00017120 0240 FF80                  		andi.w	#-$80,d0
00017124 3238 F700                  		move.w	($FFFFF700).w,d1
00017128 0441 0080                  		subi.w	#$80,d1
0001712C 0241 FF80                  		andi.w	#-$80,d1
00017130 9041                       		sub.w	d1,d0
00017132 0C40 0280                  		cmpi.w	#$280,d0
00017136 6200                       		bhi.s	Obj7D_Delete2
00017138 4EF9 0000 D58A             		jmp	DisplaySprite
0001713E                            ; ===========================================================================
0001713E                            
0001713E                            Obj7D_Delete2:
0001713E 4EF9 0000 D5C6             		jmp	DeleteObject
00017144                            ; ===========================================================================
00017144                            ; ---------------------------------------------------------------------------
00017144                            ; Sprite mappings - hidden points at the end of	a level
00017144                            ; ---------------------------------------------------------------------------
00017144                            Map_obj7D:
00017144                            	include "_maps\obj7D.asm"
00017144                            ; ---------------------------------------------------------------------------
00017144                            ; Sprite mappings - hidden points at the end of	a level
00017144                            ; ---------------------------------------------------------------------------
00017144 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017148 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001714C 00                         byte_17250:	dc.b 0
0001714D 01                         byte_17251:	dc.b 1
0001714E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017153 01                         byte_17257:	dc.b 1
00017154 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017159 01                         byte_1725D:	dc.b 1
0001715A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017160 00                         		even
00017160 00                         		even
00017160                            
00017160                            ; ===========================================================================
00017160                            ; ---------------------------------------------------------------------------
00017160                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017160                            ; ---------------------------------------------------------------------------
00017160                            
00017160                            Obj8A:					; XREF: Obj_Index
00017160 7000                       		moveq	#0,d0
00017162 1028 0024                  		move.b	$24(a0),d0
00017166 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001716A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001716E                            ; ===========================================================================
0001716E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017170 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017172                            ; ===========================================================================
00017172                            
00017172                            Obj8A_Main:				; XREF: Obj8A_Index
00017172 5428 0024                  		addq.b	#2,$24(a0)
00017176 317C 0120 0008             		move.w	#$120,8(a0)
0001717C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017182 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001718A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017190 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017194 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017198 117C 0000 0001             		move.b	#0,1(a0)
0001719E 117C 0000 0018             		move.b	#0,$18(a0)
000171A4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000171AA 6600                       		bne.s	Obj8A_Display	; if not, branch
000171AC 317C 00A6 0002             		move.w	#$A6,2(a0)
000171B2 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000171B8 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000171BC 6700                       		beq.s	Obj8A_Display	; if not, branch
000171BE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000171C4 6600                       		bne.s	Obj8A_Display	; if not, branch
000171C6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000171CC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000171D2 4EF9 0000 D5C6             		jmp	DeleteObject
000171D8                            ; ===========================================================================
000171D8                            
000171D8                            Obj8A_Display:				; XREF: Obj8A_Index
000171D8 4EF9 0000 D58A             		jmp	DisplaySprite
000171DE                            ; ===========================================================================
000171DE                            ; ---------------------------------------------------------------------------
000171DE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000171DE                            ; ---------------------------------------------------------------------------
000171DE                            Map_obj8A:
000171DE                            	include "_maps\obj8A.asm"
000171DE                            ; ---------------------------------------------------------------------------
000171DE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000171DE                            ; ---------------------------------------------------------------------------
000171DE 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000171E2 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000171E6 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000171EA 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000171EE 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000171F2 0000                       		dc.w byte_176A9-Map_obj8A
000171F4 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000171F5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
000171FA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
000171FF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00017204 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00017209 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001720E F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00017213 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00017218 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001721D F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00017222 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017227 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001722C F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00017231 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017236 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001723B 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001723C D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00017241 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017246 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001724B D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00017250 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017255 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
0001725A D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001725F D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017264 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00017269 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001726E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017273 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00017278 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001727D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00017282 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00017287 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001728C 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001728D D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00017292 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00017297 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001729C D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000172A1 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000172A6 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000172AB D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000172B0 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000172B5 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000172BA 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000172BF 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000172C0 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000172C5 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000172CA D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000172CF D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000172D4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000172D9 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000172DE D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000172E3 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000172E8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000172ED D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000172F2 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000172F7 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
000172FC D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00017301 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017306 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0001730B 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00017310 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00017315 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001731A 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001731F 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017324 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017329 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001732E 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00017333 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017338 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017339 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001733E D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00017343 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00017348 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001734D D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00017352 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017357 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001735C 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00017361 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017366 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001736B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00017370 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017375 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001737A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001737F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00017384 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00017389 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001738E 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00017393 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00017398 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001739D 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
0001739E D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000173A3 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000173A8 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000173AD D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000173B2 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000173B7 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000173BC D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000173C1 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000173C6 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000173CB D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000173D0 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000173D5 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000173DA 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000173DF 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000173E4 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000173E9 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000173EE 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000173F3 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
000173F8 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
000173FD 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00017402 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00017407 0805 0004 28               		dc.b 8,	5, 0, 4, $28
0001740C 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00017411 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00017416 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001741B 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00017420 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00017421 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017426 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001742B D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00017430 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00017435 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001743A D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001743F D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00017444 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00017449 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001744E D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00017453 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00017458 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001745D 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017462 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017467 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001746C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00017471 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00017476 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001747B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00017480 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00017485 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001748A 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001748F 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00017494 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00017495 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
0001749A D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
0001749F D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000174A4 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000174A9 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000174AE D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000174B3 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000174B8 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000174BD D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000174C2 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000174C7 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000174CC D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000174D1 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000174D6 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000174DB 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000174E0 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000174E5 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000174EA 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000174EF 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000174F4 0001 0046 14               		dc.b 0,	1, 0, $46, $14
000174F9 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
000174FE 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00017503 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00017508 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
0001750D 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00017512 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00017517 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001751C 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00017521 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017526 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001752B 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00017530 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00017531 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017536 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001753B F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00017540 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017545 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001754A F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001754F F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017554 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00017559 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001755E F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017563 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00017568 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001756D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017572 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017577 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001757C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001757D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00017582 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00017587 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001758C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00017591 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00017596 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001759B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000175A0 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000175A5 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000175A6 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000175AB E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000175B0 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000175B5 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000175BA E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000175BF E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000175C4 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000175C9 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000175CE E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000175D3 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000175D8 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000175DD 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000175E2 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000175E7 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000175EC 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000175F1 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000175F6 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000175FC 00                         		even
000175FC 00                         		even
000175FC                            
000175FC                            ; ===========================================================================
000175FC                            ; ---------------------------------------------------------------------------
000175FC                            ; Object 3D - Eggman (GHZ)
000175FC                            ; ---------------------------------------------------------------------------
000175FC                            
000175FC                            Obj3D:					; XREF: Obj_Index
000175FC 7000                       		moveq	#0,d0
000175FE 1028 0024                  		move.b	$24(a0),d0
00017602 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017606 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001760A                            ; ===========================================================================
0001760A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001760C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001760E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017610 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017612                            
00017612 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017614 0401                       		dc.b 4,	1
00017616 0607                       		dc.b 6,	7
00017618                            ; ===========================================================================
00017618                            
00017618                            Obj3D_Main:				; XREF: Obj3D_Index
00017618 45F9 0001 7612             		lea	(Obj3D_ObjData).l,a2
0001761E 2248                       		movea.l	a0,a1
00017620 7202                       		moveq	#2,d1
00017622 6000                       		bra.s	Obj3D_LoadBoss
00017624                            ; ===========================================================================
00017624                            
00017624                            Obj3D_Loop:
00017624 4EB9 0000 DA26             		jsr	SingleObjLoad2
0001762A 6600                       		bne.s	loc_17772
0001762C                            
0001762C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001762C 135A 0024                  		move.b	(a2)+,$24(a1)
00017630 12BC 003D                  		move.b	#$3D,0(a1)
00017634 3368 0008 0008             		move.w	8(a0),8(a1)
0001763A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017640 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017648 337C 0400 0002             		move.w	#$400,2(a1)
0001764E 137C 0004 0001             		move.b	#4,1(a1)
00017654 137C 0020 0019             		move.b	#$20,$19(a1)
0001765A 137C 0003 0018             		move.b	#3,$18(a1)
00017660 135A 001C                  		move.b	(a2)+,$1C(a1)
00017664 2348 0034                  		move.l	a0,$34(a1)
00017668 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001766C                            
0001766C                            loc_17772:
0001766C 3168 0008 0030             		move.w	8(a0),$30(a0)
00017672 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017678 117C 000F 0020             		move.b	#$F,$20(a0)
0001767E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017684                            
00017684                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017684 7000                       		moveq	#0,d0
00017686 1028 0025                  		move.b	$25(a0),d0
0001768A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001768E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017692 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017698 4EB9 0000 A6B6             		jsr	AnimateSprite
0001769E 1028 0022                  		move.b	$22(a0),d0
000176A2 0200 0003                  		andi.b	#3,d0
000176A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000176AC 8128 0001                  		or.b	d0,1(a0)
000176B0 4EF9 0000 D58A             		jmp	DisplaySprite
000176B6                            ; ===========================================================================
000176B6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000176B8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000176BA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000176BC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000176BE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000176C0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000176C2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000176C4                            ; ===========================================================================
000176C4                            
000176C4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000176C4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000176CA 6100 0000                  		bsr.w	BossMove
000176CE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000176D4 6600                       		bne.s	loc_177E6
000176D6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000176DC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000176E0                            
000176E0                            loc_177E6:
000176E0 1028 003F                  		move.b	$3F(a0),d0
000176E4 4EB9 0000 29B8             		jsr	(CalcSine).l
000176EA EC40                       		asr.w	#6,d0
000176EC D068 0038                  		add.w	$38(a0),d0
000176F0 3140 000C                  		move.w	d0,$C(a0)
000176F4 3168 0030 0008             		move.w	$30(a0),8(a0)
000176FA 5428 003F                  		addq.b	#2,$3F(a0)
000176FE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017704 6400                       		bcc.s	locret_1784A
00017706 4A28 0022                  		tst.b	$22(a0)
0001770A 6B00                       		bmi.s	loc_1784C
0001770C 4A28 0020                  		tst.b	$20(a0)
00017710 6600                       		bne.s	locret_1784A
00017712 4A28 003E                  		tst.b	$3E(a0)
00017716 6600                       		bne.s	Obj3D_ShipFlash
00017718 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001771E 303C 00AC                  		move.w	#$AC,d0
00017722 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017728                            
00017728                            Obj3D_ShipFlash:
00017728 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001772C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001772E 4A51                       		tst.w	(a1)
00017730 6600                       		bne.s	loc_1783C
00017732 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017736                            
00017736                            loc_1783C:
00017736 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017738 5328 003E                  		subq.b	#1,$3E(a0)
0001773C 6600                       		bne.s	locret_1784A
0001773E 117C 000F 0020             		move.b	#$F,$20(a0)
00017744                            
00017744                            locret_1784A:
00017744 4E75                       		rts	
00017746                            ; ===========================================================================
00017746                            
00017746                            loc_1784C:				; XREF: loc_177E6
00017746 7064                       		moveq	#100,d0
00017748 6100 0000                  		bsr.w	AddPoints
0001774C 117C 0008 0025             		move.b	#8,$25(a0)
00017752 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017758 4E75                       		rts	
0001775A                            
0001775A                            ; ---------------------------------------------------------------------------
0001775A                            ; Defeated boss	subroutine
0001775A                            ; ---------------------------------------------------------------------------
0001775A                            
0001775A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001775A                            
0001775A                            
0001775A                            BossDefeated:
0001775A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001775E 0200 0007                  		andi.b	#7,d0
00017762 6600                       		bne.s	locret_178A2
00017764 4EB9 0000 DA10             		jsr	SingleObjLoad
0001776A 6600                       		bne.s	locret_178A2
0001776C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017770 3368 0008 0008             		move.w	8(a0),8(a1)
00017776 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001777C 4EB9 0000 2992             		jsr	(RandomNumber).l
00017782 3200                       		move.w	d0,d1
00017784 7200                       		moveq	#0,d1
00017786 1200                       		move.b	d0,d1
00017788 E409                       		lsr.b	#2,d1
0001778A 0441 0020                  		subi.w	#$20,d1
0001778E D369 0008                  		add.w	d1,8(a1)
00017792 E048                       		lsr.w	#8,d0
00017794 E608                       		lsr.b	#3,d0
00017796 D169 000C                  		add.w	d0,$C(a1)
0001779A                            
0001779A                            locret_178A2:
0001779A 4E75                       		rts	
0001779C                            ; End of function BossDefeated
0001779C                            
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            ; Subroutine to	move a boss
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            
0001779C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001779C                            
0001779C                            
0001779C                            BossMove:
0001779C 2428 0030                  		move.l	$30(a0),d2
000177A0 2628 0038                  		move.l	$38(a0),d3
000177A4 3028 0010                  		move.w	$10(a0),d0
000177A8 48C0                       		ext.l	d0
000177AA E180                       		asl.l	#8,d0
000177AC D480                       		add.l	d0,d2
000177AE 3028 0012                  		move.w	$12(a0),d0
000177B2 48C0                       		ext.l	d0
000177B4 E180                       		asl.l	#8,d0
000177B6 D680                       		add.l	d0,d3
000177B8 2142 0030                  		move.l	d2,$30(a0)
000177BC 2143 0038                  		move.l	d3,$38(a0)
000177C0 4E75                       		rts	
000177C2                            ; End of function BossMove
000177C2                            
000177C2                            ; ===========================================================================
000177C2                            
000177C2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000177C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000177C8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000177CE 6100 FFCC                  		bsr.w	BossMove
000177D2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000177D8 6600                       		bne.s	loc_17916
000177DA 317C 0000 0010             		move.w	#0,$10(a0)
000177E0 317C 0000 0012             		move.w	#0,$12(a0)
000177E6 5428 0025                  		addq.b	#2,$25(a0)
000177EA 4EB9 0000 DA26             		jsr	SingleObjLoad2
000177F0 6600                       		bne.s	loc_17910
000177F2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000177F6 3368 0030 0008             		move.w	$30(a0),8(a1)
000177FC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017802 2348 0034                  		move.l	a0,$34(a1)
00017806                            
00017806                            loc_17910:
00017806 317C 0077 003C             		move.w	#$77,$3C(a0)
0001780C                            
0001780C                            loc_17916:
0001780C 6000 FED2                  		bra.w	loc_177E6
00017810                            ; ===========================================================================
00017810                            
00017810                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017810 5368 003C                  		subq.w	#1,$3C(a0)
00017814 6A00                       		bpl.s	Obj3D_Reverse
00017816 5428 0025                  		addq.b	#2,$25(a0)
0001781A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017820 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017826 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001782C 6600                       		bne.s	Obj3D_Reverse
0001782E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017834 317C 0040 0010             		move.w	#$40,$10(a0)
0001783A                            
0001783A                            Obj3D_Reverse:
0001783A 0828 0000 0022             		btst	#0,$22(a0)
00017840 6600                       		bne.s	loc_17950
00017842 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017846                            
00017846                            loc_17950:
00017846 6000 FE98                  		bra.w	loc_177E6
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001784A 5368 003C                  		subq.w	#1,$3C(a0)
0001784E 6B00                       		bmi.s	loc_17960
00017850 6100 FF4A                  		bsr.w	BossMove
00017854 6000                       		bra.s	loc_17976
00017856                            ; ===========================================================================
00017856                            
00017856                            loc_17960:
00017856 0868 0000 0022             		bchg	#0,$22(a0)
0001785C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017862 5528 0025                  		subq.b	#2,$25(a0)
00017866 317C 0000 0010             		move.w	#0,$10(a0)
0001786C                            
0001786C                            loc_17976:
0001786C 6000 FE72                  		bra.w	loc_177E6
00017870                            ; ===========================================================================
00017870                            
00017870                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017870 5368 003C                  		subq.w	#1,$3C(a0)
00017874 6B00                       		bmi.s	loc_17984
00017876 6000 FEE2                  		bra.w	BossDefeated
0001787A                            ; ===========================================================================
0001787A                            
0001787A                            loc_17984:
0001787A 08E8 0000 0022             		bset	#0,$22(a0)
00017880 08A8 0007 0022             		bclr	#7,$22(a0)
00017886 4268 0010                  		clr.w	$10(a0)
0001788A 5428 0025                  		addq.b	#2,$25(a0)
0001788E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017894 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017898 6600                       		bne.s	locret_179AA
0001789A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000178A0                            
000178A0                            locret_179AA:
000178A0 4E75                       		rts	
000178A2                            ; ===========================================================================
000178A2                            
000178A2                            loc_179AC:				; XREF: Obj3D_ShipIndex
000178A2 5268 003C                  		addq.w	#1,$3C(a0)
000178A6 6700                       		beq.s	loc_179BC
000178A8 6A00                       		bpl.s	loc_179C2
000178AA 0668 0018 0012             		addi.w	#$18,$12(a0)
000178B0 6000                       		bra.s	loc_179EE
000178B2                            ; ===========================================================================
000178B2                            
000178B2                            loc_179BC:
000178B2 4268 0012                  		clr.w	$12(a0)
000178B6 6000                       		bra.s	loc_179EE
000178B8                            ; ===========================================================================
000178B8                            
000178B8                            loc_179C2:
000178B8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000178BE 6500                       		bcs.s	loc_179DA
000178C0 6700                       		beq.s	loc_179E0
000178C2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000178C8 6500                       		bcs.s	loc_179EE
000178CA 5428 0025                  		addq.b	#2,$25(a0)
000178CE 6000                       		bra.s	loc_179EE
000178D0                            ; ===========================================================================
000178D0                            
000178D0                            loc_179DA:
000178D0 5168 0012                  		subq.w	#8,$12(a0)
000178D4 6000                       		bra.s	loc_179EE
000178D6                            ; ===========================================================================
000178D6                            
000178D6                            loc_179E0:
000178D6 4268 0012                  		clr.w	$12(a0)
000178DA 303C 0081                  		move.w	#$81,d0
000178DE 4EB9 0000 1374             		jsr	(PlaySound).l	; play GHZ music
000178E4                            
000178E4                            loc_179EE:
000178E4 6100 FEB6                  		bsr.w	BossMove
000178E8 6000 FDF6                  		bra.w	loc_177E6
000178EC                            ; ===========================================================================
000178EC                            
000178EC                            loc_179F6:				; XREF: Obj3D_ShipIndex
000178EC 317C 0400 0010             		move.w	#$400,$10(a0)
000178F2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000178F8 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000178FE 6700                       		beq.s	loc_17A10
00017900 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017904 6000                       		bra.s	loc_17A16
00017906                            ; ===========================================================================
00017906                            
00017906                            loc_17A10:
00017906 4A28 0001                  		tst.b	1(a0)
0001790A 6A00                       		bpl.s	Obj3D_ShipDel
0001790C                            
0001790C                            loc_17A16:
0001790C 6100 FE8E                  		bsr.w	BossMove
00017910 6000 FDCE                  		bra.w	loc_177E6
00017914                            ; ===========================================================================
00017914                            
00017914                            Obj3D_ShipDel:
00017914 4EF9 0000 D5C6             		jmp	DeleteObject
0001791A                            ; ===========================================================================
0001791A                            
0001791A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001791A 7000                       		moveq	#0,d0
0001791C 7201                       		moveq	#1,d1
0001791E 2268 0034                  		movea.l	$34(a0),a1
00017922 1029 0025                  		move.b	$25(a1),d0
00017926 5900                       		subq.b	#4,d0
00017928 6600                       		bne.s	loc_17A3E
0001792A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017930 6600                       		bne.s	loc_17A46
00017932 7204                       		moveq	#4,d1
00017934                            
00017934                            loc_17A3E:
00017934 5D00                       		subq.b	#6,d0
00017936 6B00                       		bmi.s	loc_17A46
00017938 720A                       		moveq	#$A,d1
0001793A 6000                       		bra.s	loc_17A5A
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            loc_17A46:
0001793C 4A29 0020                  		tst.b	$20(a1)
00017940 6600                       		bne.s	loc_17A50
00017942 7205                       		moveq	#5,d1
00017944 6000                       		bra.s	loc_17A5A
00017946                            ; ===========================================================================
00017946                            
00017946                            loc_17A50:
00017946 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001794C 6500                       		bcs.s	loc_17A5A
0001794E 7204                       		moveq	#4,d1
00017950                            
00017950                            loc_17A5A:
00017950 1141 001C                  		move.b	d1,$1C(a0)
00017954 5500                       		subq.b	#2,d0
00017956 6600                       		bne.s	Obj3D_FaceDisp
00017958 117C 0006 001C             		move.b	#6,$1C(a0)
0001795E 4A28 0001                  		tst.b	1(a0)
00017962 6A00                       		bpl.s	Obj3D_FaceDel
00017964                            
00017964                            Obj3D_FaceDisp:
00017964 6000                       		bra.s	Obj3D_Display
00017966                            ; ===========================================================================
00017966                            
00017966                            Obj3D_FaceDel:
00017966 4EF9 0000 D5C6             		jmp	DeleteObject
0001796C                            ; ===========================================================================
0001796C                            
0001796C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001796C 117C 0007 001C             		move.b	#7,$1C(a0)
00017972 2268 0034                  		movea.l	$34(a0),a1
00017976 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001797C 6600                       		bne.s	loc_17A96
0001797E 117C 000B 001C             		move.b	#$B,$1C(a0)
00017984 4A28 0001                  		tst.b	1(a0)
00017988 6A00                       		bpl.s	Obj3D_FlameDel
0001798A 6000                       		bra.s	Obj3D_FlameDisp
0001798C                            ; ===========================================================================
0001798C                            
0001798C                            loc_17A96:
0001798C 3029 0010                  		move.w	$10(a1),d0
00017990 6700                       		beq.s	Obj3D_FlameDisp
00017992 117C 0008 001C             		move.b	#8,$1C(a0)
00017998                            
00017998                            Obj3D_FlameDisp:
00017998 6000                       		bra.s	Obj3D_Display
0001799A                            ; ===========================================================================
0001799A                            
0001799A                            Obj3D_FlameDel:
0001799A 4EF9 0000 D5C6             		jmp	DeleteObject
000179A0                            ; ===========================================================================
000179A0                            
000179A0                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000179A0 2268 0034                  		movea.l	$34(a0),a1
000179A4 3169 0008 0008             		move.w	8(a1),8(a0)
000179AA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000179B0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000179B6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000179BC 4EB9 0000 A6B6             		jsr	AnimateSprite
000179C2 1028 0022                  		move.b	$22(a0),d0
000179C6 0200 0003                  		andi.b	#3,d0
000179CA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000179D0 8128 0001                  		or.b	d0,1(a0)
000179D4 4EF9 0000 D58A             		jmp	DisplaySprite
000179DA                            ; ===========================================================================
000179DA                            ; ---------------------------------------------------------------------------
000179DA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000179DA                            ; ---------------------------------------------------------------------------
000179DA                            
000179DA                            Obj48:					; XREF: Obj_Index
000179DA 7000                       		moveq	#0,d0
000179DC 1028 0024                  		move.b	$24(a0),d0
000179E0 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000179E4 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000179E8                            ; ===========================================================================
000179E8 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000179EA 0000                       		dc.w Obj48_Base-Obj48_Index
000179EC 0000                       		dc.w Obj48_Display2-Obj48_Index
000179EE 0000                       		dc.w loc_17C68-Obj48_Index
000179F0 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000179F2                            ; ===========================================================================
000179F2                            
000179F2                            Obj48_Main:				; XREF: Obj48_Index
000179F2 5428 0024                  		addq.b	#2,$24(a0)
000179F6 317C 4080 0026             		move.w	#$4080,$26(a0)
000179FC 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017A02 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017A0A 317C 046C 0002             		move.w	#$46C,2(a0)
00017A10 45E8 0028                  		lea	$28(a0),a2
00017A14 14FC 0000                  		move.b	#0,(a2)+
00017A18 7205                       		moveq	#5,d1
00017A1A 2248                       		movea.l	a0,a1
00017A1C 6000                       		bra.s	loc_17B60
00017A1E                            ; ===========================================================================
00017A1E                            
00017A1E                            Obj48_MakeLinks:
00017A1E 4EB9 0000 DA26             		jsr	SingleObjLoad2
00017A24 6600                       		bne.s	Obj48_MakeBall
00017A26 3368 0008 0008             		move.w	8(a0),8(a1)
00017A2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017A32 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017A36 137C 0006 0024             		move.b	#6,$24(a1)
00017A3C 237C 0000 7C0C 0004        		move.l	#Map_obj15,4(a1)
00017A44 337C 0380 0002             		move.w	#$380,2(a1)
00017A4A 137C 0001 001A             		move.b	#1,$1A(a1)
00017A50 5228 0028                  		addq.b	#1,$28(a0)
00017A54                            
00017A54                            loc_17B60:				; XREF: Obj48_Main
00017A54 3A09                       		move.w	a1,d5
00017A56 0445 D000                  		subi.w	#$D000,d5
00017A5A EC4D                       		lsr.w	#6,d5
00017A5C 0245 007F                  		andi.w	#$7F,d5
00017A60 14C5                       		move.b	d5,(a2)+
00017A62 137C 0004 0001             		move.b	#4,1(a1)
00017A68 137C 0008 0019             		move.b	#8,$19(a1)
00017A6E 137C 0006 0018             		move.b	#6,$18(a1)
00017A74 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017A7A 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017A7E                            
00017A7E                            Obj48_MakeBall:
00017A7E 137C 0008 0024             		move.b	#8,$24(a1)
00017A84 237C 0000 816A 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017A8C 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017A92 137C 0001 001A             		move.b	#1,$1A(a1)
00017A98 137C 0005 0018             		move.b	#5,$18(a1)
00017A9E 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017AA4 4E75                       		rts	
00017AA6                            ; ===========================================================================
00017AA6                            
00017AA6 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017AAC                            
00017AAC                            ; ===========================================================================
00017AAC                            
00017AAC                            Obj48_Base:				; XREF: Obj48_Index
00017AAC 47F9 0001 7AA6             		lea	(Obj48_PosData).l,a3
00017AB2 45E8 0028                  		lea	$28(a0),a2
00017AB6 7C00                       		moveq	#0,d6
00017AB8 1C1A                       		move.b	(a2)+,d6
00017ABA                            
00017ABA                            loc_17BC6:
00017ABA 7800                       		moveq	#0,d4
00017ABC 181A                       		move.b	(a2)+,d4
00017ABE ED4C                       		lsl.w	#6,d4
00017AC0 0684 00FF D000             		addi.l	#$FFD000,d4
00017AC6 2244                       		movea.l	d4,a1
00017AC8 101B                       		move.b	(a3)+,d0
00017ACA B029 003C                  		cmp.b	$3C(a1),d0
00017ACE 6700                       		beq.s	loc_17BE0
00017AD0 5229 003C                  		addq.b	#1,$3C(a1)
00017AD4                            
00017AD4                            loc_17BE0:
00017AD4 51CE FFE4                  		dbf	d6,loc_17BC6
00017AD8                            
00017AD8 B029 003C                  		cmp.b	$3C(a1),d0
00017ADC 6600                       		bne.s	loc_17BFA
00017ADE 2268 0034                  		movea.l	$34(a0),a1
00017AE2 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017AE8 6600                       		bne.s	loc_17BFA
00017AEA 5428 0024                  		addq.b	#2,$24(a0)
00017AEE                            
00017AEE                            loc_17BFA:
00017AEE 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017AF4 6700                       		beq.s	Obj48_Display
00017AF6 5268 0032                  		addq.w	#1,$32(a0)
00017AFA                            
00017AFA                            Obj48_Display:
00017AFA 6100 0000                  		bsr.w	sub_17C2A
00017AFE 1028 0026                  		move.b	$26(a0),d0
00017B02 4EB9 0000 7B7E             		jsr	(Obj15_Move2).l
00017B08 4EF9 0000 D58A             		jmp	DisplaySprite
00017B0E                            ; ===========================================================================
00017B0E                            
00017B0E                            Obj48_Display2:				; XREF: Obj48_Index
00017B0E 6100 0000                  		bsr.w	sub_17C2A
00017B12 4EB9 0000 7B3E             		jsr	(Obj48_Move).l
00017B18 4EF9 0000 D58A             		jmp	DisplaySprite
00017B1E                            
00017B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B1E                            
00017B1E                            
00017B1E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017B1E 2268 0034                  		movea.l	$34(a0),a1
00017B22 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017B28 6400                       		bcc.s	loc_17C3C
00017B2A 0868 0000 001A             		bchg	#0,$1A(a0)
00017B30                            
00017B30                            loc_17C3C:
00017B30 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017B36 3029 000C                  		move.w	$C(a1),d0
00017B3A D068 0032                  		add.w	$32(a0),d0
00017B3E 3140 0038                  		move.w	d0,$38(a0)
00017B42 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017B48 4A29 0022                  		tst.b	$22(a1)
00017B4C 6A00                       		bpl.s	locret_17C66
00017B4E 10BC 003F                  		move.b	#$3F,0(a0)
00017B52 117C 0000 0024             		move.b	#0,$24(a0)
00017B58                            
00017B58                            locret_17C66:
00017B58 4E75                       		rts	
00017B5A                            ; End of function sub_17C2A
00017B5A                            
00017B5A                            ; ===========================================================================
00017B5A                            
00017B5A                            loc_17C68:				; XREF: Obj48_Index
00017B5A 2268 0034                  		movea.l	$34(a0),a1
00017B5E 4A29 0022                  		tst.b	$22(a1)
00017B62 6A00                       		bpl.s	Obj48_Display3
00017B64 10BC 003F                  		move.b	#$3F,0(a0)
00017B68 117C 0000 0024             		move.b	#0,$24(a0)
00017B6E                            
00017B6E                            Obj48_Display3:
00017B6E 4EF9 0000 D58A             		jmp	DisplaySprite
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017B74 7000                       		moveq	#0,d0
00017B76 4A28 001A                  		tst.b	$1A(a0)
00017B7A 6600                       		bne.s	Obj48_Vanish
00017B7C 5200                       		addq.b	#1,d0
00017B7E                            
00017B7E                            Obj48_Vanish:
00017B7E 1140 001A                  		move.b	d0,$1A(a0)
00017B82 2268 0034                  		movea.l	$34(a0),a1
00017B86 4A29 0022                  		tst.b	$22(a1)
00017B8A 6A00                       		bpl.s	Obj48_Display4
00017B8C 117C 0000 0020             		move.b	#0,$20(a0)
00017B92 6100 FBC6                  		bsr.w	BossDefeated
00017B96 5328 003C                  		subq.b	#1,$3C(a0)
00017B9A 6A00                       		bpl.s	Obj48_Display4
00017B9C 10BC 003F                  		move.b	#$3F,(a0)
00017BA0 117C 0000 0024             		move.b	#0,$24(a0)
00017BA6                            
00017BA6                            Obj48_Display4:
00017BA6 4EF9 0000 D58A             		jmp	DisplaySprite
00017BAC                            ; ===========================================================================
00017BAC                            Ani_Eggman:
00017BAC                            	include "_anim\Eggman.asm"
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC                            ; Animation script - Eggman (bosses)
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC 0000                       		dc.w byte_17CD4-Ani_Eggman
00017BAE 0000                       		dc.w byte_17CD8-Ani_Eggman
00017BB0 0000                       		dc.w byte_17CDC-Ani_Eggman
00017BB2 0000                       		dc.w byte_17CE0-Ani_Eggman
00017BB4 0000                       		dc.w byte_17CE4-Ani_Eggman
00017BB6 0000                       		dc.w byte_17CE8-Ani_Eggman
00017BB8 0000                       		dc.w byte_17CEC-Ani_Eggman
00017BBA 0000                       		dc.w byte_17CF0-Ani_Eggman
00017BBC 0000                       		dc.w byte_17CF4-Ani_Eggman
00017BBE 0000                       		dc.w byte_17CF8-Ani_Eggman
00017BC0 0000                       		dc.w byte_17CFC-Ani_Eggman
00017BC2 0000                       		dc.w byte_17D00-Ani_Eggman
00017BC4 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017BC8 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017BCC 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017BD0 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017BD4 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017BD8 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017BDC 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017BE0 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017BE4 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017BE8 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017BEC 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017BF0 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017BFC                            		even
00017BFC                            		even
00017BFC                            
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            ; Sprite mappings - Eggman (boss levels)
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            Map_Eggman:
00017BFC                            	include "_maps\Eggman.asm"
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            ; Sprite mappings - Eggman (boss levels)
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00017C00 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00017C04 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00017C08 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00017C0C 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00017C10 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00017C14 0000                       		dc.w byte_17DC8-Map_Eggman
00017C16 06                         byte_17D26:	dc.b 6
00017C17 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00017C1C EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00017C21 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00017C26 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00017C2B 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00017C30 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00017C35 02                         byte_17D45:	dc.b 2
00017C36 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017C3B EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00017C40 02                         byte_17D50:	dc.b 2
00017C41 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017C46 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017C4B 03                         byte_17D5B:	dc.b 3
00017C4C E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00017C51 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00017C56 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00017C5B 03                         byte_17D6B:	dc.b 3
00017C5C E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00017C61 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00017C66 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00017C6B 03                         byte_17D7B:	dc.b 3
00017C6C E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017C71 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017C76 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017C7B 03                         byte_17D8B:	dc.b 3
00017C7C E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00017C81 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017C86 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017C8B 04                         byte_17D9B:	dc.b 4
00017C8C E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00017C91 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017C96 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017C9B EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017CA0 01                         byte_17DB0:	dc.b 1
00017CA1 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00017CA6 01                         byte_17DB6:	dc.b 1
00017CA7 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00017CAC 00                         byte_17DBC:	dc.b 0
00017CAD 02                         byte_17DBD:	dc.b 2
00017CAE 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00017CB3 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00017CB8 02                         byte_17DC8:	dc.b 2
00017CB9 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00017CBE 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00017CC4 00                         		even
00017CC4 00                         		even
00017CC4                            
00017CC4                            ; ---------------------------------------------------------------------------
00017CC4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017CC4                            ; ---------------------------------------------------------------------------
00017CC4                            Map_BossItems:
00017CC4                            	include "_maps\Boss items.asm"
00017CC4                            ; ---------------------------------------------------------------------------
00017CC4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017CC4                            ; ---------------------------------------------------------------------------
00017CC4 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017CC8 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017CCC 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017CD0 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017CD4 01                         byte_17DE4:	dc.b 1
00017CD5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017CDA 02                         byte_17DEA:	dc.b 2
00017CDB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017CE0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017CE5 00                         		dc.b 0
00017CE6 01                         byte_17DF6:	dc.b 1
00017CE7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017CEC 01                         byte_17DFC:	dc.b 1
00017CED 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017CF2 01                         byte_17E02:	dc.b 1
00017CF3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017CF8 04                         byte_17E08:	dc.b 4
00017CF9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017CFE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017D03 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017D08 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017D0D 00                         		dc.b 0
00017D0E 02                         byte_17E1E:	dc.b 2
00017D0F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017D14 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017D19 00                         		dc.b 0
00017D1A 02                         byte_17E2A:	dc.b 2
00017D1B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017D20 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017D26 00                         		even
00017D26 00                         		even
00017D26                            
00017D26                            ; ===========================================================================
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Object 77 - Eggman (LZ)
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            
00017D26                            Obj77:					; XREF: Obj_Index
00017D26 7000                       		moveq	#0,d0
00017D28 1028 0024                  		move.b	$24(a0),d0
00017D2C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017D30 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017D34                            ; ===========================================================================
00017D34 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017D36 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017D38 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017D3A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017D3C                            
00017D3C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017D3E 0401                       		dc.b 4,	1
00017D40 0607                       		dc.b 6,	7
00017D42                            ; ===========================================================================
00017D42                            
00017D42                            Obj77_Main:				; XREF: Obj77_Index
00017D42 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017D48 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017D4E 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D54 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D5A 117C 000F 0020             		move.b	#$F,$20(a0)
00017D60 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D66 117C 0004 0018             		move.b	#4,$18(a0)
00017D6C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017D70 2248                       		movea.l	a0,a1
00017D72 7202                       		moveq	#2,d1
00017D74 6000                       		bra.s	Obj77_LoadBoss
00017D76                            ; ===========================================================================
00017D76                            
00017D76                            Obj77_Loop:
00017D76 4EB9 0000 DA26             		jsr	SingleObjLoad2
00017D7C 6600                       		bne.s	Obj77_ShipMain
00017D7E 12BC 0077                  		move.b	#$77,0(a1)
00017D82 3368 0008 0008             		move.w	8(a0),8(a1)
00017D88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D8E                            
00017D8E                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017D8E 08A8 0000 0022             		bclr	#0,$22(a0)
00017D94 4229 0025                  		clr.b	$25(a1)
00017D98 135A 0024                  		move.b	(a2)+,$24(a1)
00017D9C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017DA0 1368 0018 0018             		move.b	$18(a0),$18(a1)
00017DA6 237C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a1)
00017DAE 337C 0400 0002             		move.w	#$400,2(a1)
00017DB4 137C 0004 0001             		move.b	#4,1(a1)
00017DBA 137C 0020 0019             		move.b	#$20,$19(a1)
00017DC0 2348 0034                  		move.l	a0,$34(a1)
00017DC4 51C9 FFB0                  		dbf	d1,Obj77_Loop
00017DC8                            
00017DC8                            Obj77_ShipMain:
00017DC8 43F8 D000                  		lea	($FFFFD000).w,a1
00017DCC 7000                       		moveq	#0,d0
00017DCE 1028 0025                  		move.b	$25(a0),d0
00017DD2 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00017DD6 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00017DDA 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
00017DE0 4EB9 0000 A6B6             		jsr	AnimateSprite
00017DE6 7003                       		moveq	#3,d0
00017DE8 C028 0022                  		and.b	$22(a0),d0
00017DEC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DF2 8128 0001                  		or.b	d0,1(a0)
00017DF6 4EF9 0000 D58A             		jmp	DisplaySprite
00017DFC                            ; ===========================================================================
00017DFC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00017E00 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00017E04 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00017E08 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            loc_17F1E:				; XREF: Obj77_ShipIndex
00017E0C 3029 0008                  		move.w	8(a1),d0
00017E10 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00017E14 6500                       		bcs.s	loc_17F38
00017E16 317C FE80 0012             		move.w	#-$180,$12(a0)
00017E1C 317C 0060 0010             		move.w	#$60,$10(a0)
00017E22 5428 0025                  		addq.b	#2,$25(a0)
00017E26                            
00017E26                            loc_17F38:
00017E26 6100 F974                  		bsr.w	BossMove
00017E2A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017E30 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E36                            
00017E36                            loc_17F48:
00017E36 4A28 003D                  		tst.b	$3D(a0)
00017E3A 6600                       		bne.s	loc_17F8E
00017E3C 4A28 0022                  		tst.b	$22(a0)
00017E40 6B00                       		bmi.s	loc_17F92
00017E42 4A28 0020                  		tst.b	$20(a0)
00017E46 6600                       		bne.s	locret_17F8C
00017E48 4A28 003E                  		tst.b	$3E(a0)
00017E4C 6600                       		bne.s	loc_17F70
00017E4E 117C 0020 003E             		move.b	#$20,$3E(a0)
00017E54 303C 00AC                  		move.w	#$AC,d0
00017E58 4EB9 0000 137A             		jsr	(PlaySound_Special).l
00017E5E                            
00017E5E                            loc_17F70:
00017E5E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00017E62 7000                       		moveq	#0,d0
00017E64 4A51                       		tst.w	(a1)
00017E66 6600                       		bne.s	loc_17F7E
00017E68 303C 0EEE                  		move.w	#$EEE,d0
00017E6C                            
00017E6C                            loc_17F7E:
00017E6C 3280                       		move.w	d0,(a1)
00017E6E 5328 003E                  		subq.b	#1,$3E(a0)
00017E72 6600                       		bne.s	locret_17F8C
00017E74 117C 000F 0020             		move.b	#$F,$20(a0)
00017E7A                            
00017E7A                            locret_17F8C:
00017E7A 4E75                       		rts	
00017E7C                            ; ===========================================================================
00017E7C                            
00017E7C                            loc_17F8E:				; XREF: loc_17F48
00017E7C 6000 F8DC                  		bra.w	BossDefeated
00017E80                            ; ===========================================================================
00017E80                            
00017E80                            loc_17F92:				; XREF: loc_17F48
00017E80 7064                       		moveq	#100,d0
00017E82 6100 0000                  		bsr.w	AddPoints
00017E86 117C 00FF 003D             		move.b	#-1,$3D(a0)
00017E8C 4E75                       		rts	
00017E8E                            ; ===========================================================================
00017E8E                            
00017E8E                            loc_17FA0:				; XREF: Obj77_ShipIndex
00017E8E 70FE                       		moveq	#-2,d0
00017E90 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00017E96 6500                       		bcs.s	loc_17FB6
00017E98 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00017E9E 4268 0010                  		clr.w	$10(a0)
00017EA2 5240                       		addq.w	#1,d0
00017EA4                            
00017EA4                            loc_17FB6:
00017EA4 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00017EAA 6E00                       		bgt.s	loc_17FCA
00017EAC 317C 0500 0038             		move.w	#$500,$38(a0)
00017EB2 4268 0012                  		clr.w	$12(a0)
00017EB6 5240                       		addq.w	#1,d0
00017EB8                            
00017EB8                            loc_17FCA:
00017EB8 6600                       		bne.s	loc_17FDC
00017EBA 317C 0140 0010             		move.w	#$140,$10(a0)
00017EC0 317C FE00 0012             		move.w	#-$200,$12(a0)
00017EC6 5428 0025                  		addq.b	#2,$25(a0)
00017ECA                            
00017ECA                            loc_17FDC:
00017ECA 6000 FF5A                  		bra.w	loc_17F38
00017ECE                            ; ===========================================================================
00017ECE                            
00017ECE                            loc_17FE0:				; XREF: Obj77_ShipIndex
00017ECE 70FE                       		moveq	#-2,d0
00017ED0 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00017ED6 6500                       		bcs.s	loc_17FF6
00017ED8 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00017EDE 4268 0010                  		clr.w	$10(a0)
00017EE2 5240                       		addq.w	#1,d0
00017EE4                            
00017EE4                            loc_17FF6:
00017EE4 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00017EEA 6E00                       		bgt.s	loc_1800A
00017EEC 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00017EF2 4268 0012                  		clr.w	$12(a0)
00017EF6 5240                       		addq.w	#1,d0
00017EF8                            
00017EF8                            loc_1800A:
00017EF8 6600                       		bne.s	loc_1801A
00017EFA 317C FE80 0012             		move.w	#-$180,$12(a0)
00017F00 5428 0025                  		addq.b	#2,$25(a0)
00017F04 4228 003F                  		clr.b	$3F(a0)
00017F08                            
00017F08                            loc_1801A:
00017F08 6000 FF1C                  		bra.w	loc_17F38
00017F0C                            ; ===========================================================================
00017F0C                            
00017F0C                            loc_1801E:				; XREF: Obj77_ShipIndex
00017F0C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00017F12 6E00                       		bgt.s	loc_1804E
00017F14 317C 0100 0038             		move.w	#$100,$38(a0)
00017F1A 317C 0140 0010             		move.w	#$140,$10(a0)
00017F20 317C FF80 0012             		move.w	#-$80,$12(a0)
00017F26 4A28 003D                  		tst.b	$3D(a0)
00017F2A 6700                       		beq.s	loc_18046
00017F2C E1E8 0010                  		asl	$10(a0)
00017F30 E1E8 0012                  		asl	$12(a0)
00017F34                            
00017F34                            loc_18046:
00017F34 5428 0025                  		addq.b	#2,$25(a0)
00017F38 6000 FEEC                  		bra.w	loc_17F38
00017F3C                            ; ===========================================================================
00017F3C                            
00017F3C                            loc_1804E:
00017F3C 08E8 0000 0022             		bset	#0,$22(a0)
00017F42 5428 003F                  		addq.b	#2,$3F(a0)
00017F46 1028 003F                  		move.b	$3F(a0),d0
00017F4A 4EB9 0000 29B8             		jsr	(CalcSine).l
00017F50 4A41                       		tst.w	d1
00017F52 6A00                       		bpl.s	loc_1806C
00017F54 08A8 0000 0022             		bclr	#0,$22(a0)
00017F5A                            
00017F5A                            loc_1806C:
00017F5A E840                       		asr.w	#4,d0
00017F5C 4840                       		swap	d0
00017F5E 4240                       		clr.w	d0
00017F60 D0A8 0030                  		add.l	$30(a0),d0
00017F64 4840                       		swap	d0
00017F66 3140 0008                  		move.w	d0,8(a0)
00017F6A 3028 0012                  		move.w	$12(a0),d0
00017F6E 3238 D00C                  		move.w	($FFFFD00C).w,d1
00017F72 9268 000C                  		sub.w	$C(a0),d1
00017F76 6500                       		bcs.s	loc_180A2
00017F78 0441 0048                  		subi.w	#$48,d1
00017F7C 6500                       		bcs.s	loc_180A2
00017F7E E240                       		asr.w	#1,d0
00017F80 0441 0028                  		subi.w	#$28,d1
00017F84 6500                       		bcs.s	loc_180A2
00017F86 E240                       		asr.w	#1,d0
00017F88 0441 0028                  		subi.w	#$28,d1
00017F8C 6500                       		bcs.s	loc_180A2
00017F8E 7000                       		moveq	#0,d0
00017F90                            
00017F90                            loc_180A2:
00017F90 48C0                       		ext.l	d0
00017F92 E180                       		asl.l	#8,d0
00017F94 4A28 003D                  		tst.b	$3D(a0)
00017F98 6700                       		beq.s	loc_180AE
00017F9A D080                       		add.l	d0,d0
00017F9C                            
00017F9C                            loc_180AE:
00017F9C D1A8 0038                  		add.l	d0,$38(a0)
00017FA0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017FA6 6000 FE8E                  		bra.w	loc_17F48
00017FAA                            ; ===========================================================================
00017FAA                            
00017FAA                            loc_180BC:				; XREF: Obj77_ShipIndex
00017FAA 70FE                       		moveq	#-2,d0
00017FAC 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00017FB2 6500                       		bcs.s	loc_180D2
00017FB4 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00017FBA 4268 0010                  		clr.w	$10(a0)
00017FBE 5240                       		addq.w	#1,d0
00017FC0                            
00017FC0                            loc_180D2:
00017FC0 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00017FC6 6E00                       		bgt.s	loc_180E6
00017FC8 317C 00C0 0038             		move.w	#$C0,$38(a0)
00017FCE 4268 0012                  		clr.w	$12(a0)
00017FD2 5240                       		addq.w	#1,d0
00017FD4                            
00017FD4                            loc_180E6:
00017FD4 6600                       		bne.s	loc_180F2
00017FD6 5428 0025                  		addq.b	#2,$25(a0)
00017FDA 08A8 0000 0022             		bclr	#0,$22(a0)
00017FE0                            
00017FE0                            loc_180F2:
00017FE0 6000 FE44                  		bra.w	loc_17F38
00017FE4                            ; ===========================================================================
00017FE4                            
00017FE4                            loc_180F6:				; XREF: Obj77_ShipIndex
00017FE4 4A28 003D                  		tst.b	$3D(a0)
00017FE8 6600                       		bne.s	loc_18112
00017FEA 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00017FF0 6D00                       		blt.s	loc_18126
00017FF2 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00017FF8 6E00                       		bgt.s	loc_18126
00017FFA 117C 0032 003C             		move.b	#$32,$3C(a0)
00018000                            
00018000                            loc_18112:
00018000 303C 0082                  		move.w	#$82,d0
00018004 4EB9 0000 1374             		jsr	(PlaySound).l	; play LZ music
0001800A 08E8 0000 0022             		bset	#0,$22(a0)
00018010 5428 0025                  		addq.b	#2,$25(a0)
00018014                            
00018014                            loc_18126:
00018014 6000 FE10                  		bra.w	loc_17F38
00018018                            ; ===========================================================================
00018018                            
00018018                            loc_1812A:				; XREF: Obj77_ShipIndex
00018018 4A28 003D                  		tst.b	$3D(a0)
0001801C 6600                       		bne.s	loc_18136
0001801E 5328 003C                  		subq.b	#1,$3C(a0)
00018022 6600                       		bne.s	loc_1814E
00018024                            
00018024                            loc_18136:
00018024 4228 003C                  		clr.b	$3C(a0)
00018028 317C 0400 0010             		move.w	#$400,$10(a0)
0001802E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018034 4228 003D                  		clr.b	$3D(a0)
00018038 5428 0025                  		addq.b	#2,$25(a0)
0001803C                            
0001803C                            loc_1814E:
0001803C 6000 FDE8                  		bra.w	loc_17F38
00018040                            ; ===========================================================================
00018040                            
00018040                            loc_18152:				; XREF: Obj77_ShipIndex
00018040 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018046 6400                       		bcc.s	loc_18160
00018048 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001804C 6000                       		bra.s	loc_18166
0001804E                            ; ===========================================================================
0001804E                            
0001804E                            loc_18160:
0001804E 4A28 0001                  		tst.b	1(a0)
00018052 6A00                       		bpl.s	Obj77_ShipDel
00018054                            
00018054                            loc_18166:
00018054 6000 FDD0                  		bra.w	loc_17F38
00018058                            ; ===========================================================================
00018058                            
00018058                            Obj77_ShipDel:
00018058 4EF9 0000 D5C6             		jmp	DeleteObject
0001805E                            ; ===========================================================================
0001805E                            
0001805E                            Obj77_FaceMain:				; XREF: Obj77_Index
0001805E 2268 0034                  		movea.l	$34(a0),a1
00018062 1011                       		move.b	(a1),d0
00018064 B010                       		cmp.b	(a0),d0
00018066 6600                       		bne.s	Obj77_FaceDel
00018068 7000                       		moveq	#0,d0
0001806A 1029 0025                  		move.b	$25(a1),d0
0001806E 7201                       		moveq	#1,d1
00018070 4A28 003D                  		tst.b	$3D(a0)
00018074 6700                       		beq.s	loc_1818C
00018076 720A                       		moveq	#$A,d1
00018078 6000                       		bra.s	loc_181A0
0001807A                            ; ===========================================================================
0001807A                            
0001807A                            loc_1818C:
0001807A 4A29 0020                  		tst.b	$20(a1)
0001807E 6600                       		bne.s	loc_18196
00018080 7205                       		moveq	#5,d1
00018082 6000                       		bra.s	loc_181A0
00018084                            ; ===========================================================================
00018084                            
00018084                            loc_18196:
00018084 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001808A 6500                       		bcs.s	loc_181A0
0001808C 7204                       		moveq	#4,d1
0001808E                            
0001808E                            loc_181A0:
0001808E 1141 001C                  		move.b	d1,$1C(a0)
00018092 0C00 000E                  		cmpi.b	#$E,d0
00018096 6600                       		bne.s	loc_181B6
00018098 117C 0006 001C             		move.b	#6,$1C(a0)
0001809E 4A28 0001                  		tst.b	1(a0)
000180A2 6A00                       		bpl.s	Obj77_FaceDel
000180A4                            
000180A4                            loc_181B6:
000180A4 6000                       		bra.s	Obj77_Display
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            Obj77_FaceDel:
000180A6 4EF9 0000 D5C6             		jmp	DeleteObject
000180AC                            ; ===========================================================================
000180AC                            
000180AC                            Obj77_FlameMain:			; XREF: Obj77_Index
000180AC 117C 0007 001C             		move.b	#7,$1C(a0)
000180B2 2268 0034                  		movea.l	$34(a0),a1
000180B6 1011                       		move.b	(a1),d0
000180B8 B010                       		cmp.b	(a0),d0
000180BA 6600                       		bne.s	Obj77_FlameDel
000180BC 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000180C2 6600                       		bne.s	loc_181F0
000180C4 117C 000B 001C             		move.b	#$B,$1C(a0)
000180CA 4A28 0001                  		tst.b	1(a0)
000180CE 6A00                       		bpl.s	Obj77_FlameDel
000180D0 6000                       		bra.s	loc_181F0
000180D2                            ; ===========================================================================
000180D2 4A69 0010                  		tst.w	$10(a1)
000180D6 6700                       		beq.s	loc_181F0
000180D8 117C 0008 001C             		move.b	#8,$1C(a0)
000180DE                            
000180DE                            loc_181F0:
000180DE 6000                       		bra.s	Obj77_Display
000180E0                            ; ===========================================================================
000180E0                            
000180E0                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000180E0 4EF9 0000 D5C6             		jmp	DeleteObject
000180E6                            ; ===========================================================================
000180E6                            
000180E6                            Obj77_Display:
000180E6 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
000180EC 4EB9 0000 A6B6             		jsr	AnimateSprite
000180F2 2268 0034                  		movea.l	$34(a0),a1
000180F6 3169 0008 0008             		move.w	8(a1),8(a0)
000180FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018102 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018108 7003                       		moveq	#3,d0
0001810A C028 0022                  		and.b	$22(a0),d0
0001810E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018114 8128 0001                  		or.b	d0,1(a0)
00018118 4EF9 0000 D58A             		jmp	DisplaySprite
0001811E                            ; ===========================================================================
0001811E                            ; ---------------------------------------------------------------------------
0001811E                            ; Object 73 - Eggman (MZ)
0001811E                            ; ---------------------------------------------------------------------------
0001811E                            
0001811E                            Obj73:					; XREF: Obj_Index
0001811E 7000                       		moveq	#0,d0
00018120 1028 0024                  		move.b	$24(a0),d0
00018124 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018128 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001812C                            ; ===========================================================================
0001812C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001812E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018130 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018132 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018134 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018136                            
00018136 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018139 0401 04                    		dc.b 4,	1, 4
0001813C 0607 04                    		dc.b 6,	7, 4
0001813F 0800 03                    		dc.b 8,	0, 3
00018142                            ; ===========================================================================
00018142                            
00018142                            Obj73_Main:				; XREF: Obj73_Index
00018142 3168 0008 0030             		move.w	8(a0),$30(a0)
00018148 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001814E 117C 000F 0020             		move.b	#$F,$20(a0)
00018154 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001815A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001815E 2248                       		movea.l	a0,a1
00018160 7203                       		moveq	#3,d1
00018162 6000                       		bra.s	Obj73_LoadBoss
00018164                            ; ===========================================================================
00018164                            
00018164                            Obj73_Loop:
00018164 4EB9 0000 DA26             		jsr	SingleObjLoad2
0001816A 6600                       		bne.s	Obj73_ShipMain
0001816C 12BC 0073                  		move.b	#$73,0(a1)
00018170 3368 0008 0008             		move.w	8(a0),8(a1)
00018176 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001817C                            
0001817C                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001817C 08A8 0000 0022             		bclr	#0,$22(a0)
00018182 4229 0025                  		clr.b	$25(a1)
00018186 135A 0024                  		move.b	(a2)+,$24(a1)
0001818A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001818E 135A 0018                  		move.b	(a2)+,$18(a1)
00018192 237C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a1)
0001819A 337C 0400 0002             		move.w	#$400,2(a1)
000181A0 137C 0004 0001             		move.b	#4,1(a1)
000181A6 137C 0020 0019             		move.b	#$20,$19(a1)
000181AC 2348 0034                  		move.l	a0,$34(a1)
000181B0 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000181B4                            
000181B4                            Obj73_ShipMain:
000181B4 7000                       		moveq	#0,d0
000181B6 1028 0025                  		move.b	$25(a0),d0
000181BA 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000181BE 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000181C2 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
000181C8 4EB9 0000 A6B6             		jsr	AnimateSprite
000181CE 7003                       		moveq	#3,d0
000181D0 C028 0022                  		and.b	$22(a0),d0
000181D4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181DA 8128 0001                  		or.b	d0,1(a0)
000181DE 4EF9 0000 D58A             		jmp	DisplaySprite
000181E4                            ; ===========================================================================
000181E4 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000181E6 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000181E8 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000181EA 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000181EC 0000                       		dc.w loc_18582-Obj73_ShipIndex
000181EE                            ; ===========================================================================
000181EE                            
000181EE                            loc_18302:				; XREF: Obj73_ShipIndex
000181EE 1028 003F                  		move.b	$3F(a0),d0
000181F2 5428 003F                  		addq.b	#2,$3F(a0)
000181F6 4EB9 0000 29B8             		jsr	(CalcSine).l
000181FC E440                       		asr.w	#2,d0
000181FE 3140 0012                  		move.w	d0,$12(a0)
00018202 317C FF00 0010             		move.w	#-$100,$10(a0)
00018208 6100 F592                  		bsr.w	BossMove
0001820C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018212 6600                       		bne.s	loc_18334
00018214 5428 0025                  		addq.b	#2,$25(a0)
00018218 4228 0028                  		clr.b	$28(a0)
0001821C 42A8 0010                  		clr.l	$10(a0)
00018220                            
00018220                            loc_18334:
00018220 4EB9 0000 2992             		jsr	(RandomNumber).l
00018226 1140 0034                  		move.b	d0,$34(a0)
0001822A                            
0001822A                            loc_1833E:
0001822A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018230 3168 0030 0008             		move.w	$30(a0),8(a0)
00018236 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001823C 6400                       		bcc.s	locret_18390
0001823E 4A28 0022                  		tst.b	$22(a0)
00018242 6B00                       		bmi.s	loc_18392
00018244 4A28 0020                  		tst.b	$20(a0)
00018248 6600                       		bne.s	locret_18390
0001824A 4A28 003E                  		tst.b	$3E(a0)
0001824E 6600                       		bne.s	loc_18374
00018250 117C 0028 003E             		move.b	#$28,$3E(a0)
00018256 303C 00AC                  		move.w	#$AC,d0
0001825A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018260                            
00018260                            loc_18374:
00018260 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018264 7000                       		moveq	#0,d0
00018266 4A51                       		tst.w	(a1)
00018268 6600                       		bne.s	loc_18382
0001826A 303C 0EEE                  		move.w	#$EEE,d0
0001826E                            
0001826E                            loc_18382:
0001826E 3280                       		move.w	d0,(a1)
00018270 5328 003E                  		subq.b	#1,$3E(a0)
00018274 6600                       		bne.s	locret_18390
00018276 117C 000F 0020             		move.b	#$F,$20(a0)
0001827C                            
0001827C                            locret_18390:
0001827C 4E75                       		rts	
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            loc_18392:				; XREF: loc_1833E
0001827E 7064                       		moveq	#100,d0
00018280 6100 0000                  		bsr.w	AddPoints
00018284 117C 0004 0025             		move.b	#4,$25(a0)
0001828A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018290 4268 0010                  		clr.w	$10(a0)
00018294 4E75                       		rts	
00018296                            ; ===========================================================================
00018296                            
00018296                            loc_183AA:				; XREF: Obj73_ShipIndex
00018296 7000                       		moveq	#0,d0
00018298 1028 0028                  		move.b	$28(a0),d0
0001829C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000182A0 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000182A4 0228 0006 0028             		andi.b	#6,$28(a0)
000182AA 6000 FF7E                  		bra.w	loc_1833E
000182AE                            ; ===========================================================================
000182AE 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000182B0 0000                       		dc.w Obj73_MakeLava2-off_183C2
000182B2 0000                       		dc.w loc_183CA-off_183C2
000182B4 0000                       		dc.w Obj73_MakeLava2-off_183C2
000182B6                            ; ===========================================================================
000182B6                            
000182B6                            loc_183CA:				; XREF: off_183C2
000182B6 4A68 0010                  		tst.w	$10(a0)
000182BA 6600                       		bne.s	loc_183FE
000182BC 7040                       		moveq	#$40,d0
000182BE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000182C4 6700                       		beq.s	loc_183E6
000182C6 6500                       		bcs.s	loc_183DE
000182C8 4440                       		neg.w	d0
000182CA                            
000182CA                            loc_183DE:
000182CA 3140 0012                  		move.w	d0,$12(a0)
000182CE 6000 F4CC                  		bra.w	BossMove
000182D2                            ; ===========================================================================
000182D2                            
000182D2                            loc_183E6:
000182D2 317C 0200 0010             		move.w	#$200,$10(a0)
000182D8 317C 0100 0012             		move.w	#$100,$12(a0)
000182DE 0828 0000 0022             		btst	#0,$22(a0)
000182E4 6600                       		bne.s	loc_183FE
000182E6 4468 0010                  		neg.w	$10(a0)
000182EA                            
000182EA                            loc_183FE:
000182EA 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000182F0 6400                       		bcc.s	Obj73_MakeLava
000182F2 6100 F4A8                  		bsr.w	BossMove
000182F6 5968 0012                  		subq.w	#4,$12(a0)
000182FA                            
000182FA                            Obj73_MakeLava:
000182FA 5328 0034                  		subq.b	#1,$34(a0)
000182FE 6400                       		bcc.s	loc_1845C
00018300 4EB9 0000 DA10             		jsr	SingleObjLoad
00018306 6600                       		bne.s	loc_1844A
00018308 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001830C 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018312 4EB9 0000 2992             		jsr	(RandomNumber).l
00018318 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001831E 80FC 0050                  		divu.w	#$50,d0
00018322 4840                       		swap	d0
00018324 0640 1878                  		addi.w	#$1878,d0
00018328 3340 0008                  		move.w	d0,8(a1)
0001832C EE09                       		lsr.b	#7,d1
0001832E 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018334                            
00018334                            loc_1844A:
00018334 4EB9 0000 2992             		jsr	(RandomNumber).l
0001833A 0200 001F                  		andi.b	#$1F,d0
0001833E 0600 0040                  		addi.b	#$40,d0
00018342 1140 0034                  		move.b	d0,$34(a0)
00018346                            
00018346                            loc_1845C:
00018346 0828 0000 0022             		btst	#0,$22(a0)
0001834C 6700                       		beq.s	loc_18474
0001834E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018354 6D00                       		blt.s	locret_1849C
00018356 317C 1910 0030             		move.w	#$1910,$30(a0)
0001835C 6000                       		bra.s	loc_18482
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_18474:
0001835E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018364 6E00                       		bgt.s	locret_1849C
00018366 317C 1830 0030             		move.w	#$1830,$30(a0)
0001836C                            
0001836C                            loc_18482:
0001836C 4268 0010                  		clr.w	$10(a0)
00018370 317C FE80 0012             		move.w	#-$180,$12(a0)
00018376 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001837C 6400                       		bcc.s	loc_18498
0001837E 4468 0012                  		neg.w	$12(a0)
00018382                            
00018382                            loc_18498:
00018382 5428 0028                  		addq.b	#2,$28(a0)
00018386                            
00018386                            locret_1849C:
00018386 4E75                       		rts	
00018388                            ; ===========================================================================
00018388                            
00018388                            Obj73_MakeLava2:			; XREF: off_183C2
00018388 6100 F412                  		bsr.w	BossMove
0001838C 3028 0038                  		move.w	$38(a0),d0
00018390 0440 022C                  		subi.w	#$22C,d0
00018394 6E00                       		bgt.s	locret_184F4
00018396 303C 022C                  		move.w	#$22C,d0
0001839A 4A68 0012                  		tst.w	$12(a0)
0001839E 6700                       		beq.s	loc_184EA
000183A0 4268 0012                  		clr.w	$12(a0)
000183A4 317C 0050 003C             		move.w	#$50,$3C(a0)
000183AA 0868 0000 0022             		bchg	#0,$22(a0)
000183B0 4EB9 0000 DA10             		jsr	SingleObjLoad
000183B6 6600                       		bne.s	loc_184EA
000183B8 3368 0030 0008             		move.w	$30(a0),8(a1)
000183BE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000183C4 0669 0018 000C             		addi.w	#$18,$C(a1)
000183CA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000183CE 137C 0001 0028             		move.b	#1,$28(a1)
000183D4                            
000183D4                            loc_184EA:
000183D4 5368 003C                  		subq.w	#1,$3C(a0)
000183D8 6600                       		bne.s	locret_184F4
000183DA 5428 0028                  		addq.b	#2,$28(a0)
000183DE                            
000183DE                            locret_184F4:
000183DE 4E75                       		rts	
000183E0                            ; ===========================================================================
000183E0                            
000183E0                            loc_184F6:				; XREF: Obj73_ShipIndex
000183E0 5368 003C                  		subq.w	#1,$3C(a0)
000183E4 6B00                       		bmi.s	loc_18500
000183E6 6000 F372                  		bra.w	BossDefeated
000183EA                            ; ===========================================================================
000183EA                            
000183EA                            loc_18500:
000183EA 08E8 0000 0022             		bset	#0,$22(a0)
000183F0 08A8 0007 0022             		bclr	#7,$22(a0)
000183F6 4268 0010                  		clr.w	$10(a0)
000183FA 5428 0025                  		addq.b	#2,$25(a0)
000183FE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018404 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018408 6600                       		bne.s	locret_1852A
0001840A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018410 4268 0012                  		clr.w	$12(a0)
00018414                            
00018414                            locret_1852A:
00018414 4E75                       		rts	
00018416                            ; ===========================================================================
00018416                            
00018416                            loc_1852C:				; XREF: Obj73_ShipIndex
00018416 5268 003C                  		addq.w	#1,$3C(a0)
0001841A 6700                       		beq.s	loc_18544
0001841C 6A00                       		bpl.s	loc_1854E
0001841E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018424 6400                       		bcc.s	loc_18544
00018426 0668 0018 0012             		addi.w	#$18,$12(a0)
0001842C 6000                       		bra.s	loc_1857A
0001842E                            ; ===========================================================================
0001842E                            
0001842E                            loc_18544:
0001842E 4268 0012                  		clr.w	$12(a0)
00018432 4268 003C                  		clr.w	$3C(a0)
00018436 6000                       		bra.s	loc_1857A
00018438                            ; ===========================================================================
00018438                            
00018438                            loc_1854E:
00018438 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001843E 6500                       		bcs.s	loc_18566
00018440 6700                       		beq.s	loc_1856C
00018442 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018448 6500                       		bcs.s	loc_1857A
0001844A 5428 0025                  		addq.b	#2,$25(a0)
0001844E 6000                       		bra.s	loc_1857A
00018450                            ; ===========================================================================
00018450                            
00018450                            loc_18566:
00018450 5168 0012                  		subq.w	#8,$12(a0)
00018454 6000                       		bra.s	loc_1857A
00018456                            ; ===========================================================================
00018456                            
00018456                            loc_1856C:
00018456 4268 0012                  		clr.w	$12(a0)
0001845A 303C 0083                  		move.w	#$83,d0
0001845E 4EB9 0000 1374             		jsr	(PlaySound).l	; play MZ music
00018464                            
00018464                            loc_1857A:
00018464 6100 F336                  		bsr.w	BossMove
00018468 6000 FDC0                  		bra.w	loc_1833E
0001846C                            ; ===========================================================================
0001846C                            
0001846C                            loc_18582:				; XREF: Obj73_ShipIndex
0001846C 317C 0500 0010             		move.w	#$500,$10(a0)
00018472 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018478 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001847E 6400                       		bcc.s	loc_1859C
00018480 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018484 6000                       		bra.s	loc_185A2
00018486                            ; ===========================================================================
00018486                            
00018486                            loc_1859C:
00018486 4A28 0001                  		tst.b	1(a0)
0001848A 6A00                       		bpl.s	Obj73_ShipDel
0001848C                            
0001848C                            loc_185A2:
0001848C 6100 F30E                  		bsr.w	BossMove
00018490 6000 FD98                  		bra.w	loc_1833E
00018494                            ; ===========================================================================
00018494                            
00018494                            Obj73_ShipDel:
00018494 4EF9 0000 D5C6             		jmp	DeleteObject
0001849A                            ; ===========================================================================
0001849A                            
0001849A                            Obj73_FaceMain:				; XREF: Obj73_Index
0001849A 7000                       		moveq	#0,d0
0001849C 7201                       		moveq	#1,d1
0001849E 2268 0034                  		movea.l	$34(a0),a1
000184A2 1029 0025                  		move.b	$25(a1),d0
000184A6 5540                       		subq.w	#2,d0
000184A8 6600                       		bne.s	loc_185D2
000184AA 0829 0001 0028             		btst	#1,$28(a1)
000184B0 6700                       		beq.s	loc_185DA
000184B2 4A69 0012                  		tst.w	$12(a1)
000184B6 6600                       		bne.s	loc_185DA
000184B8 7204                       		moveq	#4,d1
000184BA 6000                       		bra.s	loc_185EE
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            loc_185D2:
000184BC 5500                       		subq.b	#2,d0
000184BE 6B00                       		bmi.s	loc_185DA
000184C0 720A                       		moveq	#$A,d1
000184C2 6000                       		bra.s	loc_185EE
000184C4                            ; ===========================================================================
000184C4                            
000184C4                            loc_185DA:
000184C4 4A29 0020                  		tst.b	$20(a1)
000184C8 6600                       		bne.s	loc_185E4
000184CA 7205                       		moveq	#5,d1
000184CC 6000                       		bra.s	loc_185EE
000184CE                            ; ===========================================================================
000184CE                            
000184CE                            loc_185E4:
000184CE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000184D4 6500                       		bcs.s	loc_185EE
000184D6 7204                       		moveq	#4,d1
000184D8                            
000184D8                            loc_185EE:
000184D8 1141 001C                  		move.b	d1,$1C(a0)
000184DC 5900                       		subq.b	#4,d0
000184DE 6600                       		bne.s	loc_18602
000184E0 117C 0006 001C             		move.b	#6,$1C(a0)
000184E6 4A28 0001                  		tst.b	1(a0)
000184EA 6A00                       		bpl.s	Obj73_FaceDel
000184EC                            
000184EC                            loc_18602:
000184EC 6000                       		bra.s	Obj73_Display
000184EE                            ; ===========================================================================
000184EE                            
000184EE                            Obj73_FaceDel:
000184EE 4EF9 0000 D5C6             		jmp	DeleteObject
000184F4                            ; ===========================================================================
000184F4                            
000184F4                            Obj73_FlameMain:			; XREF: Obj73_Index
000184F4 117C 0007 001C             		move.b	#7,$1C(a0)
000184FA 2268 0034                  		movea.l	$34(a0),a1
000184FE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018504 6D00                       		blt.s	loc_1862A
00018506 117C 000B 001C             		move.b	#$B,$1C(a0)
0001850C 4A28 0001                  		tst.b	1(a0)
00018510 6A00                       		bpl.s	Obj73_FlameDel
00018512 6000                       		bra.s	loc_18636
00018514                            ; ===========================================================================
00018514                            
00018514                            loc_1862A:
00018514 4A69 0010                  		tst.w	$10(a1)
00018518 6700                       		beq.s	loc_18636
0001851A 117C 0008 001C             		move.b	#8,$1C(a0)
00018520                            
00018520                            loc_18636:
00018520 6000                       		bra.s	Obj73_Display
00018522                            ; ===========================================================================
00018522                            
00018522                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018522 4EF9 0000 D5C6             		jmp	DeleteObject
00018528                            ; ===========================================================================
00018528                            
00018528                            Obj73_Display:
00018528 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
0001852E 4EB9 0000 A6B6             		jsr	AnimateSprite
00018534                            
00018534                            loc_1864A:
00018534 2268 0034                  		movea.l	$34(a0),a1
00018538 3169 0008 0008             		move.w	8(a1),8(a0)
0001853E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018544 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001854A 7003                       		moveq	#3,d0
0001854C C028 0022                  		and.b	$22(a0),d0
00018550 0228 00FC 0001             		andi.b	#-4,1(a0)
00018556 8128 0001                  		or.b	d0,1(a0)
0001855A 4EF9 0000 D58A             		jmp	DisplaySprite
00018560                            ; ===========================================================================
00018560                            
00018560                            Obj73_TubeMain:				; XREF: Obj73_Index
00018560 2268 0034                  		movea.l	$34(a0),a1
00018564 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001856A 6600                       		bne.s	loc_18688
0001856C 4A28 0001                  		tst.b	1(a0)
00018570 6A00                       		bpl.s	Obj73_TubeDel
00018572                            
00018572                            loc_18688:
00018572 217C 0001 7CC4 0004        		move.l	#Map_BossItems,4(a0)
0001857A 317C 246C 0002             		move.w	#$246C,2(a0)
00018580 117C 0004 001A             		move.b	#4,$1A(a0)
00018586 60AC                       		bra.s	loc_1864A
00018588                            ; ===========================================================================
00018588                            
00018588                            Obj73_TubeDel:
00018588 4EF9 0000 D5C6             		jmp	DeleteObject
0001858E                            ; ===========================================================================
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            ; Object 74 - lava that	Eggman drops (MZ)
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            
0001858E                            Obj74:					; XREF: Obj_Index
0001858E 7000                       		moveq	#0,d0
00018590 1028 0024                  		move.b	$24(a0),d0
00018594 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018598 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001859C 4EF9 0000 D58A             		jmp	DisplaySprite
000185A2                            ; ===========================================================================
000185A2 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000185A4 0000                       		dc.w Obj74_Action-Obj74_Index
000185A6 0000                       		dc.w loc_18886-Obj74_Index
000185A8 0000                       		dc.w Obj74_Delete3-Obj74_Index
000185AA                            ; ===========================================================================
000185AA                            
000185AA                            Obj74_Main:				; XREF: Obj74_Index
000185AA 117C 0008 0016             		move.b	#8,$16(a0)
000185B0 117C 0008 0017             		move.b	#8,$17(a0)
000185B6 217C 0000 B308 0004        		move.l	#Map_obj14,4(a0)
000185BE 317C 0345 0002             		move.w	#$345,2(a0)
000185C4 117C 0004 0001             		move.b	#4,1(a0)
000185CA 117C 0005 0018             		move.b	#5,$18(a0)
000185D0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000185D6 117C 0008 0019             		move.b	#8,$19(a0)
000185DC 5428 0024                  		addq.b	#2,$24(a0)
000185E0 4A28 0028                  		tst.b	$28(a0)
000185E4 6600                       		bne.s	loc_1870A
000185E6 117C 008B 0020             		move.b	#$8B,$20(a0)
000185EC 5428 0024                  		addq.b	#2,$24(a0)
000185F0 6000 0000                  		bra.w	loc_18886
000185F4                            ; ===========================================================================
000185F4                            
000185F4                            loc_1870A:
000185F4 117C 001E 0029             		move.b	#$1E,$29(a0)
000185FA 303C 00AE                  		move.w	#$AE,d0
000185FE 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play lava sound
00018604                            
00018604                            Obj74_Action:				; XREF: Obj74_Index
00018604 7000                       		moveq	#0,d0
00018606 1028 0025                  		move.b	$25(a0),d0
0001860A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001860E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018612 4EB9 0000 D564             		jsr	SpeedToPos
00018618 43F9 0000 E444             		lea	(Ani_obj14).l,a1
0001861E 4EB9 0000 A6B6             		jsr	AnimateSprite
00018624 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001862A 6200                       		bhi.s	Obj74_Delete
0001862C 4E75                       		rts	
0001862E                            ; ===========================================================================
0001862E                            
0001862E                            Obj74_Delete:
0001862E 4EF9 0000 D5C6             		jmp	DeleteObject
00018634                            ; ===========================================================================
00018634 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018636 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018638 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001863A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001863C                            ; ===========================================================================
0001863C                            
0001863C                            Obj74_Drop:				; XREF: Obj74_Index2
0001863C 08E8 0001 0022             		bset	#1,$22(a0)
00018642 5328 0029                  		subq.b	#1,$29(a0)
00018646 6A00                       		bpl.s	locret_18780
00018648 117C 008B 0020             		move.b	#$8B,$20(a0)
0001864E 4228 0028                  		clr.b	$28(a0)
00018652 0668 0018 0012             		addi.w	#$18,$12(a0)
00018658 08A8 0001 0022             		bclr	#1,$22(a0)
0001865E 6100 C6C8                  		bsr.w	ObjHitFloor
00018662 4A41                       		tst.w	d1
00018664 6A00                       		bpl.s	locret_18780
00018666 5428 0025                  		addq.b	#2,$25(a0)
0001866A                            
0001866A                            locret_18780:
0001866A 4E75                       		rts	
0001866C                            ; ===========================================================================
0001866C                            
0001866C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001866C 5568 000C                  		subq.w	#2,$C(a0)
00018670 08E8 0007 0002             		bset	#7,2(a0)
00018676 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001867C 4268 0012                  		clr.w	$12(a0)
00018680 3168 0008 0030             		move.w	8(a0),$30(a0)
00018686 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001868C 117C 0003 0029             		move.b	#3,$29(a0)
00018692 4EB9 0000 DA26             		jsr	SingleObjLoad2
00018698 6600                       		bne.s	loc_187CA
0001869A 47D1                       		lea	(a1),a3
0001869C 45D0                       		lea	(a0),a2
0001869E 7003                       		moveq	#3,d0
000186A0                            
000186A0                            Obj74_Loop:
000186A0 26DA                       		move.l	(a2)+,(a3)+
000186A2 26DA                       		move.l	(a2)+,(a3)+
000186A4 26DA                       		move.l	(a2)+,(a3)+
000186A6 26DA                       		move.l	(a2)+,(a3)+
000186A8 51C8 FFF6                  		dbf	d0,Obj74_Loop
000186AC                            
000186AC 4469 0010                  		neg.w	$10(a1)
000186B0 5429 0025                  		addq.b	#2,$25(a1)
000186B4                            
000186B4                            loc_187CA:
000186B4 5428 0025                  		addq.b	#2,$25(a0)
000186B8 4E75                       		rts	
000186BA                            
000186BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186BA                            
000186BA                            
000186BA                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000186BA 4EB9 0000 DA26             		jsr	SingleObjLoad2
000186C0 6600                       		bne.s	locret_187EE
000186C2 3368 0008 0008             		move.w	8(a0),8(a1)
000186C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186CE 12BC 0074                  		move.b	#$74,(a1)
000186D2 337C 0067 0028             		move.w	#$67,$28(a1)
000186D8                            
000186D8                            locret_187EE:
000186D8 4E75                       		rts	
000186DA                            ; End of function Obj74_Duplicate2
000186DA                            
000186DA                            ; ===========================================================================
000186DA                            
000186DA                            Obj74_Duplicate:			; XREF: Obj74_Index2
000186DA 6100 C64C                  		bsr.w	ObjHitFloor
000186DE 4A41                       		tst.w	d1
000186E0 6A00                       		bpl.s	loc_18826
000186E2 3028 0008                  		move.w	8(a0),d0
000186E6 0C40 1940                  		cmpi.w	#$1940,d0
000186EA 6E00                       		bgt.s	loc_1882C
000186EC 3228 0030                  		move.w	$30(a0),d1
000186F0 B240                       		cmp.w	d0,d1
000186F2 6700                       		beq.s	loc_1881E
000186F4 0240 0010                  		andi.w	#$10,d0
000186F8 0241 0010                  		andi.w	#$10,d1
000186FC B240                       		cmp.w	d0,d1
000186FE 6700                       		beq.s	loc_1881E
00018700 61B8                       		bsr.s	Obj74_Duplicate2
00018702 3168 0008 0032             		move.w	8(a0),$32(a0)
00018708                            
00018708                            loc_1881E:
00018708 3168 0008 0030             		move.w	8(a0),$30(a0)
0001870E 4E75                       		rts	
00018710                            ; ===========================================================================
00018710                            
00018710                            loc_18826:
00018710 5428 0025                  		addq.b	#2,$25(a0)
00018714 4E75                       		rts	
00018716                            ; ===========================================================================
00018716                            
00018716                            loc_1882C:
00018716 5428 0024                  		addq.b	#2,$24(a0)
0001871A 4E75                       		rts	
0001871C                            ; ===========================================================================
0001871C                            
0001871C                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001871C 08A8 0001 0022             		bclr	#1,$22(a0)
00018722 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018728 3028 0008                  		move.w	8(a0),d0
0001872C 9068 0032                  		sub.w	$32(a0),d0
00018730 6A00                       		bpl.s	loc_1884A
00018732 4440                       		neg.w	d0
00018734                            
00018734                            loc_1884A:
00018734 0C40 0012                  		cmpi.w	#$12,d0
00018738 6600                       		bne.s	loc_18856
0001873A 08A8 0007 0002             		bclr	#7,2(a0)
00018740                            
00018740                            loc_18856:
00018740 6100 C5E6                  		bsr.w	ObjHitFloor
00018744 4A41                       		tst.w	d1
00018746 6A00                       		bpl.s	locret_1887E
00018748 5328 0029                  		subq.b	#1,$29(a0)
0001874C 6700                       		beq.s	Obj74_Delete2
0001874E 4268 0012                  		clr.w	$12(a0)
00018752 3168 0032 0008             		move.w	$32(a0),8(a0)
00018758 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001875E 08E8 0007 0002             		bset	#7,2(a0)
00018764 5528 0025                  		subq.b	#2,$25(a0)
00018768                            
00018768                            locret_1887E:
00018768 4E75                       		rts	
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            Obj74_Delete2:
0001876A 4EF9 0000 D5C6             		jmp	DeleteObject
00018770                            ; ===========================================================================
00018770                            
00018770                            loc_18886:				; XREF: Obj74_Index
00018770 08E8 0007 0002             		bset	#7,2(a0)
00018776 5328 0029                  		subq.b	#1,$29(a0)
0001877A 6600                       		bne.s	Obj74_Animate
0001877C 117C 0001 001C             		move.b	#1,$1C(a0)
00018782 5968 000C                  		subq.w	#4,$C(a0)
00018786 4228 0020                  		clr.b	$20(a0)
0001878A                            
0001878A                            Obj74_Animate:
0001878A 43F9 0000 E444             		lea	(Ani_obj14).l,a1
00018790 4EF9 0000 A6B6             		jmp	AnimateSprite
00018796                            ; ===========================================================================
00018796                            
00018796                            Obj74_Delete3:				; XREF: Obj74_Index
00018796 4EF9 0000 D5C6             		jmp	DeleteObject
0001879C                            ; ===========================================================================
0001879C                            
0001879C                            Obj7A_Delete:
0001879C 4EF9 0000 D5C6             		jmp	DeleteObject
000187A2                            ; ===========================================================================
000187A2                            ; ---------------------------------------------------------------------------
000187A2                            ; Object 7A - Eggman (SLZ)
000187A2                            ; ---------------------------------------------------------------------------
000187A2                            
000187A2                            Obj7A:					; XREF: Obj_Index
000187A2 7000                       		moveq	#0,d0
000187A4 1028 0024                  		move.b	$24(a0),d0
000187A8 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000187AC 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000187B0                            ; ===========================================================================
000187B0 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000187B2 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000187B4 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000187B6 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000187B8 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000187BA                            
000187BA 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000187BD 0401 04                    		dc.b 4,	1, 4
000187C0 0607 04                    		dc.b 6,	7, 4
000187C3 0800 03                    		dc.b 8,	0, 3
000187C6                            ; ===========================================================================
000187C6                            
000187C6                            Obj7A_Main:				; XREF: Obj7A_Index
000187C6 317C 2188 0008             		move.w	#$2188,8(a0)
000187CC 317C 0228 000C             		move.w	#$228,$C(a0)
000187D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000187D8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000187DE 117C 000F 0020             		move.b	#$F,$20(a0)
000187E4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000187EA 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000187EE 2248                       		movea.l	a0,a1
000187F0 7203                       		moveq	#3,d1
000187F2 6000                       		bra.s	Obj7A_LoadBoss
000187F4                            ; ===========================================================================
000187F4                            
000187F4                            Obj7A_Loop:
000187F4 4EB9 0000 DA26             		jsr	SingleObjLoad2
000187FA 6600                       		bne.s	loc_1895C
000187FC 12BC 007A                  		move.b	#$7A,0(a1)
00018800 3368 0008 0008             		move.w	8(a0),8(a1)
00018806 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001880C                            
0001880C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001880C 08A8 0000 0022             		bclr	#0,$22(a0)
00018812 4229 0025                  		clr.b	$25(a1)
00018816 135A 0024                  		move.b	(a2)+,$24(a1)
0001881A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001881E 135A 0018                  		move.b	(a2)+,$18(a1)
00018822 237C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a1)
0001882A 337C 0400 0002             		move.w	#$400,2(a1)
00018830 137C 0004 0001             		move.b	#4,1(a1)
00018836 137C 0020 0019             		move.b	#$20,$19(a1)
0001883C 2348 0034                  		move.l	a0,$34(a1)
00018840 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018844                            
00018844                            loc_1895C:
00018844 43F8 D040                  		lea	($FFFFD040).w,a1
00018848 45E8 002A                  		lea	$2A(a0),a2
0001884C 705E                       		moveq	#$5E,d0
0001884E 723E                       		moveq	#$3E,d1
00018850                            
00018850                            loc_18968:
00018850 B011                       		cmp.b	(a1),d0
00018852 6600                       		bne.s	loc_18974
00018854 4A29 0028                  		tst.b	$28(a1)
00018858 6700                       		beq.s	loc_18974
0001885A 34C9                       		move.w	a1,(a2)+
0001885C                            
0001885C                            loc_18974:
0001885C D2FC 0040                  		adda.w	#$40,a1
00018860 51C9 FFEE                  		dbf	d1,loc_18968
00018864                            
00018864                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018864 7000                       		moveq	#0,d0
00018866 1028 0025                  		move.b	$25(a0),d0
0001886A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001886E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018872 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
00018878 4EB9 0000 A6B6             		jsr	AnimateSprite
0001887E 7003                       		moveq	#3,d0
00018880 C028 0022                  		and.b	$22(a0),d0
00018884 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001888A 8128 0001                  		or.b	d0,1(a0)
0001888E 4EF9 0000 D58A             		jmp	DisplaySprite
00018894                            ; ===========================================================================
00018894 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018896 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018898 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001889A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001889C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001889E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000188A0                            ; ===========================================================================
000188A0                            
000188A0                            loc_189B8:				; XREF: Obj7A_ShipIndex
000188A0 317C FF00 0010             		move.w	#-$100,$10(a0)
000188A6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000188AC 6400                       		bcc.s	loc_189CA
000188AE 5428 0025                  		addq.b	#2,$25(a0)
000188B2                            
000188B2                            loc_189CA:
000188B2 6100 EEE8                  		bsr.w	BossMove
000188B6 1028 003F                  		move.b	$3F(a0),d0
000188BA 5428 003F                  		addq.b	#2,$3F(a0)
000188BE 4EB9 0000 29B8             		jsr	(CalcSine).l
000188C4 EC40                       		asr.w	#6,d0
000188C6 D068 0038                  		add.w	$38(a0),d0
000188CA 3140 000C                  		move.w	d0,$C(a0)
000188CE 3168 0030 0008             		move.w	$30(a0),8(a0)
000188D4 6000                       		bra.s	loc_189FE
000188D6                            ; ===========================================================================
000188D6                            
000188D6                            loc_189EE:
000188D6 6100 EEC4                  		bsr.w	BossMove
000188DA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000188E0 3168 0030 0008             		move.w	$30(a0),8(a0)
000188E6                            
000188E6                            loc_189FE:
000188E6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000188EC 6400                       		bcc.s	locret_18A44
000188EE 4A28 0022                  		tst.b	$22(a0)
000188F2 6B00                       		bmi.s	loc_18A46
000188F4 4A28 0020                  		tst.b	$20(a0)
000188F8 6600                       		bne.s	locret_18A44
000188FA 4A28 003E                  		tst.b	$3E(a0)
000188FE 6600                       		bne.s	loc_18A28
00018900 117C 0020 003E             		move.b	#$20,$3E(a0)
00018906 303C 00AC                  		move.w	#$AC,d0
0001890A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018910                            
00018910                            loc_18A28:
00018910 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018914 7000                       		moveq	#0,d0
00018916 4A51                       		tst.w	(a1)
00018918 6600                       		bne.s	loc_18A36
0001891A 303C 0EEE                  		move.w	#$EEE,d0
0001891E                            
0001891E                            loc_18A36:
0001891E 3280                       		move.w	d0,(a1)
00018920 5328 003E                  		subq.b	#1,$3E(a0)
00018924 6600                       		bne.s	locret_18A44
00018926 117C 000F 0020             		move.b	#$F,$20(a0)
0001892C                            
0001892C                            locret_18A44:
0001892C 4E75                       		rts	
0001892E                            ; ===========================================================================
0001892E                            
0001892E                            loc_18A46:
0001892E 7064                       		moveq	#100,d0
00018930 6100 0000                  		bsr.w	AddPoints
00018934 117C 0006 0025             		move.b	#6,$25(a0)
0001893A 117C 0078 003C             		move.b	#$78,$3C(a0)
00018940 4268 0010                  		clr.w	$10(a0)
00018944 4E75                       		rts	
00018946                            ; ===========================================================================
00018946                            
00018946                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018946 3028 0030                  		move.w	$30(a0),d0
0001894A 317C 0200 0010             		move.w	#$200,$10(a0)
00018950 0828 0000 0022             		btst	#0,$22(a0)
00018956 6600                       		bne.s	loc_18A7C
00018958 4468 0010                  		neg.w	$10(a0)
0001895C 0C40 2008                  		cmpi.w	#$2008,d0
00018960 6E00                       		bgt.s	loc_18A88
00018962 6000                       		bra.s	loc_18A82
00018964                            ; ===========================================================================
00018964                            
00018964                            loc_18A7C:
00018964 0C40 2138                  		cmpi.w	#$2138,d0
00018968 6D00                       		blt.s	loc_18A88
0001896A                            
0001896A                            loc_18A82:
0001896A 0868 0000 0022             		bchg	#0,$22(a0)
00018970                            
00018970                            loc_18A88:
00018970 3028 0008                  		move.w	8(a0),d0
00018974 72FF                       		moveq	#-1,d1
00018976 7402                       		moveq	#2,d2
00018978 45E8 002A                  		lea	$2A(a0),a2
0001897C 7828                       		moveq	#$28,d4
0001897E 4A68 0010                  		tst.w	$10(a0)
00018982 6A00                       		bpl.s	loc_18A9E
00018984 4444                       		neg.w	d4
00018986                            
00018986                            loc_18A9E:
00018986 321A                       		move.w	(a2)+,d1
00018988 2641                       		movea.l	d1,a3
0001898A 082B 0003 0022             		btst	#3,$22(a3)
00018990 6600                       		bne.s	loc_18AB4
00018992 362B 0008                  		move.w	8(a3),d3
00018996 D644                       		add.w	d4,d3
00018998 9640                       		sub.w	d0,d3
0001899A 6700                       		beq.s	loc_18AC0
0001899C                            
0001899C                            loc_18AB4:
0001899C 51CA FFE8                  		dbf	d2,loc_18A9E
000189A0                            
000189A0 1142 0028                  		move.b	d2,$28(a0)
000189A4 6000 FF0C                  		bra.w	loc_189CA
000189A8                            ; ===========================================================================
000189A8                            
000189A8                            loc_18AC0:
000189A8 1142 0028                  		move.b	d2,$28(a0)
000189AC 5428 0025                  		addq.b	#2,$25(a0)
000189B0 117C 0028 003C             		move.b	#$28,$3C(a0)
000189B6 6000 FEFA                  		bra.w	loc_189CA
000189BA                            ; ===========================================================================
000189BA                            
000189BA                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000189BA 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000189C0 6600                       		bne.s	loc_18B36
000189C2 70FF                       		moveq	#-1,d0
000189C4 1028 0028                  		move.b	$28(a0),d0
000189C8 4880                       		ext.w	d0
000189CA 6B00                       		bmi.s	loc_18B40
000189CC 5540                       		subq.w	#2,d0
000189CE 4440                       		neg.w	d0
000189D0 D040                       		add.w	d0,d0
000189D2 43E8 002A                  		lea	$2A(a0),a1
000189D6 3031 0000                  		move.w	(a1,d0.w),d0
000189DA 2440                       		movea.l	d0,a2
000189DC 43F8 D040                  		lea	($FFFFD040).w,a1
000189E0 723E                       		moveq	#$3E,d1
000189E2                            
000189E2                            loc_18AFA:
000189E2 B0A9 003C                  		cmp.l	$3C(a1),d0
000189E6 6700                       		beq.s	loc_18B40
000189E8 D2FC 0040                  		adda.w	#$40,a1
000189EC 51C9 FFF4                  		dbf	d1,loc_18AFA
000189F0                            
000189F0 2F08                       		move.l	a0,-(sp)
000189F2 41D2                       		lea	(a2),a0
000189F4 4EB9 0000 DA26             		jsr	SingleObjLoad2
000189FA 205F                       		movea.l	(sp)+,a0
000189FC 6600                       		bne.s	loc_18B40
000189FE 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018A02 3368 0008 0008             		move.w	8(a0),8(a1)
00018A08 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A0E 0669 0020 000C             		addi.w	#$20,$C(a1)
00018A14 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018A1A 234A 003C                  		move.l	a2,$3C(a1)
00018A1E                            
00018A1E                            loc_18B36:
00018A1E 5328 003C                  		subq.b	#1,$3C(a0)
00018A22 6700                       		beq.s	loc_18B40
00018A24 6000 FEC0                  		bra.w	loc_189FE
00018A28                            ; ===========================================================================
00018A28                            
00018A28                            loc_18B40:
00018A28 5528 0025                  		subq.b	#2,$25(a0)
00018A2C 6000 FE84                  		bra.w	loc_189CA
00018A30                            ; ===========================================================================
00018A30                            
00018A30                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018A30 5328 003C                  		subq.b	#1,$3C(a0)
00018A34 6B00                       		bmi.s	loc_18B52
00018A36 6000 ED22                  		bra.w	BossDefeated
00018A3A                            ; ===========================================================================
00018A3A                            
00018A3A                            loc_18B52:
00018A3A 5428 0025                  		addq.b	#2,$25(a0)
00018A3E 4268 0012                  		clr.w	$12(a0)
00018A42 08E8 0000 0022             		bset	#0,$22(a0)
00018A48 08A8 0007 0022             		bclr	#7,$22(a0)
00018A4E 4268 0010                  		clr.w	$10(a0)
00018A52 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018A58 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A5C 6600                       		bne.s	loc_18B7C
00018A5E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A64                            
00018A64                            loc_18B7C:
00018A64 6000 FE80                  		bra.w	loc_189FE
00018A68                            ; ===========================================================================
00018A68                            
00018A68                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018A68 5228 003C                  		addq.b	#1,$3C(a0)
00018A6C 6700                       		beq.s	loc_18B90
00018A6E 6A00                       		bpl.s	loc_18B96
00018A70 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A76 6000                       		bra.s	loc_18BC2
00018A78                            ; ===========================================================================
00018A78                            
00018A78                            loc_18B90:
00018A78 4268 0012                  		clr.w	$12(a0)
00018A7C 6000                       		bra.s	loc_18BC2
00018A7E                            ; ===========================================================================
00018A7E                            
00018A7E                            loc_18B96:
00018A7E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018A84 6500                       		bcs.s	loc_18BAE
00018A86 6700                       		beq.s	loc_18BB4
00018A88 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018A8E 6500                       		bcs.s	loc_18BC2
00018A90 5428 0025                  		addq.b	#2,$25(a0)
00018A94 6000                       		bra.s	loc_18BC2
00018A96                            ; ===========================================================================
00018A96                            
00018A96                            loc_18BAE:
00018A96 5168 0012                  		subq.w	#8,$12(a0)
00018A9A 6000                       		bra.s	loc_18BC2
00018A9C                            ; ===========================================================================
00018A9C                            
00018A9C                            loc_18BB4:
00018A9C 4268 0012                  		clr.w	$12(a0)
00018AA0 303C 0084                  		move.w	#$84,d0
00018AA4 4EB9 0000 1374             		jsr	(PlaySound).l	; play SLZ music
00018AAA                            
00018AAA                            loc_18BC2:
00018AAA 6000 FE2A                  		bra.w	loc_189EE
00018AAE                            ; ===========================================================================
00018AAE                            
00018AAE                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018AAE 317C 0400 0010             		move.w	#$400,$10(a0)
00018AB4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018ABA 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018AC0 6400                       		bcc.s	loc_18BE0
00018AC2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018AC6 6000                       		bra.s	loc_18BE8
00018AC8                            ; ===========================================================================
00018AC8                            
00018AC8                            loc_18BE0:
00018AC8 4A28 0001                  		tst.b	1(a0)
00018ACC 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018AD0                            
00018AD0                            loc_18BE8:
00018AD0 6100 ECCA                  		bsr.w	BossMove
00018AD4 6000 FDDC                  		bra.w	loc_189CA
00018AD8                            ; ===========================================================================
00018AD8                            
00018AD8                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018AD8 7000                       		moveq	#0,d0
00018ADA 7201                       		moveq	#1,d1
00018ADC 2268 0034                  		movea.l	$34(a0),a1
00018AE0 1029 0025                  		move.b	$25(a1),d0
00018AE4 0C00 0006                  		cmpi.b	#6,d0
00018AE8 6B00                       		bmi.s	loc_18C06
00018AEA 720A                       		moveq	#$A,d1
00018AEC 6000                       		bra.s	loc_18C1A
00018AEE                            ; ===========================================================================
00018AEE                            
00018AEE                            loc_18C06:
00018AEE 4A29 0020                  		tst.b	$20(a1)
00018AF2 6600                       		bne.s	loc_18C10
00018AF4 7205                       		moveq	#5,d1
00018AF6 6000                       		bra.s	loc_18C1A
00018AF8                            ; ===========================================================================
00018AF8                            
00018AF8                            loc_18C10:
00018AF8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018AFE 6500                       		bcs.s	loc_18C1A
00018B00 7204                       		moveq	#4,d1
00018B02                            
00018B02                            loc_18C1A:
00018B02 1141 001C                  		move.b	d1,$1C(a0)
00018B06 0C00 000A                  		cmpi.b	#$A,d0
00018B0A 6600                       		bne.s	loc_18C32
00018B0C 117C 0006 001C             		move.b	#6,$1C(a0)
00018B12 4A28 0001                  		tst.b	1(a0)
00018B16 6A00 FC84                  		bpl.w	Obj7A_Delete
00018B1A                            
00018B1A                            loc_18C32:
00018B1A 6000                       		bra.s	loc_18C6C
00018B1C                            ; ===========================================================================
00018B1C                            
00018B1C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018B1C 117C 0008 001C             		move.b	#8,$1C(a0)
00018B22 2268 0034                  		movea.l	$34(a0),a1
00018B26 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018B2C 6600                       		bne.s	loc_18C56
00018B2E 4A28 0001                  		tst.b	1(a0)
00018B32 6A00 FC68                  		bpl.w	Obj7A_Delete
00018B36 117C 000B 001C             		move.b	#$B,$1C(a0)
00018B3C 6000                       		bra.s	loc_18C6C
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            loc_18C56:
00018B3E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018B44 6E00                       		bgt.s	loc_18C6C
00018B46 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018B4C 6D00                       		blt.s	loc_18C6C
00018B4E 117C 0007 001C             		move.b	#7,$1C(a0)
00018B54                            
00018B54                            loc_18C6C:
00018B54 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
00018B5A 4EB9 0000 A6B6             		jsr	AnimateSprite
00018B60                            
00018B60                            loc_18C78:
00018B60 2268 0034                  		movea.l	$34(a0),a1
00018B64 3169 0008 0008             		move.w	8(a1),8(a0)
00018B6A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018B70 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018B76 7003                       		moveq	#3,d0
00018B78 C028 0022                  		and.b	$22(a0),d0
00018B7C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018B82 8128 0001                  		or.b	d0,1(a0)
00018B86 4EF9 0000 D58A             		jmp	DisplaySprite
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018B8C 2268 0034                  		movea.l	$34(a0),a1
00018B90 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018B96 6600                       		bne.s	loc_18CB8
00018B98 4A28 0001                  		tst.b	1(a0)
00018B9C 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018BA0                            
00018BA0                            loc_18CB8:
00018BA0 217C 0001 7CC4 0004        		move.l	#Map_BossItems,4(a0)
00018BA8 317C 246C 0002             		move.w	#$246C,2(a0)
00018BAE 117C 0003 001A             		move.b	#3,$1A(a0)
00018BB4 60AA                       		bra.s	loc_18C78
00018BB6                            ; ===========================================================================
00018BB6                            ; ---------------------------------------------------------------------------
00018BB6                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018BB6                            ; ---------------------------------------------------------------------------
00018BB6                            
00018BB6                            Obj7B:					; XREF: Obj_Index
00018BB6 7000                       		moveq	#0,d0
00018BB8 1028 0024                  		move.b	$24(a0),d0
00018BBC 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018BC0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018BC4 3028 0030                  		move.w	$30(a0),d0
00018BC8 0240 FF80                  		andi.w	#$FF80,d0
00018BCC 3238 F700                  		move.w	($FFFFF700).w,d1
00018BD0 0441 0080                  		subi.w	#$80,d1
00018BD4 0241 FF80                  		andi.w	#$FF80,d1
00018BD8 9041                       		sub.w	d1,d0
00018BDA 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018BDE 0C40 0280                  		cmpi.w	#$280,d0
00018BE2 6200 FBB8                  		bhi.w	Obj7A_Delete
00018BE6 4EF9 0000 D58A             		jmp	DisplaySprite
00018BEC                            ; ===========================================================================
00018BEC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018BEE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018BF0 0000                       		dc.w loc_18DC6-Obj7B_Index
00018BF2 0000                       		dc.w loc_18EAA-Obj7B_Index
00018BF4 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018BF6 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018BF8                            ; ===========================================================================
00018BF8                            
00018BF8                            Obj7B_Main:				; XREF: Obj7B_Index
00018BF8 217C 0001 1948 0004        		move.l	#Map_obj5Ea,4(a0)
00018C00 317C 0518 0002             		move.w	#$518,2(a0)
00018C06 117C 0001 001A             		move.b	#1,$1A(a0)
00018C0C 0028 0004 0001             		ori.b	#4,1(a0)
00018C12 117C 0004 0018             		move.b	#4,$18(a0)
00018C18 117C 008B 0020             		move.b	#$8B,$20(a0)
00018C1E 117C 000C 0019             		move.b	#$C,$19(a0)
00018C24 2268 003C                  		movea.l	$3C(a0),a1
00018C28 3169 0008 0030             		move.w	8(a1),$30(a0)
00018C2E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018C34 08E8 0000 0022             		bset	#0,$22(a0)
00018C3A 3028 0008                  		move.w	8(a0),d0
00018C3E B069 0008                  		cmp.w	8(a1),d0
00018C42 6E00                       		bgt.s	loc_18D68
00018C44 08A8 0000 0022             		bclr	#0,$22(a0)
00018C4A 117C 0002 003A             		move.b	#2,$3A(a0)
00018C50                            
00018C50                            loc_18D68:
00018C50 5428 0024                  		addq.b	#2,$24(a0)
00018C54                            
00018C54                            Obj7B_Fall:				; XREF: Obj7B_Index
00018C54 4EB9 0000 D538             		jsr	ObjectFall
00018C5A 2268 003C                  		movea.l	$3C(a0),a1
00018C5E 45F9 0000 0000             		lea	(word_19018).l,a2
00018C64 7000                       		moveq	#0,d0
00018C66 1029 001A                  		move.b	$1A(a1),d0
00018C6A 3228 0008                  		move.w	8(a0),d1
00018C6E 9268 0030                  		sub.w	$30(a0),d1
00018C72 6400                       		bcc.s	loc_18D8E
00018C74 5440                       		addq.w	#2,d0
00018C76                            
00018C76                            loc_18D8E:
00018C76 D040                       		add.w	d0,d0
00018C78 3228 0034                  		move.w	$34(a0),d1
00018C7C D272 0000                  		add.w	(a2,d0.w),d1
00018C80 B268 000C                  		cmp.w	$C(a0),d1
00018C84 6E00                       		bgt.s	locret_18DC4
00018C86 2268 003C                  		movea.l	$3C(a0),a1
00018C8A 7202                       		moveq	#2,d1
00018C8C 0828 0000 0022             		btst	#0,$22(a0)
00018C92 6700                       		beq.s	loc_18DAE
00018C94 7200                       		moveq	#0,d1
00018C96                            
00018C96                            loc_18DAE:
00018C96 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018C9C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018CA2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018CA8 6000 0000                  		bra.w	loc_18FA2
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            locret_18DC4:
00018CAC 4E75                       		rts	
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            loc_18DC6:				; XREF: Obj7B_Index
00018CAE 2268 003C                  		movea.l	$3C(a0),a1
00018CB2 7000                       		moveq	#0,d0
00018CB4 1028 003A                  		move.b	$3A(a0),d0
00018CB8 9029 003A                  		sub.b	$3A(a1),d0
00018CBC 6700                       		beq.s	loc_18E2A
00018CBE 6400                       		bcc.s	loc_18DDA
00018CC0 4400                       		neg.b	d0
00018CC2                            
00018CC2                            loc_18DDA:
00018CC2 323C F7E8                  		move.w	#-$818,d1
00018CC6 343C FEEC                  		move.w	#-$114,d2
00018CCA 0C00 0001                  		cmpi.b	#1,d0
00018CCE 6700                       		beq.s	loc_18E00
00018CD0 323C F6A0                  		move.w	#-$960,d1
00018CD4 343C FF0C                  		move.w	#-$F4,d2
00018CD8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018CDE 6D00                       		blt.s	loc_18E00
00018CE0 323C F5E0                  		move.w	#-$A20,d1
00018CE4 343C FF80                  		move.w	#-$80,d2
00018CE8                            
00018CE8                            loc_18E00:
00018CE8 3141 0012                  		move.w	d1,$12(a0)
00018CEC 3142 0010                  		move.w	d2,$10(a0)
00018CF0 3028 0008                  		move.w	8(a0),d0
00018CF4 9068 0030                  		sub.w	$30(a0),d0
00018CF8 6400                       		bcc.s	loc_18E16
00018CFA 4468 0010                  		neg.w	$10(a0)
00018CFE                            
00018CFE                            loc_18E16:
00018CFE 117C 0001 001A             		move.b	#1,$1A(a0)
00018D04 317C 0020 0028             		move.w	#$20,$28(a0)
00018D0A 5428 0024                  		addq.b	#2,$24(a0)
00018D0E 6000 0000                  		bra.w	loc_18EAA
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            loc_18E2A:				; XREF: loc_18DC6
00018D12 45F9 0000 0000             		lea	(word_19018).l,a2
00018D18 7000                       		moveq	#0,d0
00018D1A 1029 001A                  		move.b	$1A(a1),d0
00018D1E 343C 0028                  		move.w	#$28,d2
00018D22 3228 0008                  		move.w	8(a0),d1
00018D26 9268 0030                  		sub.w	$30(a0),d1
00018D2A 6400                       		bcc.s	loc_18E48
00018D2C 4442                       		neg.w	d2
00018D2E 5440                       		addq.w	#2,d0
00018D30                            
00018D30                            loc_18E48:
00018D30 D040                       		add.w	d0,d0
00018D32 3228 0034                  		move.w	$34(a0),d1
00018D36 D272 0000                  		add.w	(a2,d0.w),d1
00018D3A 3141 000C                  		move.w	d1,$C(a0)
00018D3E D468 0030                  		add.w	$30(a0),d2
00018D42 3142 0008                  		move.w	d2,8(a0)
00018D46 4268 000E                  		clr.w	$E(a0)
00018D4A 4268 000A                  		clr.w	$A(a0)
00018D4E 5368 0028                  		subq.w	#1,$28(a0)
00018D52 6600                       		bne.s	loc_18E7A
00018D54 317C 0020 0028             		move.w	#$20,$28(a0)
00018D5A 117C 0008 0024             		move.b	#8,$24(a0)
00018D60 4E75                       		rts	
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            loc_18E7A:
00018D62 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018D68 6600                       		bne.s	loc_18E88
00018D6A 117C 0005 001F             		move.b	#5,$1F(a0)
00018D70                            
00018D70                            loc_18E88:
00018D70 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018D76 6600                       		bne.s	loc_18E96
00018D78 117C 0002 001F             		move.b	#2,$1F(a0)
00018D7E                            
00018D7E                            loc_18E96:
00018D7E 5328 001E                  		subq.b	#1,$1E(a0)
00018D82 6E00                       		bgt.s	locret_18EA8
00018D84 0868 0000 001A             		bchg	#0,$1A(a0)
00018D8A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018D90                            
00018D90                            locret_18EA8:
00018D90 4E75                       		rts	
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            loc_18EAA:				; XREF: Obj7B_Index
00018D92 43F8 D040                  		lea	($FFFFD040).w,a1
00018D96 707A                       		moveq	#$7A,d0
00018D98 7240                       		moveq	#$40,d1
00018D9A 743E                       		moveq	#$3E,d2
00018D9C                            
00018D9C                            loc_18EB4:
00018D9C B011                       		cmp.b	(a1),d0
00018D9E 6700                       		beq.s	loc_18EC0
00018DA0 D2C1                       		adda.w	d1,a1
00018DA2 51CA FFF8                  		dbf	d2,loc_18EB4
00018DA6                            
00018DA6 6000                       		bra.s	loc_18F38
00018DA8                            ; ===========================================================================
00018DA8                            
00018DA8                            loc_18EC0:
00018DA8 3029 0008                  		move.w	8(a1),d0
00018DAC 3229 000C                  		move.w	$C(a1),d1
00018DB0 3428 0008                  		move.w	8(a0),d2
00018DB4 3628 000C                  		move.w	$C(a0),d3
00018DB8 45FA 0000                  		lea	byte_19022(pc),a2
00018DBC 47FA 0000                  		lea	byte_19026(pc),a3
00018DC0 181A                       		move.b	(a2)+,d4
00018DC2 4884                       		ext.w	d4
00018DC4 D044                       		add.w	d4,d0
00018DC6 181B                       		move.b	(a3)+,d4
00018DC8 4884                       		ext.w	d4
00018DCA D444                       		add.w	d4,d2
00018DCC B440                       		cmp.w	d0,d2
00018DCE 6500                       		bcs.s	loc_18F38
00018DD0 181A                       		move.b	(a2)+,d4
00018DD2 4884                       		ext.w	d4
00018DD4 D044                       		add.w	d4,d0
00018DD6 181B                       		move.b	(a3)+,d4
00018DD8 4884                       		ext.w	d4
00018DDA D444                       		add.w	d4,d2
00018DDC B042                       		cmp.w	d2,d0
00018DDE 6500                       		bcs.s	loc_18F38
00018DE0 181A                       		move.b	(a2)+,d4
00018DE2 4884                       		ext.w	d4
00018DE4 D244                       		add.w	d4,d1
00018DE6 181B                       		move.b	(a3)+,d4
00018DE8 4884                       		ext.w	d4
00018DEA D644                       		add.w	d4,d3
00018DEC B641                       		cmp.w	d1,d3
00018DEE 6500                       		bcs.s	loc_18F38
00018DF0 181A                       		move.b	(a2)+,d4
00018DF2 4884                       		ext.w	d4
00018DF4 D244                       		add.w	d4,d1
00018DF6 181B                       		move.b	(a3)+,d4
00018DF8 4884                       		ext.w	d4
00018DFA D644                       		add.w	d4,d3
00018DFC B243                       		cmp.w	d3,d1
00018DFE 6500                       		bcs.s	loc_18F38
00018E00 5428 0024                  		addq.b	#2,$24(a0)
00018E04 4268 0028                  		clr.w	$28(a0)
00018E08 4229 0020                  		clr.b	$20(a1)
00018E0C 5329 0021                  		subq.b	#1,$21(a1)
00018E10 6600                       		bne.s	loc_18F38
00018E12 08E9 0007 0022             		bset	#7,$22(a1)
00018E18 4268 0010                  		clr.w	$10(a0)
00018E1C 4268 0012                  		clr.w	$12(a0)
00018E20                            
00018E20                            loc_18F38:
00018E20 4A68 0012                  		tst.w	$12(a0)
00018E24 6A00                       		bpl.s	loc_18F5C
00018E26 4EB9 0000 D538             		jsr	ObjectFall
00018E2C 3028 0034                  		move.w	$34(a0),d0
00018E30 0440 002F                  		subi.w	#$2F,d0
00018E34 B068 000C                  		cmp.w	$C(a0),d0
00018E38 6E00                       		bgt.s	loc_18F58
00018E3A 4EB9 0000 D538             		jsr	ObjectFall
00018E40                            
00018E40                            loc_18F58:
00018E40 6000 FF20                  		bra.w	loc_18E7A
00018E44                            ; ===========================================================================
00018E44                            
00018E44                            loc_18F5C:
00018E44 4EB9 0000 D538             		jsr	ObjectFall
00018E4A 2268 003C                  		movea.l	$3C(a0),a1
00018E4E 45F9 0000 0000             		lea	(word_19018).l,a2
00018E54 7000                       		moveq	#0,d0
00018E56 1029 001A                  		move.b	$1A(a1),d0
00018E5A 3228 0008                  		move.w	8(a0),d1
00018E5E 9268 0030                  		sub.w	$30(a0),d1
00018E62 6400                       		bcc.s	loc_18F7E
00018E64 5440                       		addq.w	#2,d0
00018E66                            
00018E66                            loc_18F7E:
00018E66 D040                       		add.w	d0,d0
00018E68 3228 0034                  		move.w	$34(a0),d1
00018E6C D272 0000                  		add.w	(a2,d0.w),d1
00018E70 B268 000C                  		cmp.w	$C(a0),d1
00018E74 6ECA                       		bgt.s	loc_18F58
00018E76 2268 003C                  		movea.l	$3C(a0),a1
00018E7A 7202                       		moveq	#2,d1
00018E7C 4A68 0010                  		tst.w	$10(a0)
00018E80 6B00                       		bmi.s	loc_18F9C
00018E82 7200                       		moveq	#0,d1
00018E84                            
00018E84                            loc_18F9C:
00018E84 317C 0000 0028             		move.w	#0,$28(a0)
00018E8A                            
00018E8A                            loc_18FA2:
00018E8A 1341 003A                  		move.b	d1,$3A(a1)
00018E8E 1141 003A                  		move.b	d1,$3A(a0)
00018E92 B229 001A                  		cmp.b	$1A(a1),d1
00018E96 6700                       		beq.s	loc_19008
00018E98 08A9 0003 0022             		bclr	#3,$22(a1)
00018E9E 6700                       		beq.s	loc_19008
00018EA0 4229 0025                  		clr.b	$25(a1)
00018EA4 137C 0002 0024             		move.b	#2,$24(a1)
00018EAA 45F8 D000                  		lea	($FFFFD000).w,a2
00018EAE 3568 0012 0012             		move.w	$12(a0),$12(a2)
00018EB4 446A 0012                  		neg.w	$12(a2)
00018EB8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00018EBE 6600                       		bne.s	loc_18FDC
00018EC0 E0EA 0012                  		asr	$12(a2)
00018EC4                            
00018EC4                            loc_18FDC:
00018EC4 08EA 0001 0022             		bset	#1,$22(a2)
00018ECA 08AA 0003 0022             		bclr	#3,$22(a2)
00018ED0 422A 003C                  		clr.b	$3C(a2)
00018ED4 2F08                       		move.l	a0,-(sp)
00018ED6 41D2                       		lea	(a2),a0
00018ED8 4EBA A40E                  		jsr	Obj01_ChkRoll
00018EDC 205F                       		movea.l	(sp)+,a0
00018EDE 157C 0002 0024             		move.b	#2,$24(a2)
00018EE4 303C 00CC                  		move.w	#$CC,d0
00018EE8 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "spring" sound
00018EEE                            
00018EEE                            loc_19008:
00018EEE 4268 0010                  		clr.w	$10(a0)
00018EF2 4268 0012                  		clr.w	$12(a0)
00018EF6 5428 0024                  		addq.b	#2,$24(a0)
00018EFA 6000 FE66                  		bra.w	loc_18E7A
00018EFE                            ; ===========================================================================
00018EFE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00018F08                            		even
00018F08 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00018F0C                            		even
00018F0C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00018F10                            		even
00018F10                            ; ===========================================================================
00018F10                            
00018F10                            Obj7B_Explode:				; XREF: Obj7B_Index
00018F10 10BC 003F                  		move.b	#$3F,(a0)
00018F14 4228 0024                  		clr.b	$24(a0)
00018F18 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00018F1E 6700                       		beq.s	Obj7B_MakeFrag
00018F20 4E75                       		rts	
00018F22                            ; ===========================================================================
00018F22                            
00018F22                            Obj7B_MakeFrag:
00018F22 3168 0034 000C             		move.w	$34(a0),$C(a0)
00018F28 7203                       		moveq	#3,d1
00018F2A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00018F2E                            
00018F2E                            Obj7B_Loop:
00018F2E 4EB9 0000 DA10             		jsr	SingleObjLoad
00018F34 6600                       		bne.s	loc_1909A
00018F36 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00018F3A 137C 000A 0024             		move.b	#$A,$24(a1)
00018F40 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00018F48 137C 0003 0018             		move.b	#3,$18(a1)
00018F4E 337C 0518 0002             		move.w	#$518,2(a1)
00018F54 3368 0008 0008             		move.w	8(a0),8(a1)
00018F5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F60 335A 0010                  		move.w	(a2)+,$10(a1)
00018F64 335A 0012                  		move.w	(a2)+,$12(a1)
00018F68 137C 0098 0020             		move.b	#$98,$20(a1)
00018F6E 0029 0004 0001             		ori.b	#4,1(a1)
00018F74 08E9 0007 0001             		bset	#7,1(a1)
00018F7A 137C 000C 0019             		move.b	#$C,$19(a1)
00018F80                            
00018F80                            loc_1909A:
00018F80 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00018F84                            
00018F84 4E75                       		rts	
00018F86                            ; ===========================================================================
00018F86 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00018F8A FF60 FDC0                  		dc.w $FF60, $FDC0
00018F8E 0100 FCC0                  		dc.w $100, $FCC0
00018F92 00A0 FDC0                  		dc.w $A0, $FDC0
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00018F96 4EB9 0000 D564             		jsr	SpeedToPos
00018F9C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FA2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00018FA8 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FAE 7004                       		moveq	#4,d0
00018FB0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00018FB4 E448                       		lsr.w	#2,d0
00018FB6 1140 001A                  		move.b	d0,$1A(a0)
00018FBA 4A28 0001                  		tst.b	1(a0)
00018FBE 6A00 F7DC                  		bpl.w	Obj7A_Delete
00018FC2 4E75                       		rts	
00018FC4                            ; ===========================================================================
00018FC4                            ; ---------------------------------------------------------------------------
00018FC4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00018FC4                            ; ---------------------------------------------------------------------------
00018FC4                            Map_obj7B:
00018FC4                            	include "_maps\obj7B.asm"
00018FC4                            ; ---------------------------------------------------------------------------
00018FC4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00018FC4                            ; ---------------------------------------------------------------------------
00018FC4 0000                       		dc.w byte_190E2-Map_obj7B
00018FC6 0000                       		dc.w byte_190E8-Map_obj7B
00018FC8 01                         byte_190E2:	dc.b 1
00018FC9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00018FCE 01                         byte_190E8:	dc.b 1
00018FCF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00018FD4                            		even
00018FD4                            		even
00018FD4                            
00018FD4                            ; ===========================================================================
00018FD4                            ; ---------------------------------------------------------------------------
00018FD4                            ; Object 75 - Eggman (SYZ)
00018FD4                            ; ---------------------------------------------------------------------------
00018FD4                            
00018FD4                            Obj75:					; XREF: Obj_Index
00018FD4 7000                       		moveq	#0,d0
00018FD6 1028 0024                  		move.b	$24(a0),d0
00018FDA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00018FDE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00018FE2                            ; ===========================================================================
00018FE2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00018FE4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00018FE6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00018FE8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00018FEA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00018FEC                            
00018FEC 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00018FEF 0401 05                    		dc.b 4,	1, 5
00018FF2 0607 05                    		dc.b 6,	7, 5
00018FF5 0800 05                    		dc.b 8,	0, 5
00018FF8                            ; ===========================================================================
00018FF8                            
00018FF8                            Obj75_Main:				; XREF: Obj75_Index
00018FF8 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00018FFE 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019004 3168 0008 0030             		move.w	8(a0),$30(a0)
0001900A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019010 117C 000F 0020             		move.b	#$F,$20(a0)
00019016 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001901C 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019020 2248                       		movea.l	a0,a1
00019022 7203                       		moveq	#3,d1
00019024 6000                       		bra.s	Obj75_LoadBoss
00019026                            ; ===========================================================================
00019026                            
00019026                            Obj75_Loop:
00019026 4EB9 0000 DA26             		jsr	SingleObjLoad2
0001902C 6600                       		bne.s	Obj75_ShipMain
0001902E 12BC 0075                  		move.b	#$75,(a1)
00019032 3368 0008 0008             		move.w	8(a0),8(a1)
00019038 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001903E                            
0001903E                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001903E 08A8 0000 0022             		bclr	#0,$22(a0)
00019044 4229 0025                  		clr.b	$25(a1)
00019048 135A 0024                  		move.b	(a2)+,$24(a1)
0001904C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019050 135A 0018                  		move.b	(a2)+,$18(a1)
00019054 237C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a1)
0001905C 337C 0400 0002             		move.w	#$400,2(a1)
00019062 137C 0004 0001             		move.b	#4,1(a1)
00019068 137C 0020 0019             		move.b	#$20,$19(a1)
0001906E 2348 0034                  		move.l	a0,$34(a1)
00019072 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019076                            
00019076                            Obj75_ShipMain:				; XREF: Obj75_Index
00019076 7000                       		moveq	#0,d0
00019078 1028 0025                  		move.b	$25(a0),d0
0001907C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019080 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019084 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
0001908A 4EB9 0000 A6B6             		jsr	AnimateSprite
00019090 7003                       		moveq	#3,d0
00019092 C028 0022                  		and.b	$22(a0),d0
00019096 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001909C 8128 0001                  		or.b	d0,1(a0)
000190A0 4EF9 0000 D58A             		jmp	DisplaySprite
000190A6                            ; ===========================================================================
000190A6 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000190AA 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000190AE 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000190B2                            ; ===========================================================================
000190B2                            
000190B2                            loc_191CC:				; XREF: Obj75_ShipIndex
000190B2 317C FF00 0010             		move.w	#-$100,$10(a0)
000190B8 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000190BE 6400                       		bcc.s	loc_191DE
000190C0 5428 0025                  		addq.b	#2,$25(a0)
000190C4                            
000190C4                            loc_191DE:
000190C4 1028 003F                  		move.b	$3F(a0),d0
000190C8 5428 003F                  		addq.b	#2,$3F(a0)
000190CC 4EB9 0000 29B8             		jsr	(CalcSine).l
000190D2 E440                       		asr.w	#2,d0
000190D4 3140 0012                  		move.w	d0,$12(a0)
000190D8                            
000190D8                            loc_191F2:
000190D8 6100 E6C2                  		bsr.w	BossMove
000190DC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000190E2 3168 0030 0008             		move.w	$30(a0),8(a0)
000190E8                            
000190E8                            loc_19202:
000190E8 3028 0008                  		move.w	8(a0),d0
000190EC 0440 2C00                  		subi.w	#$2C00,d0
000190F0 EA48                       		lsr.w	#5,d0
000190F2 1140 0034                  		move.b	d0,$34(a0)
000190F6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000190FC 6400                       		bcc.s	locret_19256
000190FE 4A28 0022                  		tst.b	$22(a0)
00019102 6B00                       		bmi.s	loc_19258
00019104 4A28 0020                  		tst.b	$20(a0)
00019108 6600                       		bne.s	locret_19256
0001910A 4A28 003E                  		tst.b	$3E(a0)
0001910E 6600                       		bne.s	loc_1923A
00019110 117C 0020 003E             		move.b	#$20,$3E(a0)
00019116 303C 00AC                  		move.w	#$AC,d0
0001911A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019120                            
00019120                            loc_1923A:
00019120 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019124 7000                       		moveq	#0,d0
00019126 4A51                       		tst.w	(a1)
00019128 6600                       		bne.s	loc_19248
0001912A 303C 0EEE                  		move.w	#$EEE,d0
0001912E                            
0001912E                            loc_19248:
0001912E 3280                       		move.w	d0,(a1)
00019130 5328 003E                  		subq.b	#1,$3E(a0)
00019134 6600                       		bne.s	locret_19256
00019136 117C 000F 0020             		move.b	#$F,$20(a0)
0001913C                            
0001913C                            locret_19256:
0001913C 4E75                       		rts	
0001913E                            ; ===========================================================================
0001913E                            
0001913E                            loc_19258:				; XREF: loc_19202
0001913E 7064                       		moveq	#100,d0
00019140 6100 0000                  		bsr.w	AddPoints
00019144 117C 0006 0025             		move.b	#6,$25(a0)
0001914A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019150 4268 0010                  		clr.w	$10(a0)
00019154 4E75                       		rts	
00019156                            ; ===========================================================================
00019156                            
00019156                            loc_19270:				; XREF: Obj75_ShipIndex
00019156 3028 0030                  		move.w	$30(a0),d0
0001915A 317C 0140 0010             		move.w	#$140,$10(a0)
00019160 0828 0000 0022             		btst	#0,$22(a0)
00019166 6600                       		bne.s	loc_1928E
00019168 4468 0010                  		neg.w	$10(a0)
0001916C 0C40 2C08                  		cmpi.w	#$2C08,d0
00019170 6E00                       		bgt.s	loc_1929E
00019172 6000                       		bra.s	loc_19294
00019174                            ; ===========================================================================
00019174                            
00019174                            loc_1928E:
00019174 0C40 2D38                  		cmpi.w	#$2D38,d0
00019178 6D00                       		blt.s	loc_1929E
0001917A                            
0001917A                            loc_19294:
0001917A 0868 0000 0022             		bchg	#0,$22(a0)
00019180 4228 003D                  		clr.b	$3D(a0)
00019184                            
00019184                            loc_1929E:
00019184 0440 2C10                  		subi.w	#$2C10,d0
00019188 0240 001F                  		andi.w	#$1F,d0
0001918C 0440 001F                  		subi.w	#$1F,d0
00019190 6A00                       		bpl.s	loc_192AE
00019192 4440                       		neg.w	d0
00019194                            
00019194                            loc_192AE:
00019194 5340                       		subq.w	#1,d0
00019196 6E00                       		bgt.s	loc_192E8
00019198 4A28 003D                  		tst.b	$3D(a0)
0001919C 6600                       		bne.s	loc_192E8
0001919E 3238 D008                  		move.w	($FFFFD008).w,d1
000191A2 0441 2C00                  		subi.w	#$2C00,d1
000191A6 EA41                       		asr.w	#5,d1
000191A8 B228 0034                  		cmp.b	$34(a0),d1
000191AC 6600                       		bne.s	loc_192E8
000191AE 7000                       		moveq	#0,d0
000191B0 1028 0034                  		move.b	$34(a0),d0
000191B4 EB40                       		asl.w	#5,d0
000191B6 0640 2C10                  		addi.w	#$2C10,d0
000191BA 3140 0030                  		move.w	d0,$30(a0)
000191BE 6100 0000                  		bsr.w	Obj75_FindBlocks
000191C2 5428 0025                  		addq.b	#2,$25(a0)
000191C6 4268 0028                  		clr.w	$28(a0)
000191CA 4268 0010                  		clr.w	$10(a0)
000191CE                            
000191CE                            loc_192E8:
000191CE 6000 FEF4                  		bra.w	loc_191DE
000191D2                            ; ===========================================================================
000191D2                            
000191D2                            loc_192EC:				; XREF: Obj75_ShipIndex
000191D2 7000                       		moveq	#0,d0
000191D4 1028 0028                  		move.b	$28(a0),d0
000191D8 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000191DC 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000191E0                            ; ===========================================================================
000191E0 0000                       off_192FA:	dc.w loc_19302-off_192FA
000191E2 0000                       		dc.w loc_19348-off_192FA
000191E4 0000                       		dc.w loc_1938E-off_192FA
000191E6 0000                       		dc.w loc_193D0-off_192FA
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            loc_19302:				; XREF: off_192FA
000191E8 317C 0180 0012             		move.w	#$180,$12(a0)
000191EE 3028 0038                  		move.w	$38(a0),d0
000191F2 0C40 0556                  		cmpi.w	#$556,d0
000191F6 6500                       		bcs.s	loc_19344
000191F8 317C 0556 0038             		move.w	#$556,$38(a0)
000191FE 4268 003C                  		clr.w	$3C(a0)
00019202 70FF                       		moveq	#-1,d0
00019204 3028 0036                  		move.w	$36(a0),d0
00019208 6700                       		beq.s	loc_1933C
0001920A 2240                       		movea.l	d0,a1
0001920C 137C 00FF 0029             		move.b	#-1,$29(a1)
00019212 117C 00FF 0029             		move.b	#-1,$29(a0)
00019218 2348 0034                  		move.l	a0,$34(a1)
0001921C 317C 0032 003C             		move.w	#$32,$3C(a0)
00019222                            
00019222                            loc_1933C:
00019222 4268 0012                  		clr.w	$12(a0)
00019226 5428 0028                  		addq.b	#2,$28(a0)
0001922A                            
0001922A                            loc_19344:
0001922A 6000 FEAC                  		bra.w	loc_191F2
0001922E                            ; ===========================================================================
0001922E                            
0001922E                            loc_19348:				; XREF: off_192FA
0001922E 5368 003C                  		subq.w	#1,$3C(a0)
00019232 6A00                       		bpl.s	loc_19366
00019234 5428 0028                  		addq.b	#2,$28(a0)
00019238 317C F800 0012             		move.w	#-$800,$12(a0)
0001923E 4A68 0036                  		tst.w	$36(a0)
00019242 6600                       		bne.s	loc_19362
00019244 E0E8 0012                  		asr	$12(a0)
00019248                            
00019248                            loc_19362:
00019248 7000                       		moveq	#0,d0
0001924A 6000                       		bra.s	loc_1937C
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            loc_19366:
0001924C 7000                       		moveq	#0,d0
0001924E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019254 6E00                       		bgt.s	loc_1937C
00019256 7002                       		moveq	#2,d0
00019258 0828 0001 003D             		btst	#1,$3D(a0)
0001925E 6700                       		beq.s	loc_1937C
00019260 4440                       		neg.w	d0
00019262                            
00019262                            loc_1937C:
00019262 D068 0038                  		add.w	$38(a0),d0
00019266 3140 000C                  		move.w	d0,$C(a0)
0001926A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019270 6000 FE76                  		bra.w	loc_19202
00019274                            ; ===========================================================================
00019274                            
00019274                            loc_1938E:				; XREF: off_192FA
00019274 303C 04DA                  		move.w	#$4DA,d0
00019278 4A68 0036                  		tst.w	$36(a0)
0001927C 6700                       		beq.s	loc_1939C
0001927E 0440 0018                  		subi.w	#$18,d0
00019282                            
00019282                            loc_1939C:
00019282 B068 0038                  		cmp.w	$38(a0),d0
00019286 6D00                       		blt.s	loc_193BE
00019288 317C 0008 003C             		move.w	#8,$3C(a0)
0001928E 4A68 0036                  		tst.w	$36(a0)
00019292 6700                       		beq.s	loc_193B4
00019294 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001929A                            
0001929A                            loc_193B4:
0001929A 5428 0028                  		addq.b	#2,$28(a0)
0001929E 4268 0012                  		clr.w	$12(a0)
000192A2 6000                       		bra.s	loc_193CC
000192A4                            ; ===========================================================================
000192A4                            
000192A4                            loc_193BE:
000192A4 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000192AA 6C00                       		bge.s	loc_193CC
000192AC 0668 000C 0012             		addi.w	#$C,$12(a0)
000192B2                            
000192B2                            loc_193CC:
000192B2 6000 FE24                  		bra.w	loc_191F2
000192B6                            ; ===========================================================================
000192B6                            
000192B6                            loc_193D0:				; XREF: off_192FA
000192B6 5368 003C                  		subq.w	#1,$3C(a0)
000192BA 6E00                       		bgt.s	loc_19406
000192BC 6B00                       		bmi.s	loc_193EE
000192BE 70FF                       		moveq	#-1,d0
000192C0 3028 0036                  		move.w	$36(a0),d0
000192C4 6700                       		beq.s	loc_193E8
000192C6 2240                       		movea.l	d0,a1
000192C8 137C 000A 0029             		move.b	#$A,$29(a1)
000192CE                            
000192CE                            loc_193E8:
000192CE 4268 0036                  		clr.w	$36(a0)
000192D2 6000                       		bra.s	loc_19406
000192D4                            ; ===========================================================================
000192D4                            
000192D4                            loc_193EE:
000192D4 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000192DA 6600                       		bne.s	loc_19406
000192DC 4228 0029                  		clr.b	$29(a0)
000192E0 5528 0025                  		subq.b	#2,$25(a0)
000192E4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000192EA 6000                       		bra.s	loc_19446
000192EC                            ; ===========================================================================
000192EC                            
000192EC                            loc_19406:
000192EC 7001                       		moveq	#1,d0
000192EE 4A68 0036                  		tst.w	$36(a0)
000192F2 6700                       		beq.s	loc_19410
000192F4 7002                       		moveq	#2,d0
000192F6                            
000192F6                            loc_19410:
000192F6 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000192FC 6700                       		beq.s	loc_19424
000192FE 6D00                       		blt.s	loc_1941C
00019300 4440                       		neg.w	d0
00019302                            
00019302                            loc_1941C:
00019302 4A68 0036                  		tst.w	$36(a0)
00019306 D168 0038                  		add.w	d0,$38(a0)
0001930A                            
0001930A                            loc_19424:
0001930A 7000                       		moveq	#0,d0
0001930C 4A68 0036                  		tst.w	$36(a0)
00019310 6700                       		beq.s	loc_19438
00019312 7002                       		moveq	#2,d0
00019314 0828 0000 003D             		btst	#0,$3D(a0)
0001931A 6700                       		beq.s	loc_19438
0001931C 4440                       		neg.w	d0
0001931E                            
0001931E                            loc_19438:
0001931E D068 0038                  		add.w	$38(a0),d0
00019322 3140 000C                  		move.w	d0,$C(a0)
00019326 3168 0030 0008             		move.w	$30(a0),8(a0)
0001932C                            
0001932C                            loc_19446:
0001932C 6000 FDBA                  		bra.w	loc_19202
00019330                            
00019330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019330                            
00019330                            
00019330                            Obj75_FindBlocks:			; XREF: loc_192AE
00019330 4268 0036                  		clr.w	$36(a0)
00019334 43F8 D040                  		lea	($FFFFD040).w,a1
00019338 703E                       		moveq	#$3E,d0
0001933A 7276                       		moveq	#$76,d1
0001933C 1428 0034                  		move.b	$34(a0),d2
00019340                            
00019340                            Obj75_FindLoop:
00019340 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019342 6600                       		bne.s	loc_1946A	; if not, branch
00019344 B429 0028                  		cmp.b	$28(a1),d2
00019348 6600                       		bne.s	loc_1946A
0001934A 3149 0036                  		move.w	a1,$36(a0)
0001934E 6000                       		bra.s	locret_19472
00019350                            ; ===========================================================================
00019350                            
00019350                            loc_1946A:
00019350 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019354 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019358                            
00019358                            locret_19472:
00019358 4E75                       		rts	
0001935A                            ; End of function Obj75_FindBlocks
0001935A                            
0001935A                            ; ===========================================================================
0001935A                            
0001935A                            loc_19474:				; XREF: Obj75_ShipIndex
0001935A 5368 003C                  		subq.w	#1,$3C(a0)
0001935E 6B00                       		bmi.s	loc_1947E
00019360 6000 E3F8                  		bra.w	BossDefeated
00019364                            ; ===========================================================================
00019364                            
00019364                            loc_1947E:
00019364 5428 0025                  		addq.b	#2,$25(a0)
00019368 4268 0012                  		clr.w	$12(a0)
0001936C 08E8 0000 0022             		bset	#0,$22(a0)
00019372 08A8 0007 0022             		bclr	#7,$22(a0)
00019378 4268 0010                  		clr.w	$10(a0)
0001937C 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019382 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019386 6600                       		bne.s	loc_194A8
00019388 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001938E                            
0001938E                            loc_194A8:
0001938E 6000 FD58                  		bra.w	loc_19202
00019392                            ; ===========================================================================
00019392                            
00019392                            loc_194AC:				; XREF: Obj75_ShipIndex
00019392 5268 003C                  		addq.w	#1,$3C(a0)
00019396 6700                       		beq.s	loc_194BC
00019398 6A00                       		bpl.s	loc_194C2
0001939A 0668 0018 0012             		addi.w	#$18,$12(a0)
000193A0 6000                       		bra.s	loc_194EE
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            loc_194BC:
000193A2 4268 0012                  		clr.w	$12(a0)
000193A6 6000                       		bra.s	loc_194EE
000193A8                            ; ===========================================================================
000193A8                            
000193A8                            loc_194C2:
000193A8 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
000193AE 6500                       		bcs.s	loc_194DA
000193B0 6700                       		beq.s	loc_194E0
000193B2 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000193B8 6500                       		bcs.s	loc_194EE
000193BA 5428 0025                  		addq.b	#2,$25(a0)
000193BE 6000                       		bra.s	loc_194EE
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            loc_194DA:
000193C0 5168 0012                  		subq.w	#8,$12(a0)
000193C4 6000                       		bra.s	loc_194EE
000193C6                            ; ===========================================================================
000193C6                            
000193C6                            loc_194E0:
000193C6 4268 0012                  		clr.w	$12(a0)
000193CA 303C 0085                  		move.w	#$85,d0
000193CE 4EB9 0000 1374             		jsr	(PlaySound).l	; play SYZ music
000193D4                            
000193D4                            loc_194EE:
000193D4 6000 FD02                  		bra.w	loc_191F2
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            loc_194F2:				; XREF: Obj75_ShipIndex
000193D8 317C 0400 0010             		move.w	#$400,$10(a0)
000193DE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193E4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
000193EA 6400                       		bcc.s	loc_1950C
000193EC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193F0 6000                       		bra.s	loc_19512
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            loc_1950C:
000193F2 4A28 0001                  		tst.b	1(a0)
000193F6 6A00                       		bpl.s	Obj75_ShipDelete
000193F8                            
000193F8                            loc_19512:
000193F8 6100 E3A2                  		bsr.w	BossMove
000193FC 6000 FCC6                  		bra.w	loc_191DE
00019400                            ; ===========================================================================
00019400                            
00019400                            Obj75_ShipDelete:
00019400 4EF9 0000 D5C6             		jmp	DeleteObject
00019406                            ; ===========================================================================
00019406                            
00019406                            Obj75_FaceMain:				; XREF: Obj75_Index
00019406 7201                       		moveq	#1,d1
00019408 2268 0034                  		movea.l	$34(a0),a1
0001940C 7000                       		moveq	#0,d0
0001940E 1029 0025                  		move.b	$25(a1),d0
00019412 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019416 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001941A 1141 001C                  		move.b	d1,$1C(a0)
0001941E 1010                       		move.b	(a0),d0
00019420 B011                       		cmp.b	(a1),d0
00019422 6600                       		bne.s	Obj75_FaceDelete
00019424 6000                       		bra.s	loc_195BE
00019426                            ; ===========================================================================
00019426                            
00019426                            Obj75_FaceDelete:
00019426 4EF9 0000 D5C6             		jmp	DeleteObject
0001942C                            ; ===========================================================================
0001942C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019430 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019434 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019438                            ; ===========================================================================
00019438                            
00019438                            loc_19552:				; XREF: off_19546
00019438 720A                       		moveq	#$A,d1
0001943A 4E75                       		rts	
0001943C                            ; ===========================================================================
0001943C                            
0001943C                            loc_19556:				; XREF: off_19546
0001943C 7206                       		moveq	#6,d1
0001943E 4E75                       		rts	
00019440                            ; ===========================================================================
00019440                            
00019440                            loc_1955A:				; XREF: off_19546
00019440 7000                       		moveq	#0,d0
00019442 1029 0028                  		move.b	$28(a1),d0
00019446 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001944A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001944E                            ; ===========================================================================
0001944E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019452 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019456                            ; ===========================================================================
00019456                            
00019456                            loc_19570:				; XREF: off_19568
00019456 6000                       		bra.s	loc_19574
00019458                            ; ===========================================================================
00019458                            
00019458                            loc_19572:				; XREF: off_19568
00019458 7206                       		moveq	#6,d1
0001945A                            
0001945A                            loc_19574:				; XREF: off_19546
0001945A 4A29 0020                  		tst.b	$20(a1)
0001945E 6600                       		bne.s	loc_1957E
00019460 7205                       		moveq	#5,d1
00019462 4E75                       		rts	
00019464                            ; ===========================================================================
00019464                            
00019464                            loc_1957E:
00019464 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001946A 6500                       		bcs.s	locret_19588
0001946C 7204                       		moveq	#4,d1
0001946E                            
0001946E                            locret_19588:
0001946E 4E75                       		rts	
00019470                            ; ===========================================================================
00019470                            
00019470                            Obj75_FlameMain:			; XREF: Obj75_Index
00019470 117C 0007 001C             		move.b	#7,$1C(a0)
00019476 2268 0034                  		movea.l	$34(a0),a1
0001947A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019480 6600                       		bne.s	loc_195AA
00019482 117C 000B 001C             		move.b	#$B,$1C(a0)
00019488 4A28 0001                  		tst.b	1(a0)
0001948C 6A00                       		bpl.s	Obj75_FlameDelete
0001948E 6000                       		bra.s	loc_195B6
00019490                            ; ===========================================================================
00019490                            
00019490                            loc_195AA:
00019490 4A69 0010                  		tst.w	$10(a1)
00019494 6700                       		beq.s	loc_195B6
00019496 117C 0008 001C             		move.b	#8,$1C(a0)
0001949C                            
0001949C                            loc_195B6:
0001949C 6000                       		bra.s	loc_195BE
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            Obj75_FlameDelete:
0001949E 4EF9 0000 D5C6             		jmp	DeleteObject
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            loc_195BE:
000194A4 43F9 0001 7BAC             		lea	(Ani_Eggman).l,a1
000194AA 4EB9 0000 A6B6             		jsr	AnimateSprite
000194B0 2268 0034                  		movea.l	$34(a0),a1
000194B4 3169 0008 0008             		move.w	8(a1),8(a0)
000194BA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194C0                            
000194C0                            loc_195DA:
000194C0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194C6 7003                       		moveq	#3,d0
000194C8 C028 0022                  		and.b	$22(a0),d0
000194CC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194D2 8128 0001                  		or.b	d0,1(a0)
000194D6 4EF9 0000 D58A             		jmp	DisplaySprite
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            Obj75_SpikeMain:			; XREF: Obj75_Index
000194DC 217C 0001 7CC4 0004        		move.l	#Map_BossItems,4(a0)
000194E4 317C 246C 0002             		move.w	#$246C,2(a0)
000194EA 117C 0005 001A             		move.b	#5,$1A(a0)
000194F0 2268 0034                  		movea.l	$34(a0),a1
000194F4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000194FA 6600                       		bne.s	loc_1961C
000194FC 4A28 0001                  		tst.b	1(a0)
00019500 6A00                       		bpl.s	Obj75_SpikeDelete
00019502                            
00019502                            loc_1961C:
00019502 3169 0008 0008             		move.w	8(a1),8(a0)
00019508 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001950E 3028 003C                  		move.w	$3C(a0),d0
00019512 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019518 6600                       		bne.s	loc_19652
0001951A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019520 6700                       		beq.s	loc_1964C
00019522 4A29 0028                  		tst.b	$28(a1)
00019526 6600                       		bne.s	loc_19658
00019528 0C40 0094                  		cmpi.w	#$94,d0
0001952C 6C00                       		bge.s	loc_19658
0001952E 5E40                       		addq.w	#7,d0
00019530 6000                       		bra.s	loc_19658
00019532                            ; ===========================================================================
00019532                            
00019532                            loc_1964C:
00019532 4A69 003C                  		tst.w	$3C(a1)
00019536 6A00                       		bpl.s	loc_19658
00019538                            
00019538                            loc_19652:
00019538 4A40                       		tst.w	d0
0001953A 6F00                       		ble.s	loc_19658
0001953C 5B40                       		subq.w	#5,d0
0001953E                            
0001953E                            loc_19658:
0001953E 3140 003C                  		move.w	d0,$3C(a0)
00019542 E440                       		asr.w	#2,d0
00019544 D168 000C                  		add.w	d0,$C(a0)
00019548 117C 0008 0019             		move.b	#8,$19(a0)
0001954E 117C 000C 0016             		move.b	#$C,$16(a0)
00019554 4228 0020                  		clr.b	$20(a0)
00019558 2268 0034                  		movea.l	$34(a0),a1
0001955C 4A29 0020                  		tst.b	$20(a1)
00019560 6700                       		beq.s	loc_19688
00019562 4A29 0029                  		tst.b	$29(a1)
00019566 6600                       		bne.s	loc_19688
00019568 117C 0084 0020             		move.b	#$84,$20(a0)
0001956E                            
0001956E                            loc_19688:
0001956E 6000 FF50                  		bra.w	loc_195DA
00019572                            ; ===========================================================================
00019572                            
00019572                            Obj75_SpikeDelete:
00019572 4EF9 0000 D5C6             		jmp	DeleteObject
00019578                            ; ===========================================================================
00019578                            ; ---------------------------------------------------------------------------
00019578                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019578                            ; ---------------------------------------------------------------------------
00019578                            
00019578                            Obj76:					; XREF: Obj_Index
00019578 7000                       		moveq	#0,d0
0001957A 1028 0024                  		move.b	$24(a0),d0
0001957E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019582 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019586                            ; ===========================================================================
00019586 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019588 0000                       		dc.w Obj76_Action-Obj76_Index
0001958A 0000                       		dc.w loc_19762-Obj76_Index
0001958C                            ; ===========================================================================
0001958C                            
0001958C                            Obj76_Main:				; XREF: Obj76_Index
0001958C 7800                       		moveq	#0,d4
0001958E 3A3C 2C10                  		move.w	#$2C10,d5
00019592 7C09                       		moveq	#9,d6
00019594 43D0                       		lea	(a0),a1
00019596 6000                       		bra.s	Obj76_MakeBlock
00019598                            ; ===========================================================================
00019598                            
00019598                            Obj76_Loop:
00019598 4EB9 0000 DA10             		jsr	SingleObjLoad
0001959E 6600                       		bne.s	Obj76_ExitLoop
000195A0                            
000195A0                            Obj76_MakeBlock:			; XREF: Obj76_Main
000195A0 12BC 0076                  		move.b	#$76,(a1)
000195A4 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
000195AC 337C 4000 0002             		move.w	#$4000,2(a1)
000195B2 137C 0004 0001             		move.b	#4,1(a1)
000195B8 137C 0010 0019             		move.b	#$10,$19(a1)
000195BE 137C 0010 0016             		move.b	#$10,$16(a1)
000195C4 137C 0003 0018             		move.b	#3,$18(a1)
000195CA 3345 0008                  		move.w	d5,8(a1)	; set x-position
000195CE 337C 0582 000C             		move.w	#$582,$C(a1)
000195D4 3344 0028                  		move.w	d4,$28(a1)
000195D8 0644 0101                  		addi.w	#$101,d4
000195DC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
000195E0 5429 0024                  		addq.b	#2,$24(a1)
000195E4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
000195E8                            
000195E8                            Obj76_ExitLoop:
000195E8 4E75                       		rts	
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            Obj76_Action:				; XREF: Obj76_Index
000195EA 1028 0029                  		move.b	$29(a0),d0
000195EE B028 0028                  		cmp.b	$28(a0),d0
000195F2 6700                       		beq.s	Obj76_Solid
000195F4 4A00                       		tst.b	d0
000195F6 6B00                       		bmi.s	loc_19718
000195F8                            
000195F8                            loc_19712:
000195F8 6100 0000                  		bsr.w	Obj76_Break
000195FC 6000                       		bra.s	Obj76_Display
000195FE                            ; ===========================================================================
000195FE                            
000195FE                            loc_19718:
000195FE 2268 0034                  		movea.l	$34(a0),a1
00019602 4A29 0021                  		tst.b	$21(a1)
00019606 67F0                       		beq.s	loc_19712
00019608 3169 0008 0008             		move.w	8(a1),8(a0)
0001960E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019614 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001961A B2C8                       		cmpa.w	a0,a1
0001961C 6500                       		bcs.s	Obj76_Display
0001961E 3029 0012                  		move.w	$12(a1),d0
00019622 48C0                       		ext.l	d0
00019624 E080                       		asr.l	#8,d0
00019626 D168 000C                  		add.w	d0,$C(a0)
0001962A 6000                       		bra.s	Obj76_Display
0001962C                            ; ===========================================================================
0001962C                            
0001962C                            Obj76_Solid:				; XREF: Obj76_Action
0001962C 323C 001B                  		move.w	#$1B,d1
00019630 343C 0010                  		move.w	#$10,d2
00019634 363C 0011                  		move.w	#$11,d3
00019638 3828 0008                  		move.w	8(a0),d4
0001963C 4EB9 0000 F94A             		jsr	SolidObject
00019642                            
00019642                            Obj76_Display:				; XREF: Obj76_Action
00019642 4EF9 0000 D58A             		jmp	DisplaySprite
00019648                            ; ===========================================================================
00019648                            
00019648                            loc_19762:				; XREF: Obj76_Index
00019648 4A28 0001                  		tst.b	1(a0)
0001964C 6A00                       		bpl.s	Obj76_Delete
0001964E 4EB9 0000 D538             		jsr	ObjectFall
00019654 4EF9 0000 D58A             		jmp	DisplaySprite
0001965A                            ; ===========================================================================
0001965A                            
0001965A                            Obj76_Delete:
0001965A 4EF9 0000 D5C6             		jmp	DeleteObject
00019660                            
00019660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019660                            
00019660                            
00019660                            Obj76_Break:				; XREF: Obj76_Action
00019660 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019664 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019668 7801                       		moveq	#1,d4
0001966A 7203                       		moveq	#3,d1
0001966C 7438                       		moveq	#$38,d2
0001966E 5428 0024                  		addq.b	#2,$24(a0)
00019672 117C 0008 0019             		move.b	#8,$19(a0)
00019678 117C 0008 0016             		move.b	#8,$16(a0)
0001967E 43D0                       		lea	(a0),a1
00019680 6000                       		bra.s	Obj76_MakeFrag
00019682                            ; ===========================================================================
00019682                            
00019682                            Obj76_LoopFrag:
00019682 4EB9 0000 DA26             		jsr	SingleObjLoad2
00019688 6600                       		bne.s	loc_197D4
0001968A                            
0001968A                            Obj76_MakeFrag:
0001968A 45D0                       		lea	(a0),a2
0001968C 47D1                       		lea	(a1),a3
0001968E 7603                       		moveq	#3,d3
00019690                            
00019690                            loc_197AA:
00019690 26DA                       		move.l	(a2)+,(a3)+
00019692 26DA                       		move.l	(a2)+,(a3)+
00019694 26DA                       		move.l	(a2)+,(a3)+
00019696 26DA                       		move.l	(a2)+,(a3)+
00019698 51CB FFF6                  		dbf	d3,loc_197AA
0001969C                            
0001969C 335C 0010                  		move.w	(a4)+,$10(a1)
000196A0 335C 0012                  		move.w	(a4)+,$12(a1)
000196A4 361D                       		move.w	(a5)+,d3
000196A6 D769 0008                  		add.w	d3,8(a1)
000196AA 361D                       		move.w	(a5)+,d3
000196AC D769 000C                  		add.w	d3,$C(a1)
000196B0 1344 001A                  		move.b	d4,$1A(a1)
000196B4 5244                       		addq.w	#1,d4
000196B6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
000196BA                            
000196BA                            loc_197D4:
000196BA 303C 00CB                  		move.w	#$CB,d0
000196BE 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play smashing sound
000196C4                            ; End of function Obj76_Break
000196C4                            
000196C4                            ; ===========================================================================
000196C4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
000196C8 0180 FE00                  		dc.w $180, $FE00
000196CC FF00 FF00                  		dc.w $FF00, $FF00
000196D0 0100 FF00                  		dc.w $100, $FF00
000196D4 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
000196D8 0010 0000                  		dc.w $10, 0
000196DC 0000 0010                  		dc.w 0,	$10
000196E0 0010 0010                  		dc.w $10, $10
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            Map_obj76:
000196E4                            	include "_maps\obj76.asm"
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
000196E4                            ; ---------------------------------------------------------------------------
000196E4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
000196E8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
000196EC 0000                       		dc.w byte_19826-Map_obj76
000196EE 02                         byte_19808:	dc.b 2
000196EF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
000196F4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
000196F9 00                         		dc.b 0
000196FA 01                         byte_19814:	dc.b 1
000196FB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019700 01                         byte_1981A:	dc.b 1
00019701 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019706 01                         byte_19820:	dc.b 1
00019707 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001970C 01                         byte_19826:	dc.b 1
0001970D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019712                            		even
00019712                            		even
00019712                            
00019712                            ; ===========================================================================
00019712                            
00019712                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019712 4EF9 0000 D5C6             		jmp	DeleteObject
00019718                            ; ===========================================================================
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Object 82 - Eggman (SBZ2)
00019718                            ; ---------------------------------------------------------------------------
00019718                            
00019718                            Obj82:					; XREF: Obj_Index
00019718 7000                       		moveq	#0,d0
0001971A 1028 0024                  		move.b	$24(a0),d0
0001971E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019722 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019726                            ; ===========================================================================
00019726 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019728 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001972A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001972C                            
0001972C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001972F 0400 03                    		dc.b 4,	0, 3
00019732                            ; ===========================================================================
00019732                            
00019732                            Obj82_Main:				; XREF: Obj82_Index
00019732 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019736 317C 2160 0008             		move.w	#$2160,8(a0)
0001973C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019742 117C 000F 0020             		move.b	#$F,$20(a0)
00019748 117C 0010 0021             		move.b	#$10,$21(a0)
0001974E 08A8 0000 0022             		bclr	#0,$22(a0)
00019754 4228 0025                  		clr.b	$25(a0)
00019758 115A 0024                  		move.b	(a2)+,$24(a0)
0001975C 115A 001C                  		move.b	(a2)+,$1C(a0)
00019760 115A 0018                  		move.b	(a2)+,$18(a0)
00019764 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001976C 317C 0400 0002             		move.w	#$400,2(a0)
00019772 117C 0004 0001             		move.b	#4,1(a0)
00019778 08E8 0007 0001             		bset	#7,1(a0)
0001977E 117C 0020 0019             		move.b	#$20,$19(a0)
00019784 4EB9 0000 DA26             		jsr	SingleObjLoad2
0001978A 6600                       		bne.s	Obj82_Eggman
0001978C 2348 0034                  		move.l	a0,$34(a1)
00019790 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019794 337C 2130 0008             		move.w	#$2130,8(a1)
0001979A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
000197A0 4228 0025                  		clr.b	$25(a0)
000197A4 135A 0024                  		move.b	(a2)+,$24(a1)
000197A8 135A 001C                  		move.b	(a2)+,$1C(a1)
000197AC 135A 0018                  		move.b	(a2)+,$18(a1)
000197B0 237C 0000 BE38 0004        		move.l	#Map_obj32,4(a1)
000197B8 337C 04A4 0002             		move.w	#$4A4,2(a1)
000197BE 137C 0004 0001             		move.b	#4,1(a1)
000197C4 08E9 0007 0001             		bset	#7,1(a1)
000197CA 137C 0010 0019             		move.b	#$10,$19(a1)
000197D0 137C 0000 001A             		move.b	#0,$1A(a1)
000197D6                            
000197D6                            Obj82_Eggman:				; XREF: Obj82_Index
000197D6 7000                       		moveq	#0,d0
000197D8 1028 0025                  		move.b	$25(a0),d0
000197DC 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
000197E0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
000197E4 43FA 0000                  		lea	Ani_obj82(pc),a1
000197E8 4EB9 0000 A6B6             		jsr	AnimateSprite
000197EE 4EF9 0000 D58A             		jmp	DisplaySprite
000197F4                            ; ===========================================================================
000197F4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
000197F6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
000197F8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
000197FA 0000                       		dc.w loc_19934-Obj82_EggIndex
000197FC                            ; ===========================================================================
000197FC                            
000197FC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
000197FC 3028 0008                  		move.w	8(a0),d0
00019800 9078 D008                  		sub.w	($FFFFD008).w,d0
00019804 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019808 6400                       		bcc.s	loc_19934	; if not, branch
0001980A 5428 0025                  		addq.b	#2,$25(a0)
0001980E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019814 117C 0001 001C             		move.b	#1,$1C(a0)
0001981A                            
0001981A                            loc_19934:				; XREF: Obj82_EggIndex
0001981A 4EF9 0000 D564             		jmp	SpeedToPos
00019820                            ; ===========================================================================
00019820                            
00019820                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019820 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019824 6600                       		bne.s	loc_19954	; if time remains, branch
00019826 5428 0025                  		addq.b	#2,$25(a0)
0001982A 117C 0002 001C             		move.b	#2,$1C(a0)
00019830 5868 000C                  		addq.w	#4,$C(a0)
00019834 317C 000F 003C             		move.w	#15,$3C(a0)
0001983A                            
0001983A                            loc_19954:
0001983A 60DE                       		bra.s	loc_19934
0001983C                            ; ===========================================================================
0001983C                            
0001983C                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001983C 5368 003C                  		subq.w	#1,$3C(a0)
00019840 6E00                       		bgt.s	loc_199D0
00019842 6600                       		bne.s	loc_1996A
00019844 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001984A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019850                            
00019850                            loc_1996A:
00019850 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019856 6E00                       		bgt.s	loc_19976
00019858 4268 0010                  		clr.w	$10(a0)
0001985C                            
0001985C                            loc_19976:
0001985C 0668 0024 0012             		addi.w	#$24,$12(a0)
00019862 4A68 0012                  		tst.w	$12(a0)
00019866 6B00                       		bmi.s	Obj82_FindBlocks
00019868 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001986E 6500                       		bcs.s	Obj82_FindBlocks
00019870 317C 5357 0028             		move.w	#$5357,$28(a0)
00019876 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001987C 6500                       		bcs.s	Obj82_FindBlocks
0001987E 317C 059B 000C             		move.w	#$59B,$C(a0)
00019884 4268 0012                  		clr.w	$12(a0)
00019888                            
00019888                            Obj82_FindBlocks:
00019888 3028 0010                  		move.w	$10(a0),d0
0001988C 8068 0012                  		or.w	$12(a0),d0
00019890 6600                       		bne.s	loc_199D0
00019892 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019896 703E                       		moveq	#$3E,d0
00019898 7240                       		moveq	#$40,d1
0001989A                            
0001989A                            Obj82_FindLoop:	
0001989A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001989C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
000198A0 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
000198A4                            
000198A4 6600                       		bne.s	loc_199D0
000198A6 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
000198AC 5428 0025                  		addq.b	#2,$25(a0)
000198B0 117C 0001 001C             		move.b	#1,$1C(a0)
000198B6                            
000198B6                            loc_199D0:
000198B6 6000 FF62                  		bra.w	loc_19934
000198BA                            ; ===========================================================================
000198BA                            
000198BA                            Obj82_Switch:				; XREF: Obj82_Index
000198BA 7000                       		moveq	#0,d0
000198BC 1028 0025                  		move.b	$25(a0),d0
000198C0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
000198C4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
000198C8                            ; ===========================================================================
000198C8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
000198CA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
000198CC                            ; ===========================================================================
000198CC                            
000198CC                            loc_199E6:				; XREF: Obj82_SwIndex
000198CC 2268 0034                  		movea.l	$34(a0),a1
000198D0 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
000198D6 6600                       		bne.s	Obj82_SwDisplay
000198D8 117C 0001 001A             		move.b	#1,$1A(a0)
000198DE 5428 0025                  		addq.b	#2,$25(a0)
000198E2                            
000198E2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
000198E2 4EF9 0000 D58A             		jmp	DisplaySprite
000198E8                            ; ===========================================================================
000198E8                            Ani_obj82:
000198E8                            	include "_anim\obj82.asm"
000198E8                            ; ---------------------------------------------------------------------------
000198E8                            ; Animation script - Eggman (SBZ2)
000198E8                            ; ---------------------------------------------------------------------------
000198E8 0000                       		dc.w byte_19A10-Ani_obj82
000198EA 0000                       		dc.w byte_19A14-Ani_obj82
000198EC 0000                       		dc.w byte_19A18-Ani_obj82
000198EE 0000                       		dc.w byte_19A20-Ani_obj82
000198F0 0000                       		dc.w byte_19A24-Ani_obj82
000198F2 0000                       		dc.w byte_19A2A-Ani_obj82
000198F4 0000                       		dc.w byte_19A30-Ani_obj82
000198F6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
000198FA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
000198FE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019906 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001990A 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019910 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019916 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001991A                            		even
0001991A                            		even
0001991A                            
0001991A                            ; ---------------------------------------------------------------------------
0001991A                            ; Sprite mappings - Eggman (SBZ2)
0001991A                            ; ---------------------------------------------------------------------------
0001991A                            Map_obj82:
0001991A                            	include "_maps\obj82.asm"
0001991A                            ; ---------------------------------------------------------------------------
0001991A                            ; Sprite mappings - Eggman (SBZ2)
0001991A                            ; ---------------------------------------------------------------------------
0001991A 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001991E 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019922 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019926 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001992A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001992E 0000                       		dc.w byte_19B4F-Map_obj82
00019930 03                         byte_19A4A:	dc.b 3
00019931 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019936 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001993B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019940 04                         byte_19A5A:	dc.b 4
00019941 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019946 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001994B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019950 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019955 00                         		dc.b 0
00019956 04                         byte_19A70:	dc.b 4
00019957 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001995C E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019961 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019966 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001996B 00                         		dc.b 0
0001996C 04                         byte_19A86:	dc.b 4
0001996D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019972 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019977 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001997C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019981 00                         		dc.b 0
00019982 04                         byte_19A9C:	dc.b 4
00019983 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019988 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001998D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019992 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019997 00                         		dc.b 0
00019998 04                         byte_19AB2:	dc.b 4
00019999 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001999E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000199A3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000199A8 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000199AD 00                         		dc.b 0
000199AE 07                         byte_19AC8:	dc.b 7
000199AF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000199B4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000199B9 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000199BE 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000199C3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000199C8 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
000199CD F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
000199D2 05                         byte_19AEC:	dc.b 5
000199D3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000199D8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000199DD 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000199E2 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000199E7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000199EC 06                         byte_19B06:	dc.b 6
000199ED EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
000199F2 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
000199F7 0905 0844 00               		dc.b 9,	5, 8, $44, 0
000199FC 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019A01 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019A06 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019A0B 00                         		dc.b 0
00019A0C 08                         byte_19B26:	dc.b 8
00019A0D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019A12 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019A17 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019A1C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019A21 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019A26 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019A2B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019A30 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019A35 03                         byte_19B4F:	dc.b 3
00019A36 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019A3B F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019A40 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019A46 00                         		even
00019A46 00                         		even
00019A46                            
00019A46                            ; ===========================================================================
00019A46                            ; ---------------------------------------------------------------------------
00019A46                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019A46                            ; ---------------------------------------------------------------------------
00019A46                            
00019A46                            Obj83:					; XREF: Obj_Index
00019A46 7000                       		moveq	#0,d0
00019A48 1028 0024                  		move.b	$24(a0),d0
00019A4C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019A50 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019A54                            ; ===========================================================================
00019A54 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019A56 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019A58 0000                       		dc.w loc_19C36-Obj83_Index
00019A5A 0000                       		dc.w loc_19C62-Obj83_Index
00019A5C 0000                       		dc.w loc_19C72-Obj83_Index
00019A5E 0000                       		dc.w loc_19C80-Obj83_Index
00019A60                            ; ===========================================================================
00019A60                            
00019A60                            Obj83_Main:				; XREF: Obj83_Index
00019A60 317C 2080 0008             		move.w	#$2080,8(a0)
00019A66 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019A6C 117C 0080 0019             		move.b	#$80,$19(a0)
00019A72 117C 0010 0016             		move.b	#$10,$16(a0)
00019A78 117C 0004 0001             		move.b	#4,1(a0)
00019A7E 08E8 0007 0001             		bset	#7,1(a0)
00019A84 7800                       		moveq	#0,d4
00019A86 3A3C 2010                  		move.w	#$2010,d5
00019A8A 7C07                       		moveq	#7,d6
00019A8C 45E8 0030                  		lea	$30(a0),a2
00019A90                            
00019A90                            Obj83_MakeBlock:
00019A90 4EB9 0000 DA10             		jsr	SingleObjLoad
00019A96 6600                       		bne.s	Obj83_ExitMake
00019A98 34C9                       		move.w	a1,(a2)+
00019A9A 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019A9E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019AA6 337C 4518 0002             		move.w	#$4518,2(a1)
00019AAC 137C 0004 0001             		move.b	#4,1(a1)
00019AB2 137C 0010 0019             		move.b	#$10,$19(a1)
00019AB8 137C 0010 0016             		move.b	#$10,$16(a1)
00019ABE 137C 0003 0018             		move.b	#3,$18(a1)
00019AC4 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019AC8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019ACE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019AD2 137C 0008 0024             		move.b	#8,$24(a1)
00019AD8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019ADC                            
00019ADC                            Obj83_ExitMake:
00019ADC 5428 0024                  		addq.b	#2,$24(a0)
00019AE0 4E75                       		rts	
00019AE2                            ; ===========================================================================
00019AE2                            
00019AE2                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019AE2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019AE8 6600                       		bne.s	Obj83_Solid	; if not, branch
00019AEA 4228 001A                  		clr.b	$1A(a0)
00019AEE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019AF2                            
00019AF2                            Obj83_Solid:
00019AF2 7000                       		moveq	#0,d0
00019AF4 1028 001A                  		move.b	$1A(a0),d0
00019AF8 4400                       		neg.b	d0
00019AFA 4880                       		ext.w	d0
00019AFC 5040                       		addq.w	#8,d0
00019AFE E940                       		asl.w	#4,d0
00019B00 383C 2100                  		move.w	#$2100,d4
00019B04 9840                       		sub.w	d0,d4
00019B06 1140 0019                  		move.b	d0,$19(a0)
00019B0A 3144 0008                  		move.w	d4,8(a0)
00019B0E 720B                       		moveq	#$B,d1
00019B10 D240                       		add.w	d0,d1
00019B12 7410                       		moveq	#$10,d2
00019B14 7611                       		moveq	#$11,d3
00019B16 4EF9 0000 F94A             		jmp	SolidObject
00019B1C                            ; ===========================================================================
00019B1C                            
00019B1C                            loc_19C36:				; XREF: Obj83_Index
00019B1C 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019B22 6400                       		bcc.s	Obj83_Solid2
00019B24 70FF                       		moveq	#-1,d0
00019B26 1028 001A                  		move.b	$1A(a0),d0
00019B2A 4880                       		ext.w	d0
00019B2C D040                       		add.w	d0,d0
00019B2E 3030 0030                  		move.w	$30(a0,d0.w),d0
00019B32 2240                       		movea.l	d0,a1
00019B34 337C 474F 0028             		move.w	#$474F,$28(a1)
00019B3A 5228 001A                  		addq.b	#1,$1A(a0)
00019B3E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019B44 6700                       		beq.s	loc_19C62
00019B46                            
00019B46                            Obj83_Solid2:
00019B46 60AA                       		bra.s	Obj83_Solid
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            loc_19C62:				; XREF: Obj83_Index
00019B48 08A8 0003 0022             		bclr	#3,$22(a0)
00019B4E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019B54 6000 FBBC                  		bra.w	loc_1982C
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            loc_19C72:				; XREF: Obj83_Index
00019B58 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019B5E 6700                       		beq.s	Obj83_Break	; if yes, branch
00019B60 4EF9 0000 D58A             		jmp	DisplaySprite
00019B66                            ; ===========================================================================
00019B66                            
00019B66                            loc_19C80:				; XREF: Obj83_Index
00019B66 4A28 0001                  		tst.b	1(a0)
00019B6A 6A00 FBA6                  		bpl.w	loc_1982C
00019B6E 4EB9 0000 D538             		jsr	ObjectFall
00019B74 4EF9 0000 D58A             		jmp	DisplaySprite
00019B7A                            ; ===========================================================================
00019B7A                            
00019B7A                            Obj83_Break:				; XREF: loc_19C72
00019B7A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019B7E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019B82 7801                       		moveq	#1,d4
00019B84 7203                       		moveq	#3,d1
00019B86 7438                       		moveq	#$38,d2
00019B88 5428 0024                  		addq.b	#2,$24(a0)
00019B8C 117C 0008 0019             		move.b	#8,$19(a0)
00019B92 117C 0008 0016             		move.b	#8,$16(a0)
00019B98 43D0                       		lea	(a0),a1
00019B9A 6000                       		bra.s	Obj83_MakeFrag
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj83_LoopFrag:
00019B9C 4EB9 0000 DA26             		jsr	SingleObjLoad2
00019BA2 6600                       		bne.s	Obj83_BreakSnd
00019BA4                            
00019BA4                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019BA4 45D0                       		lea	(a0),a2
00019BA6 47D1                       		lea	(a1),a3
00019BA8 7603                       		moveq	#3,d3
00019BAA                            
00019BAA                            loc_19CC4:
00019BAA 26DA                       		move.l	(a2)+,(a3)+
00019BAC 26DA                       		move.l	(a2)+,(a3)+
00019BAE 26DA                       		move.l	(a2)+,(a3)+
00019BB0 26DA                       		move.l	(a2)+,(a3)+
00019BB2 51CB FFF6                  		dbf	d3,loc_19CC4
00019BB6                            
00019BB6 335C 0012                  		move.w	(a4)+,$12(a1)
00019BBA 361D                       		move.w	(a5)+,d3
00019BBC D769 0008                  		add.w	d3,8(a1)
00019BC0 361D                       		move.w	(a5)+,d3
00019BC2 D769 000C                  		add.w	d3,$C(a1)
00019BC6 1344 001A                  		move.b	d4,$1A(a1)
00019BCA 5244                       		addq.w	#1,d4
00019BCC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019BD0                            
00019BD0                            Obj83_BreakSnd:
00019BD0 303C 00CB                  		move.w	#$CB,d0
00019BD4 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play smashing sound
00019BDA 4EF9 0000 D58A             		jmp	DisplaySprite
00019BE0                            ; ===========================================================================
00019BE0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019BE4 0120 00C0                  		dc.w $120, $C0
00019BE8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019BEC 0010 0000                  		dc.w $10, 0
00019BF0 0000 0010                  		dc.w 0,	$10
00019BF4 0010 0010                  		dc.w $10, $10
00019BF8                            ; ---------------------------------------------------------------------------
00019BF8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019BF8                            ; ---------------------------------------------------------------------------
00019BF8                            Map_obj83:
00019BF8                            	include "_maps\obj83.asm"
00019BF8                            ; ---------------------------------------------------------------------------
00019BF8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019BF8                            ; ---------------------------------------------------------------------------
00019BF8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019BFC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019C00 0000                       		dc.w byte_19D46-Map_obj83
00019C02 01                         byte_19D1C:	dc.b 1
00019C03 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019C08 02                         byte_19D22:	dc.b 2
00019C09 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019C0E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019C13 00                         		dc.b 0
00019C14 02                         byte_19D2E:	dc.b 2
00019C15 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019C1A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019C1F 00                         		dc.b 0
00019C20 02                         byte_19D3A:	dc.b 2
00019C21 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019C26 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019C2B 00                         		dc.b 0
00019C2C 02                         byte_19D46:	dc.b 2
00019C2D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019C32 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019C38 00                         		even
00019C38 00                         		even
00019C38                            
00019C38                            ; ===========================================================================
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            ; Object 85 - Eggman (FZ)
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            
00019C38                            Obj85_Delete:
00019C38 4EF9 0000 D5C6             		jmp	DeleteObject
00019C3E                            ; ===========================================================================
00019C3E                            
00019C3E                            Obj85:					; XREF: Obj_Index
00019C3E 7000                       		moveq	#0,d0
00019C40 1028 0024                  		move.b	$24(a0),d0
00019C44 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019C48 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019C4C                            ; ===========================================================================
00019C4C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019C4E 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019C50 0000                       		dc.w loc_1A38E-Obj85_Index
00019C52 0000                       		dc.w loc_1A346-Obj85_Index
00019C54 0000                       		dc.w loc_1A2C6-Obj85_Index
00019C56 0000                       		dc.w loc_1A3AC-Obj85_Index
00019C58 0000                       		dc.w loc_1A264-Obj85_Index
00019C5A                            
00019C5A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019C60 0001 991A                  		dc.l Map_obj82		; mappings pointer
00019C64 25B0 0590 0300             		dc.w $25B0, $590, $300
00019C6A 0000 0000                  		dc.l Map_obj84
00019C6E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019C74 0000 0000                  		dc.l Map_FZBoss
00019C78 26E0 0596 0470             		dc.w $26E0, $596, $470
00019C7E 0001 991A                  		dc.l Map_obj82
00019C82 26E0 0596 0400             		dc.w $26E0, $596, $400
00019C88 0001 7BFC                  		dc.l Map_Eggman
00019C8C 26E0 0596 0400             		dc.w $26E0, $596, $400
00019C92 0001 7BFC                  		dc.l Map_Eggman
00019C96                            
00019C96 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019C9B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019CA0 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019CA5 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019CAA 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019CAF 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019CB4                            ; ===========================================================================
00019CB4                            
00019CB4                            Obj85_Main:				; XREF: Obj85_Index
00019CB4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019CB8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019CBC 2248                       		movea.l	a0,a1
00019CBE 7205                       		moveq	#5,d1
00019CC0 6000                       		bra.s	Obj85_LoadBoss
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            Obj85_Loop:
00019CC2 4EB9 0000 DA26             		jsr	SingleObjLoad2
00019CC8 6600                       		bne.s	loc_19E20
00019CCA                            
00019CCA                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019CCA 12BC 0085                  		move.b	#$85,(a1)
00019CCE 335A 0008                  		move.w	(a2)+,8(a1)
00019CD2 335A 000C                  		move.w	(a2)+,$C(a1)
00019CD6 335A 0002                  		move.w	(a2)+,2(a1)
00019CDA 235A 0004                  		move.l	(a2)+,4(a1)
00019CDE 135B 0024                  		move.b	(a3)+,$24(a1)
00019CE2 135B 001C                  		move.b	(a3)+,$1C(a1)
00019CE6 135B 0018                  		move.b	(a3)+,$18(a1)
00019CEA 135B 0017                  		move.b	(a3)+,$17(a1)
00019CEE 135B 0016                  		move.b	(a3)+,$16(a1)
00019CF2 137C 0004 0001             		move.b	#4,1(a1)
00019CF8 08E8 0007 0001             		bset	#7,1(a0)
00019CFE 2348 0034                  		move.l	a0,$34(a1)
00019D02 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019D06                            
00019D06                            loc_19E20:
00019D06 45E8 0036                  		lea	$36(a0),a2
00019D0A 4EB9 0000 DA10             		jsr	SingleObjLoad
00019D10 6600                       		bne.s	loc_19E5A
00019D12 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019D16 3489                       		move.w	a1,(a2)
00019D18 2348 0034                  		move.l	a0,$34(a1)
00019D1C 45E8 0038                  		lea	$38(a0),a2
00019D20 7400                       		moveq	#0,d2
00019D22 7203                       		moveq	#3,d1
00019D24                            
00019D24                            loc_19E3E:
00019D24 4EB9 0000 DA26             		jsr	SingleObjLoad2
00019D2A 6600                       		bne.s	loc_19E5A
00019D2C 34C9                       		move.w	a1,(a2)+
00019D2E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019D32 2348 0034                  		move.l	a0,$34(a1)
00019D36 1342 0028                  		move.b	d2,$28(a1)
00019D3A 5442                       		addq.w	#2,d2
00019D3C 51C9 FFE6                  		dbf	d1,loc_19E3E
00019D40                            
00019D40                            loc_19E5A:
00019D40 317C 0000 0034             		move.w	#0,$34(a0)
00019D46 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019D4C 317C FFFF 0030             		move.w	#-1,$30(a0)
00019D52                            
00019D52                            Obj85_Eggman:				; XREF: Obj85_Index
00019D52 7000                       		moveq	#0,d0
00019D54 1028 0034                  		move.b	$34(a0),d0
00019D58 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019D5C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019D60 4EF9 0000 D58A             		jmp	DisplaySprite
00019D66                            ; ===========================================================================
00019D66 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019D6A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019D6E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019D72 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_19E90:				; XREF: off_19E80
00019D76 4AB8 F680                  		tst.l	($FFFFF680).w
00019D7A 6600                       		bne.s	loc_19EA2
00019D7C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019D82 6500                       		bcs.s	loc_19EA2
00019D84 5428 0034                  		addq.b	#2,$34(a0)
00019D88                            
00019D88                            loc_19EA2:
00019D88 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019D8C 4E75                       		rts	
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            loc_19EA8:				; XREF: off_19E80
00019D8E 4A68 0030                  		tst.w	$30(a0)
00019D92 6A00                       		bpl.s	loc_19F10
00019D94 4268 0030                  		clr.w	$30(a0)
00019D98 4EB9 0000 2992             		jsr	(RandomNumber).l
00019D9E 0240 000C                  		andi.w	#$C,d0
00019DA2 3200                       		move.w	d0,d1
00019DA4 5441                       		addq.w	#2,d1
00019DA6 4A80                       		tst.l	d0
00019DA8 6A00                       		bpl.s	loc_19EC6
00019DAA C141                       		exg	d1,d0
00019DAC                            
00019DAC                            loc_19EC6:
00019DAC 43FA 0000                  		lea	word_19FD6(pc),a1
00019DB0 3031 0000                  		move.w	(a1,d0.w),d0
00019DB4 3231 1000                  		move.w	(a1,d1.w),d1
00019DB8 3140 0030                  		move.w	d0,$30(a0)
00019DBC 74FF                       		moveq	#-1,d2
00019DBE 3430 0038                  		move.w	$38(a0,d0.w),d2
00019DC2 2242                       		movea.l	d2,a1
00019DC4 137C 00FF 0029             		move.b	#-1,$29(a1)
00019DCA 337C FFFF 0030             		move.w	#-1,$30(a1)
00019DD0 3430 1038                  		move.w	$38(a0,d1.w),d2
00019DD4 2242                       		movea.l	d2,a1
00019DD6 137C 0001 0029             		move.b	#1,$29(a1)
00019DDC 337C 0000 0030             		move.w	#0,$30(a1)
00019DE2 317C 0001 0032             		move.w	#1,$32(a0)
00019DE8 4228 0035                  		clr.b	$35(a0)
00019DEC 303C 00B7                  		move.w	#$B7,d0
00019DF0 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play rumbling sound
00019DF6                            
00019DF6                            loc_19F10:
00019DF6 4A68 0032                  		tst.w	$32(a0)
00019DFA 6B00 0000                  		bmi.w	loc_19FA6
00019DFE 08A8 0000 0022             		bclr	#0,$22(a0)
00019E04 3038 D008                  		move.w	($FFFFD008).w,d0
00019E08 9068 0008                  		sub.w	8(a0),d0
00019E0C 6500                       		bcs.s	loc_19F2E
00019E0E 08E8 0000 0022             		bset	#0,$22(a0)
00019E14                            
00019E14                            loc_19F2E:
00019E14 323C 002B                  		move.w	#$2B,d1
00019E18 343C 0014                  		move.w	#$14,d2
00019E1C 363C 0014                  		move.w	#$14,d3
00019E20 3828 0008                  		move.w	8(a0),d4
00019E24 4EB9 0000 F94A             		jsr	SolidObject
00019E2A 4A44                       		tst.w	d4
00019E2C 6E00                       		bgt.s	loc_19F50
00019E2E                            
00019E2E                            loc_19F48:
00019E2E 4A28 0035                  		tst.b	$35(a0)
00019E32 6600                       		bne.s	loc_19F88
00019E34 6000                       		bra.s	loc_19F96
00019E36                            ; ===========================================================================
00019E36                            
00019E36                            loc_19F50:
00019E36 5E78 F636                  		addq.w	#7,($FFFFF636).w
00019E3A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00019E40 66EC                       		bne.s	loc_19F48
00019E42 303C 0300                  		move.w	#$300,d0
00019E46 0828 0000 0022             		btst	#0,$22(a0)
00019E4C 6600                       		bne.s	loc_19F6A
00019E4E 4440                       		neg.w	d0
00019E50                            
00019E50                            loc_19F6A:
00019E50 31C0 D010                  		move.w	d0,($FFFFD010).w
00019E54 4A28 0035                  		tst.b	$35(a0)
00019E58 6600                       		bne.s	loc_19F88
00019E5A 5328 0021                  		subq.b	#1,$21(a0)
00019E5E 117C 0064 0035             		move.b	#$64,$35(a0)
00019E64 303C 00AC                  		move.w	#$AC,d0
00019E68 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019E6E                            
00019E6E                            loc_19F88:
00019E6E 5328 0035                  		subq.b	#1,$35(a0)
00019E72 6700                       		beq.s	loc_19F96
00019E74 117C 0003 001C             		move.b	#3,$1C(a0)
00019E7A 6000                       		bra.s	loc_19F9C
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            loc_19F96:
00019E7C 117C 0001 001C             		move.b	#1,$1C(a0)
00019E82                            
00019E82                            loc_19F9C:
00019E82 43FA FA64                  		lea	Ani_obj82(pc),a1
00019E86 4EF9 0000 A6B6             		jmp	AnimateSprite
00019E8C                            ; ===========================================================================
00019E8C                            
00019E8C                            loc_19FA6:
00019E8C 4A28 0021                  		tst.b	$21(a0)
00019E90 6700                       		beq.s	loc_19FBC
00019E92 5428 0034                  		addq.b	#2,$34(a0)
00019E96 317C FFFF 0030             		move.w	#-1,$30(a0)
00019E9C 4268 0032                  		clr.w	$32(a0)
00019EA0 4E75                       		rts	
00019EA2                            ; ===========================================================================
00019EA2                            
00019EA2                            loc_19FBC:
00019EA2 117C 0006 0034             		move.b	#6,$34(a0)
00019EA8 317C 25C0 0008             		move.w	#$25C0,8(a0)
00019EAE 317C 053C 000C             		move.w	#$53C,$C(a0)
00019EB4 117C 0014 0016             		move.b	#$14,$16(a0)
00019EBA 4E75                       		rts	
00019EBC                            ; ===========================================================================
00019EBC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
00019ECC                            ; ===========================================================================
00019ECC                            
00019ECC                            loc_19FE6:				; XREF: off_19E80
00019ECC 70FF                       		moveq	#-1,d0
00019ECE 3028 0036                  		move.w	$36(a0),d0
00019ED2 2240                       		movea.l	d0,a1
00019ED4 4A68 0030                  		tst.w	$30(a0)
00019ED8 6A00                       		bpl.s	loc_1A000
00019EDA 4268 0030                  		clr.w	$30(a0)
00019EDE 137C 00FF 0029             		move.b	#-1,$29(a1)
00019EE4 6100                       		bsr.s	loc_1A020
00019EE6                            
00019EE6                            loc_1A000:
00019EE6 700F                       		moveq	#$F,d0
00019EE8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019EEC 6600                       		bne.s	loc_1A00A
00019EEE 6100                       		bsr.s	loc_1A020
00019EF0                            
00019EF0                            loc_1A00A:
00019EF0 4A68 0032                  		tst.w	$32(a0)
00019EF4 6700                       		beq.s	locret_1A01E
00019EF6 5528 0034                  		subq.b	#2,$34(a0)
00019EFA 317C FFFF 0030             		move.w	#-1,$30(a0)
00019F00 4268 0032                  		clr.w	$32(a0)
00019F04                            
00019F04                            locret_1A01E:
00019F04 4E75                       		rts	
00019F06                            ; ===========================================================================
00019F06                            
00019F06                            loc_1A020:
00019F06 303C 00B1                  		move.w	#$B1,d0
00019F0A 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play electricity sound
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            loc_1A02A:				; XREF: off_19E80
00019F10 117C 0030 0017             		move.b	#$30,$17(a0)
00019F16 08E8 0000 0022             		bset	#0,$22(a0)
00019F1C 4EB9 0000 D564             		jsr	SpeedToPos
00019F22 117C 0006 001A             		move.b	#6,$1A(a0)
00019F28 0668 0010 0012             		addi.w	#$10,$12(a0)
00019F2E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
00019F34 6500                       		bcs.s	loc_1A070
00019F36 317C 059C 000C             		move.w	#$59C,$C(a0)
00019F3C 5428 0034                  		addq.b	#2,$34(a0)
00019F40 117C 0020 0017             		move.b	#$20,$17(a0)
00019F46 317C 0100 0010             		move.w	#$100,$10(a0)
00019F4C 317C FF00 0012             		move.w	#-$100,$12(a0)
00019F52 5438 F742                  		addq.b	#2,($FFFFF742).w
00019F56                            
00019F56                            loc_1A070:
00019F56 6000 0000                  		bra.w	loc_1A166
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            loc_1A074:				; XREF: off_19E80
00019F5A 08E8 0000 0022             		bset	#0,$22(a0)
00019F60 117C 0004 001C             		move.b	#4,$1C(a0)
00019F66 4EB9 0000 D564             		jsr	SpeedToPos
00019F6C 0668 0010 0012             		addi.w	#$10,$12(a0)
00019F72 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00019F78 6500                       		bcs.s	loc_1A09A
00019F7A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F80                            
00019F80                            loc_1A09A:
00019F80 317C 0400 0010             		move.w	#$400,$10(a0)
00019F86 3028 0008                  		move.w	8(a0),d0
00019F8A 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F8E 6A00                       		bpl.s	loc_1A0B4
00019F90 317C 0500 0010             		move.w	#$500,$10(a0)
00019F96 6000 0000                  		bra.w	loc_1A0F2
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            loc_1A0B4:
00019F9A 0440 0070                  		subi.w	#$70,d0
00019F9E 6500                       		bcs.s	loc_1A0F2
00019FA0 0468 0100 0010             		subi.w	#$100,$10(a0)
00019FA6 5140                       		subq.w	#8,d0
00019FA8 6500                       		bcs.s	loc_1A0F2
00019FAA 0468 0100 0010             		subi.w	#$100,$10(a0)
00019FB0 5140                       		subq.w	#8,d0
00019FB2 6500                       		bcs.s	loc_1A0F2
00019FB4 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FBA 5140                       		subq.w	#8,d0
00019FBC 6500                       		bcs.s	loc_1A0F2
00019FBE 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FC4 5140                       		subq.w	#8,d0
00019FC6 6500                       		bcs.s	loc_1A0F2
00019FC8 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FCE 0440 0038                  		subi.w	#$38,d0
00019FD2 6500                       		bcs.s	loc_1A0F2
00019FD4 4268 0010                  		clr.w	$10(a0)
00019FD8                            
00019FD8                            loc_1A0F2:
00019FD8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
00019FDE 6500                       		bcs.s	loc_1A110
00019FE0 317C 26A0 0008             		move.w	#$26A0,8(a0)
00019FE6 317C 0240 0010             		move.w	#$240,$10(a0)
00019FEC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
00019FF2 5428 0034                  		addq.b	#2,$34(a0)
00019FF6                            
00019FF6                            loc_1A110:
00019FF6 6000                       		bra.s	loc_1A15C
00019FF8                            ; ===========================================================================
00019FF8                            
00019FF8                            loc_1A112:				; XREF: off_19E80
00019FF8 4EB9 0000 D564             		jsr	SpeedToPos
00019FFE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A004 6500                       		bcs.s	loc_1A124
0001A006 4268 0010                  		clr.w	$10(a0)
0001A00A                            
0001A00A                            loc_1A124:
0001A00A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A010 4A68 0012                  		tst.w	$12(a0)
0001A014 6B00                       		bmi.s	loc_1A142
0001A016 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A01C 6500                       		bcs.s	loc_1A142
0001A01E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A024 4268 0012                  		clr.w	$12(a0)
0001A028                            
0001A028                            loc_1A142:
0001A028 3028 0010                  		move.w	$10(a0),d0
0001A02C 8068 0012                  		or.w	$12(a0),d0
0001A030 6600                       		bne.s	loc_1A15C
0001A032 5428 0034                  		addq.b	#2,$34(a0)
0001A036 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A03C 117C 0001 0021             		move.b	#1,$21(a0)
0001A042                            
0001A042                            loc_1A15C:
0001A042 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A046 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A04C                            
0001A04C                            loc_1A166:
0001A04C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A052 6C00                       		bge.s	loc_1A172
0001A054 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A058                            
0001A058                            loc_1A172:
0001A058 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A05E 6C00                       		bge.s	locret_1A190
0001A060 323C 001B                  		move.w	#$1B,d1
0001A064 343C 0070                  		move.w	#$70,d2
0001A068 363C 0071                  		move.w	#$71,d3
0001A06C 3828 0008                  		move.w	8(a0),d4
0001A070 4EF9 0000 F94A             		jmp	SolidObject
0001A076                            ; ===========================================================================
0001A076                            
0001A076                            locret_1A190:
0001A076 4E75                       		rts	
0001A078                            ; ===========================================================================
0001A078                            
0001A078                            loc_1A192:				; XREF: off_19E80
0001A078 217C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a0)
0001A080 317C 0400 0002             		move.w	#$400,2(a0)
0001A086 117C 0000 001C             		move.b	#0,$1C(a0)
0001A08C 08E8 0000 0022             		bset	#0,$22(a0)
0001A092 4EB9 0000 D564             		jsr	SpeedToPos
0001A098 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A09E 6400                       		bcc.s	loc_1A1D0
0001A0A0 317C 0180 0010             		move.w	#$180,$10(a0)
0001A0A6 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A0AC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0B2 5428 0034                  		addq.b	#2,$34(a0)
0001A0B6                            
0001A0B6                            loc_1A1D0:
0001A0B6 6000 FF8A                  		bra.w	loc_1A15C
0001A0BA                            ; ===========================================================================
0001A0BA                            
0001A0BA                            loc_1A1D4:				; XREF: off_19E80
0001A0BA 08E8 0000 0022             		bset	#0,$22(a0)
0001A0C0 4EB9 0000 D564             		jsr	SpeedToPos
0001A0C6 4A68 0030                  		tst.w	$30(a0)
0001A0CA 6600                       		bne.s	loc_1A1FC
0001A0CC 4A28 0020                  		tst.b	$20(a0)
0001A0D0 6600                       		bne.s	loc_1A216
0001A0D2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A0D8 303C 00AC                  		move.w	#$AC,d0
0001A0DC 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A0E2                            
0001A0E2                            loc_1A1FC:
0001A0E2 5368 0030                  		subq.w	#1,$30(a0)
0001A0E6 6600                       		bne.s	loc_1A216
0001A0E8 4A28 0022                  		tst.b	$22(a0)
0001A0EC 6A00                       		bpl.s	loc_1A210
0001A0EE 317C 0060 0012             		move.w	#$60,$12(a0)
0001A0F4 6000                       		bra.s	loc_1A216
0001A0F6                            ; ===========================================================================
0001A0F6                            
0001A0F6                            loc_1A210:
0001A0F6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0FC                            
0001A0FC                            loc_1A216:
0001A0FC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A102 6D00                       		blt.s	loc_1A23A
0001A104 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A10A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A110 4278 D014                  		clr.w	($FFFFD014).w
0001A114 4A68 0012                  		tst.w	$12(a0)
0001A118 6A00                       		bpl.s	loc_1A248
0001A11A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A120                            
0001A120                            loc_1A23A:
0001A120 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A126 6D00                       		blt.s	loc_1A248
0001A128 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A12E                            
0001A12E                            loc_1A248:
0001A12E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A134 6500                       		bcs.s	loc_1A260
0001A136 4A28 0001                  		tst.b	1(a0)
0001A13A 6B00                       		bmi.s	loc_1A260
0001A13C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A142 6000 FAF4                  		bra.w	Obj85_Delete
0001A146                            ; ===========================================================================
0001A146                            
0001A146                            loc_1A260:
0001A146 6000 FEFA                  		bra.w	loc_1A15C
0001A14A                            ; ===========================================================================
0001A14A                            
0001A14A                            loc_1A264:				; XREF: Obj85_Index
0001A14A 2268 0034                  		movea.l	$34(a0),a1
0001A14E 1011                       		move.b	(a1),d0
0001A150 B010                       		cmp.b	(a0),d0
0001A152 6600 FAE4                  		bne.w	Obj85_Delete
0001A156 117C 0007 001C             		move.b	#7,$1C(a0)
0001A15C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A162 6C00                       		bge.s	loc_1A280
0001A164 6000                       		bra.s	loc_1A2A6
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            loc_1A280:
0001A166 4A69 0010                  		tst.w	$10(a1)
0001A16A 6700                       		beq.s	loc_1A28C
0001A16C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A172                            
0001A172                            loc_1A28C:
0001A172 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A176 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A17C                            
0001A17C                            loc_1A296:
0001A17C 2268 0034                  		movea.l	$34(a0),a1
0001A180 3169 0008 0008             		move.w	8(a1),8(a0)
0001A186 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A18C                            
0001A18C                            loc_1A2A6:
0001A18C 2268 0034                  		movea.l	$34(a0),a1
0001A190 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A196 7003                       		moveq	#3,d0
0001A198 C028 0022                  		and.b	$22(a0),d0
0001A19C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A1A2 8128 0001                  		or.b	d0,1(a0)
0001A1A6 4EF9 0000 D58A             		jmp	DisplaySprite
0001A1AC                            ; ===========================================================================
0001A1AC                            
0001A1AC                            loc_1A2C6:				; XREF: Obj85_Index
0001A1AC 2268 0034                  		movea.l	$34(a0),a1
0001A1B0 1011                       		move.b	(a1),d0
0001A1B2 B010                       		cmp.b	(a0),d0
0001A1B4 6600 FA82                  		bne.w	Obj85_Delete
0001A1B8 0CA9 0001 7BFC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A1C0 6700                       		beq.s	loc_1A2E4
0001A1C2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A1C8 60C2                       		bra.s	loc_1A2A6
0001A1CA                            ; ===========================================================================
0001A1CA                            
0001A1CA                            loc_1A2E4:
0001A1CA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A1D0 4A29 0021                  		tst.b	$21(a1)
0001A1D4 6F00                       		ble.s	loc_1A312
0001A1D6 117C 0006 001C             		move.b	#6,$1C(a0)
0001A1DC 217C 0001 7BFC 0004        		move.l	#Map_Eggman,4(a0)
0001A1E4 317C 0400 0002             		move.w	#$400,2(a0)
0001A1EA 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A1EE 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A1F4 6000 FF86                  		bra.w	loc_1A296
0001A1F8                            ; ===========================================================================
0001A1F8                            
0001A1F8                            loc_1A312:
0001A1F8 4A28 0001                  		tst.b	1(a0)
0001A1FC 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A200 6100 D558                  		bsr.w	BossDefeated
0001A204 117C 0002 0018             		move.b	#2,$18(a0)
0001A20A 117C 0000 001C             		move.b	#0,$1C(a0)
0001A210 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A218 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A21E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A222 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A228 6000 FF52                  		bra.w	loc_1A296
0001A22C                            ; ===========================================================================
0001A22C                            
0001A22C                            loc_1A346:				; XREF: Obj85_Index
0001A22C 08E8 0000 0022             		bset	#0,$22(a0)
0001A232 2268 0034                  		movea.l	$34(a0),a1
0001A236 0CA9 0001 7BFC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A23E 6700                       		beq.s	loc_1A35E
0001A240 6000 FF4A                  		bra.w	loc_1A2A6
0001A244                            ; ===========================================================================
0001A244                            
0001A244                            loc_1A35E:
0001A244 3169 0008 0008             		move.w	8(a1),8(a0)
0001A24A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A250 4A28 001E                  		tst.b	$1E(a0)
0001A254 6600                       		bne.s	loc_1A376
0001A256 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A25C                            
0001A25C                            loc_1A376:
0001A25C 5328 001E                  		subq.b	#1,$1E(a0)
0001A260 6E00                       		bgt.s	loc_1A38A
0001A262 5228 001A                  		addq.b	#1,$1A(a0)
0001A266 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A26C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A270                            
0001A270                            loc_1A38A:
0001A270 6000 FF0A                  		bra.w	loc_1A296
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            loc_1A38E:				; XREF: Obj85_Index
0001A274 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A27A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A27E 9068 0008                  		sub.w	8(a0),d0
0001A282 6500                       		bcs.s	loc_1A3A6
0001A284 4A28 0001                  		tst.b	1(a0)
0001A288 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A28C                            
0001A28C                            loc_1A3A6:
0001A28C 4EF9 0000 D58A             		jmp	DisplaySprite
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            loc_1A3AC:				; XREF: Obj85_Index
0001A292 117C 0000 001A             		move.b	#0,$1A(a0)
0001A298 08E8 0000 0022             		bset	#0,$22(a0)
0001A29E 2268 0034                  		movea.l	$34(a0),a1
0001A2A2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A2A8 6600                       		bne.s	loc_1A3D0
0001A2AA 0CA9 0001 7BFC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A2B2 6700 F984                  		beq.w	Obj85_Delete
0001A2B6                            
0001A2B6                            loc_1A3D0:
0001A2B6 6000 FED4                  		bra.w	loc_1A2A6
0001A2BA                            ; ===========================================================================
0001A2BA                            Ani_obj85:
0001A2BA                            	include "_anim\obj85.asm"
0001A2BA                            ; ---------------------------------------------------------------------------
0001A2BA                            ; Animation script - Eggman (FZ)
0001A2BA                            ; ---------------------------------------------------------------------------
0001A2BA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A2BC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A2C0                            		even
0001A2C0                            		even
0001A2C0                            
0001A2C0                            Map_Eggman2:
0001A2C0                            	include "_maps\Eggman2.asm"
0001A2C0                            ; ---------------------------------------------------------------------------
0001A2C0                            ; Sprite mappings - Eggman (FZ)
0001A2C0                            ; ---------------------------------------------------------------------------
0001A2C0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A2C2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A2C4 06                         byte_1A3DE:	dc.b 6
0001A2C5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A2CA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A2CF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A2D4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A2D9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A2DE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A2E3 06                         byte_1A3FD:	dc.b 6
0001A2E4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A2E9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A2EE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A2F3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A2F8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A2FD 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A302                            		even
0001A302                            		even
0001A302                            
0001A302                            Map_FZBoss:
0001A302                            	include "_maps\FZ boss.asm"
0001A302                            ; ---------------------------------------------------------------------------
0001A302                            ; Sprite mappings - boss (FZ)
0001A302                            ; ---------------------------------------------------------------------------
0001A302 0000                       		dc.w byte_1A422-Map_FZBoss
0001A304 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A306 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A308 02                         byte_1A422:	dc.b 2
0001A309 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A30E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A313 03                         byte_1A42D:	dc.b 3
0001A314 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A319 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A31E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A323 02                         byte_1A43D:	dc.b 2
0001A324 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A329 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A32E                            		even
0001A32E                            		even
0001A32E                            
0001A32E                            ; ===========================================================================
0001A32E                            
0001A32E                            Obj84_Delete:
0001A32E 4EF9 0000 D5C6             		jmp	DeleteObject
0001A334                            ; ===========================================================================
0001A334                            ; ---------------------------------------------------------------------------
0001A334                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A334                            ; ---------------------------------------------------------------------------
0001A334                            
0001A334                            Obj84:					; XREF: Obj_Index
0001A334 7000                       		moveq	#0,d0
0001A336 1028 0024                  		move.b	$24(a0),d0
0001A33A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A33E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A342                            ; ===========================================================================
0001A342 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A344 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A346 0000                       		dc.w loc_1A57E-Obj84_Index
0001A348                            
0001A348 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A34C 2550 0620                  		dc.w $2550, $620
0001A350 2490 04C0                  		dc.w $2490, $4C0
0001A354 2510 04C0                  		dc.w $2510, $4C0
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            Obj84_Main:				; XREF: Obj84_Index
0001A358 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A35C 7000                       		moveq	#0,d0
0001A35E 1028 0028                  		move.b	$28(a0),d0
0001A362 D040                       		add.w	d0,d0
0001A364 D2C0                       		adda.w	d0,a1
0001A366 117C 0004 0001             		move.b	#4,1(a0)
0001A36C 08E8 0007 0001             		bset	#7,1(a0)
0001A372 08E8 0004 0001             		bset	#4,1(a0)
0001A378 317C 0300 0002             		move.w	#$300,2(a0)
0001A37E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A386 3159 0008                  		move.w	(a1)+,8(a0)
0001A38A 3151 000C                  		move.w	(a1),$C(a0)
0001A38E 3159 0038                  		move.w	(a1)+,$38(a0)
0001A392 117C 0020 0016             		move.b	#$20,$16(a0)
0001A398 117C 0060 0017             		move.b	#$60,$17(a0)
0001A39E 117C 0020 0019             		move.b	#$20,$19(a0)
0001A3A4 117C 0060 0016             		move.b	#$60,$16(a0)
0001A3AA 117C 0003 0018             		move.b	#3,$18(a0)
0001A3B0 5428 0024                  		addq.b	#2,$24(a0)
0001A3B4                            
0001A3B4                            loc_1A4CE:				; XREF: Obj84_Index
0001A3B4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A3BA 6F00                       		ble.s	loc_1A4DC
0001A3BC 08E8 0001 0001             		bset	#1,1(a0)
0001A3C2                            
0001A3C2                            loc_1A4DC:
0001A3C2 42A8 003C                  		clr.l	$3C(a0)
0001A3C6 4A28 0029                  		tst.b	$29(a0)
0001A3CA 6700                       		beq.s	loc_1A4EA
0001A3CC 5428 0024                  		addq.b	#2,$24(a0)
0001A3D0                            
0001A3D0                            loc_1A4EA:
0001A3D0 2028 003C                  		move.l	$3C(a0),d0
0001A3D4 2228 0038                  		move.l	$38(a0),d1
0001A3D8 D280                       		add.l	d0,d1
0001A3DA 4841                       		swap	d1
0001A3DC 3141 000C                  		move.w	d1,$C(a0)
0001A3E0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A3E6 6600                       		bne.s	loc_1A524
0001A3E8 4A68 0030                  		tst.w	$30(a0)
0001A3EC 6A00                       		bpl.s	loc_1A524
0001A3EE 70F6                       		moveq	#-$A,d0
0001A3F0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A3F6 6F00                       		ble.s	loc_1A514
0001A3F8 700E                       		moveq	#$E,d0
0001A3FA                            
0001A3FA                            loc_1A514:
0001A3FA D240                       		add.w	d0,d1
0001A3FC 2268 0034                  		movea.l	$34(a0),a1
0001A400 3341 000C                  		move.w	d1,$C(a1)
0001A404 3368 0008 0008             		move.w	8(a0),8(a1)
0001A40A                            
0001A40A                            loc_1A524:
0001A40A 323C 002B                  		move.w	#$2B,d1
0001A40E 343C 0060                  		move.w	#$60,d2
0001A412 363C 0061                  		move.w	#$61,d3
0001A416 3828 0008                  		move.w	8(a0),d4
0001A41A 4EB9 0000 F94A             		jsr	SolidObject
0001A420 7000                       		moveq	#0,d0
0001A422 3228 003C                  		move.w	$3C(a0),d1
0001A426 6A00                       		bpl.s	loc_1A550
0001A428 4441                       		neg.w	d1
0001A42A 5141                       		subq.w	#8,d1
0001A42C 6500                       		bcs.s	loc_1A55C
0001A42E 5200                       		addq.b	#1,d0
0001A430 E841                       		asr.w	#4,d1
0001A432 D041                       		add.w	d1,d0
0001A434 6000                       		bra.s	loc_1A55C
0001A436                            ; ===========================================================================
0001A436                            
0001A436                            loc_1A550:
0001A436 0441 0027                  		subi.w	#$27,d1
0001A43A 6500                       		bcs.s	loc_1A55C
0001A43C 5200                       		addq.b	#1,d0
0001A43E E841                       		asr.w	#4,d1
0001A440 D041                       		add.w	d1,d0
0001A442                            
0001A442                            loc_1A55C:
0001A442 1140 001A                  		move.b	d0,$1A(a0)
0001A446 3038 D008                  		move.w	($FFFFD008).w,d0
0001A44A 9068 0008                  		sub.w	8(a0),d0
0001A44E 6B00                       		bmi.s	loc_1A578
0001A450 0440 0140                  		subi.w	#$140,d0
0001A454 6B00                       		bmi.s	loc_1A578
0001A456 4A28 0001                  		tst.b	1(a0)
0001A45A 6A00 FED2                  		bpl.w	Obj84_Delete
0001A45E                            
0001A45E                            loc_1A578:
0001A45E 4EF9 0000 D58A             		jmp	DisplaySprite
0001A464                            ; ===========================================================================
0001A464                            
0001A464                            loc_1A57E:				; XREF: Obj84_Index
0001A464 7000                       		moveq	#0,d0
0001A466 1028 0028                  		move.b	$28(a0),d0
0001A46A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A46E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A472 6000 FF5C                  		bra.w	loc_1A4EA
0001A476                            ; ===========================================================================
0001A476 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A478 0000                       		dc.w loc_1A598-off_1A590
0001A47A 0000                       		dc.w loc_1A604-off_1A590
0001A47C 0000                       		dc.w loc_1A604-off_1A590
0001A47E                            ; ===========================================================================
0001A47E                            
0001A47E                            loc_1A598:				; XREF: off_1A590
0001A47E 4A28 0029                  		tst.b	$29(a0)
0001A482 6600                       		bne.s	loc_1A5D4
0001A484 2268 0034                  		movea.l	$34(a0),a1
0001A488 4A29 0021                  		tst.b	$21(a1)
0001A48C 6600                       		bne.s	loc_1A5B4
0001A48E 6100 D2CA                  		bsr.w	BossDefeated
0001A492 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A49A                            
0001A49A                            loc_1A5B4:
0001A49A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A4A2 6400                       		bcc.s	locret_1A602
0001A4A4 42A8 003C                  		clr.l	$3C(a0)
0001A4A8 2268 0034                  		movea.l	$34(a0),a1
0001A4AC 5369 0032                  		subq.w	#1,$32(a1)
0001A4B0 4269 0030                  		clr.w	$30(a1)
0001A4B4 5528 0024                  		subq.b	#2,$24(a0)
0001A4B8 4E75                       		rts	
0001A4BA                            ; ===========================================================================
0001A4BA                            
0001A4BA                            loc_1A5D4:
0001A4BA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A4C0 6C00                       		bge.s	loc_1A5E4
0001A4C2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A4CA                            
0001A4CA                            loc_1A5E4:
0001A4CA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A4D2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A4D8 6E00                       		bgt.s	locret_1A602
0001A4DA 4268 003E                  		clr.w	$3E(a0)
0001A4DE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A4E4 4228 0029                  		clr.b	$29(a0)
0001A4E8                            
0001A4E8                            locret_1A602:
0001A4E8 4E75                       		rts	
0001A4EA                            ; ===========================================================================
0001A4EA                            
0001A4EA                            loc_1A604:				; XREF: off_1A590
0001A4EA 08E8 0001 0001             		bset	#1,1(a0)
0001A4F0 4A28 0029                  		tst.b	$29(a0)
0001A4F4 6600                       		bne.s	loc_1A646
0001A4F6 2268 0034                  		movea.l	$34(a0),a1
0001A4FA 4A29 0021                  		tst.b	$21(a1)
0001A4FE 6600                       		bne.s	loc_1A626
0001A500 6100 D258                  		bsr.w	BossDefeated
0001A504 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A50C                            
0001A50C                            loc_1A626:
0001A50C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A514 6400                       		bcc.s	locret_1A674
0001A516 42A8 003C                  		clr.l	$3C(a0)
0001A51A 2268 0034                  		movea.l	$34(a0),a1
0001A51E 5369 0032                  		subq.w	#1,$32(a1)
0001A522 4269 0030                  		clr.w	$30(a1)
0001A526 5528 0024                  		subq.b	#2,$24(a0)
0001A52A 4E75                       		rts	
0001A52C                            ; ===========================================================================
0001A52C                            
0001A52C                            loc_1A646:
0001A52C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A532 6D00                       		blt.s	loc_1A656
0001A534 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A53C                            
0001A53C                            loc_1A656:
0001A53C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A544 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A54A 6D00                       		blt.s	locret_1A674
0001A54C 4268 003E                  		clr.w	$3E(a0)
0001A550 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A556 4228 0029                  		clr.b	$29(a0)
0001A55A                            
0001A55A                            locret_1A674:
0001A55A 4E75                       		rts	
0001A55C                            ; ===========================================================================
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            Map_obj84:
0001A55C                            	include "_maps\obj84.asm"
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A560 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A564 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A568 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A56C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A570 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A574 06                         byte_1A68E:	dc.b 6
0001A575 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A57A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A57F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A584 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A589 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A58E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A593 08                         byte_1A6AD:	dc.b 8
0001A594 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A599 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A59E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5A3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A5A8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A5AD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A5B2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A5B7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A5BC 0A                         byte_1A6D6:	dc.b $A
0001A5BD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A5C2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A5C7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5CC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A5D1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A5D6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A5DB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A5E0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A5E5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A5EA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A5EF 0C                         byte_1A709:	dc.b $C
0001A5F0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A5F5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A5FA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5FF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A604 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A609 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A60E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A613 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A618 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A61D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A622 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A627 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A62C 0D                         byte_1A746:	dc.b $D
0001A62D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A632 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A637 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A63C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A641 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A646 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A64B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A650 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A655 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A65A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A65F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A664 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A669 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A66E 0E                         byte_1A788:	dc.b $E
0001A66F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A674 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A679 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A67E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A683 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A688 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A68D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A692 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A697 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A69C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A6A1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A6A6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A6AB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A6B0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A6B5 02                         byte_1A7CF:	dc.b 2
0001A6B6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A6BB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A6C0                            		even
0001A6C0                            		even
0001A6C0                            
0001A6C0                            ; ===========================================================================
0001A6C0                            ; ---------------------------------------------------------------------------
0001A6C0                            ; Object 86 - energy balls (FZ)
0001A6C0                            ; ---------------------------------------------------------------------------
0001A6C0                            
0001A6C0                            Obj86:					; XREF: Obj_Index
0001A6C0 7000                       		moveq	#0,d0
0001A6C2 1028 0024                  		move.b	$24(a0),d0
0001A6C6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A6CA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A6CE                            ; ===========================================================================
0001A6CE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A6D0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A6D2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A6D4 0000                       		dc.w loc_1A962-Obj86_Index
0001A6D6 0000                       		dc.w loc_1A982-Obj86_Index
0001A6D8                            ; ===========================================================================
0001A6D8                            
0001A6D8                            Obj86_Main:				; XREF: Obj86_Index
0001A6D8 317C 2588 0008             		move.w	#$2588,8(a0)
0001A6DE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A6E4 317C 0300 0002             		move.w	#$300,2(a0)
0001A6EA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A6F2 117C 0000 001C             		move.b	#0,$1C(a0)
0001A6F8 117C 0003 0018             		move.b	#3,$18(a0)
0001A6FE 117C 0008 0017             		move.b	#8,$17(a0)
0001A704 117C 0008 0016             		move.b	#8,$16(a0)
0001A70A 117C 0004 0001             		move.b	#4,1(a0)
0001A710 08E8 0007 0001             		bset	#7,1(a0)
0001A716 5428 0024                  		addq.b	#2,$24(a0)
0001A71A                            
0001A71A                            Obj86_Generator:			; XREF: Obj86_Index
0001A71A 2268 0034                  		movea.l	$34(a0),a1
0001A71E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A724 6600                       		bne.s	loc_1A850
0001A726 10BC 003F                  		move.b	#$3F,(a0)
0001A72A 117C 0000 0024             		move.b	#0,$24(a0)
0001A730 4EF9 0000 D58A             		jmp	DisplaySprite
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            loc_1A850:
0001A736 117C 0000 001C             		move.b	#0,$1C(a0)
0001A73C 4A28 0029                  		tst.b	$29(a0)
0001A740 6700                       		beq.s	loc_1A86C
0001A742 5428 0024                  		addq.b	#2,$24(a0)
0001A746 117C 0001 001C             		move.b	#1,$1C(a0)
0001A74C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A752                            
0001A752                            loc_1A86C:
0001A752 323C 0013                  		move.w	#$13,d1
0001A756 343C 0008                  		move.w	#8,d2
0001A75A 363C 0011                  		move.w	#$11,d3
0001A75E 3828 0008                  		move.w	8(a0),d4
0001A762 4EB9 0000 F94A             		jsr	SolidObject
0001A768 3038 D008                  		move.w	($FFFFD008).w,d0
0001A76C 9068 0008                  		sub.w	8(a0),d0
0001A770 6B00                       		bmi.s	loc_1A89A
0001A772 0440 0140                  		subi.w	#$140,d0
0001A776 6B00                       		bmi.s	loc_1A89A
0001A778 4A28 0001                  		tst.b	1(a0)
0001A77C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A780                            
0001A780                            loc_1A89A:
0001A780 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A784 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A78A 4EF9 0000 D58A             		jmp	DisplaySprite
0001A790                            ; ===========================================================================
0001A790                            
0001A790                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001A790 4A28 0029                  		tst.b	$29(a0)
0001A794 6700 0000                  		beq.w	loc_1A954
0001A798 4228 0029                  		clr.b	$29(a0)
0001A79C D068 0030                  		add.w	$30(a0),d0
0001A7A0 0240 001E                  		andi.w	#$1E,d0
0001A7A4 D4C0                       		adda.w	d0,a2
0001A7A6 5868 0030                  		addq.w	#4,$30(a0)
0001A7AA 4268 0032                  		clr.w	$32(a0)
0001A7AE 7403                       		moveq	#3,d2
0001A7B0                            
0001A7B0                            Obj86_Loop:
0001A7B0 4EB9 0000 DA26             		jsr	SingleObjLoad2
0001A7B6 6600 0000                  		bne.w	loc_1A954
0001A7BA 12BC 0086                  		move.b	#$86,(a1)
0001A7BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A7C4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001A7CA 137C 0008 0024             		move.b	#8,$24(a1)
0001A7D0 337C 2300 0002             		move.w	#$2300,2(a1)
0001A7D6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001A7DE 137C 000C 0016             		move.b	#$C,$16(a1)
0001A7E4 137C 000C 0017             		move.b	#$C,$17(a1)
0001A7EA 137C 0000 0020             		move.b	#0,$20(a1)
0001A7F0 137C 0003 0018             		move.b	#3,$18(a1)
0001A7F6 337C 003E 0028             		move.w	#$3E,$28(a1)
0001A7FC 137C 0004 0001             		move.b	#4,1(a1)
0001A802 08E9 0007 0001             		bset	#7,1(a1)
0001A808 2348 0034                  		move.l	a0,$34(a1)
0001A80C 4EB9 0000 2992             		jsr	(RandomNumber).l
0001A812 3228 0032                  		move.w	$32(a0),d1
0001A816 C3FC FFB1                  		muls.w	#-$4F,d1
0001A81A 0641 2578                  		addi.w	#$2578,d1
0001A81E 0240 001F                  		andi.w	#$1F,d0
0001A822 0440 0010                  		subi.w	#$10,d0
0001A826 D041                       		add.w	d1,d0
0001A828 3340 0030                  		move.w	d0,$30(a1)
0001A82C 5268 0032                  		addq.w	#1,$32(a0)
0001A830 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001A836 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001A83A                            
0001A83A                            loc_1A954:
0001A83A 4A68 0032                  		tst.w	$32(a0)
0001A83E 6600                       		bne.s	loc_1A95E
0001A840 5428 0024                  		addq.b	#2,$24(a0)
0001A844                            
0001A844                            loc_1A95E:
0001A844 6000 FF0C                  		bra.w	loc_1A86C
0001A848                            ; ===========================================================================
0001A848                            
0001A848                            loc_1A962:				; XREF: Obj86_Index
0001A848 117C 0002 001C             		move.b	#2,$1C(a0)
0001A84E 4A68 0038                  		tst.w	$38(a0)
0001A852 6600                       		bne.s	loc_1A97E
0001A854 117C 0002 0024             		move.b	#2,$24(a0)
0001A85A 2268 0034                  		movea.l	$34(a0),a1
0001A85E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001A864                            
0001A864                            loc_1A97E:
0001A864 6000 FEEC                  		bra.w	loc_1A86C
0001A868                            ; ===========================================================================
0001A868                            
0001A868                            loc_1A982:				; XREF: Obj86_Index
0001A868 7000                       		moveq	#0,d0
0001A86A 1028 0025                  		move.b	$25(a0),d0
0001A86E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001A872 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001A876 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001A87A 4EB9 0000 A6B6             		jsr	AnimateSprite
0001A880 4EF9 0000 D58A             		jmp	DisplaySprite
0001A886                            ; ===========================================================================
0001A886 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001A888 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001A88A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            loc_1A9A6:				; XREF: Obj86_Index2
0001A88C 3028 0030                  		move.w	$30(a0),d0
0001A890 9068 0008                  		sub.w	8(a0),d0
0001A894 E940                       		asl.w	#4,d0
0001A896 3140 0010                  		move.w	d0,$10(a0)
0001A89A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001A8A0 5428 0025                  		addq.b	#2,$25(a0)
0001A8A4 4E75                       		rts	
0001A8A6                            ; ===========================================================================
0001A8A6                            
0001A8A6                            loc_1A9C0:				; XREF: Obj86_Index2
0001A8A6 4A68 0010                  		tst.w	$10(a0)
0001A8AA 6700                       		beq.s	loc_1A9E6
0001A8AC 4EB9 0000 D564             		jsr	SpeedToPos
0001A8B2 3028 0008                  		move.w	8(a0),d0
0001A8B6 9068 0030                  		sub.w	$30(a0),d0
0001A8BA 6400                       		bcc.s	loc_1A9E6
0001A8BC 4268 0010                  		clr.w	$10(a0)
0001A8C0 D168 0008                  		add.w	d0,8(a0)
0001A8C4 2268 0034                  		movea.l	$34(a0),a1
0001A8C8 5369 0032                  		subq.w	#1,$32(a1)
0001A8CC                            
0001A8CC                            loc_1A9E6:
0001A8CC 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8D2 5368 0028                  		subq.w	#1,$28(a0)
0001A8D6 6600                       		bne.s	locret_1AA1C
0001A8D8 5428 0025                  		addq.b	#2,$25(a0)
0001A8DC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8E2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001A8E8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001A8EE 7000                       		moveq	#0,d0
0001A8F0 3038 D008                  		move.w	($FFFFD008).w,d0
0001A8F4 9068 0008                  		sub.w	8(a0),d0
0001A8F8 3140 0010                  		move.w	d0,$10(a0)
0001A8FC 317C 0140 0012             		move.w	#$140,$12(a0)
0001A902                            
0001A902                            locret_1AA1C:
0001A902 4E75                       		rts	
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            loc_1AA1E:				; XREF: Obj86_Index2
0001A904 4EB9 0000 D564             		jsr	SpeedToPos
0001A90A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001A910 6400                       		bcc.s	loc_1AA34
0001A912 5368 0028                  		subq.w	#1,$28(a0)
0001A916 6700                       		beq.s	loc_1AA34
0001A918 4E75                       		rts	
0001A91A                            ; ===========================================================================
0001A91A                            
0001A91A                            loc_1AA34:
0001A91A 2268 0034                  		movea.l	$34(a0),a1
0001A91E 5369 0038                  		subq.w	#1,$38(a1)
0001A922 6000 FA0A                  		bra.w	Obj84_Delete
0001A926                            ; ===========================================================================
0001A926                            Ani_obj86:
0001A926                            	include "_anim\obj86.asm"
0001A926                            ; ---------------------------------------------------------------------------
0001A926                            ; Animation script - energy ball launcher (FZ)
0001A926                            ; ---------------------------------------------------------------------------
0001A926 0000                       		dc.w byte_1AA46-Ani_obj86
0001A928 0000                       		dc.w byte_1AA4A-Ani_obj86
0001A92A 0000                       		dc.w byte_1AA50-Ani_obj86
0001A92C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001A930 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001A936 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001A93C                            		even
0001A93C                            		even
0001A93C                            
0001A93C                            ; ---------------------------------------------------------------------------
0001A93C                            ; Sprite mappings - energy ball	launcher (FZ)
0001A93C                            ; ---------------------------------------------------------------------------
0001A93C                            Map_obj86:
0001A93C                            	include "_maps\obj86.asm"
0001A93C                            ; ---------------------------------------------------------------------------
0001A93C                            ; Sprite mappings - energy ball	launcher (FZ)
0001A93C                            ; ---------------------------------------------------------------------------
0001A93C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001A940 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001A944 01                         byte_1AA5E:	dc.b 1
0001A945 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001A94A 01                         byte_1AA64:	dc.b 1
0001A94B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001A950 01                         byte_1AA6A:	dc.b 1
0001A951 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001A956 01                         byte_1AA70:	dc.b 1
0001A957 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001A95C                            		even
0001A95C                            		even
0001A95C                            
0001A95C                            Ani_obj86a:
0001A95C                            	include "_anim\obj86a.asm"
0001A95C                            ; ---------------------------------------------------------------------------
0001A95C                            ; Animation script - energy balls (FZ)
0001A95C                            ; ---------------------------------------------------------------------------
0001A95C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001A95E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001A960 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001A96F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001A97E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001A982 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001A98C                            		even
0001A98C                            		even
0001A98C                            
0001A98C                            ; ---------------------------------------------------------------------------
0001A98C                            ; Sprite mappings - energy balls (FZ)
0001A98C                            ; ---------------------------------------------------------------------------
0001A98C                            Map_obj86a:
0001A98C                            	include "_maps\obj86a.asm"
0001A98C                            ; ---------------------------------------------------------------------------
0001A98C                            ; Sprite mappings - energy balls (FZ)
0001A98C                            ; ---------------------------------------------------------------------------
0001A98C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001A990 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001A994 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001A998 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001A99C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001A9A0 0000                       		dc.w byte_1AB20-Map_obj86a
0001A9A2 02                         byte_1AABC:	dc.b 2
0001A9A3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001A9A8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001A9AD 02                         byte_1AAC7:	dc.b 2
0001A9AE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001A9B3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001A9B8 02                         byte_1AAD2:	dc.b 2
0001A9B9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001A9BE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001A9C3 02                         byte_1AADD:	dc.b 2
0001A9C4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001A9C9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001A9CE 02                         byte_1AAE8:	dc.b 2
0001A9CF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001A9D4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001A9D9 02                         byte_1AAF3:	dc.b 2
0001A9DA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001A9DF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001A9E4 01                         byte_1AAFE:	dc.b 1
0001A9E5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001A9EA 01                         byte_1AB04:	dc.b 1
0001A9EB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001A9F0 02                         byte_1AB0A:	dc.b 2
0001A9F1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001A9F6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001A9FB 02                         byte_1AB15:	dc.b 2
0001A9FC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AA01 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AA06 00                         byte_1AB20:	dc.b 0
0001AA08 00                         		even
0001AA08 00                         		even
0001AA08                            
0001AA08                            ; ===========================================================================
0001AA08                            ; ---------------------------------------------------------------------------
0001AA08                            ; Object 3E - prison capsule
0001AA08                            ; ---------------------------------------------------------------------------
0001AA08                            
0001AA08                            Obj3E:					; XREF: Obj_Index
0001AA08 7000                       		moveq	#0,d0
0001AA0A 1028 0024                  		move.b	$24(a0),d0
0001AA0E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AA12 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AA16 3028 0008                  		move.w	8(a0),d0
0001AA1A 0240 FF80                  		andi.w	#$FF80,d0
0001AA1E 3238 F700                  		move.w	($FFFFF700).w,d1
0001AA22 0441 0080                  		subi.w	#$80,d1
0001AA26 0241 FF80                  		andi.w	#$FF80,d1
0001AA2A 9041                       		sub.w	d1,d0
0001AA2C 0C40 0280                  		cmpi.w	#$280,d0
0001AA30 6200                       		bhi.s	Obj3E_Delete
0001AA32 4EF9 0000 D58A             		jmp	DisplaySprite
0001AA38                            ; ===========================================================================
0001AA38                            
0001AA38                            Obj3E_Delete:
0001AA38 4EF9 0000 D5C6             		jmp	DeleteObject
0001AA3E                            ; ===========================================================================
0001AA3E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AA40 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AA42 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AA44 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA46 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA48 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA4A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AA4C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AA4E                            
0001AA4E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AA52 040C 0501                  		dc.b 4,	$C, 5, 1
0001AA56 0610 0403                  		dc.b 6,	$10, 4,	3
0001AA5A 0810 0305                  		dc.b 8,	$10, 3,	5
0001AA5E                            ; ===========================================================================
0001AA5E                            
0001AA5E                            Obj3E_Main:				; XREF: Obj3E_Index
0001AA5E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AA66 317C 049D 0002             		move.w	#$49D,2(a0)
0001AA6C 117C 0004 0001             		move.b	#4,1(a0)
0001AA72 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AA78 7000                       		moveq	#0,d0
0001AA7A 1028 0028                  		move.b	$28(a0),d0
0001AA7E E548                       		lsl.w	#2,d0
0001AA80 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AA84 1159 0024                  		move.b	(a1)+,$24(a0)
0001AA88 1159 0019                  		move.b	(a1)+,$19(a0)
0001AA8C 1159 0018                  		move.b	(a1)+,$18(a0)
0001AA90 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AA94 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AA98 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AA9A 117C 0006 0020             		move.b	#6,$20(a0)
0001AAA0 117C 0008 0021             		move.b	#8,$21(a0)
0001AAA6                            
0001AAA6                            Obj3E_Not02:
0001AAA6 4E75                       		rts	
0001AAA8                            ; ===========================================================================
0001AAA8                            
0001AAA8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AAA8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AAAE 6700                       		beq.s	Obj3E_ChkOpened
0001AAB0 323C 002B                  		move.w	#$2B,d1
0001AAB4 343C 0018                  		move.w	#$18,d2
0001AAB8 363C 0018                  		move.w	#$18,d3
0001AABC 3828 0008                  		move.w	8(a0),d4
0001AAC0 4EF9 0000 F94A             		jmp	SolidObject
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            Obj3E_ChkOpened:
0001AAC6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AACA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AACC 4228 0025                  		clr.b	$25(a0)
0001AAD0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AAD6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AADC                            
0001AADC                            Obj3E_DoOpen:
0001AADC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AAE2 4E75                       		rts	
0001AAE4                            ; ===========================================================================
0001AAE4                            
0001AAE4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AAE4 323C 0017                  		move.w	#$17,d1
0001AAE8 343C 0008                  		move.w	#8,d2
0001AAEC 363C 0008                  		move.w	#8,d3
0001AAF0 3828 0008                  		move.w	8(a0),d4
0001AAF4 4EB9 0000 F94A             		jsr	SolidObject
0001AAFA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AB00 4EB9 0000 A6B6             		jsr	AnimateSprite
0001AB06 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AB0C 4A28 0025                  		tst.b	$25(a0)
0001AB10 6700                       		beq.s	locret_1AC60
0001AB12 5068 000C                  		addq.w	#8,$C(a0)
0001AB16 117C 000A 0024             		move.b	#$A,$24(a0)
0001AB1C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AB22 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AB26 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AB2A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001AB30 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AB36 4228 0025                  		clr.b	$25(a0)
0001AB3A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AB40 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AB46                            
0001AB46                            locret_1AC60:
0001AB46 4E75                       		rts	
0001AB48                            ; ===========================================================================
0001AB48                            
0001AB48                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001AB48 7007                       		moveq	#7,d0
0001AB4A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AB4E 6600                       		bne.s	loc_1ACA0
0001AB50 4EB9 0000 DA10             		jsr	SingleObjLoad
0001AB56 6600                       		bne.s	loc_1ACA0
0001AB58 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AB5C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB62 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB68 4EB9 0000 2992             		jsr	(RandomNumber).l
0001AB6E 7200                       		moveq	#0,d1
0001AB70 1200                       		move.b	d0,d1
0001AB72 E409                       		lsr.b	#2,d1
0001AB74 0441 0020                  		subi.w	#$20,d1
0001AB78 D369 0008                  		add.w	d1,8(a1)
0001AB7C E048                       		lsr.w	#8,d0
0001AB7E E608                       		lsr.b	#3,d0
0001AB80 D169 000C                  		add.w	d0,$C(a1)
0001AB84                            
0001AB84                            loc_1ACA0:
0001AB84 5368 001E                  		subq.w	#1,$1E(a0)
0001AB88 6700                       		beq.s	Obj3E_MakeAnimal
0001AB8A 4E75                       		rts	
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            Obj3E_MakeAnimal:
0001AB8C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001AB92 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001AB98 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB9E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001ABA4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001ABAA 7C07                       		moveq	#7,d6
0001ABAC 3A3C 009A                  		move.w	#$9A,d5
0001ABB0 78E4                       		moveq	#-$1C,d4
0001ABB2                            
0001ABB2                            Obj3E_Loop:
0001ABB2 4EB9 0000 DA10             		jsr	SingleObjLoad
0001ABB8 6600                       		bne.s	locret_1ACF8
0001ABBA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ABBE 3368 0008 0008             		move.w	8(a0),8(a1)
0001ABC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ABCA D969 0008                  		add.w	d4,8(a1)
0001ABCE 5E44                       		addq.w	#7,d4
0001ABD0 3345 0036                  		move.w	d5,$36(a1)
0001ABD4 5145                       		subq.w	#8,d5
0001ABD6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001ABDA                            
0001ABDA                            locret_1ACF8:
0001ABDA 4E75                       		rts	
0001ABDC                            ; ===========================================================================
0001ABDC                            
0001ABDC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001ABDC 7007                       		moveq	#7,d0
0001ABDE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001ABE2 6600                       		bne.s	loc_1AD38
0001ABE4 4EB9 0000 DA10             		jsr	SingleObjLoad
0001ABEA 6600                       		bne.s	loc_1AD38
0001ABEC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ABF0 3368 0008 0008             		move.w	8(a0),8(a1)
0001ABF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ABFC 4EB9 0000 2992             		jsr	(RandomNumber).l
0001AC02 0240 001F                  		andi.w	#$1F,d0
0001AC06 5D40                       		subq.w	#6,d0
0001AC08 4A41                       		tst.w	d1
0001AC0A 6A00                       		bpl.s	loc_1AD2E
0001AC0C 4440                       		neg.w	d0
0001AC0E                            
0001AC0E                            loc_1AD2E:
0001AC0E D169 0008                  		add.w	d0,8(a1)
0001AC12 337C 000C 0036             		move.w	#$C,$36(a1)
0001AC18                            
0001AC18                            loc_1AD38:
0001AC18 5368 001E                  		subq.w	#1,$1E(a0)
0001AC1C 6600                       		bne.s	locret_1AD48
0001AC1E 5428 0024                  		addq.b	#2,$24(a0)
0001AC22 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AC28                            
0001AC28                            locret_1AD48:
0001AC28 4E75                       		rts	
0001AC2A                            ; ===========================================================================
0001AC2A                            
0001AC2A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AC2A 703E                       		moveq	#$3E,d0
0001AC2C 7228                       		moveq	#$28,d1
0001AC2E 7440                       		moveq	#$40,d2
0001AC30 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AC34                            
0001AC34                            Obj3E_FindObj28:
0001AC34 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AC36 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AC38 D2C2                       		adda.w	d2,a1		; next object RAM
0001AC3A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AC3E                            
0001AC3E 4EB9 0000 EC06             		jsr	GotThroughAct
0001AC44 4EF9 0000 D5C6             		jmp	DeleteObject
0001AC4A                            ; ===========================================================================
0001AC4A                            
0001AC4A                            Obj3E_Obj28Found:
0001AC4A 4E75                       		rts	
0001AC4C                            ; ===========================================================================
0001AC4C                            Ani_obj3E:
0001AC4C                            	include "_anim\obj3E.asm"
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            ; Animation script - prison capsule
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AC4E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AC50 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AC54                            		even
0001AC54                            		even
0001AC54                            
0001AC54                            ; ---------------------------------------------------------------------------
0001AC54                            ; Sprite mappings - prison capsule
0001AC54                            ; ---------------------------------------------------------------------------
0001AC54                            Map_obj3E:
0001AC54                            	include "_maps\obj3E.asm"
0001AC54                            ; ---------------------------------------------------------------------------
0001AC54                            ; Sprite mappings - prison capsule
0001AC54                            ; ---------------------------------------------------------------------------
0001AC54 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AC58 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AC5C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AC60 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AC62 07                         byte_1AD82:	dc.b 7
0001AC63 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AC68 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AC6D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AC72 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AC77 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AC7C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AC81 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AC86 01                         byte_1ADA6:	dc.b 1
0001AC87 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001AC8C 06                         byte_1ADAC:	dc.b 6
0001AC8D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001AC92 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001AC97 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001AC9C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001ACA1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ACA6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ACAB 01                         byte_1ADCB:	dc.b 1
0001ACAC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001ACB1 02                         byte_1ADD1:	dc.b 2
0001ACB2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001ACB7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001ACBC 01                         byte_1ADDC:	dc.b 1
0001ACBD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001ACC2 00                         byte_1ADE2:	dc.b 0
0001ACC4 00                         		even
0001ACC4 00                         		even
0001ACC4                            
0001ACC4                            ; ---------------------------------------------------------------------------
0001ACC4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001ACC4                            ; ---------------------------------------------------------------------------
0001ACC4                            
0001ACC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ACC4                            
0001ACC4                            
0001ACC4                            TouchResponse:				; XREF: Obj01
0001ACC4 4E71                       		nop	
0001ACC6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001ACCA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001ACCE 5142                       		subq.w	#8,d2
0001ACD0 7A00                       		moveq	#0,d5
0001ACD2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001ACD6 5705                       		subq.b	#3,d5
0001ACD8 9645                       		sub.w	d5,d3
0001ACDA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001ACE0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001ACE2 0643 000C                  		addi.w	#$C,d3
0001ACE6 7A0A                       		moveq	#$A,d5
0001ACE8                            
0001ACE8                            Touch_NoDuck:
0001ACE8 383C 0010                  		move.w	#$10,d4
0001ACEC DA45                       		add.w	d5,d5
0001ACEE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001ACF2 3C3C 005F                  		move.w	#$5F,d6
0001ACF6                            
0001ACF6                            Touch_Loop:
0001ACF6 4A29 0001                  		tst.b	1(a1)
0001ACFA 6A00                       		bpl.s	Touch_NextObj
0001ACFC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AD00 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AD02                            
0001AD02                            Touch_NextObj:
0001AD02 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AD06 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AD0A                            
0001AD0A 7000                       		moveq	#0,d0
0001AD0C 4E75                       		rts	
0001AD0E                            ; ===========================================================================
0001AD0E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AD10 0C14                       		dc.b   $C, $14
0001AD12 140C                       		dc.b  $14,  $C
0001AD14 0410                       		dc.b	4, $10
0001AD16 0C12                       		dc.b   $C, $12
0001AD18 1010                       		dc.b  $10, $10
0001AD1A 0606                       		dc.b	6,   6
0001AD1C 180C                       		dc.b  $18,  $C
0001AD1E 0C10                       		dc.b   $C, $10
0001AD20 100C                       		dc.b  $10,  $C
0001AD22 0808                       		dc.b	8,   8
0001AD24 1410                       		dc.b  $14, $10
0001AD26 1408                       		dc.b  $14,   8
0001AD28 0E0E                       		dc.b   $E,  $E
0001AD2A 1818                       		dc.b  $18, $18
0001AD2C 2810                       		dc.b  $28, $10
0001AD2E 1018                       		dc.b  $10, $18
0001AD30 0810                       		dc.b	8, $10
0001AD32 2070                       		dc.b  $20, $70
0001AD34 4020                       		dc.b  $40, $20
0001AD36 8020                       		dc.b  $80, $20
0001AD38 2020                       		dc.b  $20, $20
0001AD3A 0808                       		dc.b	8,   8
0001AD3C 0404                       		dc.b	4,   4
0001AD3E 2008                       		dc.b  $20,   8
0001AD40 0C0C                       		dc.b   $C,  $C
0001AD42 0804                       		dc.b	8,   4
0001AD44 1804                       		dc.b  $18,   4
0001AD46 2804                       		dc.b  $28,   4
0001AD48 0408                       		dc.b	4,   8
0001AD4A 0418                       		dc.b	4, $18
0001AD4C 0428                       		dc.b	4, $28
0001AD4E 0420                       		dc.b	4, $20
0001AD50 1818                       		dc.b  $18, $18
0001AD52 0C18                       		dc.b   $C, $18
0001AD54 4808                       		dc.b  $48,   8
0001AD56                            ; ===========================================================================
0001AD56                            
0001AD56                            Touch_Height:				; XREF: TouchResponse
0001AD56 0240 003F                  		andi.w	#$3F,d0
0001AD5A D040                       		add.w	d0,d0
0001AD5C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AD60 7200                       		moveq	#0,d1
0001AD62 121A                       		move.b	(a2)+,d1
0001AD64 3029 0008                  		move.w	8(a1),d0
0001AD68 9041                       		sub.w	d1,d0
0001AD6A 9042                       		sub.w	d2,d0
0001AD6C 6400                       		bcc.s	loc_1AE98
0001AD6E D241                       		add.w	d1,d1
0001AD70 D041                       		add.w	d1,d0
0001AD72 6500                       		bcs.s	Touch_Width
0001AD74 6000 FF8C                  		bra.w	Touch_NextObj
0001AD78                            ; ===========================================================================
0001AD78                            
0001AD78                            loc_1AE98:
0001AD78 B044                       		cmp.w	d4,d0
0001AD7A 6200 FF86                  		bhi.w	Touch_NextObj
0001AD7E                            
0001AD7E                            Touch_Width:
0001AD7E 7200                       		moveq	#0,d1
0001AD80 121A                       		move.b	(a2)+,d1
0001AD82 3029 000C                  		move.w	$C(a1),d0
0001AD86 9041                       		sub.w	d1,d0
0001AD88 9043                       		sub.w	d3,d0
0001AD8A 6400                       		bcc.s	loc_1AEB6
0001AD8C D241                       		add.w	d1,d1
0001AD8E D240                       		add.w	d0,d1
0001AD90 6500                       		bcs.s	Touch_ChkValue
0001AD92 6000 FF6E                  		bra.w	Touch_NextObj
0001AD96                            ; ===========================================================================
0001AD96                            
0001AD96                            loc_1AEB6:
0001AD96 B045                       		cmp.w	d5,d0
0001AD98 6200 FF68                  		bhi.w	Touch_NextObj
0001AD9C                            
0001AD9C                            Touch_ChkValue:
0001AD9C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001ADA0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001ADA4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001ADA8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001ADAC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001ADB0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001ADB2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001ADB6                            
0001ADB6                            ; touch	response is $40-$7F
0001ADB6                            
0001ADB6 1029 0020                  		move.b	$20(a1),d0
0001ADBA 0200 003F                  		andi.b	#$3F,d0
0001ADBE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001ADC2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001ADC4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001ADCA 6400 0000                  		bcc.w	locret_1AEF2
0001ADCE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001ADD2                            
0001ADD2                            locret_1AEF2:
0001ADD2 4E75                       		rts	
0001ADD4                            ; ===========================================================================
0001ADD4                            
0001ADD4                            Touch_Monitor:
0001ADD4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001ADD8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001ADDA 3028 000C                  		move.w	$C(a0),d0
0001ADDE 0440 0010                  		subi.w	#$10,d0
0001ADE2 B069 000C                  		cmp.w	$C(a1),d0
0001ADE6 6500                       		bcs.s	locret_1AF2E
0001ADE8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001ADEC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001ADF2 4A29 0025                  		tst.b	$25(a1)
0001ADF6 6600                       		bne.s	locret_1AF2E
0001ADF8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001ADFC 4E75                       		rts	
0001ADFE                            ; ===========================================================================
0001ADFE                            
0001ADFE                            loc_1AF1E:
0001ADFE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001AE04 6600                       		bne.s	locret_1AF2E
0001AE06 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AE0A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001AE0E                            
0001AE0E                            locret_1AF2E:
0001AE0E 4E75                       		rts	
0001AE10                            ; ===========================================================================
0001AE10                            
0001AE10                            Touch_Enemy:				; XREF: Touch_ChkValue
0001AE10 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AE14 6600                       		bne.s	loc_1AF40	; if yes, branch
0001AE16 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001AE1C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001AE20                            
0001AE20                            loc_1AF40:
0001AE20 4A29 0021                  		tst.b	$21(a1)
0001AE24 6700                       		beq.s	Touch_KillEnemy
0001AE26 4468 0010                  		neg.w	$10(a0)
0001AE2A 4468 0012                  		neg.w	$12(a0)
0001AE2E E0E8 0010                  		asr	$10(a0)
0001AE32 E0E8 0012                  		asr	$12(a0)
0001AE36 137C 0000 0020             		move.b	#0,$20(a1)
0001AE3C 5329 0021                  		subq.b	#1,$21(a1)
0001AE40 6600                       		bne.s	locret_1AF68
0001AE42 08E9 0007 0022             		bset	#7,$22(a1)
0001AE48                            
0001AE48                            locret_1AF68:
0001AE48 4E75                       		rts	
0001AE4A                            ; ===========================================================================
0001AE4A                            
0001AE4A                            Touch_KillEnemy:
0001AE4A 08E9 0007 0022             		bset	#7,$22(a1)
0001AE50 7000                       		moveq	#0,d0
0001AE52 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001AE56 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001AE5A 0C40 0006                  		cmpi.w	#6,d0
0001AE5E 6500                       		bcs.s	loc_1AF82
0001AE60 7006                       		moveq	#6,d0
0001AE62                            
0001AE62                            loc_1AF82:
0001AE62 3340 003E                  		move.w	d0,$3E(a1)
0001AE66 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001AE6A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001AE70 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001AE72 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001AE76 337C 000A 003E             		move.w	#$A,$3E(a1)
0001AE7C                            
0001AE7C                            loc_1AF9C:
0001AE7C 6100 0000                  		bsr.w	AddPoints
0001AE80 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001AE84 137C 0000 0024             		move.b	#0,$24(a1)
0001AE8A 4A68 0012                  		tst.w	$12(a0)
0001AE8E 6B00                       		bmi.s	loc_1AFC2
0001AE90 3028 000C                  		move.w	$C(a0),d0
0001AE94 B069 000C                  		cmp.w	$C(a1),d0
0001AE98 6400                       		bcc.s	loc_1AFCA
0001AE9A 4468 0012                  		neg.w	$12(a0)
0001AE9E 4E75                       		rts	
0001AEA0                            ; ===========================================================================
0001AEA0                            
0001AEA0                            loc_1AFC2:
0001AEA0 0668 0100 0012             		addi.w	#$100,$12(a0)
0001AEA6 4E75                       		rts	
0001AEA8                            ; ===========================================================================
0001AEA8                            
0001AEA8                            loc_1AFCA:
0001AEA8 0468 0100 0012             		subi.w	#$100,$12(a0)
0001AEAE 4E75                       		rts	
0001AEB0                            ; ===========================================================================
0001AEB0 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001AEB8                            ; ===========================================================================
0001AEB8                            
0001AEB8                            loc_1AFDA:				; XREF: Touch_CatKiller
0001AEB8 08E9 0007 0022             		bset	#7,$22(a1)
0001AEBE                            
0001AEBE                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001AEBE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AEC2 6700                       		beq.s	Touch_Hurt	; if not, branch
0001AEC4                            
0001AEC4                            loc_1AFE6:				; XREF: Touch_Hurt
0001AEC4 70FF                       		moveq	#-1,d0
0001AEC6 4E75                       		rts	
0001AEC8                            ; ===========================================================================
0001AEC8                            
0001AEC8                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001AEC8 4E71                       		nop	
0001AECA 4A68 0030                  		tst.w	$30(a0)
0001AECE 66F4                       		bne.s	loc_1AFE6
0001AED0 2449                       		movea.l	a1,a2
0001AED2                            
0001AED2                            ; End of function TouchResponse
0001AED2                            ; continue straight to HurtSonic
0001AED2                            
0001AED2                            ; ---------------------------------------------------------------------------
0001AED2                            ; Hurting Sonic	subroutine
0001AED2                            ; ---------------------------------------------------------------------------
0001AED2                            
0001AED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AED2                            
0001AED2                            
0001AED2                            HurtSonic:
0001AED2 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001AED6 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001AED8 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001AEDC 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001AEE0 4EB9 0000 DA10             		jsr	SingleObjLoad
0001AEE6 6600                       		bne.s	Hurt_Shield
0001AEE8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001AEEC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AEF8                            
0001AEF8                            Hurt_Shield:
0001AEF8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001AEFE 117C 0004 0024             		move.b	#4,$24(a0)
0001AF04 6100 87D6                  		bsr.w	Sonic_ResetOnFloor
0001AF08 08E8 0001 0022             		bset	#1,$22(a0)
0001AF0E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001AF14 317C FE00 0010             		move.w	#-$200,$10(a0)
0001AF1A 0828 0006 0022             		btst	#6,$22(a0)
0001AF20 6700                       		beq.s	Hurt_Reverse
0001AF22 317C FE00 0012             		move.w	#-$200,$12(a0)
0001AF28 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AF2E                            
0001AF2E                            Hurt_Reverse:
0001AF2E 3028 0008                  		move.w	8(a0),d0
0001AF32 B06A 0008                  		cmp.w	8(a2),d0
0001AF36 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001AF38 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001AF3C                            
0001AF3C                            Hurt_ChkSpikes:
0001AF3C 317C 0000 0014             		move.w	#0,$14(a0)
0001AF42 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001AF48 317C 0078 0030             		move.w	#$78,$30(a0)
0001AF4E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001AF52 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001AF56 6600                       		bne.s	Hurt_Sound	; if not, branch
0001AF58 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001AF5C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001AF5E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001AF62                            
0001AF62                            Hurt_Sound:
0001AF62 4EB9 0000 137A             		jsr	(PlaySound_Special).l
0001AF68 70FF                       		moveq	#-1,d0
0001AF6A 4E75                       		rts	
0001AF6C                            ; ===========================================================================
0001AF6C                            
0001AF6C                            Hurt_NoRings:
0001AF6C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001AF70 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001AF74                            ; End of function HurtSonic
0001AF74                            
0001AF74                            ; ---------------------------------------------------------------------------
0001AF74                            ; Subroutine to	kill Sonic
0001AF74                            ; ---------------------------------------------------------------------------
0001AF74                            
0001AF74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AF74                            
0001AF74                            
0001AF74                            KillSonic:
0001AF74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001AF78 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001AF7A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001AF80 117C 0006 0024             		move.b	#6,$24(a0)
0001AF86 6100 8754                  		bsr.w	Sonic_ResetOnFloor
0001AF8A 08E8 0001 0022             		bset	#1,$22(a0)
0001AF90 317C F900 0012             		move.w	#-$700,$12(a0)
0001AF96 317C 0000 0010             		move.w	#0,$10(a0)
0001AF9C 317C 0000 0014             		move.w	#0,$14(a0)
0001AFA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AFA8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001AFAE 08E8 0007 0002             		bset	#7,2(a0)
0001AFB4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001AFB8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001AFBC 6600                       		bne.s	Kill_Sound
0001AFBE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001AFC2                            
0001AFC2                            Kill_Sound:
0001AFC2 4EB9 0000 137A             		jsr	(PlaySound_Special).l
0001AFC8                            
0001AFC8                            Kill_NoDeath:
0001AFC8 70FF                       		moveq	#-1,d0
0001AFCA 4E75                       		rts	
0001AFCC                            ; End of function KillSonic
0001AFCC                            
0001AFCC                            
0001AFCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AFCC                            
0001AFCC                            
0001AFCC                            Touch_Special:				; XREF: Touch_ChkValue
0001AFCC 1229 0020                  		move.b	$20(a1),d1
0001AFD0 0201 003F                  		andi.b	#$3F,d1
0001AFD4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001AFD8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001AFDA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001AFDE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001AFE0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001AFE4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001AFE6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001AFEA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001AFEC 4E75                       		rts	
0001AFEE                            ; ===========================================================================
0001AFEE                            
0001AFEE                            Touch_CatKiller:			; XREF: Touch_Special
0001AFEE 6000 FEC8                  		bra.w	loc_1AFDA
0001AFF2                            ; ===========================================================================
0001AFF2                            
0001AFF2                            Touch_Yadrin:				; XREF: Touch_Special
0001AFF2 9A40                       		sub.w	d0,d5
0001AFF4 0C45 0008                  		cmpi.w	#8,d5
0001AFF8 6400                       		bcc.s	loc_1B144
0001AFFA 3029 0008                  		move.w	8(a1),d0
0001AFFE 5940                       		subq.w	#4,d0
0001B000 0829 0000 0022             		btst	#0,$22(a1)
0001B006 6700                       		beq.s	loc_1B130
0001B008 0440 0010                  		subi.w	#$10,d0
0001B00C                            
0001B00C                            loc_1B130:
0001B00C 9042                       		sub.w	d2,d0
0001B00E 6400                       		bcc.s	loc_1B13C
0001B010 0640 0018                  		addi.w	#$18,d0
0001B014 6500                       		bcs.s	loc_1B140
0001B016 6000                       		bra.s	loc_1B144
0001B018                            ; ===========================================================================
0001B018                            
0001B018                            loc_1B13C:
0001B018 B044                       		cmp.w	d4,d0
0001B01A 6200                       		bhi.s	loc_1B144
0001B01C                            
0001B01C                            loc_1B140:
0001B01C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B020                            ; ===========================================================================
0001B020                            
0001B020                            loc_1B144:
0001B020 6000 FDEE                  		bra.w	Touch_Enemy
0001B024                            ; ===========================================================================
0001B024                            
0001B024                            Touch_D7orE1:				; XREF: Touch_Special
0001B024 5229 0021                  		addq.b	#1,$21(a1)
0001B028 4E75                       		rts	
0001B02A                            ; End of function Touch_Special
0001B02A                            
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            ; Subroutine to	show the special stage layout
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            
0001B02A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B02A                            
0001B02A                            
0001B02A                            SS_ShowLayout:				; XREF: SpecialStage
0001B02A 6100 0000                  		bsr.w	SS_AniWallsRings
0001B02E 6100 0000                  		bsr.w	SS_AniItems
0001B032 3F05                       		move.w	d5,-(sp)
0001B034 43F8 8000                  		lea	($FFFF8000).w,a1
0001B038 1038 F780                  		move.b	($FFFFF780).w,d0
0001B03C 0200 00FC                  		andi.b	#$FC,d0
0001B040 4EB9 0000 29B8             		jsr	(CalcSine).l
0001B046 3800                       		move.w	d0,d4
0001B048 3A01                       		move.w	d1,d5
0001B04A C9FC 0018                  		muls.w	#$18,d4
0001B04E CBFC 0018                  		muls.w	#$18,d5
0001B052 7400                       		moveq	#0,d2
0001B054 3438 F700                  		move.w	($FFFFF700).w,d2
0001B058 84FC 0018                  		divu.w	#$18,d2
0001B05C 4842                       		swap	d2
0001B05E 4442                       		neg.w	d2
0001B060 0642 FF4C                  		addi.w	#-$B4,d2
0001B064 7600                       		moveq	#0,d3
0001B066 3638 F704                  		move.w	($FFFFF704).w,d3
0001B06A 86FC 0018                  		divu.w	#$18,d3
0001B06E 4843                       		swap	d3
0001B070 4443                       		neg.w	d3
0001B072 0643 FF4C                  		addi.w	#-$B4,d3
0001B076 3E3C 000F                  		move.w	#$F,d7
0001B07A                            
0001B07A                            loc_1B19E:
0001B07A 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B07E 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B082 4440                       		neg.w	d0
0001B084 C3C2                       		muls.w	d2,d1
0001B086 C1C3                       		muls.w	d3,d0
0001B088 2C00                       		move.l	d0,d6
0001B08A DC81                       		add.l	d1,d6
0001B08C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B090 C1C2                       		muls.w	d2,d0
0001B092 C3C3                       		muls.w	d3,d1
0001B094 D280                       		add.l	d0,d1
0001B096 2406                       		move.l	d6,d2
0001B098 3C3C 000F                  		move.w	#$F,d6
0001B09C                            
0001B09C                            loc_1B1C0:
0001B09C 2002                       		move.l	d2,d0
0001B09E E080                       		asr.l	#8,d0
0001B0A0 32C0                       		move.w	d0,(a1)+
0001B0A2 2001                       		move.l	d1,d0
0001B0A4 E080                       		asr.l	#8,d0
0001B0A6 32C0                       		move.w	d0,(a1)+
0001B0A8 D485                       		add.l	d5,d2
0001B0AA D284                       		add.l	d4,d1
0001B0AC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B0B0                            
0001B0B0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B0B4 0643 0018                  		addi.w	#$18,d3
0001B0B8 51CF FFC0                  		dbf	d7,loc_1B19E
0001B0BC                            
0001B0BC 3A1F                       		move.w	(sp)+,d5
0001B0BE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B0C4 7000                       		moveq	#0,d0
0001B0C6 3038 F704                  		move.w	($FFFFF704).w,d0
0001B0CA 80FC 0018                  		divu.w	#$18,d0
0001B0CE C0FC 0080                  		mulu.w	#$80,d0
0001B0D2 D1C0                       		adda.l	d0,a0
0001B0D4 7000                       		moveq	#0,d0
0001B0D6 3038 F700                  		move.w	($FFFFF700).w,d0
0001B0DA 80FC 0018                  		divu.w	#$18,d0
0001B0DE D0C0                       		adda.w	d0,a0
0001B0E0 49F8 8000                  		lea	($FFFF8000).w,a4
0001B0E4 3E3C 000F                  		move.w	#$F,d7
0001B0E8                            
0001B0E8                            loc_1B20C:
0001B0E8 3C3C 000F                  		move.w	#$F,d6
0001B0EC                            
0001B0EC                            loc_1B210:
0001B0EC 7000                       		moveq	#0,d0
0001B0EE 1018                       		move.b	(a0)+,d0
0001B0F0 6700                       		beq.s	loc_1B268
0001B0F2 0C00 004E                  		cmpi.b	#$4E,d0
0001B0F6 6200                       		bhi.s	loc_1B268
0001B0F8 3614                       		move.w	(a4),d3
0001B0FA 0643 0120                  		addi.w	#$120,d3
0001B0FE 0C43 0070                  		cmpi.w	#$70,d3
0001B102 6500                       		bcs.s	loc_1B268
0001B104 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B108 6400                       		bcc.s	loc_1B268
0001B10A 342C 0002                  		move.w	2(a4),d2
0001B10E 0642 00F0                  		addi.w	#$F0,d2
0001B112 0C42 0070                  		cmpi.w	#$70,d2
0001B116 6500                       		bcs.s	loc_1B268
0001B118 0C42 0170                  		cmpi.w	#$170,d2
0001B11C 6400                       		bcc.s	loc_1B268
0001B11E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B124 E748                       		lsl.w	#3,d0
0001B126 4BF5 0000                  		lea	(a5,d0.w),a5
0001B12A 225D                       		movea.l	(a5)+,a1
0001B12C 321D                       		move.w	(a5)+,d1
0001B12E D241                       		add.w	d1,d1
0001B130 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B134 365D                       		movea.w	(a5)+,a3
0001B136 7200                       		moveq	#0,d1
0001B138 1219                       		move.b	(a1)+,d1
0001B13A 5301                       		subq.b	#1,d1
0001B13C 6B00                       		bmi.s	loc_1B268
0001B13E 4EB9 0000 D6E8             		jsr	sub_D762
0001B144                            
0001B144                            loc_1B268:
0001B144 584C                       		addq.w	#4,a4
0001B146 51CE FFA4                  		dbf	d6,loc_1B210
0001B14A                            
0001B14A 41E8 0070                  		lea	$70(a0),a0
0001B14E 51CF FF98                  		dbf	d7,loc_1B20C
0001B152                            
0001B152 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B156 0C05 0050                  		cmpi.b	#$50,d5
0001B15A 6700                       		beq.s	loc_1B288
0001B15C 24BC 0000 0000             		move.l	#0,(a2)
0001B162 4E75                       		rts	
0001B164                            ; ===========================================================================
0001B164                            
0001B164                            loc_1B288:
0001B164 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B16A 4E75                       		rts	
0001B16C                            ; End of function SS_ShowLayout
0001B16C                            
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C                            ; Subroutine to	animate	walls and rings	in the special stage
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C                            
0001B16C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B16C                            
0001B16C                            
0001B16C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B16C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B172 7000                       		moveq	#0,d0
0001B174 1038 F780                  		move.b	($FFFFF780).w,d0
0001B178 E408                       		lsr.b	#2,d0
0001B17A 0240 000F                  		andi.w	#$F,d0
0001B17E 7223                       		moveq	#$23,d1
0001B180                            
0001B180                            loc_1B2A4:
0001B180 3280                       		move.w	d0,(a1)
0001B182 5049                       		addq.w	#8,a1
0001B184 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B188                            
0001B188 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B18E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B192 6A00                       		bpl.s	loc_1B2C8
0001B194 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B19A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B19E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B1A4                            
0001B1A4                            loc_1B2C8:
0001B1A4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B1AA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B1AE 6A00                       		bpl.s	loc_1B2E4
0001B1B0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B1B6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B1BA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B1C0                            
0001B1C0                            loc_1B2E4:
0001B1C0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B1C4 1340 0138                  		move.b	d0,$138(a1)
0001B1C8 1340 0160                  		move.b	d0,$160(a1)
0001B1CC 1340 0148                  		move.b	d0,$148(a1)
0001B1D0 1340 0150                  		move.b	d0,$150(a1)
0001B1D4 1340 01D8                  		move.b	d0,$1D8(a1)
0001B1D8 1340 01E0                  		move.b	d0,$1E0(a1)
0001B1DC 1340 01E8                  		move.b	d0,$1E8(a1)
0001B1E0 1340 01F0                  		move.b	d0,$1F0(a1)
0001B1E4 1340 01F8                  		move.b	d0,$1F8(a1)
0001B1E8 1340 0200                  		move.b	d0,$200(a1)
0001B1EC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B1F0 6A00                       		bpl.s	loc_1B326
0001B1F2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B1F8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B1FC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B202                            
0001B202                            loc_1B326:
0001B202 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B206 1340 0168                  		move.b	d0,$168(a1)
0001B20A 1340 0170                  		move.b	d0,$170(a1)
0001B20E 1340 0178                  		move.b	d0,$178(a1)
0001B212 1340 0180                  		move.b	d0,$180(a1)
0001B216 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B21A 6A00                       		bpl.s	loc_1B350
0001B21C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B222 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B226 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B22C                            
0001B22C                            loc_1B350:
0001B22C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B232 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B238 7000                       		moveq	#0,d0
0001B23A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B23E D040                       		add.w	d0,d0
0001B240 41F0 0000                  		lea	(a0,d0.w),a0
0001B244 3290                       		move.w	(a0),(a1)
0001B246 3368 0002 0008             		move.w	2(a0),8(a1)
0001B24C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B252 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B258 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B25E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B264 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B26A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B270 D0FC 0020                  		adda.w	#$20,a0
0001B274 D2FC 0048                  		adda.w	#$48,a1
0001B278 3290                       		move.w	(a0),(a1)
0001B27A 3368 0002 0008             		move.w	2(a0),8(a1)
0001B280 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B286 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B28C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B292 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B298 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B29E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B2A4 D0FC 0020                  		adda.w	#$20,a0
0001B2A8 D2FC 0048                  		adda.w	#$48,a1
0001B2AC 3290                       		move.w	(a0),(a1)
0001B2AE 3368 0002 0008             		move.w	2(a0),8(a1)
0001B2B4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B2BA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B2C0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B2C6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B2CC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B2D2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B2D8 D0FC 0020                  		adda.w	#$20,a0
0001B2DC D2FC 0048                  		adda.w	#$48,a1
0001B2E0 3290                       		move.w	(a0),(a1)
0001B2E2 3368 0002 0008             		move.w	2(a0),8(a1)
0001B2E8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B2EE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B2F4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B2FA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B300 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B306 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B30C D0FC 0020                  		adda.w	#$20,a0
0001B310 D2FC 0048                  		adda.w	#$48,a1
0001B314 4E75                       		rts	
0001B316                            ; End of function SS_AniWallsRings
0001B316                            
0001B316                            ; ===========================================================================
0001B316 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B326 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B336 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B346 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B356 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B366 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B376 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B386 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B396                            ; ---------------------------------------------------------------------------
0001B396                            ; Subroutine to	remove items when you collect them in the special stage
0001B396                            ; ---------------------------------------------------------------------------
0001B396                            
0001B396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B396                            
0001B396                            
0001B396                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B396 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B39C 303C 001F                  		move.w	#$1F,d0
0001B3A0                            
0001B3A0                            loc_1B4C4:
0001B3A0 4A12                       		tst.b	(a2)
0001B3A2 6700                       		beq.s	locret_1B4CE
0001B3A4 504A                       		addq.w	#8,a2
0001B3A6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B3AA                            
0001B3AA                            locret_1B4CE:
0001B3AA 4E75                       		rts	
0001B3AC                            ; End of function SS_RemoveCollectedItem
0001B3AC                            
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            ; Subroutine to	animate	special	stage items when you touch them
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            
0001B3AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3AC                            
0001B3AC                            
0001B3AC                            SS_AniItems:				; XREF: SS_ShowLayout
0001B3AC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B3B2 3E3C 001F                  		move.w	#$1F,d7
0001B3B6                            
0001B3B6                            loc_1B4DA:
0001B3B6 7000                       		moveq	#0,d0
0001B3B8 1010                       		move.b	(a0),d0
0001B3BA 6700                       		beq.s	loc_1B4E8
0001B3BC E548                       		lsl.w	#2,d0
0001B3BE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B3C2 4E91                       		jsr	(a1)
0001B3C4                            
0001B3C4                            loc_1B4E8:
0001B3C4 5048                       		addq.w	#8,a0
0001B3C6                            
0001B3C6                            loc_1B4EA:
0001B3C6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B3CA                            
0001B3CA 4E75                       		rts	
0001B3CC                            ; End of function SS_AniItems
0001B3CC                            
0001B3CC                            ; ===========================================================================
0001B3CC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B3D0 0000 0000                  		dc.l SS_AniBumper
0001B3D4 0000 0000                  		dc.l SS_Ani1Up
0001B3D8 0000 0000                  		dc.l SS_AniReverse
0001B3DC 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B3E0 0000 0000                  		dc.l SS_AniGlassBlock
0001B3E4                            ; ===========================================================================
0001B3E4                            
0001B3E4                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B3E4 5328 0002                  		subq.b	#1,2(a0)
0001B3E8 6A00                       		bpl.s	locret_1B530
0001B3EA 117C 0005 0002             		move.b	#5,2(a0)
0001B3F0 7000                       		moveq	#0,d0
0001B3F2 1028 0003                  		move.b	3(a0),d0
0001B3F6 5228 0003                  		addq.b	#1,3(a0)
0001B3FA 2268 0004                  		movea.l	4(a0),a1
0001B3FE 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B402 1280                       		move.b	d0,(a1)
0001B404 6600                       		bne.s	locret_1B530
0001B406 4290                       		clr.l	(a0)
0001B408 42A8 0004                  		clr.l	4(a0)
0001B40C                            
0001B40C                            locret_1B530:
0001B40C 4E75                       		rts	
0001B40E                            ; ===========================================================================
0001B40E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B414                            ; ===========================================================================
0001B414                            
0001B414                            SS_AniBumper:				; XREF: SS_AniIndex
0001B414 5328 0002                  		subq.b	#1,2(a0)
0001B418 6A00                       		bpl.s	locret_1B566
0001B41A 117C 0007 0002             		move.b	#7,2(a0)
0001B420 7000                       		moveq	#0,d0
0001B422 1028 0003                  		move.b	3(a0),d0
0001B426 5228 0003                  		addq.b	#1,3(a0)
0001B42A 2268 0004                  		movea.l	4(a0),a1
0001B42E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B432 6600                       		bne.s	loc_1B564
0001B434 4290                       		clr.l	(a0)
0001B436 42A8 0004                  		clr.l	4(a0)
0001B43A 12BC 0025                  		move.b	#$25,(a1)
0001B43E 4E75                       		rts	
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_1B564:
0001B440 1280                       		move.b	d0,(a1)
0001B442                            
0001B442                            locret_1B566:
0001B442 4E75                       		rts	
0001B444                            ; ===========================================================================
0001B444 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B44A                            ; ===========================================================================
0001B44A                            
0001B44A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B44A 5328 0002                  		subq.b	#1,2(a0)
0001B44E 6A00                       		bpl.s	locret_1B596
0001B450 117C 0005 0002             		move.b	#5,2(a0)
0001B456 7000                       		moveq	#0,d0
0001B458 1028 0003                  		move.b	3(a0),d0
0001B45C 5228 0003                  		addq.b	#1,3(a0)
0001B460 2268 0004                  		movea.l	4(a0),a1
0001B464 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B468 1280                       		move.b	d0,(a1)
0001B46A 6600                       		bne.s	locret_1B596
0001B46C 4290                       		clr.l	(a0)
0001B46E 42A8 0004                  		clr.l	4(a0)
0001B472                            
0001B472                            locret_1B596:
0001B472 4E75                       		rts	
0001B474                            ; ===========================================================================
0001B474 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B47A                            ; ===========================================================================
0001B47A                            
0001B47A                            SS_AniReverse:				; XREF: SS_AniIndex
0001B47A 5328 0002                  		subq.b	#1,2(a0)
0001B47E 6A00                       		bpl.s	locret_1B5CC
0001B480 117C 0007 0002             		move.b	#7,2(a0)
0001B486 7000                       		moveq	#0,d0
0001B488 1028 0003                  		move.b	3(a0),d0
0001B48C 5228 0003                  		addq.b	#1,3(a0)
0001B490 2268 0004                  		movea.l	4(a0),a1
0001B494 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B498 6600                       		bne.s	loc_1B5CA
0001B49A 4290                       		clr.l	(a0)
0001B49C 42A8 0004                  		clr.l	4(a0)
0001B4A0 12BC 002B                  		move.b	#$2B,(a1)
0001B4A4 4E75                       		rts	
0001B4A6                            ; ===========================================================================
0001B4A6                            
0001B4A6                            loc_1B5CA:
0001B4A6 1280                       		move.b	d0,(a1)
0001B4A8                            
0001B4A8                            locret_1B5CC:
0001B4A8 4E75                       		rts	
0001B4AA                            ; ===========================================================================
0001B4AA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B4B0                            ; ===========================================================================
0001B4B0                            
0001B4B0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B4B0 5328 0002                  		subq.b	#1,2(a0)
0001B4B4 6A00                       		bpl.s	locret_1B60C
0001B4B6 117C 0005 0002             		move.b	#5,2(a0)
0001B4BC 7000                       		moveq	#0,d0
0001B4BE 1028 0003                  		move.b	3(a0),d0
0001B4C2 5228 0003                  		addq.b	#1,3(a0)
0001B4C6 2268 0004                  		movea.l	4(a0),a1
0001B4CA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B4CE 1280                       		move.b	d0,(a1)
0001B4D0 6600                       		bne.s	locret_1B60C
0001B4D2 4290                       		clr.l	(a0)
0001B4D4 42A8 0004                  		clr.l	4(a0)
0001B4D8 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B4DE 303C 00A8                  		move.w	#$A8,d0
0001B4E2 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B4E8                            
0001B4E8                            locret_1B60C:
0001B4E8 4E75                       		rts	
0001B4EA                            ; ===========================================================================
0001B4EA 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B4F0                            ; ===========================================================================
0001B4F0                            
0001B4F0                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B4F0 5328 0002                  		subq.b	#1,2(a0)
0001B4F4 6A00                       		bpl.s	locret_1B640
0001B4F6 117C 0001 0002             		move.b	#1,2(a0)
0001B4FC 7000                       		moveq	#0,d0
0001B4FE 1028 0003                  		move.b	3(a0),d0
0001B502 5228 0003                  		addq.b	#1,3(a0)
0001B506 2268 0004                  		movea.l	4(a0),a1
0001B50A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B50E 1280                       		move.b	d0,(a1)
0001B510 6600                       		bne.s	locret_1B640
0001B512 12A8 0004                  		move.b	4(a0),(a1)
0001B516 4290                       		clr.l	(a0)
0001B518 42A8 0004                  		clr.l	4(a0)
0001B51C                            
0001B51C                            locret_1B640:
0001B51C 4E75                       		rts	
0001B51E                            ; ===========================================================================
0001B51E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            ; Special stage	layout pointers
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            SS_LayoutIndex:
0001B528                            	include "_inc\Special stage layout pointers.asm"
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            ; Special stage	layout pointers
0001B528                            ; ---------------------------------------------------------------------------
0001B528 0000 0000                  	dc.l SS_1
0001B52C 0000 0000                  	dc.l SS_2
0001B530 0000 0000                  	dc.l SS_3
0001B534 0000 0000                  	dc.l SS_4
0001B538 0000 0000                  	dc.l SS_5
0001B53C 0000 0000                  	dc.l SS_6
0001B540                            	even
0001B540                            	even
0001B540                            
0001B540                            ; ---------------------------------------------------------------------------
0001B540                            ; Special stage	start locations
0001B540                            ; ---------------------------------------------------------------------------
0001B540                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B558                            		even
0001B558                            
0001B558                            ; ---------------------------------------------------------------------------
0001B558                            ; Subroutine to	load special stage layout
0001B558                            ; ---------------------------------------------------------------------------
0001B558                            
0001B558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B558                            
0001B558                            
0001B558                            SS_Load:				; XREF: SpecialStage
0001B558 7000                       		moveq	#0,d0
0001B55A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B55E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B562 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B568 6500                       		bcs.s	SS_ChkEmldNum
0001B56A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B570                            
0001B570                            SS_ChkEmldNum:
0001B570 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B576 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B578 7200                       		moveq	#0,d1
0001B57A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B57E 5301                       		subq.b	#1,d1
0001B580 6500                       		bcs.s	SS_LoadData
0001B582 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B586                            
0001B586                            SS_ChkEmldLoop:	
0001B586 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B58A 6600                       		bne.s	SS_ChkEmldRepeat
0001B58C 60CA                       		bra.s	SS_Load
0001B58E                            ; ===========================================================================
0001B58E                            
0001B58E                            SS_ChkEmldRepeat:
0001B58E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B592                            
0001B592                            SS_LoadData:
0001B592 E548                       		lsl.w	#2,d0
0001B594 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B598 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B59C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B5A0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B5A4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B5AA 303C 0000                  		move.w	#0,d0
0001B5AE 4EB9 0000 16FC             		jsr	(EniDec).l
0001B5B4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B5BA 303C 0FFF                  		move.w	#$FFF,d0
0001B5BE                            
0001B5BE                            SS_ClrRAM3:
0001B5BE 4299                       		clr.l	(a1)+
0001B5C0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B5C4                            
0001B5C4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B5CA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B5D0 723F                       		moveq	#$3F,d1
0001B5D2                            
0001B5D2                            loc_1B6F6:
0001B5D2 743F                       		moveq	#$3F,d2
0001B5D4                            
0001B5D4                            loc_1B6F8:
0001B5D4 12D8                       		move.b	(a0)+,(a1)+
0001B5D6 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B5DA                            
0001B5DA 43E9 0040                  		lea	$40(a1),a1
0001B5DE 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B5E2                            
0001B5E2 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B5E8 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B5EE 724D                       		moveq	#$4D,d1
0001B5F0                            
0001B5F0                            loc_1B714:
0001B5F0 22D8                       		move.l	(a0)+,(a1)+
0001B5F2 32FC 0000                  		move.w	#0,(a1)+
0001B5F6 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B5FC 32D8                       		move.w	(a0)+,(a1)+
0001B5FE 51C9 FFF0                  		dbf	d1,loc_1B714
0001B602                            
0001B602 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B608 323C 003F                  		move.w	#$3F,d1
0001B60C                            
0001B60C                            loc_1B730:
0001B60C                            
0001B60C 4299                       		clr.l	(a1)+
0001B60E 51C9 FFFC                  		dbf	d1,loc_1B730
0001B612                            
0001B612 4E75                       		rts	
0001B614                            ; End of function SS_Load
0001B614                            
0001B614                            ; ===========================================================================
0001B614                            ; ---------------------------------------------------------------------------
0001B614                            ; Special stage	mappings and VRAM pointers
0001B614                            ; ---------------------------------------------------------------------------
0001B614                            SS_MapIndex:
0001B614                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B614                            ; ---------------------------------------------------------------------------
0001B614                            ; Special stage	mappings and VRAM pointers
0001B614                            ; ---------------------------------------------------------------------------
0001B614 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B618 0142                       	dc.w $142		; VRAM setting
0001B61A 0000 0000                  	dc.l Map_SSWalls
0001B61E 0142                       	dc.w $142
0001B620 0000 0000                  	dc.l Map_SSWalls
0001B624 0142                       	dc.w $142
0001B626 0000 0000                  	dc.l Map_SSWalls
0001B62A 0142                       	dc.w $142
0001B62C 0000 0000                  	dc.l Map_SSWalls
0001B630 0142                       	dc.w $142
0001B632 0000 0000                  	dc.l Map_SSWalls
0001B636 0142                       	dc.w $142
0001B638 0000 0000                  	dc.l Map_SSWalls
0001B63C 0142                       	dc.w $142
0001B63E 0000 0000                  	dc.l Map_SSWalls
0001B642 0142                       	dc.w $142
0001B644 0000 0000                  	dc.l Map_SSWalls
0001B648 0142                       	dc.w $142
0001B64A 0000 0000                  	dc.l Map_SSWalls
0001B64E 2142                       	dc.w $2142
0001B650 0000 0000                  	dc.l Map_SSWalls
0001B654 2142                       	dc.w $2142
0001B656 0000 0000                  	dc.l Map_SSWalls
0001B65A 2142                       	dc.w $2142
0001B65C 0000 0000                  	dc.l Map_SSWalls
0001B660 2142                       	dc.w $2142
0001B662 0000 0000                  	dc.l Map_SSWalls
0001B666 2142                       	dc.w $2142
0001B668 0000 0000                  	dc.l Map_SSWalls
0001B66C 2142                       	dc.w $2142
0001B66E 0000 0000                  	dc.l Map_SSWalls
0001B672 2142                       	dc.w $2142
0001B674 0000 0000                  	dc.l Map_SSWalls
0001B678 2142                       	dc.w $2142
0001B67A 0000 0000                  	dc.l Map_SSWalls
0001B67E 2142                       	dc.w $2142
0001B680 0000 0000                  	dc.l Map_SSWalls
0001B684 4142                       	dc.w $4142
0001B686 0000 0000                  	dc.l Map_SSWalls
0001B68A 4142                       	dc.w $4142
0001B68C 0000 0000                  	dc.l Map_SSWalls
0001B690 4142                       	dc.w $4142
0001B692 0000 0000                  	dc.l Map_SSWalls
0001B696 4142                       	dc.w $4142
0001B698 0000 0000                  	dc.l Map_SSWalls
0001B69C 4142                       	dc.w $4142
0001B69E 0000 0000                  	dc.l Map_SSWalls
0001B6A2 4142                       	dc.w $4142
0001B6A4 0000 0000                  	dc.l Map_SSWalls
0001B6A8 4142                       	dc.w $4142
0001B6AA 0000 0000                  	dc.l Map_SSWalls
0001B6AE 4142                       	dc.w $4142
0001B6B0 0000 0000                  	dc.l Map_SSWalls
0001B6B4 4142                       	dc.w $4142
0001B6B6 0000 0000                  	dc.l Map_SSWalls
0001B6BA 6142                       	dc.w $6142
0001B6BC 0000 0000                  	dc.l Map_SSWalls
0001B6C0 6142                       	dc.w $6142
0001B6C2 0000 0000                  	dc.l Map_SSWalls
0001B6C6 6142                       	dc.w $6142
0001B6C8 0000 0000                  	dc.l Map_SSWalls
0001B6CC 6142                       	dc.w $6142
0001B6CE 0000 0000                  	dc.l Map_SSWalls
0001B6D2 6142                       	dc.w $6142
0001B6D4 0000 0000                  	dc.l Map_SSWalls
0001B6D8 6142                       	dc.w $6142
0001B6DA 0000 0000                  	dc.l Map_SSWalls
0001B6DE 6142                       	dc.w $6142
0001B6E0 0000 0000                  	dc.l Map_SSWalls
0001B6E4 6142                       	dc.w $6142
0001B6E6 0000 0000                  	dc.l Map_SSWalls
0001B6EA 6142                       	dc.w $6142
0001B6EC 0000 EA7E                  	dc.l Map_obj47
0001B6F0 023B                       	dc.w $23B
0001B6F2 0000 0000                  	dc.l Map_SS_R
0001B6F6 0570                       	dc.w $570
0001B6F8 0000 0000                  	dc.l Map_SS_R
0001B6FC 0251                       	dc.w $251
0001B6FE 0000 0000                  	dc.l Map_SS_R
0001B702 0370                       	dc.w $370
0001B704 0000 0000                  	dc.l Map_SS_Up
0001B708 0263                       	dc.w $263
0001B70A 0000 0000                  	dc.l Map_SS_Down
0001B70E 0263                       	dc.w $263
0001B710 0000 0000                  	dc.l Map_SS_R
0001B714 22F0                       	dc.w $22F0
0001B716 0000 0000                  	dc.l Map_SS_Glass
0001B71A 0470                       	dc.w $470
0001B71C 0000 0000                  	dc.l Map_SS_Glass
0001B720 05F0                       	dc.w $5F0
0001B722 0000 0000                  	dc.l Map_SS_Glass
0001B726 65F0                       	dc.w $65F0
0001B728 0000 0000                  	dc.l Map_SS_Glass
0001B72C 25F0                       	dc.w $25F0
0001B72E 0000 0000                  	dc.l Map_SS_Glass
0001B732 45F0                       	dc.w $45F0
0001B734 0000 0000                  	dc.l Map_SS_R
0001B738 02F0                       	dc.w $2F0
0001B73A 0100 EA7E                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B73E 023B                       	dc.w $23B
0001B740 0200 EA7E                  	dc.l Map_obj47+$2000000
0001B744 023B                       	dc.w $23B
0001B746 0000 0000                  	dc.l Map_SS_R
0001B74A 0797                       	dc.w $797
0001B74C 0000 0000                  	dc.l Map_SS_R
0001B750 07A0                       	dc.w $7A0
0001B752 0000 0000                  	dc.l Map_SS_R
0001B756 07A9                       	dc.w $7A9
0001B758 0000 0000                  	dc.l Map_SS_R
0001B75C 0797                       	dc.w $797
0001B75E 0000 0000                  	dc.l Map_SS_R
0001B762 07A0                       	dc.w $7A0
0001B764 0000 0000                  	dc.l Map_SS_R
0001B768 07A9                       	dc.w $7A9
0001B76A 0000 9F34                  	dc.l Map_obj25
0001B76E 27B2                       	dc.w $27B2
0001B770 0000 0000                  	dc.l Map_SS_Chaos3
0001B774 0770                       	dc.w $770
0001B776 0000 0000                  	dc.l Map_SS_Chaos3
0001B77A 2770                       	dc.w $2770
0001B77C 0000 0000                  	dc.l Map_SS_Chaos3
0001B780 4770                       	dc.w $4770
0001B782 0000 0000                  	dc.l Map_SS_Chaos3
0001B786 6770                       	dc.w $6770
0001B788 0000 0000                  	dc.l Map_SS_Chaos1
0001B78C 0770                       	dc.w $770
0001B78E 0000 0000                  	dc.l Map_SS_Chaos2
0001B792 0770                       	dc.w $770
0001B794 0000 0000                  	dc.l Map_SS_R
0001B798 04F0                       	dc.w $4F0
0001B79A 0400 9F34                  	dc.l Map_obj25+$4000000
0001B79E 27B2                       	dc.w $27B2
0001B7A0 0500 9F34                  	dc.l Map_obj25+$5000000
0001B7A4 27B2                       	dc.w $27B2
0001B7A6 0600 9F34                  	dc.l Map_obj25+$6000000
0001B7AA 27B2                       	dc.w $27B2
0001B7AC 0700 9F34                  	dc.l Map_obj25+$7000000
0001B7B0 27B2                       	dc.w $27B2
0001B7B2 0000 0000                  	dc.l Map_SS_Glass
0001B7B6 23F0                       	dc.w $23F0
0001B7B8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001B7BC 23F0                       	dc.w $23F0
0001B7BE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001B7C2 23F0                       	dc.w $23F0
0001B7C4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001B7C8 23F0                       	dc.w $23F0
0001B7CA 0000 0000                  	dc.l Map_SS_R+$2000000
0001B7CE 04F0                       	dc.w $4F0
0001B7D0 0000 0000                  	dc.l Map_SS_Glass
0001B7D4 05F0                       	dc.w $5F0
0001B7D6 0000 0000                  	dc.l Map_SS_Glass
0001B7DA 65F0                       	dc.w $65F0
0001B7DC 0000 0000                  	dc.l Map_SS_Glass
0001B7E0 25F0                       	dc.w $25F0
0001B7E2 0000 0000                  	dc.l Map_SS_Glass
0001B7E6 45F0                       	dc.w $45F0
0001B7E6 45F0                       	dc.w $45F0
0001B7E8                            
0001B7E8                            ; ---------------------------------------------------------------------------
0001B7E8                            ; Sprite mappings - special stage "R" block
0001B7E8                            ; ---------------------------------------------------------------------------
0001B7E8                            Map_SS_R:
0001B7E8                            	include "_maps\SSRblock.asm"
0001B7E8                            ; ---------------------------------------------------------------------------
0001B7E8                            ; Sprite mappings - special stage "R" block
0001B7E8                            ; ---------------------------------------------------------------------------
0001B7E8 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001B7EC 0000                       		dc.w byte_1B91E-Map_SS_R
0001B7EE 01                         byte_1B912:	dc.b 1
0001B7EF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B7F4 01                         byte_1B918:	dc.b 1
0001B7F5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B7FA 00                         byte_1B91E:	dc.b 0
0001B7FC 00                         		even
0001B7FC 00                         		even
0001B7FC                            
0001B7FC                            ; ---------------------------------------------------------------------------
0001B7FC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B7FC                            ; ---------------------------------------------------------------------------
0001B7FC                            Map_SS_Glass:
0001B7FC                            	include "_maps\SSglassblock.asm"
0001B7FC                            ; ---------------------------------------------------------------------------
0001B7FC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B7FC                            ; ---------------------------------------------------------------------------
0001B7FC 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001B800 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001B804 01                         byte_1B928:	dc.b 1
0001B805 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B80A 01                         byte_1B92E:	dc.b 1
0001B80B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001B810 01                         byte_1B934:	dc.b 1
0001B811 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001B816 01                         byte_1B93A:	dc.b 1
0001B817 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001B81C                            		even
0001B81C                            		even
0001B81C                            
0001B81C                            ; ---------------------------------------------------------------------------
0001B81C                            ; Sprite mappings - special stage "UP" block
0001B81C                            ; ---------------------------------------------------------------------------
0001B81C                            Map_SS_Up:
0001B81C                            	include "_maps\SSUPblock.asm"
0001B81C                            ; ---------------------------------------------------------------------------
0001B81C                            ; Sprite mappings - special stage "UP" block
0001B81C                            ; ---------------------------------------------------------------------------
0001B81C 0000                       		dc.w byte_1B944-Map_SS_Up
0001B81E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001B820 01                         byte_1B944:	dc.b 1
0001B821 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B826 01                         byte_1B94A:	dc.b 1
0001B827 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B82C                            		even
0001B82C                            		even
0001B82C                            
0001B82C                            ; ---------------------------------------------------------------------------
0001B82C                            ; Sprite mappings - special stage "DOWN" block
0001B82C                            ; ---------------------------------------------------------------------------
0001B82C                            Map_SS_Down:
0001B82C                            	include "_maps\SSDOWNblock.asm"
0001B82C                            ; ---------------------------------------------------------------------------
0001B82C                            ; Sprite mappings - special stage "DOWN" block
0001B82C                            ; ---------------------------------------------------------------------------
0001B82C 0000                       		dc.w byte_1B954-Map_SS_Down
0001B82E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001B830 01                         byte_1B954:	dc.b 1
0001B831 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B836 01                         byte_1B95A:	dc.b 1
0001B837 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B83C                            		even
0001B83C                            		even
0001B83C                            
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C                            ; Sprite mappings - special stage chaos	emeralds
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001B83E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001B840 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001B842 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001B844 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001B846 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001B848 01                         byte_1B96C:	dc.b 1
0001B849 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B84E 01                         byte_1B972:	dc.b 1
0001B84F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001B854 01                         byte_1B978:	dc.b 1
0001B855 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001B85A 01                         byte_1B97E:	dc.b 1
0001B85B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001B860                            		even
0001B860                            ; ===========================================================================
0001B860                            ; ---------------------------------------------------------------------------
0001B860                            ; Object 09 - Sonic (special stage)
0001B860                            ; ---------------------------------------------------------------------------
0001B860                            
0001B860                            Obj09:					; XREF: Obj_Index
0001B860 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001B864 6700                       		beq.s	Obj09_Normal	; if not, branch
0001B866 6100 0000                  		bsr.w	SS_FixCamera
0001B86A 6000 0000                  		bra.w	DebugMode
0001B86E                            ; ===========================================================================
0001B86E                            
0001B86E                            Obj09_Normal:
0001B86E 7000                       		moveq	#0,d0
0001B870 1028 0024                  		move.b	$24(a0),d0
0001B874 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001B878 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001B87C                            ; ===========================================================================
0001B87C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001B87E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001B880 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001B882 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001B884                            ; ===========================================================================
0001B884                            
0001B884                            Obj09_Main:				; XREF: Obj09_Index
0001B884 5428 0024                  		addq.b	#2,$24(a0)
0001B888 117C 000E 0016             		move.b	#$E,$16(a0)
0001B88E 117C 0007 0017             		move.b	#7,$17(a0)
0001B894 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001B89C 317C 0780 0002             		move.w	#$780,2(a0)
0001B8A2 117C 0004 0001             		move.b	#4,1(a0)
0001B8A8 117C 0000 0018             		move.b	#0,$18(a0)
0001B8AE 117C 0002 001C             		move.b	#2,$1C(a0)
0001B8B4 08E8 0002 0022             		bset	#2,$22(a0)
0001B8BA 08E8 0001 0022             		bset	#1,$22(a0)
0001B8C0                            
0001B8C0                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001B8C0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001B8C4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001B8C6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001B8CC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001B8CE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001B8D4                            
0001B8D4                            Obj09_NoDebug:
0001B8D4 117C 0000 0030             		move.b	#0,$30(a0)
0001B8DA 7000                       		moveq	#0,d0
0001B8DC 1028 0022                  		move.b	$22(a0),d0
0001B8E0 0240 0002                  		andi.w	#2,d0
0001B8E4 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001B8E8 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001B8EC 4EBA 8284                  		jsr	LoadSonicDynPLC
0001B8F0 4EF9 0000 D58A             		jmp	DisplaySprite
0001B8F6                            ; ===========================================================================
0001B8F6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001B8F8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001B8FA                            ; ===========================================================================
0001B8FA                            
0001B8FA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001B8FA 6100 0000                  		bsr.w	Obj09_Jump
0001B8FE 6100 0000                  		bsr.w	Obj09_Move
0001B902 6100 0000                  		bsr.w	Obj09_Fall
0001B906 6000                       		bra.s	Obj09_Display
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            Obj09_InAir:				; XREF: Obj09_Modes
0001B908 6100 0000                  		bsr.w	nullsub_2
0001B90C 6100 0000                  		bsr.w	Obj09_Move
0001B910 6100 0000                  		bsr.w	Obj09_Fall
0001B914                            
0001B914                            Obj09_Display:				; XREF: Obj09_OnWall
0001B914 6100 0000                  		bsr.w	Obj09_ChkItems
0001B918 6100 0000                  		bsr.w	Obj09_ChkItems2
0001B91C 4EB9 0000 D564             		jsr	SpeedToPos
0001B922 6100 0000                  		bsr.w	SS_FixCamera
0001B926 3038 F780                  		move.w	($FFFFF780).w,d0
0001B92A D078 F782                  		add.w	($FFFFF782).w,d0
0001B92E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001B932 4EB9 0001 38F8             		jsr	Sonic_Animate
0001B938 4E75                       		rts	
0001B93A                            
0001B93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B93A                            
0001B93A                            
0001B93A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001B93A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001B940 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001B942 6100 0000                  		bsr.w	Obj09_MoveLeft
0001B946                            
0001B946                            Obj09_ChkRight:
0001B946 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001B94C 6700                       		beq.s	loc_1BA78	; if not, branch
0001B94E 6100 0000                  		bsr.w	Obj09_MoveRight
0001B952                            
0001B952                            loc_1BA78:
0001B952 1038 F602                  		move.b	($FFFFF602).w,d0
0001B956 0200 000C                  		andi.b	#$C,d0
0001B95A 6600                       		bne.s	loc_1BAA8
0001B95C 3028 0014                  		move.w	$14(a0),d0
0001B960 6700                       		beq.s	loc_1BAA8
0001B962 6B00                       		bmi.s	loc_1BA9A
0001B964 0440 000C                  		subi.w	#$C,d0
0001B968 6400                       		bcc.s	loc_1BA94
0001B96A 303C 0000                  		move.w	#0,d0
0001B96E                            
0001B96E                            loc_1BA94:
0001B96E 3140 0014                  		move.w	d0,$14(a0)
0001B972 6000                       		bra.s	loc_1BAA8
0001B974                            ; ===========================================================================
0001B974                            
0001B974                            loc_1BA9A:
0001B974 0640 000C                  		addi.w	#$C,d0
0001B978 6400                       		bcc.s	loc_1BAA4
0001B97A 303C 0000                  		move.w	#0,d0
0001B97E                            
0001B97E                            loc_1BAA4:
0001B97E 3140 0014                  		move.w	d0,$14(a0)
0001B982                            
0001B982                            loc_1BAA8:
0001B982 1038 F780                  		move.b	($FFFFF780).w,d0
0001B986 0600 0020                  		addi.b	#$20,d0
0001B98A 0200 00C0                  		andi.b	#$C0,d0
0001B98E 4400                       		neg.b	d0
0001B990 4EB9 0000 29B8             		jsr	(CalcSine).l
0001B996 C3E8 0014                  		muls.w	$14(a0),d1
0001B99A D3A8 0008                  		add.l	d1,8(a0)
0001B99E C1E8 0014                  		muls.w	$14(a0),d0
0001B9A2 D1A8 000C                  		add.l	d0,$C(a0)
0001B9A6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001B9AA 2428 000C                  		move.l	$C(a0),d2
0001B9AE 2628 0008                  		move.l	8(a0),d3
0001B9B2 6100 0000                  		bsr.w	sub_1BCE8
0001B9B6 6700                       		beq.s	loc_1BAF2
0001B9B8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001B9BC 93A8 0008                  		sub.l	d1,8(a0)
0001B9C0 91A8 000C                  		sub.l	d0,$C(a0)
0001B9C4 317C 0000 0014             		move.w	#0,$14(a0)
0001B9CA 4E75                       		rts	
0001B9CC                            ; ===========================================================================
0001B9CC                            
0001B9CC                            loc_1BAF2:
0001B9CC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001B9D0 4E75                       		rts	
0001B9D2                            ; End of function Obj09_Move
0001B9D2                            
0001B9D2                            
0001B9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9D2                            
0001B9D2                            
0001B9D2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001B9D2 08E8 0000 0022             		bset	#0,$22(a0)
0001B9D8 3028 0014                  		move.w	$14(a0),d0
0001B9DC 6700                       		beq.s	loc_1BB06
0001B9DE 6A00                       		bpl.s	loc_1BB1A
0001B9E0                            
0001B9E0                            loc_1BB06:
0001B9E0 0440 000C                  		subi.w	#$C,d0
0001B9E4 0C40 F800                  		cmpi.w	#-$800,d0
0001B9E8 6E00                       		bgt.s	loc_1BB14
0001B9EA 303C F800                  		move.w	#-$800,d0
0001B9EE                            
0001B9EE                            loc_1BB14:
0001B9EE 3140 0014                  		move.w	d0,$14(a0)
0001B9F2 4E75                       		rts	
0001B9F4                            ; ===========================================================================
0001B9F4                            
0001B9F4                            loc_1BB1A:
0001B9F4 0440 0040                  		subi.w	#$40,d0
0001B9F8 6400                       		bcc.s	loc_1BB22
0001B9FA 4E71                       		nop	
0001B9FC                            
0001B9FC                            loc_1BB22:
0001B9FC 3140 0014                  		move.w	d0,$14(a0)
0001BA00 4E75                       		rts	
0001BA02                            ; End of function Obj09_MoveLeft
0001BA02                            
0001BA02                            
0001BA02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA02                            
0001BA02                            
0001BA02                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BA02 08A8 0000 0022             		bclr	#0,$22(a0)
0001BA08 3028 0014                  		move.w	$14(a0),d0
0001BA0C 6B00                       		bmi.s	loc_1BB48
0001BA0E 0640 000C                  		addi.w	#$C,d0
0001BA12 0C40 0800                  		cmpi.w	#$800,d0
0001BA16 6D00                       		blt.s	loc_1BB42
0001BA18 303C 0800                  		move.w	#$800,d0
0001BA1C                            
0001BA1C                            loc_1BB42:
0001BA1C 3140 0014                  		move.w	d0,$14(a0)
0001BA20 6000                       		bra.s	locret_1BB54
0001BA22                            ; ===========================================================================
0001BA22                            
0001BA22                            loc_1BB48:
0001BA22 0640 0040                  		addi.w	#$40,d0
0001BA26 6400                       		bcc.s	loc_1BB50
0001BA28 4E71                       		nop	
0001BA2A                            
0001BA2A                            loc_1BB50:
0001BA2A 3140 0014                  		move.w	d0,$14(a0)
0001BA2E                            
0001BA2E                            locret_1BB54:
0001BA2E 4E75                       		rts	
0001BA30                            ; End of function Obj09_MoveRight
0001BA30                            
0001BA30                            
0001BA30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA30                            
0001BA30                            
0001BA30                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BA30 1038 F603                  		move.b	($FFFFF603).w,d0
0001BA34 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BA38 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BA3A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA3E 0200 00FC                  		andi.b	#$FC,d0
0001BA42 4400                       		neg.b	d0
0001BA44 0400 0040                  		subi.b	#$40,d0
0001BA48 4EB9 0000 29B8             		jsr	(CalcSine).l
0001BA4E C3FC 0680                  		muls.w	#$680,d1
0001BA52 E081                       		asr.l	#8,d1
0001BA54 3141 0010                  		move.w	d1,$10(a0)
0001BA58 C1FC 0680                  		muls.w	#$680,d0
0001BA5C E080                       		asr.l	#8,d0
0001BA5E 3140 0012                  		move.w	d0,$12(a0)
0001BA62 08E8 0001 0022             		bset	#1,$22(a0)
0001BA68 303C 00A0                  		move.w	#$A0,d0
0001BA6C 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BA72                            
0001BA72                            Obj09_NoJump:
0001BA72 4E75                       		rts	
0001BA74                            ; End of function Obj09_Jump
0001BA74                            
0001BA74                            
0001BA74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA74                            
0001BA74                            
0001BA74                            nullsub_2:				; XREF: Obj09_InAir
0001BA74 4E75                       		rts	
0001BA76                            ; End of function nullsub_2
0001BA76                            
0001BA76                            ; ===========================================================================
0001BA76                            ; ---------------------------------------------------------------------------
0001BA76                            ; unused subroutine to limit Sonic's upward vertical speed
0001BA76                            ; ---------------------------------------------------------------------------
0001BA76 323C FC00                  		move.w	#-$400,d1
0001BA7A B268 0012                  		cmp.w	$12(a0),d1
0001BA7E 6F00                       		ble.s	locret_1BBB4
0001BA80 1038 F602                  		move.b	($FFFFF602).w,d0
0001BA84 0200 0070                  		andi.b	#$70,d0
0001BA88 6600                       		bne.s	locret_1BBB4
0001BA8A 3141 0012                  		move.w	d1,$12(a0)
0001BA8E                            
0001BA8E                            locret_1BBB4:
0001BA8E 4E75                       		rts	
0001BA90                            ; ---------------------------------------------------------------------------
0001BA90                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BA90                            ; ---------------------------------------------------------------------------
0001BA90                            
0001BA90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA90                            
0001BA90                            
0001BA90                            SS_FixCamera:				; XREF: Obj09
0001BA90 3428 000C                  		move.w	$C(a0),d2
0001BA94 3628 0008                  		move.w	8(a0),d3
0001BA98 3038 F700                  		move.w	($FFFFF700).w,d0
0001BA9C 0443 00A0                  		subi.w	#$A0,d3
0001BAA0 6500                       		bcs.s	loc_1BBCE
0001BAA2 9043                       		sub.w	d3,d0
0001BAA4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BAA8                            
0001BAA8                            loc_1BBCE:
0001BAA8 3038 F704                  		move.w	($FFFFF704).w,d0
0001BAAC 0442 0070                  		subi.w	#$70,d2
0001BAB0 6500                       		bcs.s	locret_1BBDE
0001BAB2 9042                       		sub.w	d2,d0
0001BAB4 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BAB8                            
0001BAB8                            locret_1BBDE:
0001BAB8 4E75                       		rts	
0001BABA                            ; End of function SS_FixCamera
0001BABA                            
0001BABA                            ; ===========================================================================
0001BABA                            
0001BABA                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BABA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BAC0 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BAC6 6600                       		bne.s	loc_1BBF4
0001BAC8 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BACE                            
0001BACE                            loc_1BBF4:
0001BACE 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BAD4 6D00                       		blt.s	loc_1BC12
0001BAD6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BADC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BAE2 5428 0024                  		addq.b	#2,$24(a0)
0001BAE6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BAEC                            
0001BAEC                            loc_1BC12:
0001BAEC 3038 F780                  		move.w	($FFFFF780).w,d0
0001BAF0 D078 F782                  		add.w	($FFFFF782).w,d0
0001BAF4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BAF8 4EB9 0001 38F8             		jsr	Sonic_Animate
0001BAFE 4EBA 8072                  		jsr	LoadSonicDynPLC
0001BB02 6100 FF8C                  		bsr.w	SS_FixCamera
0001BB06 4EF9 0000 D58A             		jmp	DisplaySprite
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            Obj09_Exit2:				; XREF: Obj09_Index
0001BB0C 5368 0038                  		subq.w	#1,$38(a0)
0001BB10 6600                       		bne.s	loc_1BC40
0001BB12 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BB18                            
0001BB18                            loc_1BC40:
0001BB18 4EB9 0001 38F8             		jsr	Sonic_Animate
0001BB1E 4EBA 8052                  		jsr	LoadSonicDynPLC
0001BB22 6100 FF6C                  		bsr.w	SS_FixCamera
0001BB26 4EF9 0000 D58A             		jmp	DisplaySprite
0001BB2C                            
0001BB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB2C                            
0001BB2C                            
0001BB2C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BB2C 2428 000C                  		move.l	$C(a0),d2
0001BB30 2628 0008                  		move.l	8(a0),d3
0001BB34 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB38 0200 00FC                  		andi.b	#$FC,d0
0001BB3C 4EB9 0000 29B8             		jsr	(CalcSine).l
0001BB42 3828 0010                  		move.w	$10(a0),d4
0001BB46 48C4                       		ext.l	d4
0001BB48 E184                       		asl.l	#8,d4
0001BB4A C1FC 002A                  		muls.w	#$2A,d0
0001BB4E D084                       		add.l	d4,d0
0001BB50 3828 0012                  		move.w	$12(a0),d4
0001BB54 48C4                       		ext.l	d4
0001BB56 E184                       		asl.l	#8,d4
0001BB58 C3FC 002A                  		muls.w	#$2A,d1
0001BB5C D284                       		add.l	d4,d1
0001BB5E D680                       		add.l	d0,d3
0001BB60 6100 0000                  		bsr.w	sub_1BCE8
0001BB64 6700                       		beq.s	loc_1BCB0
0001BB66 9680                       		sub.l	d0,d3
0001BB68 7000                       		moveq	#0,d0
0001BB6A 3140 0010                  		move.w	d0,$10(a0)
0001BB6E 08A8 0001 0022             		bclr	#1,$22(a0)
0001BB74 D481                       		add.l	d1,d2
0001BB76 6100 0000                  		bsr.w	sub_1BCE8
0001BB7A 6700                       		beq.s	loc_1BCC6
0001BB7C 9481                       		sub.l	d1,d2
0001BB7E 7200                       		moveq	#0,d1
0001BB80 3141 0012                  		move.w	d1,$12(a0)
0001BB84 4E75                       		rts	
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            loc_1BCB0:
0001BB86 D481                       		add.l	d1,d2
0001BB88 6100 0000                  		bsr.w	sub_1BCE8
0001BB8C 6700                       		beq.s	loc_1BCD4
0001BB8E 9481                       		sub.l	d1,d2
0001BB90 7200                       		moveq	#0,d1
0001BB92 3141 0012                  		move.w	d1,$12(a0)
0001BB96 08A8 0001 0022             		bclr	#1,$22(a0)
0001BB9C                            
0001BB9C                            loc_1BCC6:
0001BB9C E080                       		asr.l	#8,d0
0001BB9E E081                       		asr.l	#8,d1
0001BBA0 3140 0010                  		move.w	d0,$10(a0)
0001BBA4 3141 0012                  		move.w	d1,$12(a0)
0001BBA8 4E75                       		rts	
0001BBAA                            ; ===========================================================================
0001BBAA                            
0001BBAA                            loc_1BCD4:
0001BBAA E080                       		asr.l	#8,d0
0001BBAC E081                       		asr.l	#8,d1
0001BBAE 3140 0010                  		move.w	d0,$10(a0)
0001BBB2 3141 0012                  		move.w	d1,$12(a0)
0001BBB6 08E8 0001 0022             		bset	#1,$22(a0)
0001BBBC 4E75                       		rts	
0001BBBE                            ; End of function Obj09_Fall
0001BBBE                            
0001BBBE                            
0001BBBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBBE                            
0001BBBE                            
0001BBBE                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BBBE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BBC4 7800                       		moveq	#0,d4
0001BBC6 4842                       		swap	d2
0001BBC8 3802                       		move.w	d2,d4
0001BBCA 4842                       		swap	d2
0001BBCC 0644 0044                  		addi.w	#$44,d4
0001BBD0 88FC 0018                  		divu.w	#$18,d4
0001BBD4 C8FC 0080                  		mulu.w	#$80,d4
0001BBD8 D3C4                       		adda.l	d4,a1
0001BBDA 7800                       		moveq	#0,d4
0001BBDC 4843                       		swap	d3
0001BBDE 3803                       		move.w	d3,d4
0001BBE0 4843                       		swap	d3
0001BBE2 0644 0014                  		addi.w	#$14,d4
0001BBE6 88FC 0018                  		divu.w	#$18,d4
0001BBEA D2C4                       		adda.w	d4,a1
0001BBEC 7A00                       		moveq	#0,d5
0001BBEE 1819                       		move.b	(a1)+,d4
0001BBF0 6100                       		bsr.s	sub_1BD30
0001BBF2 1819                       		move.b	(a1)+,d4
0001BBF4 6100                       		bsr.s	sub_1BD30
0001BBF6 D2FC 007E                  		adda.w	#$7E,a1
0001BBFA 1819                       		move.b	(a1)+,d4
0001BBFC 6100                       		bsr.s	sub_1BD30
0001BBFE 1819                       		move.b	(a1)+,d4
0001BC00 6100                       		bsr.s	sub_1BD30
0001BC02 4A05                       		tst.b	d5
0001BC04 4E75                       		rts	
0001BC06                            ; End of function sub_1BCE8
0001BC06                            
0001BC06                            
0001BC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC06                            
0001BC06                            
0001BC06                            sub_1BD30:				; XREF: sub_1BCE8
0001BC06 6700                       		beq.s	locret_1BD44
0001BC08 0C04 0028                  		cmpi.b	#$28,d4
0001BC0C 6700                       		beq.s	locret_1BD44
0001BC0E 0C04 003A                  		cmpi.b	#$3A,d4
0001BC12 6500                       		bcs.s	loc_1BD46
0001BC14 0C04 004B                  		cmpi.b	#$4B,d4
0001BC18 6400                       		bcc.s	loc_1BD46
0001BC1A                            
0001BC1A                            locret_1BD44:
0001BC1A 4E75                       		rts	
0001BC1C                            ; ===========================================================================
0001BC1C                            
0001BC1C                            loc_1BD46:
0001BC1C 1144 0030                  		move.b	d4,$30(a0)
0001BC20 2149 0032                  		move.l	a1,$32(a0)
0001BC24 7AFF                       		moveq	#-1,d5
0001BC26 4E75                       		rts	
0001BC28                            ; End of function sub_1BD30
0001BC28                            
0001BC28                            
0001BC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC28                            
0001BC28                            
0001BC28                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BC28 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BC2E 7800                       		moveq	#0,d4
0001BC30 3828 000C                  		move.w	$C(a0),d4
0001BC34 0644 0050                  		addi.w	#$50,d4
0001BC38 88FC 0018                  		divu.w	#$18,d4
0001BC3C C8FC 0080                  		mulu.w	#$80,d4
0001BC40 D3C4                       		adda.l	d4,a1
0001BC42 7800                       		moveq	#0,d4
0001BC44 3828 0008                  		move.w	8(a0),d4
0001BC48 0644 0020                  		addi.w	#$20,d4
0001BC4C 88FC 0018                  		divu.w	#$18,d4
0001BC50 D2C4                       		adda.w	d4,a1
0001BC52 1811                       		move.b	(a1),d4
0001BC54 6600                       		bne.s	Obj09_ChkCont
0001BC56 4A28 003A                  		tst.b	$3A(a0)
0001BC5A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BC5E 7800                       		moveq	#0,d4
0001BC60 4E75                       		rts	
0001BC62                            ; ===========================================================================
0001BC62                            
0001BC62                            Obj09_ChkCont:
0001BC62 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BC66 6600                       		bne.s	Obj09_Chk1Up
0001BC68 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BC6C 6600                       		bne.s	Obj09_GetCont
0001BC6E 14BC 0001                  		move.b	#1,(a2)
0001BC72 2549 0004                  		move.l	a1,4(a2)
0001BC76                            
0001BC76                            Obj09_GetCont:
0001BC76 4EB9 0000 9C1C             		jsr	CollectRing
0001BC7C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BC82 6500                       		bcs.s	Obj09_NoCont
0001BC84 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BC8A 6600                       		bne.s	Obj09_NoCont
0001BC8C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BC90 303C 00BF                  		move.w	#$BF,d0
0001BC94 4EB9 0000 1374             		jsr	(PlaySound).l	; play extra continue sound
0001BC9A                            
0001BC9A                            Obj09_NoCont:
0001BC9A 7800                       		moveq	#0,d4
0001BC9C 4E75                       		rts	
0001BC9E                            ; ===========================================================================
0001BC9E                            
0001BC9E                            Obj09_Chk1Up:
0001BC9E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BCA2 6600                       		bne.s	Obj09_ChkEmer
0001BCA4 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BCA8 6600                       		bne.s	Obj09_Get1Up
0001BCAA 14BC 0003                  		move.b	#3,(a2)
0001BCAE 2549 0004                  		move.l	a1,4(a2)
0001BCB2                            
0001BCB2                            Obj09_Get1Up:
0001BCB2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BCB6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BCBA 303C 0088                  		move.w	#$88,d0
0001BCBE 4EB9 0000 1374             		jsr	(PlaySound).l	; play extra life music
0001BCC4 7800                       		moveq	#0,d4
0001BCC6 4E75                       		rts	
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            Obj09_ChkEmer:
0001BCC8 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BCCC 6500                       		bcs.s	Obj09_ChkGhost
0001BCCE 0C04 0040                  		cmpi.b	#$40,d4
0001BCD2 6200                       		bhi.s	Obj09_ChkGhost
0001BCD4 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BCD8 6600                       		bne.s	Obj09_GetEmer
0001BCDA 14BC 0005                  		move.b	#5,(a2)
0001BCDE 2549 0004                  		move.l	a1,4(a2)
0001BCE2                            
0001BCE2                            Obj09_GetEmer:
0001BCE2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BCE8 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BCEA 0404 003B                  		subi.b	#$3B,d4
0001BCEE 7000                       		moveq	#0,d0
0001BCF0 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BCF4 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BCF8 1584 0000                  		move.b	d4,(a2,d0.w)
0001BCFC 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BD00                            
0001BD00                            Obj09_NoEmer:
0001BD00 303C 0093                  		move.w	#$93,d0
0001BD04 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play emerald music
0001BD0A 7800                       		moveq	#0,d4
0001BD0C 4E75                       		rts	
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            Obj09_ChkGhost:
0001BD0E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BD12 6600                       		bne.s	Obj09_ChkGhostTag
0001BD14 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BD1A                            
0001BD1A                            Obj09_ChkGhostTag:
0001BD1A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BD1E 6600                       		bne.s	Obj09_NoGhost
0001BD20 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BD26 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BD28 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BD2E                            
0001BD2E                            Obj09_NoGhost:
0001BD2E 78FF                       		moveq	#-1,d4
0001BD30 4E75                       		rts	
0001BD32                            ; ===========================================================================
0001BD32                            
0001BD32                            Obj09_MakeGhostSolid:
0001BD32 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BD38 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BD3A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD40 723F                       		moveq	#$3F,d1
0001BD42                            
0001BD42                            Obj09_GhostLoop2:
0001BD42 743F                       		moveq	#$3F,d2
0001BD44                            
0001BD44                            Obj09_GhostLoop:
0001BD44 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BD48 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BD4A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BD4E                            
0001BD4E                            Obj09_NoReplace:
0001BD4E 5249                       		addq.w	#1,a1
0001BD50 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BD54 43E9 0040                  		lea	$40(a1),a1
0001BD58 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BD5C                            
0001BD5C                            Obj09_GhostNotSolid:
0001BD5C 4228 003A                  		clr.b	$3A(a0)
0001BD60 7800                       		moveq	#0,d4
0001BD62 4E75                       		rts	
0001BD64                            ; End of function Obj09_ChkItems
0001BD64                            
0001BD64                            
0001BD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD64                            
0001BD64                            
0001BD64                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BD64 1028 0030                  		move.b	$30(a0),d0
0001BD68 6600                       		bne.s	Obj09_ChkBumper
0001BD6A 5328 0036                  		subq.b	#1,$36(a0)
0001BD6E 6A00                       		bpl.s	loc_1BEA0
0001BD70 117C 0000 0036             		move.b	#0,$36(a0)
0001BD76                            
0001BD76                            loc_1BEA0:
0001BD76 5328 0037                  		subq.b	#1,$37(a0)
0001BD7A 6A00                       		bpl.s	locret_1BEAC
0001BD7C 117C 0000 0037             		move.b	#0,$37(a0)
0001BD82                            
0001BD82                            locret_1BEAC:
0001BD82 4E75                       		rts	
0001BD84                            ; ===========================================================================
0001BD84                            
0001BD84                            Obj09_ChkBumper:
0001BD84 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001BD88 6600                       		bne.s	Obj09_GOAL
0001BD8A 2228 0032                  		move.l	$32(a0),d1
0001BD8E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001BD94 3401                       		move.w	d1,d2
0001BD96 0241 007F                  		andi.w	#$7F,d1
0001BD9A C2FC 0018                  		mulu.w	#$18,d1
0001BD9E 0441 0014                  		subi.w	#$14,d1
0001BDA2 EE4A                       		lsr.w	#7,d2
0001BDA4 0242 007F                  		andi.w	#$7F,d2
0001BDA8 C4FC 0018                  		mulu.w	#$18,d2
0001BDAC 0442 0044                  		subi.w	#$44,d2
0001BDB0 9268 0008                  		sub.w	8(a0),d1
0001BDB4 9468 000C                  		sub.w	$C(a0),d2
0001BDB8 4EB9 0000 2C86             		jsr	(CalcAngle).l
0001BDBE 4EB9 0000 29B8             		jsr	(CalcSine).l
0001BDC4 C3FC F900                  		muls.w	#-$700,d1
0001BDC8 E081                       		asr.l	#8,d1
0001BDCA 3141 0010                  		move.w	d1,$10(a0)
0001BDCE C1FC F900                  		muls.w	#-$700,d0
0001BDD2 E080                       		asr.l	#8,d0
0001BDD4 3140 0012                  		move.w	d0,$12(a0)
0001BDD8 08E8 0001 0022             		bset	#1,$22(a0)
0001BDDE 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001BDE2 6600                       		bne.s	Obj09_BumpSnd
0001BDE4 14BC 0002                  		move.b	#2,(a2)
0001BDE8 2028 0032                  		move.l	$32(a0),d0
0001BDEC 5380                       		subq.l	#1,d0
0001BDEE 2540 0004                  		move.l	d0,4(a2)
0001BDF2                            
0001BDF2                            Obj09_BumpSnd:
0001BDF2 303C 00B4                  		move.w	#$B4,d0
0001BDF6 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play bumper sound
0001BDFC                            ; ===========================================================================
0001BDFC                            
0001BDFC                            Obj09_GOAL:
0001BDFC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001BE00 6600                       		bne.s	Obj09_UPblock
0001BE02 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001BE06 303C 00A8                  		move.w	#$A8,d0		; change item
0001BE0A 4EB9 0000 137A             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001BE10 4E75                       		rts	
0001BE12                            ; ===========================================================================
0001BE12                            
0001BE12                            Obj09_UPblock:
0001BE12 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001BE16 6600                       		bne.s	Obj09_DOWNblock
0001BE18 4A28 0036                  		tst.b	$36(a0)
0001BE1C 6600 0000                  		bne.w	Obj09_NoGlass
0001BE20 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BE26 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BE2C 6700                       		beq.s	Obj09_UPsnd
0001BE2E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001BE32 2268 0032                  		movea.l	$32(a0),a1
0001BE36 5389                       		subq.l	#1,a1
0001BE38 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001BE3C                            
0001BE3C                            Obj09_UPsnd:
0001BE3C 303C 00A9                  		move.w	#$A9,d0
0001BE40 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BE46                            ; ===========================================================================
0001BE46                            
0001BE46                            Obj09_DOWNblock:
0001BE46 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001BE4A 6600                       		bne.s	Obj09_Rblock
0001BE4C 4A28 0036                  		tst.b	$36(a0)
0001BE50 6600 0000                  		bne.w	Obj09_NoGlass
0001BE54 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BE5A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BE60 6600                       		bne.s	Obj09_DOWNsnd
0001BE62 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001BE66 2268 0032                  		movea.l	$32(a0),a1
0001BE6A 5389                       		subq.l	#1,a1
0001BE6C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001BE70                            
0001BE70                            Obj09_DOWNsnd:
0001BE70 303C 00A9                  		move.w	#$A9,d0
0001BE74 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BE7A                            ; ===========================================================================
0001BE7A                            
0001BE7A                            Obj09_Rblock:
0001BE7A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001BE7E 6600                       		bne.s	Obj09_ChkGlass
0001BE80 4A28 0037                  		tst.b	$37(a0)
0001BE84 6600 0000                  		bne.w	Obj09_NoGlass
0001BE88 117C 001E 0037             		move.b	#$1E,$37(a0)
0001BE8E 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001BE92 6600                       		bne.s	Obj09_RevStage
0001BE94 14BC 0004                  		move.b	#4,(a2)
0001BE98 2028 0032                  		move.l	$32(a0),d0
0001BE9C 5380                       		subq.l	#1,d0
0001BE9E 2540 0004                  		move.l	d0,4(a2)
0001BEA2                            
0001BEA2                            Obj09_RevStage:
0001BEA2 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001BEA6 303C 00A9                  		move.w	#$A9,d0
0001BEAA 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play sound
0001BEB0                            ; ===========================================================================
0001BEB0                            
0001BEB0                            Obj09_ChkGlass:
0001BEB0 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001BEB4 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001BEB6 0C00 002E                  		cmpi.b	#$2E,d0
0001BEBA 6700                       		beq.s	Obj09_Glass
0001BEBC 0C00 002F                  		cmpi.b	#$2F,d0
0001BEC0 6700                       		beq.s	Obj09_Glass
0001BEC2 0C00 0030                  		cmpi.b	#$30,d0
0001BEC6 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001BEC8                            
0001BEC8                            Obj09_Glass:
0001BEC8 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001BECC 6600                       		bne.s	Obj09_GlassSnd
0001BECE 14BC 0006                  		move.b	#6,(a2)
0001BED2 2268 0032                  		movea.l	$32(a0),a1
0001BED6 5389                       		subq.l	#1,a1
0001BED8 2549 0004                  		move.l	a1,4(a2)
0001BEDC 1011                       		move.b	(a1),d0
0001BEDE 5200                       		addq.b	#1,d0		; change glass type when touched
0001BEE0 0C00 0030                  		cmpi.b	#$30,d0
0001BEE4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001BEE6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001BEE8                            
0001BEE8                            Obj09_GlassUpdate:
0001BEE8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001BEEC                            
0001BEEC                            Obj09_GlassSnd:
0001BEEC 303C 00BA                  		move.w	#$BA,d0
0001BEF0 4EF9 0000 137A             		jmp	(PlaySound_Special).l ;	play glass block sound
0001BEF6                            ; ===========================================================================
0001BEF6                            
0001BEF6                            Obj09_NoGlass:
0001BEF6 4E75                       		rts	
0001BEF8                            ; End of function Obj09_ChkItems2
0001BEF8                            
0001BEF8                            ; ===========================================================================
0001BEF8                            ; ---------------------------------------------------------------------------
0001BEF8                            ; Object 10 - blank
0001BEF8                            ; ---------------------------------------------------------------------------
0001BEF8                            
0001BEF8                            Obj10:					; XREF: Obj_Index
0001BEF8 4E75                       		rts	
0001BEFA                            ; ---------------------------------------------------------------------------
0001BEFA                            ; Subroutine to	animate	level graphics
0001BEFA                            ; ---------------------------------------------------------------------------
0001BEFA                            
0001BEFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEFA                            
0001BEFA                            
0001BEFA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001BEFA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001BEFE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001BF00 4DF9 00C0 0000             		lea	($C00000).l,a6
0001BF06 6100 0000                  		bsr.w	AniArt_GiantRing
0001BF0A 7000                       		moveq	#0,d0
0001BF0C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001BF10 D040                       		add.w	d0,d0
0001BF12 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001BF16 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001BF1A                            ; ===========================================================================
0001BF1A                            
0001BF1A                            AniArt_Pause:
0001BF1A 4E75                       		rts	
0001BF1C                            ; End of function AniArt_Load
0001BF1C                            
0001BF1C                            ; ===========================================================================
0001BF1C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001BF20 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001BF24 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001BF28 0000                       		dc.w AniArt_Ending-AniArt_Index
0001BF2A                            ; ===========================================================================
0001BF2A                            ; ---------------------------------------------------------------------------
0001BF2A                            ; Animated pattern routine - Green Hill
0001BF2A                            ; ---------------------------------------------------------------------------
0001BF2A                            
0001BF2A                            AniArt_GHZ:				; XREF: AniArt_Index
0001BF2A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001BF2E 6A00                       		bpl.s	loc_1C08A
0001BF30 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001BF36 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001BF3C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001BF40 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001BF44 0240 0001                  		andi.w	#1,d0
0001BF48 6700                       		beq.s	loc_1C078
0001BF4A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001BF4E                            
0001BF4E                            loc_1C078:
0001BF4E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001BF58 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001BF5C 6000 0000                  		bra.w	LoadTiles
0001BF60                            ; ===========================================================================
0001BF60                            
0001BF60                            loc_1C08A:
0001BF60 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001BF64 6A00                       		bpl.s	loc_1C0C0
0001BF66 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001BF6C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001BF72 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001BF76 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001BF7A 0240 0001                  		andi.w	#1,d0
0001BF7E 6700                       		beq.s	loc_1C0AE
0001BF80 43E9 0200                  		lea	$200(a1),a1
0001BF84                            
0001BF84                            loc_1C0AE:
0001BF84 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001BF8E 323C 000F                  		move.w	#$F,d1
0001BF92 6000 0000                  		bra.w	LoadTiles
0001BF96                            ; ===========================================================================
0001BF96                            
0001BF96                            loc_1C0C0:
0001BF96 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001BF9A 6A00                       		bpl.s	locret_1C10C
0001BF9C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001BFA2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001BFA6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001BFAA 0240 0003                  		andi.w	#3,d0
0001BFAE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001BFB2 0800 0000                  		btst	#0,d0
0001BFB6 6600                       		bne.s	loc_1C0E8
0001BFB8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001BFBE                            
0001BFBE                            loc_1C0E8:
0001BFBE EF48                       		lsl.w	#7,d0
0001BFC0 3200                       		move.w	d0,d1
0001BFC2 D040                       		add.w	d0,d0
0001BFC4 D041                       		add.w	d1,d0
0001BFC6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001BFD0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001BFD6 43F1 0000                  		lea	(a1,d0.w),a1
0001BFDA 323C 000B                  		move.w	#$B,d1
0001BFDE 6100 0000                  		bsr.w	LoadTiles
0001BFE2                            
0001BFE2                            locret_1C10C:
0001BFE2 4E75                       		rts	
0001BFE4                            ; ===========================================================================
0001BFE4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001BFE8                            ; ===========================================================================
0001BFE8                            ; ---------------------------------------------------------------------------
0001BFE8                            ; Animated pattern routine - Marble
0001BFE8                            ; ---------------------------------------------------------------------------
0001BFE8                            
0001BFE8                            AniArt_MZ:				; XREF: AniArt_Index
0001BFE8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001BFEC 6A00                       		bpl.s	loc_1C150
0001BFEE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001BFF4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001BFFA 7000                       		moveq	#0,d0
0001BFFC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C000 5200                       		addq.b	#1,d0
0001C002 0C00 0003                  		cmpi.b	#3,d0
0001C006 6600                       		bne.s	loc_1C134
0001C008 7000                       		moveq	#0,d0
0001C00A                            
0001C00A                            loc_1C134:
0001C00A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C00E C0FC 0100                  		mulu.w	#$100,d0
0001C012 D2C0                       		adda.w	d0,a1
0001C014 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C01E 323C 0007                  		move.w	#7,d1
0001C022 6100 0000                  		bsr.w	LoadTiles
0001C026                            
0001C026                            loc_1C150:
0001C026 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C02A 6A00                       		bpl.s	loc_1C1AE
0001C02C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C032 7000                       		moveq	#0,d0
0001C034 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C038 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C03E EE58                       		ror.w	#7,d0
0001C040 D8C0                       		adda.w	d0,a4
0001C042 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C04C 7600                       		moveq	#0,d3
0001C04E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C052 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C056 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C05A 343C 0003                  		move.w	#3,d2
0001C05E                            
0001C05E                            loc_1C188:
0001C05E 3003                       		move.w	d3,d0
0001C060 D040                       		add.w	d0,d0
0001C062 0240 001E                  		andi.w	#$1E,d0
0001C066 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C06C 3033 0000                  		move.w	(a3,d0.w),d0
0001C070 47F3 0000                  		lea	(a3,d0.w),a3
0001C074 224C                       		movea.l	a4,a1
0001C076 323C 001F                  		move.w	#$1F,d1
0001C07A 4E93                       		jsr	(a3)
0001C07C 5843                       		addq.w	#4,d3
0001C07E 51CA FFDE                  		dbf	d2,loc_1C188
0001C082 4E75                       		rts	
0001C084                            ; ===========================================================================
0001C084                            
0001C084                            loc_1C1AE:
0001C084 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C088 6A00 0000                  		bpl.w	locret_1C1EA
0001C08C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C092 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C098 7000                       		moveq	#0,d0
0001C09A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C09E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C0A2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C0A8 C0FC 00C0                  		mulu.w	#$C0,d0
0001C0AC D2C0                       		adda.w	d0,a1
0001C0AE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C0B8 323C 0005                  		move.w	#5,d1
0001C0BC 6000 0000                  		bra.w	LoadTiles
0001C0C0                            ; ===========================================================================
0001C0C0                            
0001C0C0                            locret_1C1EA:
0001C0C0 4E75                       		rts	
0001C0C2                            ; ===========================================================================
0001C0C2                            ; ---------------------------------------------------------------------------
0001C0C2                            ; Animated pattern routine - Scrap Brain
0001C0C2                            ; ---------------------------------------------------------------------------
0001C0C2                            
0001C0C2                            AniArt_SBZ:				; XREF: AniArt_Index
0001C0C2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C0C6 6700                       		beq.s	loc_1C1F8
0001C0C8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C0CC 6000                       		bra.s	loc_1C250
0001C0CE                            ; ===========================================================================
0001C0CE                            
0001C0CE                            loc_1C1F8:
0001C0CE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C0D2 6A00                       		bpl.s	loc_1C250
0001C0D4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C0DA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C0E0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C0EA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C0EE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C0F2 0240 0007                  		andi.w	#7,d0
0001C0F6 6700                       		beq.s	loc_1C234
0001C0F8 5340                       		subq.w	#1,d0
0001C0FA C0FC 0180                  		mulu.w	#$180,d0
0001C0FE 43F1 0000                  		lea	(a1,d0.w),a1
0001C102 323C 000B                  		move.w	#$B,d1
0001C106 6000 0000                  		bra.w	LoadTiles
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            loc_1C234:
0001C10A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C110                            
0001C110                            loc_1C23A:
0001C110 323C 0005                  		move.w	#5,d1
0001C114 6100 0000                  		bsr.w	LoadTiles
0001C118 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C11E 323C 0005                  		move.w	#5,d1
0001C122 6000 0000                  		bra.w	LoadTiles
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            loc_1C250:
0001C126 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C12A 6700                       		beq.s	loc_1C25C
0001C12C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C130 6000                       		bra.s	locret_1C2A0
0001C132                            ; ===========================================================================
0001C132                            
0001C132                            loc_1C25C:
0001C132 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C136 6A00                       		bpl.s	locret_1C2A0
0001C138 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C13E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C144 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C14E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C152 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C156 0240 0007                  		andi.w	#7,d0
0001C15A 6700                       		beq.s	loc_1C298
0001C15C 5340                       		subq.w	#1,d0
0001C15E C0FC 0180                  		mulu.w	#$180,d0
0001C162 43F1 0000                  		lea	(a1,d0.w),a1
0001C166 323C 000B                  		move.w	#$B,d1
0001C16A 6000 0000                  		bra.w	LoadTiles
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            loc_1C298:
0001C16E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C174 609A                       		bra.s	loc_1C23A
0001C176                            ; ===========================================================================
0001C176                            
0001C176                            locret_1C2A0:
0001C176 4E75                       		rts	
0001C178                            ; ===========================================================================
0001C178                            ; ---------------------------------------------------------------------------
0001C178                            ; Animated pattern routine - ending sequence
0001C178                            ; ---------------------------------------------------------------------------
0001C178                            
0001C178                            AniArt_Ending:				; XREF: AniArt_Index
0001C178 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C17C 6A00                       		bpl.s	loc_1C2F4
0001C17E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C184 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C18A 45F8 9400                  		lea	($FFFF9400).w,a2
0001C18E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C192 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C196 0240 0001                  		andi.w	#1,d0
0001C19A 6700                       		beq.s	loc_1C2CE
0001C19C 43E9 0200                  		lea	$200(a1),a1
0001C1A0 45EA 0200                  		lea	$200(a2),a2
0001C1A4                            
0001C1A4                            loc_1C2CE:
0001C1A4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C1AE 323C 000F                  		move.w	#$F,d1
0001C1B2 6100 0000                  		bsr.w	LoadTiles
0001C1B6 224A                       		movea.l	a2,a1
0001C1B8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C1C2 323C 000F                  		move.w	#$F,d1
0001C1C6 6000 0000                  		bra.w	LoadTiles
0001C1CA                            ; ===========================================================================
0001C1CA                            
0001C1CA                            loc_1C2F4:
0001C1CA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C1CE 6A00                       		bpl.s	loc_1C33C
0001C1D0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C1D6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C1DA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C1DE 0240 0007                  		andi.w	#7,d0
0001C1E2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C1E6 EF48                       		lsl.w	#7,d0
0001C1E8 3200                       		move.w	d0,d1
0001C1EA D040                       		add.w	d0,d0
0001C1EC D041                       		add.w	d1,d0
0001C1EE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C1F8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C1FE 43F1 0000                  		lea	(a1,d0.w),a1
0001C202 323C 000B                  		move.w	#$B,d1
0001C206 6000 0000                  		bra.w	LoadTiles
0001C20A                            ; ===========================================================================
0001C20A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C212                            ; ===========================================================================
0001C212                            
0001C212                            loc_1C33C:
0001C212 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C216 6A00                       		bpl.s	loc_1C37A
0001C218 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C21E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C222 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C226 0240 0003                  		andi.w	#3,d0
0001C22A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C22E E148                       		lsl.w	#8,d0
0001C230 D040                       		add.w	d0,d0
0001C232 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C23C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C240 43F1 0000                  		lea	(a1,d0.w),a1
0001C244 323C 000F                  		move.w	#$F,d1
0001C248 6000 0000                  		bra.w	LoadTiles
0001C24C                            ; ===========================================================================
0001C24C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C250                            ; ===========================================================================
0001C250                            
0001C250                            loc_1C37A:
0001C250 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C254 6A00                       		bpl.s	locret_1C3B4
0001C256 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C25C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C260 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C264 0240 0003                  		andi.w	#3,d0
0001C268 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C26C E148                       		lsl.w	#8,d0
0001C26E D040                       		add.w	d0,d0
0001C270 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C27A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C27E 43F1 0000                  		lea	(a1,d0.w),a1
0001C282 323C 000F                  		move.w	#$F,d1
0001C286 6000 0000                  		bra.w	LoadTiles
0001C28A                            ; ===========================================================================
0001C28A                            
0001C28A                            locret_1C3B4:
0001C28A 4E75                       		rts	
0001C28C                            ; ===========================================================================
0001C28C                            
0001C28C                            AniArt_none:				; XREF: AniArt_Index
0001C28C 4E75                       		rts	
0001C28E                            
0001C28E                            ; ---------------------------------------------------------------------------
0001C28E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C28E                            ; ---------------------------------------------------------------------------
0001C28E                            
0001C28E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C28E                            
0001C28E                            
0001C28E                            LoadTiles:
0001C28E 2C99                       		move.l	(a1)+,(a6)
0001C290 2C99                       		move.l	(a1)+,(a6)
0001C292 2C99                       		move.l	(a1)+,(a6)
0001C294 2C99                       		move.l	(a1)+,(a6)
0001C296 2C99                       		move.l	(a1)+,(a6)
0001C298 2C99                       		move.l	(a1)+,(a6)
0001C29A 2C99                       		move.l	(a1)+,(a6)
0001C29C 2C99                       		move.l	(a1)+,(a6)
0001C29E 51C9 FFEE                  		dbf	d1,LoadTiles
0001C2A2 4E75                       		rts	
0001C2A4                            ; End of function LoadTiles
0001C2A4                            
0001C2A4                            ; ===========================================================================
0001C2A4                            ; ---------------------------------------------------------------------------
0001C2A4                            ; Animated pattern routine - more Marble Zone
0001C2A4                            ; ---------------------------------------------------------------------------
0001C2A4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C2A8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C2AC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C2B0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C2B4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C2B8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C2BC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C2C0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C2C4                            ; ===========================================================================
0001C2C4                            
0001C2C4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C2C4 2C91                       		move.l	(a1),(a6)
0001C2C6 43E9 0010                  		lea	$10(a1),a1
0001C2CA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C2CE 4E75                       		rts	
0001C2D0                            ; ===========================================================================
0001C2D0                            
0001C2D0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C2D0 2029 0002                  		move.l	2(a1),d0
0001C2D4 1029 0001                  		move.b	1(a1),d0
0001C2D8 E098                       		ror.l	#8,d0
0001C2DA 2C80                       		move.l	d0,(a6)
0001C2DC 43E9 0010                  		lea	$10(a1),a1
0001C2E0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C2E4 4E75                       		rts	
0001C2E6                            ; ===========================================================================
0001C2E6                            
0001C2E6                            loc_1C410:				; XREF: AniArt_MZextra
0001C2E6 2CA9 0002                  		move.l	2(a1),(a6)
0001C2EA 43E9 0010                  		lea	$10(a1),a1
0001C2EE 51C9 FFF6                  		dbf	d1,loc_1C410
0001C2F2 4E75                       		rts	
0001C2F4                            ; ===========================================================================
0001C2F4                            
0001C2F4                            loc_1C41E:				; XREF: AniArt_MZextra
0001C2F4 2029 0004                  		move.l	4(a1),d0
0001C2F8 1029 0003                  		move.b	3(a1),d0
0001C2FC E098                       		ror.l	#8,d0
0001C2FE 2C80                       		move.l	d0,(a6)
0001C300 43E9 0010                  		lea	$10(a1),a1
0001C304 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C308 4E75                       		rts	
0001C30A                            ; ===========================================================================
0001C30A                            
0001C30A                            loc_1C434:				; XREF: AniArt_MZextra
0001C30A 2CA9 0004                  		move.l	4(a1),(a6)
0001C30E 43E9 0010                  		lea	$10(a1),a1
0001C312 51C9 FFF6                  		dbf	d1,loc_1C434
0001C316 4E75                       		rts	
0001C318                            ; ===========================================================================
0001C318                            
0001C318                            loc_1C442:				; XREF: AniArt_MZextra
0001C318 2029 0006                  		move.l	6(a1),d0
0001C31C 1029 0005                  		move.b	5(a1),d0
0001C320 E098                       		ror.l	#8,d0
0001C322 2C80                       		move.l	d0,(a6)
0001C324 43E9 0010                  		lea	$10(a1),a1
0001C328 51C9 FFEE                  		dbf	d1,loc_1C442
0001C32C 4E75                       		rts	
0001C32E                            ; ===========================================================================
0001C32E                            
0001C32E                            loc_1C458:				; XREF: AniArt_MZextra
0001C32E 2CA9 0006                  		move.l	6(a1),(a6)
0001C332 43E9 0010                  		lea	$10(a1),a1
0001C336 51C9 FFF6                  		dbf	d1,loc_1C458
0001C33A 4E75                       		rts	
0001C33C                            ; ===========================================================================
0001C33C                            
0001C33C                            loc_1C466:				; XREF: AniArt_MZextra
0001C33C 2029 0008                  		move.l	8(a1),d0
0001C340 1029 0007                  		move.b	7(a1),d0
0001C344 E098                       		ror.l	#8,d0
0001C346 2C80                       		move.l	d0,(a6)
0001C348 43E9 0010                  		lea	$10(a1),a1
0001C34C 51C9 FFEE                  		dbf	d1,loc_1C466
0001C350 4E75                       		rts	
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            loc_1C47C:				; XREF: AniArt_MZextra
0001C352 2CA9 0008                  		move.l	8(a1),(a6)
0001C356 43E9 0010                  		lea	$10(a1),a1
0001C35A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C35E 4E75                       		rts	
0001C360                            ; ===========================================================================
0001C360                            
0001C360                            loc_1C48A:				; XREF: AniArt_MZextra
0001C360 2029 000A                  		move.l	$A(a1),d0
0001C364 1029 0009                  		move.b	9(a1),d0
0001C368 E098                       		ror.l	#8,d0
0001C36A 2C80                       		move.l	d0,(a6)
0001C36C 43E9 0010                  		lea	$10(a1),a1
0001C370 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C374 4E75                       		rts	
0001C376                            ; ===========================================================================
0001C376                            
0001C376                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C376 2CA9 000A                  		move.l	$A(a1),(a6)
0001C37A 43E9 0010                  		lea	$10(a1),a1
0001C37E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C382 4E75                       		rts	
0001C384                            ; ===========================================================================
0001C384                            
0001C384                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C384 2029 000C                  		move.l	$C(a1),d0
0001C388 1029 000B                  		move.b	$B(a1),d0
0001C38C E098                       		ror.l	#8,d0
0001C38E 2C80                       		move.l	d0,(a6)
0001C390 43E9 0010                  		lea	$10(a1),a1
0001C394 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C398 4E75                       		rts	
0001C39A                            ; ===========================================================================
0001C39A                            
0001C39A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C39A 2CA9 000C                  		move.l	$C(a1),(a6)
0001C39E 43E9 0010                  		lea	$10(a1),a1
0001C3A2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C3A6 4E75                       		rts	
0001C3A8                            ; ===========================================================================
0001C3A8                            
0001C3A8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C3A8 2029 000C                  		move.l	$C(a1),d0
0001C3AC E198                       		rol.l	#8,d0
0001C3AE 1011                       		move.b	0(a1),d0
0001C3B0 2C80                       		move.l	d0,(a6)
0001C3B2 43E9 0010                  		lea	$10(a1),a1
0001C3B6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C3BA 4E75                       		rts	
0001C3BC                            ; ===========================================================================
0001C3BC                            
0001C3BC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C3BC 3CA9 000E                  		move.w	$E(a1),(a6)
0001C3C0 3C91                       		move.w	0(a1),(a6)
0001C3C2 43E9 0010                  		lea	$10(a1),a1
0001C3C6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C3CA 4E75                       		rts	
0001C3CC                            ; ===========================================================================
0001C3CC                            
0001C3CC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C3CC 2011                       		move.l	0(a1),d0
0001C3CE 1029 000F                  		move.b	$F(a1),d0
0001C3D2 E098                       		ror.l	#8,d0
0001C3D4 2C80                       		move.l	d0,(a6)
0001C3D6 43E9 0010                  		lea	$10(a1),a1
0001C3DA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C3DE 4E75                       		rts	
0001C3E0                            
0001C3E0                            ; ---------------------------------------------------------------------------
0001C3E0                            ; Animated pattern routine - giant ring
0001C3E0                            ; ---------------------------------------------------------------------------
0001C3E0                            
0001C3E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3E0                            
0001C3E0                            
0001C3E0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C3E0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C3E4 6600                       		bne.s	loc_1C518
0001C3E6 4E75                       		rts	
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            loc_1C518:
0001C3E8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C3EE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C3F4 7000                       		moveq	#0,d0
0001C3F6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C3FA 43F1 0000                  		lea	(a1,d0.w),a1
0001C3FE 0640 8000                  		addi.w	#$8000,d0
0001C402 E588                       		lsl.l	#2,d0
0001C404 E448                       		lsr.w	#2,d0
0001C406 0040 4000                  		ori.w	#$4000,d0
0001C40A 4840                       		swap	d0
0001C40C 2D40 0004                  		move.l	d0,4(a6)
0001C410 323C 000D                  		move.w	#$D,d1
0001C414 6000 FE78                  		bra.w	LoadTiles
0001C418                            ; End of function AniArt_GiantRing
0001C418                            
0001C418                            ; ===========================================================================
0001C418                            ; ---------------------------------------------------------------------------
0001C418                            ; Object 21 - SCORE, TIME, RINGS
0001C418                            ; ---------------------------------------------------------------------------
0001C418                            
0001C418                            Obj21:					; XREF: Obj_Index
0001C418 7000                       		moveq	#0,d0
0001C41A 1028 0024                  		move.b	$24(a0),d0
0001C41E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C422 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C426                            ; ===========================================================================
0001C426 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C428 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C42A                            ; ===========================================================================
0001C42A                            
0001C42A                            Obj21_Main:				; XREF: Obj21_Main
0001C42A 5428 0024                  		addq.b	#2,$24(a0)
0001C42E 317C 0090 0008             		move.w	#$90,8(a0)
0001C434 317C 0108 000A             		move.w	#$108,$A(a0)
0001C43A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C442 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C448 117C 0000 0001             		move.b	#0,1(a0)
0001C44E 117C 0000 0018             		move.b	#0,$18(a0)
0001C454                            
0001C454                            Obj21_Flash:				; XREF: Obj21_Main
0001C454 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C458 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C45A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C45E 4EF9 0000 D58A             		jmp	DisplaySprite
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            Obj21_Flash2:
0001C464 7000                       		moveq	#0,d0
0001C466 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C46C 6600                       		bne.s	Obj21_Display
0001C46E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C470 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C476 6600                       		bne.s	Obj21_Display	; if not, branch
0001C478 5440                       		addq.w	#2,d0		; make time counter flash red
0001C47A                            
0001C47A                            Obj21_Display:
0001C47A 1140 001A                  		move.b	d0,$1A(a0)
0001C47E 4EF9 0000 D58A             		jmp	DisplaySprite
0001C484                            ; ===========================================================================
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            ; Sprite mappings - SCORE, TIME, RINGS
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            Map_obj21:
0001C484                            	include "_maps\obj21.asm"
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            ; Sprite mappings - SCORE, TIME, RINGS
0001C484                            ; ---------------------------------------------------------------------------
0001C484 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C488 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C48C 0A                         byte_1C5BC:	dc.b $A
0001C48D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C492 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C497 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C49C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C4A1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C4A6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C4AB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C4B0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C4B5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C4BA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C4BF 00                         		dc.b 0
0001C4C0 0A                         byte_1C5F0:	dc.b $A
0001C4C1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C4C6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C4CB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C4D0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C4D5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C4DA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C4DF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C4E4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C4E9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C4EE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C4F3 00                         		dc.b 0
0001C4F4 0A                         byte_1C624:	dc.b $A
0001C4F5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C4FA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C4FF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C504 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C509 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C50E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C513 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C518 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C51D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C522 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C527 00                         		dc.b 0
0001C528 0A                         byte_1C658:	dc.b $A
0001C529 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C52E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C533 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C538 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C53D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C542 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C547 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C54C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C551 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C556 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C55C 00                         		even
0001C55C 00                         		even
0001C55C                            
0001C55C                            ; ---------------------------------------------------------------------------
0001C55C                            ; Add points subroutine
0001C55C                            ; ---------------------------------------------------------------------------
0001C55C                            
0001C55C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C55C                            
0001C55C                            
0001C55C                            AddPoints:
0001C55C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C562 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C566 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C56A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C56C 223C 000F 423F             		move.l	#999999,d1
0001C572 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C574 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C578 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C57A 2481                       		move.l	d1,(a2)
0001C57C                            
0001C57C                            loc_1C6AC:
0001C57C 2013                       		move.l	(a3),d0
0001C57E B092                       		cmp.l	(a2),d0
0001C580 6500 0000                  		bcs.w	locret_1C6B6
0001C584 2480                       		move.l	d0,(a2)
0001C586                            
0001C586                            locret_1C6B6:
0001C586 4E75                       		rts	
0001C588                            ; End of function AddPoints
0001C588                            
0001C588                            ; ---------------------------------------------------------------------------
0001C588                            ; Subroutine to	update the HUD
0001C588                            ; ---------------------------------------------------------------------------
0001C588                            
0001C588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C588                            
0001C588                            
0001C588                            HudUpdate:
0001C588 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C58C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C590 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C594 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C596 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C59A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C5A0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C5A4 6100 0000                  		bsr.w	Hud_Score
0001C5A8                            
0001C5A8                            Hud_ChkRings:
0001C5A8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C5AC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C5AE 6A00                       		bpl.s	loc_1C6E4
0001C5B0 6100 0000                  		bsr.w	Hud_LoadZero
0001C5B4                            
0001C5B4                            loc_1C6E4:
0001C5B4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C5B8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C5BE 7200                       		moveq	#0,d1
0001C5C0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C5C4 6100 0000                  		bsr.w	Hud_Rings
0001C5C8                            
0001C5C8                            Hud_ChkTime:
0001C5C8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C5CC 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C5CE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C5D2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C5D4 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C5D8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C5DE 6700                       		beq.s	TimeOver	; if yes, branch
0001C5E0 5221                       		addq.b	#1,-(a1)
0001C5E2 0C11 003C                  		cmpi.b	#60,(a1)
0001C5E6 6500                       		bcs.s	Hud_ChkLives
0001C5E8 12BC 0000                  		move.b	#0,(a1)
0001C5EC 5221                       		addq.b	#1,-(a1)
0001C5EE 0C11 003C                  		cmpi.b	#60,(a1)
0001C5F2 6500                       		bcs.s	loc_1C734
0001C5F4 12BC 0000                  		move.b	#0,(a1)
0001C5F8 5221                       		addq.b	#1,-(a1)
0001C5FA 0C11 0009                  		cmpi.b	#9,(a1)
0001C5FE 6500                       		bcs.s	loc_1C734
0001C600 12BC 0009                  		move.b	#9,(a1)
0001C604                            
0001C604                            loc_1C734:
0001C604 203C 5E40 0003             		move.l	#$5E400003,d0
0001C60A 7200                       		moveq	#0,d1
0001C60C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C610 6100 0000                  		bsr.w	Hud_Mins
0001C614 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C61A 7200                       		moveq	#0,d1
0001C61C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C620 6100 0000                  		bsr.w	Hud_Secs
0001C624                            
0001C624                            Hud_ChkLives:
0001C624 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C628 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C62A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C62E 6100 0000                  		bsr.w	Hud_Lives
0001C632                            
0001C632                            Hud_ChkBonus:
0001C632 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C636 6700                       		beq.s	Hud_End		; if not, branch
0001C638 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C63C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C646 7200                       		moveq	#0,d1
0001C648 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C64C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C650 7200                       		moveq	#0,d1
0001C652 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C656 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C65A                            
0001C65A                            Hud_End:
0001C65A 4E75                       		rts	
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            TimeOver:				; XREF: Hud_ChkTime
0001C65C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C660 41F8 D000                  		lea	($FFFFD000).w,a0
0001C664 2448                       		movea.l	a0,a2
0001C666 6100 E90C                  		bsr.w	KillSonic
0001C66A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C670 4E75                       		rts	
0001C672                            ; ===========================================================================
0001C672                            
0001C672                            HudDebug:				; XREF: HudUpdate
0001C672 6100 0000                  		bsr.w	HudDb_XY
0001C676 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C67A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C67C 6A00                       		bpl.s	HudDb_Rings
0001C67E 6100 0000                  		bsr.w	Hud_LoadZero
0001C682                            
0001C682                            HudDb_Rings:
0001C682 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C686 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C68C 7200                       		moveq	#0,d1
0001C68E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C692 6100 0000                  		bsr.w	Hud_Rings
0001C696                            
0001C696                            HudDb_ObjCount:
0001C696 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C69C 7200                       		moveq	#0,d1
0001C69E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C6A2 6100 0000                  		bsr.w	Hud_Secs
0001C6A6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C6AA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C6AC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C6B0 6100 0000                  		bsr.w	Hud_Lives
0001C6B4                            
0001C6B4                            HudDb_ChkBonus:
0001C6B4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C6B8 6700                       		beq.s	HudDb_End	; if not, branch
0001C6BA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C6BE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C6C8 7200                       		moveq	#0,d1
0001C6CA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C6CE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C6D2 7200                       		moveq	#0,d1
0001C6D4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C6D8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C6DC                            
0001C6DC                            HudDb_End:
0001C6DC 4E75                       		rts	
0001C6DE                            ; End of function HudUpdate
0001C6DE                            
0001C6DE                            ; ---------------------------------------------------------------------------
0001C6DE                            ; Subroutine to	load "0" on the	HUD
0001C6DE                            ; ---------------------------------------------------------------------------
0001C6DE                            
0001C6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6DE                            
0001C6DE                            
0001C6DE                            Hud_LoadZero:				; XREF: HudUpdate
0001C6DE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C6E8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C6EC 343C 0002                  		move.w	#2,d2
0001C6F0 6000                       		bra.s	loc_1C83E
0001C6F2                            ; End of function Hud_LoadZero
0001C6F2                            
0001C6F2                            ; ---------------------------------------------------------------------------
0001C6F2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C6F2                            ; ---------------------------------------------------------------------------
0001C6F2                            
0001C6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6F2                            
0001C6F2                            
0001C6F2                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C6F2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C6F8 6100 0000                  		bsr.w	Hud_Lives
0001C6FC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C706 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C70A 343C 000E                  		move.w	#$E,d2
0001C70E                            
0001C70E                            loc_1C83E:				; XREF: Hud_LoadZero
0001C70E 43FA 0000                  		lea	Art_Hud(pc),a1
0001C712                            
0001C712                            loc_1C842:
0001C712 323C 000F                  		move.w	#$F,d1
0001C716 101A                       		move.b	(a2)+,d0
0001C718 6B00                       		bmi.s	loc_1C85E
0001C71A 4880                       		ext.w	d0
0001C71C EB48                       		lsl.w	#5,d0
0001C71E 47F1 0000                  		lea	(a1,d0.w),a3
0001C722                            
0001C722                            loc_1C852:
0001C722 2C9B                       		move.l	(a3)+,(a6)
0001C724 51C9 FFFC                  		dbf	d1,loc_1C852
0001C728                            
0001C728                            loc_1C858:
0001C728 51CA FFE8                  		dbf	d2,loc_1C842
0001C72C                            
0001C72C 4E75                       		rts	
0001C72E                            ; ===========================================================================
0001C72E                            
0001C72E                            loc_1C85E:
0001C72E 2CBC 0000 0000             		move.l	#0,(a6)
0001C734 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C738                            
0001C738 60EE                       		bra.s	loc_1C858
0001C73A                            ; End of function Hud_Base
0001C73A                            
0001C73A                            ; ===========================================================================
0001C73A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C746 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            ; Subroutine to	load debug mode	numbers	patterns
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            
0001C74A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C74A                            
0001C74A                            
0001C74A                            HudDb_XY:				; XREF: HudDebug
0001C74A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C754 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C758 4841                       		swap	d1
0001C75A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C75E 6100                       		bsr.s	HudDb_XY2
0001C760 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C764 4841                       		swap	d1
0001C766 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C76A                            ; End of function HudDb_XY
0001C76A                            
0001C76A                            
0001C76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C76A                            
0001C76A                            
0001C76A                            HudDb_XY2:
0001C76A 7C07                       		moveq	#7,d6
0001C76C 43F9 0000 05CE             		lea	(Art_Text).l,a1
0001C772                            
0001C772                            HudDb_XYLoop:
0001C772 E959                       		rol.w	#4,d1
0001C774 3401                       		move.w	d1,d2
0001C776 0242 000F                  		andi.w	#$F,d2
0001C77A 0C42 000A                  		cmpi.w	#$A,d2
0001C77E 6500                       		bcs.s	loc_1C8B2
0001C780 5E42                       		addq.w	#7,d2
0001C782                            
0001C782                            loc_1C8B2:
0001C782 EB4A                       		lsl.w	#5,d2
0001C784 47F1 2000                  		lea	(a1,d2.w),a3
0001C788 2C9B                       		move.l	(a3)+,(a6)
0001C78A 2C9B                       		move.l	(a3)+,(a6)
0001C78C 2C9B                       		move.l	(a3)+,(a6)
0001C78E 2C9B                       		move.l	(a3)+,(a6)
0001C790 2C9B                       		move.l	(a3)+,(a6)
0001C792 2C9B                       		move.l	(a3)+,(a6)
0001C794 2C9B                       		move.l	(a3)+,(a6)
0001C796 2C9B                       		move.l	(a3)+,(a6)
0001C798 4841                       		swap	d1
0001C79A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001C79E                            
0001C79E 4E75                       		rts	
0001C7A0                            ; End of function HudDb_XY2
0001C7A0                            
0001C7A0                            ; ---------------------------------------------------------------------------
0001C7A0                            ; Subroutine to	load rings numbers patterns
0001C7A0                            ; ---------------------------------------------------------------------------
0001C7A0                            
0001C7A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7A0                            
0001C7A0                            
0001C7A0                            Hud_Rings:				; XREF: HudUpdate
0001C7A0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001C7A6 7C02                       		moveq	#2,d6
0001C7A8 6000                       		bra.s	Hud_LoadArt
0001C7AA                            ; End of function Hud_Rings
0001C7AA                            
0001C7AA                            ; ---------------------------------------------------------------------------
0001C7AA                            ; Subroutine to	load score numbers patterns
0001C7AA                            ; ---------------------------------------------------------------------------
0001C7AA                            
0001C7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7AA                            
0001C7AA                            
0001C7AA                            Hud_Score:				; XREF: HudUpdate
0001C7AA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001C7B0 7C05                       		moveq	#5,d6
0001C7B2                            
0001C7B2                            Hud_LoadArt:
0001C7B2 7800                       		moveq	#0,d4
0001C7B4 43FA 0000                  		lea	Art_Hud(pc),a1
0001C7B8                            
0001C7B8                            Hud_ScoreLoop:
0001C7B8 7400                       		moveq	#0,d2
0001C7BA 261A                       		move.l	(a2)+,d3
0001C7BC                            
0001C7BC                            loc_1C8EC:
0001C7BC 9283                       		sub.l	d3,d1
0001C7BE 6500                       		bcs.s	loc_1C8F4
0001C7C0 5242                       		addq.w	#1,d2
0001C7C2 60F8                       		bra.s	loc_1C8EC
0001C7C4                            ; ===========================================================================
0001C7C4                            
0001C7C4                            loc_1C8F4:
0001C7C4 D283                       		add.l	d3,d1
0001C7C6 4A42                       		tst.w	d2
0001C7C8 6700                       		beq.s	loc_1C8FE
0001C7CA 383C 0001                  		move.w	#1,d4
0001C7CE                            
0001C7CE                            loc_1C8FE:
0001C7CE 4A44                       		tst.w	d4
0001C7D0 6700                       		beq.s	loc_1C92C
0001C7D2 ED4A                       		lsl.w	#6,d2
0001C7D4 2D40 0004                  		move.l	d0,4(a6)
0001C7D8 47F1 2000                  		lea	(a1,d2.w),a3
0001C7DC 2C9B                       		move.l	(a3)+,(a6)
0001C7DE 2C9B                       		move.l	(a3)+,(a6)
0001C7E0 2C9B                       		move.l	(a3)+,(a6)
0001C7E2 2C9B                       		move.l	(a3)+,(a6)
0001C7E4 2C9B                       		move.l	(a3)+,(a6)
0001C7E6 2C9B                       		move.l	(a3)+,(a6)
0001C7E8 2C9B                       		move.l	(a3)+,(a6)
0001C7EA 2C9B                       		move.l	(a3)+,(a6)
0001C7EC 2C9B                       		move.l	(a3)+,(a6)
0001C7EE 2C9B                       		move.l	(a3)+,(a6)
0001C7F0 2C9B                       		move.l	(a3)+,(a6)
0001C7F2 2C9B                       		move.l	(a3)+,(a6)
0001C7F4 2C9B                       		move.l	(a3)+,(a6)
0001C7F6 2C9B                       		move.l	(a3)+,(a6)
0001C7F8 2C9B                       		move.l	(a3)+,(a6)
0001C7FA 2C9B                       		move.l	(a3)+,(a6)
0001C7FC                            
0001C7FC                            loc_1C92C:
0001C7FC 0680 0040 0000             		addi.l	#$400000,d0
0001C802 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001C806                            
0001C806 4E75                       		rts	
0001C808                            ; End of function Hud_Score
0001C808                            
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            ; Subroutine to	load countdown numbers on the continue screen
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            
0001C808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C808                            
0001C808                            
0001C808                            ContScrCounter:				; XREF: ContinueScreen
0001C808 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001C812 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C818 45F9 0000 0000             		lea	(Hud_10).l,a2
0001C81E 7C01                       		moveq	#1,d6
0001C820 7800                       		moveq	#0,d4
0001C822 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001C826                            
0001C826                            ContScr_Loop:
0001C826 7400                       		moveq	#0,d2
0001C828 261A                       		move.l	(a2)+,d3
0001C82A                            
0001C82A                            loc_1C95A:
0001C82A 9283                       		sub.l	d3,d1
0001C82C 6500                       		bcs.s	loc_1C962
0001C82E 5242                       		addq.w	#1,d2
0001C830 60F8                       		bra.s	loc_1C95A
0001C832                            ; ===========================================================================
0001C832                            
0001C832                            loc_1C962:
0001C832 D283                       		add.l	d3,d1
0001C834 ED4A                       		lsl.w	#6,d2
0001C836 47F1 2000                  		lea	(a1,d2.w),a3
0001C83A 2C9B                       		move.l	(a3)+,(a6)
0001C83C 2C9B                       		move.l	(a3)+,(a6)
0001C83E 2C9B                       		move.l	(a3)+,(a6)
0001C840 2C9B                       		move.l	(a3)+,(a6)
0001C842 2C9B                       		move.l	(a3)+,(a6)
0001C844 2C9B                       		move.l	(a3)+,(a6)
0001C846 2C9B                       		move.l	(a3)+,(a6)
0001C848 2C9B                       		move.l	(a3)+,(a6)
0001C84A 2C9B                       		move.l	(a3)+,(a6)
0001C84C 2C9B                       		move.l	(a3)+,(a6)
0001C84E 2C9B                       		move.l	(a3)+,(a6)
0001C850 2C9B                       		move.l	(a3)+,(a6)
0001C852 2C9B                       		move.l	(a3)+,(a6)
0001C854 2C9B                       		move.l	(a3)+,(a6)
0001C856 2C9B                       		move.l	(a3)+,(a6)
0001C858 2C9B                       		move.l	(a3)+,(a6)
0001C85A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001C85E                            
0001C85E 4E75                       		rts	
0001C860                            ; End of function ContScrCounter
0001C860                            
0001C860                            ; ===========================================================================
0001C860                            ; ---------------------------------------------------------------------------
0001C860                            ; HUD counter sizes
0001C860                            ; ---------------------------------------------------------------------------
0001C860 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001C864 0000 2710                  Hud_10000:	dc.l 10000
0001C868 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001C86C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001C870 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001C874 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001C878                            
0001C878                            ; ---------------------------------------------------------------------------
0001C878                            ; Subroutine to	load time numbers patterns
0001C878                            ; ---------------------------------------------------------------------------
0001C878                            
0001C878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C878                            
0001C878                            
0001C878                            Hud_Mins:				; XREF: Hud_ChkTime
0001C878 45F9 0001 C874             		lea	(Hud_1).l,a2
0001C87E 7C00                       		moveq	#0,d6
0001C880 6000                       		bra.s	loc_1C9BA
0001C882                            ; End of function Hud_Mins
0001C882                            
0001C882                            
0001C882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C882                            
0001C882                            
0001C882                            Hud_Secs:				; XREF: Hud_ChkTime
0001C882 45F9 0001 C870             		lea	(Hud_10).l,a2
0001C888 7C01                       		moveq	#1,d6
0001C88A                            
0001C88A                            loc_1C9BA:
0001C88A 7800                       		moveq	#0,d4
0001C88C 43FA 0000                  		lea	Art_Hud(pc),a1
0001C890                            
0001C890                            Hud_TimeLoop:
0001C890 7400                       		moveq	#0,d2
0001C892 261A                       		move.l	(a2)+,d3
0001C894                            
0001C894                            loc_1C9C4:
0001C894 9283                       		sub.l	d3,d1
0001C896 6500                       		bcs.s	loc_1C9CC
0001C898 5242                       		addq.w	#1,d2
0001C89A 60F8                       		bra.s	loc_1C9C4
0001C89C                            ; ===========================================================================
0001C89C                            
0001C89C                            loc_1C9CC:
0001C89C D283                       		add.l	d3,d1
0001C89E 4A42                       		tst.w	d2
0001C8A0 6700                       		beq.s	loc_1C9D6
0001C8A2 383C 0001                  		move.w	#1,d4
0001C8A6                            
0001C8A6                            loc_1C9D6:
0001C8A6 ED4A                       		lsl.w	#6,d2
0001C8A8 2D40 0004                  		move.l	d0,4(a6)
0001C8AC 47F1 2000                  		lea	(a1,d2.w),a3
0001C8B0 2C9B                       		move.l	(a3)+,(a6)
0001C8B2 2C9B                       		move.l	(a3)+,(a6)
0001C8B4 2C9B                       		move.l	(a3)+,(a6)
0001C8B6 2C9B                       		move.l	(a3)+,(a6)
0001C8B8 2C9B                       		move.l	(a3)+,(a6)
0001C8BA 2C9B                       		move.l	(a3)+,(a6)
0001C8BC 2C9B                       		move.l	(a3)+,(a6)
0001C8BE 2C9B                       		move.l	(a3)+,(a6)
0001C8C0 2C9B                       		move.l	(a3)+,(a6)
0001C8C2 2C9B                       		move.l	(a3)+,(a6)
0001C8C4 2C9B                       		move.l	(a3)+,(a6)
0001C8C6 2C9B                       		move.l	(a3)+,(a6)
0001C8C8 2C9B                       		move.l	(a3)+,(a6)
0001C8CA 2C9B                       		move.l	(a3)+,(a6)
0001C8CC 2C9B                       		move.l	(a3)+,(a6)
0001C8CE 2C9B                       		move.l	(a3)+,(a6)
0001C8D0 0680 0040 0000             		addi.l	#$400000,d0
0001C8D6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001C8DA                            
0001C8DA 4E75                       		rts	
0001C8DC                            ; End of function Hud_Secs
0001C8DC                            
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            ; Subroutine to	load time/ring bonus numbers patterns
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            
0001C8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8DC                            
0001C8DC                            
0001C8DC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001C8DC 45F9 0001 C868             		lea	(Hud_1000).l,a2
0001C8E2 7C03                       		moveq	#3,d6
0001C8E4 7800                       		moveq	#0,d4
0001C8E6 43FA 0000                  		lea	Art_Hud(pc),a1
0001C8EA                            
0001C8EA                            Hud_BonusLoop:
0001C8EA 7400                       		moveq	#0,d2
0001C8EC 261A                       		move.l	(a2)+,d3
0001C8EE                            
0001C8EE                            loc_1CA1E:
0001C8EE 9283                       		sub.l	d3,d1
0001C8F0 6500                       		bcs.s	loc_1CA26
0001C8F2 5242                       		addq.w	#1,d2
0001C8F4 60F8                       		bra.s	loc_1CA1E
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            loc_1CA26:
0001C8F6 D283                       		add.l	d3,d1
0001C8F8 4A42                       		tst.w	d2
0001C8FA 6700                       		beq.s	loc_1CA30
0001C8FC 383C 0001                  		move.w	#1,d4
0001C900                            
0001C900                            loc_1CA30:
0001C900 4A44                       		tst.w	d4
0001C902 6700                       		beq.s	Hud_ClrBonus
0001C904 ED4A                       		lsl.w	#6,d2
0001C906 47F1 2000                  		lea	(a1,d2.w),a3
0001C90A 2C9B                       		move.l	(a3)+,(a6)
0001C90C 2C9B                       		move.l	(a3)+,(a6)
0001C90E 2C9B                       		move.l	(a3)+,(a6)
0001C910 2C9B                       		move.l	(a3)+,(a6)
0001C912 2C9B                       		move.l	(a3)+,(a6)
0001C914 2C9B                       		move.l	(a3)+,(a6)
0001C916 2C9B                       		move.l	(a3)+,(a6)
0001C918 2C9B                       		move.l	(a3)+,(a6)
0001C91A 2C9B                       		move.l	(a3)+,(a6)
0001C91C 2C9B                       		move.l	(a3)+,(a6)
0001C91E 2C9B                       		move.l	(a3)+,(a6)
0001C920 2C9B                       		move.l	(a3)+,(a6)
0001C922 2C9B                       		move.l	(a3)+,(a6)
0001C924 2C9B                       		move.l	(a3)+,(a6)
0001C926 2C9B                       		move.l	(a3)+,(a6)
0001C928 2C9B                       		move.l	(a3)+,(a6)
0001C92A                            
0001C92A                            loc_1CA5A:
0001C92A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001C92E                            
0001C92E 4E75                       		rts	
0001C930                            ; ===========================================================================
0001C930                            
0001C930                            Hud_ClrBonus:
0001C930 7A0F                       		moveq	#$F,d5
0001C932                            
0001C932                            Hud_ClrBonusLoop:
0001C932 2CBC 0000 0000             		move.l	#0,(a6)
0001C938 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001C93C                            
0001C93C 60EC                       		bra.s	loc_1CA5A
0001C93E                            ; End of function Hud_TimeRingBonus
0001C93E                            
0001C93E                            ; ---------------------------------------------------------------------------
0001C93E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001C93E                            ; ---------------------------------------------------------------------------
0001C93E                            
0001C93E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C93E                            
0001C93E                            
0001C93E                            Hud_Lives:				; XREF: Hud_ChkLives
0001C93E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001C944 7200                       		moveq	#0,d1
0001C946 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001C94A 45F9 0001 C870             		lea	(Hud_10).l,a2
0001C950 7C01                       		moveq	#1,d6
0001C952 7800                       		moveq	#0,d4
0001C954 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001C958                            
0001C958                            Hud_LivesLoop:
0001C958 2D40 0004                  		move.l	d0,4(a6)
0001C95C 7400                       		moveq	#0,d2
0001C95E 261A                       		move.l	(a2)+,d3
0001C960                            
0001C960                            loc_1CA90:
0001C960 9283                       		sub.l	d3,d1
0001C962 6500                       		bcs.s	loc_1CA98
0001C964 5242                       		addq.w	#1,d2
0001C966 60F8                       		bra.s	loc_1CA90
0001C968                            ; ===========================================================================
0001C968                            
0001C968                            loc_1CA98:
0001C968 D283                       		add.l	d3,d1
0001C96A 4A42                       		tst.w	d2
0001C96C 6700                       		beq.s	loc_1CAA2
0001C96E 383C 0001                  		move.w	#1,d4
0001C972                            
0001C972                            loc_1CAA2:
0001C972 4A44                       		tst.w	d4
0001C974 6700                       		beq.s	Hud_ClrLives
0001C976                            
0001C976                            loc_1CAA6:
0001C976 EB4A                       		lsl.w	#5,d2
0001C978 47F1 2000                  		lea	(a1,d2.w),a3
0001C97C 2C9B                       		move.l	(a3)+,(a6)
0001C97E 2C9B                       		move.l	(a3)+,(a6)
0001C980 2C9B                       		move.l	(a3)+,(a6)
0001C982 2C9B                       		move.l	(a3)+,(a6)
0001C984 2C9B                       		move.l	(a3)+,(a6)
0001C986 2C9B                       		move.l	(a3)+,(a6)
0001C988 2C9B                       		move.l	(a3)+,(a6)
0001C98A 2C9B                       		move.l	(a3)+,(a6)
0001C98C                            
0001C98C                            loc_1CABC:
0001C98C 0680 0040 0000             		addi.l	#$400000,d0
0001C992 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001C996                            
0001C996 4E75                       		rts	
0001C998                            ; ===========================================================================
0001C998                            
0001C998                            Hud_ClrLives:
0001C998 4A46                       		tst.w	d6
0001C99A 67DA                       		beq.s	loc_1CAA6
0001C99C 7A07                       		moveq	#7,d5
0001C99E                            
0001C99E                            Hud_ClrLivesLoop:
0001C99E 2CBC 0000 0000             		move.l	#0,(a6)
0001C9A4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001C9A8 60E2                       		bra.s	loc_1CABC
0001C9AA                            ; End of function Hud_Lives
0001C9AA                            
0001C9AA                            ; ===========================================================================
0001C9AA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CCAA                            		even
0001CCAA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001CDEA                            		even
0001CDEA                            ; ===========================================================================
0001CDEA                            ; ---------------------------------------------------------------------------
0001CDEA                            ; When debug mode is currently in use
0001CDEA                            ; ---------------------------------------------------------------------------
0001CDEA                            
0001CDEA                            DebugMode:				; XREF: Obj01; Obj09
0001CDEA 7000                       		moveq	#0,d0
0001CDEC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001CDF0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001CDF4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001CDF8                            ; ===========================================================================
0001CDF8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001CDFA 0000                       		dc.w Debug_Skip-Debug_Index
0001CDFC                            ; ===========================================================================
0001CDFC                            
0001CDFC                            Debug_Main:				; XREF: Debug_Index
0001CDFC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001CE00 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001CE06 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001CE0C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001CE12 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001CE18 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001CE1E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001CE24 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001CE2A 117C 0000 001A             		move.b	#0,$1A(a0)
0001CE30 117C 0000 001C             		move.b	#0,$1C(a0)
0001CE36 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001CE3C 6600                       		bne.s	Debug_Zone	; if not, branch
0001CE3E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001CE44 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001CE4A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001CE4C 6000                       		bra.s	Debug_UseList
0001CE4E                            ; ===========================================================================
0001CE4E                            
0001CE4E                            Debug_Zone:
0001CE4E 7000                       		moveq	#0,d0
0001CE50 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CE54                            
0001CE54                            Debug_UseList:
0001CE54 45F9 0000 0000             		lea	(DebugList).l,a2
0001CE5A D040                       		add.w	d0,d0
0001CE5C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CE60 3C1A                       		move.w	(a2)+,d6
0001CE62 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001CE66 6200                       		bhi.s	loc_1CF9E
0001CE68 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001CE6E                            
0001CE6E                            loc_1CF9E:
0001CE6E 6100 0000                  		bsr.w	Debug_ShowItem
0001CE72 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001CE78 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001CE7E                            
0001CE7E                            Debug_Skip:				; XREF: Debug_Index
0001CE7E 7006                       		moveq	#6,d0
0001CE80 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001CE86 6700                       		beq.s	loc_1CFBE
0001CE88 7000                       		moveq	#0,d0
0001CE8A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CE8E                            
0001CE8E                            loc_1CFBE:
0001CE8E 45F9 0000 0000             		lea	(DebugList).l,a2
0001CE94 D040                       		add.w	d0,d0
0001CE96 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CE9A 3C1A                       		move.w	(a2)+,d6
0001CE9C 6100 0000                  		bsr.w	Debug_Control
0001CEA0 4EF9 0000 D58A             		jmp	DisplaySprite
0001CEA6                            
0001CEA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA6                            
0001CEA6                            
0001CEA6                            Debug_Control:
0001CEA6 7800                       		moveq	#0,d4
0001CEA8 323C 0001                  		move.w	#1,d1
0001CEAC 1838 F605                  		move.b	($FFFFF605).w,d4
0001CEB0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001CEB4 6600                       		bne.s	loc_1D018	; if yes, branch
0001CEB6 1038 F604                  		move.b	($FFFFF604).w,d0
0001CEBA 0240 000F                  		andi.w	#$F,d0
0001CEBE 6600                       		bne.s	loc_1D000
0001CEC0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001CEC6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001CECC 6000 0000                  		bra.w	Debug_BackItem
0001CED0                            ; ===========================================================================
0001CED0                            
0001CED0                            loc_1D000:
0001CED0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001CED4 6600                       		bne.s	loc_1D01C
0001CED6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001CEDC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001CEE0 6600                       		bne.s	loc_1D018
0001CEE2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001CEE8                            
0001CEE8                            loc_1D018:
0001CEE8 1838 F604                  		move.b	($FFFFF604).w,d4
0001CEEC                            
0001CEEC                            loc_1D01C:
0001CEEC 7200                       		moveq	#0,d1
0001CEEE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001CEF2 5241                       		addq.w	#1,d1
0001CEF4 4841                       		swap	d1
0001CEF6 E881                       		asr.l	#4,d1
0001CEF8 2428 000C                  		move.l	$C(a0),d2
0001CEFC 2628 0008                  		move.l	8(a0),d3
0001CF00 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001CF04 6700                       		beq.s	loc_1D03C	; if not, branch
0001CF06 9481                       		sub.l	d1,d2
0001CF08 6400                       		bcc.s	loc_1D03C
0001CF0A 7400                       		moveq	#0,d2
0001CF0C                            
0001CF0C                            loc_1D03C:
0001CF0C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001CF10 6700                       		beq.s	loc_1D052	; if not, branch
0001CF12 D481                       		add.l	d1,d2
0001CF14 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001CF1A 6500                       		bcs.s	loc_1D052
0001CF1C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001CF22                            
0001CF22                            loc_1D052:
0001CF22 0804 0002                  		btst	#2,d4
0001CF26 6700                       		beq.s	loc_1D05E
0001CF28 9681                       		sub.l	d1,d3
0001CF2A 6400                       		bcc.s	loc_1D05E
0001CF2C 7600                       		moveq	#0,d3
0001CF2E                            
0001CF2E                            loc_1D05E:
0001CF2E 0804 0003                  		btst	#3,d4
0001CF32 6700                       		beq.s	loc_1D066
0001CF34 D681                       		add.l	d1,d3
0001CF36                            
0001CF36                            loc_1D066:
0001CF36 2142 000C                  		move.l	d2,$C(a0)
0001CF3A 2143 0008                  		move.l	d3,8(a0)
0001CF3E                            
0001CF3E                            Debug_BackItem:
0001CF3E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001CF44 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001CF46 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001CF4C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001CF4E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001CF52 6400                       		bcc.s	Debug_NoLoop
0001CF54 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001CF58 6000                       		bra.s	Debug_NoLoop
0001CF5A                            ; ===========================================================================
0001CF5A                            
0001CF5A                            Debug_NextItem:
0001CF5A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001CF60 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001CF62 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001CF66 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001CF6A 6200                       		bhi.s	Debug_NoLoop
0001CF6C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001CF72                            
0001CF72                            Debug_NoLoop:
0001CF72 6000 0000                  		bra.w	Debug_ShowItem
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            Debug_MakeItem:
0001CF76 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001CF7C 6700                       		beq.s	Debug_Exit	; if not, branch
0001CF7E 4EB9 0000 DA10             		jsr	SingleObjLoad
0001CF84 6600                       		bne.s	Debug_Exit
0001CF86 3368 0008 0008             		move.w	8(a0),8(a1)
0001CF8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CF92 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001CF96 1368 0001 0001             		move.b	1(a0),1(a1)
0001CF9C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001CFA2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001CFA8 7000                       		moveq	#0,d0
0001CFAA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001CFAE E748                       		lsl.w	#3,d0
0001CFB0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001CFB6 4E75                       		rts	
0001CFB8                            ; ===========================================================================
0001CFB8                            
0001CFB8                            Debug_Exit:
0001CFB8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001CFBE 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001CFC0 7000                       		moveq	#0,d0
0001CFC2 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001CFC6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001CFCE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001CFD4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001CFD8 3140 000A                  		move.w	d0,$A(a0)
0001CFDC 3140 000E                  		move.w	d0,$E(a0)
0001CFE0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001CFE6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001CFEC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001CFF2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001CFF4 4278 F780                  		clr.w	($FFFFF780).w
0001CFF8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001CFFE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D006 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D00C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D012 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D018 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D01E                            
0001D01E                            Debug_DoNothing:
0001D01E 4E75                       		rts	
0001D020                            ; End of function Debug_Control
0001D020                            
0001D020                            
0001D020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D020                            
0001D020                            
0001D020                            Debug_ShowItem:				; XREF: Debug_Main
0001D020 7000                       		moveq	#0,d0
0001D022 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D026 E748                       		lsl.w	#3,d0
0001D028 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D02E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D034 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D03A 4E75                       		rts	
0001D03C                            ; End of function Debug_ShowItem
0001D03C                            
0001D03C                            ; ===========================================================================
0001D03C                            ; ---------------------------------------------------------------------------
0001D03C                            ; Debug	list pointers
0001D03C                            ; ---------------------------------------------------------------------------
0001D03C                            DebugList:
0001D03C                            	include "_inc\Debug list pointers.asm"
0001D03C                            ; ---------------------------------------------------------------------------
0001D03C                            ; Debug	list pointers
0001D03C                            ; ---------------------------------------------------------------------------
0001D03C 0000                       	dc.w Debug_GHZ-DebugList
0001D03E 0000                       	dc.w Debug_LZ-DebugList
0001D040 0000                       	dc.w Debug_MZ-DebugList
0001D042 0000                       	dc.w Debug_SLZ-DebugList
0001D044 0000                       	dc.w Debug_SYZ-DebugList
0001D046 0000                       	dc.w Debug_SBZ-DebugList
0001D048 0000                       	dc.w Debug_Ending-DebugList
0001D048 0000                       	dc.w Debug_Ending-DebugList
0001D04A                            
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A                            ; Debug	list - Green Hill
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A                            Debug_GHZ:
0001D04A                            	include "_inc\Debug list - GHZ.asm"
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A                            ; Debug	list - Green Hill
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A 0010                       	dc.w $10			; number of items in list
0001D04C 2500 9F34                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D050 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D054 2600 A528                  	dc.l Map_obj26+$26000000
0001D058 0000 0680                  	dc.b 0,	0, 6, $80
0001D05C 1F00 96FE                  	dc.l Map_obj1F+$1F000000
0001D060 0000 0400                  	dc.b 0,	0, 4, 0
0001D064 2200 99DE                  	dc.l Map_obj22+$22000000
0001D068 0000 0444                  	dc.b 0,	0, 4, $44
0001D06C 2B00 AB68                  	dc.l Map_obj2B+$2B000000
0001D070 0000 047B                  	dc.b 0,	0, 4, $7B
0001D074 3600 CF72                  	dc.l Map_obj36+$36000000
0001D078 0000 051B                  	dc.b 0,	0, 5, $1B
0001D07C 1800 80FC                  	dc.l Map_obj18+$18000000
0001D080 0000 4000                  	dc.b 0,	0, $40,	0
0001D084 3B00 D098                  	dc.l Map_obj3B+$3B000000
0001D088 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D08C 4000 F714                  	dc.l Map_obj40+$40000000
0001D090 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D094 4100 DC9E                  	dc.l Map_obj41+$41000000
0001D098 0000 0523                  	dc.b 0,	0, 5, $23
0001D09C 4200 DEC4                  	dc.l Map_obj42+$42000000
0001D0A0 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D0A4 4400 E1D2                  	dc.l Map_obj44+$44000000
0001D0A8 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D0AC 1900 816A                  	dc.l Map_obj48+$19000000
0001D0B0 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D0B4 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D0B8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D0BC 4B00 9F74                  	dc.l Map_obj4B+$4B000000
0001D0C0 0000 2400                  	dc.b 0,	0, $24,	0
0001D0C4 7D01 7144                  	dc.l Map_obj7D+$7D000000
0001D0C8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D0CC                            	even
0001D0CC                            	even
0001D0CC                            
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            ; Debug	list - Labyrinth
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            Debug_LZ:
0001D0CC                            	include "_inc\Debug list - LZ.asm"
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            ; Debug	list - Labyrinth
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC 0019                       	dc.w $19
0001D0CE 2500 9F34                  	dc.l Map_obj25+$25000000
0001D0D2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D0D6 2600 A528                  	dc.l Map_obj26+$26000000
0001D0DA 0000 0680                  	dc.b 0,	0, 6, $80
0001D0DE 4100 DC9E                  	dc.l Map_obj41+$41000000
0001D0E2 0000 0523                  	dc.b 0,	0, 5, $23
0001D0E6 2C00 AC0E                  	dc.l Map_obj2C+$2C000000
0001D0EA 0800 2486                  	dc.b 8,	0, $24,	$86
0001D0EE 2D00 ADFA                  	dc.l Map_obj2D+$2D000000
0001D0F2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D0F6 1601 1EF0                  	dc.l Map_obj16+$16000000
0001D0FA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D0FE 1601 1EF0                  	dc.l Map_obj16+$16000000
0001D102 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D106 3300 C278                  	dc.l Map_obj33+$33000000
0001D10A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D10E 3200 BE38                  	dc.l Map_obj32+$32000000
0001D112 0000 0513                  	dc.b 0,	0, 5, $13
0001D116 3600 CF72                  	dc.l Map_obj36+$36000000
0001D11A 0000 051B                  	dc.b 0,	0, 5, $1B
0001D11E 5201 0012                  	dc.l Map_obj52a+$52000000
0001D122 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D126 6101 2118                  	dc.l Map_obj61+$61000000
0001D12A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D12E 6101 2118                  	dc.l Map_obj61+$61000000
0001D132 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D136 6101 2118                  	dc.l Map_obj61+$61000000
0001D13A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D13E 6201 226C                  	dc.l Map_obj62+$62000000
0001D142 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D146 6101 2118                  	dc.l Map_obj61+$61000000
0001D14A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D14E 6101 2118                  	dc.l Map_obj61+$61000000
0001D152 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D156 6301 25CE                  	dc.l Map_obj63+$63000000
0001D15A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D15E 6001 1E3A                  	dc.l Map_obj60+$60000000
0001D162 0000 0467                  	dc.b 0,	0, 4, $67
0001D166 6401 2912                  	dc.l Map_obj64+$64000000
0001D16A 8413 8348                  	dc.b $84, $13, $83, $48
0001D16E 6501 2A9A                  	dc.l Map_obj65+$65000000
0001D172 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D176 6501 2A9A                  	dc.l Map_obj65+$65000000
0001D17A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D17E 0B01 128A                  	dc.l Map_obj0B+$B000000
0001D182 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D186 0C01 135A                  	dc.l Map_obj0C+$C000000
0001D18A 0200 4328                  	dc.b 2,	0, $43,	$28
0001D18E 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D192 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D196                            	even
0001D196                            	even
0001D196                            
0001D196                            ; ---------------------------------------------------------------------------
0001D196                            ; Debug	list - Marble
0001D196                            ; ---------------------------------------------------------------------------
0001D196                            Debug_MZ:
0001D196                            	include "_inc\Debug list - MZ.asm"
0001D196                            ; ---------------------------------------------------------------------------
0001D196                            ; Debug	list - Marble
0001D196                            ; ---------------------------------------------------------------------------
0001D196 0012                       	dc.w $12
0001D198 2500 9F34                  	dc.l Map_obj25+$25000000
0001D19C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D1A0 2600 A528                  	dc.l Map_obj26+$26000000
0001D1A4 0000 0680                  	dc.b 0,	0, 6, $80
0001D1A8 2200 99DE                  	dc.l Map_obj22+$22000000
0001D1AC 0000 0444                  	dc.b 0,	0, 4, $44
0001D1B0 3600 CF72                  	dc.l Map_obj36+$36000000
0001D1B4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D1B8 4100 DC9E                  	dc.l Map_obj41+$41000000
0001D1BC 0000 0523                  	dc.b 0,	0, 5, $23
0001D1C0 1300 B308                  	dc.l Map_obj14+$13000000
0001D1C4 0000 0345                  	dc.b 0,	0, 3, $45
0001D1C8 4600 E884                  	dc.l Map_obj46+$46000000
0001D1CC 0000 4000                  	dc.b 0,	0, $40,	0
0001D1D0 4C00 F1C0                  	dc.l Map_obj4C+$4C000000
0001D1D4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D1D8 4E00 F4A4                  	dc.l Map_obj4E+$4E000000
0001D1DC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D1E0 3300 C278                  	dc.l Map_obj33+$33000000
0001D1E4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D1E8 5000 F8A2                  	dc.l Map_obj50+$50000000
0001D1EC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D1F0 5100 FD46                  	dc.l Map_obj51+$51000000
0001D1F4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D1F8 5200 FFBC                  	dc.l Map_obj52+$52000000
0001D1FC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D200 5300 8702                  	dc.l Map_obj53+$53000000
0001D204 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D208 5400 F186                  	dc.l Map_obj54+$54000000
0001D20C 0000 8680                  	dc.b 0,	0, $86,	$80
0001D210 5501 01B0                  	dc.l Map_obj55+$55000000
0001D214 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D218 7801 6C6E                  	dc.l Map_obj78+$78000000
0001D21C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D220 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D224 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D228                            	even
0001D228                            	even
0001D228                            
0001D228                            ; ---------------------------------------------------------------------------
0001D228                            ; Debug	list - Star Light
0001D228                            ; ---------------------------------------------------------------------------
0001D228                            Debug_SLZ:
0001D228                            	include "_inc\Debug list - SLZ.asm"
0001D228                            ; ---------------------------------------------------------------------------
0001D228                            ; Debug	list - Star Light
0001D228                            ; ---------------------------------------------------------------------------
0001D228 000F                       	dc.w $F
0001D22A 2500 9F34                  	dc.l Map_obj25+$25000000
0001D22E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D232 2600 A528                  	dc.l Map_obj26+$26000000
0001D236 0000 0680                  	dc.b 0,	0, 6, $80
0001D23A 5901 0CB2                  	dc.l Map_obj59+$59000000
0001D23E 0000 4000                  	dc.b 0,	0, $40,	0
0001D242 5300 8702                  	dc.l Map_obj53+$53000000
0001D246 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D24A 1800 815A                  	dc.l Map_obj18b+$18000000
0001D24E 0000 4000                  	dc.b 0,	0, $40,	0
0001D252 5A01 0DEC                  	dc.l Map_obj5A+$5A000000
0001D256 0000 4000                  	dc.b 0,	0, $40,	0
0001D25A 5B01 0FA4                  	dc.l Map_obj5B+$5B000000
0001D25E 0000 4000                  	dc.b 0,	0, $40,	0
0001D262 5D01 1574                  	dc.l Map_obj5D+$5D000000
0001D266 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D26A 5E01 1906                  	dc.l Map_obj5E+$5E000000
0001D26E 0000 0374                  	dc.b 0,	0, 3, $74
0001D272 4100 DC9E                  	dc.l Map_obj41+$41000000
0001D276 0000 0523                  	dc.b 0,	0, 5, $23
0001D27A 1300 B308                  	dc.l Map_obj14+$13000000
0001D27E 0000 0480                  	dc.b 0,	0, 4, $80
0001D282 1C00 8812                  	dc.l Map_obj1C+$1C000000
0001D286 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D28A 5F01 1B84                  	dc.l Map_obj5F+$5F000000
0001D28E 0000 0400                  	dc.b 0,	0, 4, 0
0001D292 6001 1E3A                  	dc.l Map_obj60+$60000000
0001D296 0000 2429                  	dc.b 0,	0, $24,	$29
0001D29A 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D29E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D2A2                            	even
0001D2A2                            	even
0001D2A2                            
0001D2A2                            ; ---------------------------------------------------------------------------
0001D2A2                            ; Debug	list - Spring Yard
0001D2A2                            ; ---------------------------------------------------------------------------
0001D2A2                            Debug_SYZ:
0001D2A2                            	include "_inc\Debug list - SYZ.asm"
0001D2A2                            ; ---------------------------------------------------------------------------
0001D2A2                            ; Debug	list - Spring Yard
0001D2A2                            ; ---------------------------------------------------------------------------
0001D2A2 000F                       	dc.w $F
0001D2A4 2500 9F34                  	dc.l Map_obj25+$25000000
0001D2A8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D2AC 2600 A528                  	dc.l Map_obj26+$26000000
0001D2B0 0000 0680                  	dc.b 0,	0, 6, $80
0001D2B4 3600 CF72                  	dc.l Map_obj36+$36000000
0001D2B8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2BC 4100 DC9E                  	dc.l Map_obj41+$41000000
0001D2C0 0000 0523                  	dc.b 0,	0, 5, $23
0001D2C4 4300 E124                  	dc.l Map_obj43+$43000000
0001D2C8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D2CC 1200 E902                  	dc.l Map_obj12+$12000000
0001D2D0 0000 0000                  	dc.b 0,	0, 0, 0
0001D2D4 4700 EA7E                  	dc.l Map_obj47+$47000000
0001D2D8 0000 0380                  	dc.b 0,	0, 3, $80
0001D2DC 1F00 96FE                  	dc.l Map_obj1F+$1F000000
0001D2E0 0000 0400                  	dc.b 0,	0, 4, 0
0001D2E4 2200 99DE                  	dc.l Map_obj22+$22000000
0001D2E8 0000 0444                  	dc.b 0,	0, 4, $44
0001D2EC 5000 F8A2                  	dc.l Map_obj50+$50000000
0001D2F0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D2F4 1800 8148                  	dc.l Map_obj18a+$18000000
0001D2F8 0000 4000                  	dc.b 0,	0, $40,	0
0001D2FC 5601 0672                  	dc.l Map_obj56+$56000000
0001D300 0000 4000                  	dc.b 0,	0, $40,	0
0001D304 3200 BE38                  	dc.l Map_obj32+$32000000
0001D308 0000 0513                  	dc.b 0,	0, 5, $13
0001D30C 7801 6C6E                  	dc.l Map_obj78+$78000000
0001D310 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D314 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D318 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D31C                            	even
0001D31C                            	even
0001D31C                            
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            ; Debug	list - Scrap Brain
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            Debug_SBZ:
0001D31C                            	include "_inc\Debug list - SBZ.asm"
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            ; Debug	list - Scrap Brain
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C 001D                       	dc.w $1D
0001D31E 2500 9F34                  	dc.l Map_obj25+$25000000
0001D322 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D326 2600 A528                  	dc.l Map_obj26+$26000000
0001D32A 0000 0680                  	dc.b 0,	0, 6, $80
0001D32E 5F01 1B84                  	dc.l Map_obj5F+$5F000000
0001D332 0000 0400                  	dc.b 0,	0, 4, 0
0001D336 6001 1E3A                  	dc.l Map_obj60+$60000000
0001D33A 0000 0429                  	dc.b 0,	0, 4, $29
0001D33E 7801 6C6E                  	dc.l Map_obj78+$78000000
0001D342 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D346 1501 0A0E                  	dc.l Map_obj15b+$15000000
0001D34A 0702 4391                  	dc.b 7,	2, $43,	$91
0001D34E 6701 5592                  	dc.l Map_obj67+$67000000
0001D352 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D356 5200 FFBC                  	dc.l Map_obj52+$52000000
0001D35A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D35E 3200 BE38                  	dc.l Map_obj32+$32000000
0001D362 0000 0513                  	dc.b 0,	0, 5, $13
0001D366 6901 57EC                  	dc.l Map_obj69+$69000000
0001D36A 0300 4492                  	dc.b 3,	0, $44,	$92
0001D36E 6901 5846                  	dc.l Map_obj69a+$69000000
0001D372 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D376 6A01 5AA4                  	dc.l Map_obj6A+$6A000000
0001D37A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D37E 5300 8702                  	dc.l Map_obj53+$53000000
0001D382 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D386 5200 FFBC                  	dc.l Map_obj52+$52000000
0001D38A 3903 4460                  	dc.b $39, 3, $44, $60
0001D38E 6B01 5E74                  	dc.l Map_obj6B+$6B000000
0001D392 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D396 2A00 89A8                  	dc.l Map_obj2A+$2A000000
0001D39A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D39E 6B01 5E74                  	dc.l Map_obj6B+$6B000000
0001D3A2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D3A6 6A01 5AA4                  	dc.l Map_obj6A+$6A000000
0001D3AA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D3AE 6B01 5E74                  	dc.l Map_obj6B+$6B000000
0001D3B2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D3B6 6A01 5AA4                  	dc.l Map_obj6A+$6A000000
0001D3BA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D3BE 6B01 5E74                  	dc.l Map_obj6B+$6B000000
0001D3C2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D3C6 6C01 6036                  	dc.l Map_obj6C+$6C000000
0001D3CA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D3CE 6D00 E574                  	dc.l Map_obj6D+$6D000000
0001D3D2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D3D6 6D00 E574                  	dc.l Map_obj6D+$6D000000
0001D3DA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D3DE 6E01 60EC                  	dc.l Map_obj6E+$6E000000
0001D3E2 0400 047E                  	dc.b 4,	0, 4, $7E
0001D3E6 7001 6532                  	dc.l Map_obj70+$70000000
0001D3EA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D3EE 7101 141A                  	dc.l Map_obj71+$71000000
0001D3F2 1100 8680                  	dc.b $11, 0, $86, $80
0001D3F6 1E00 8E16                  	dc.l Map_obj1E+$1E000000
0001D3FA 0400 2302                  	dc.b 4,	0, $23,	2
0001D3FE 7901 6FF4                  	dc.l Map_obj79+$79000000
0001D402 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D406                            	even
0001D406                            	even
0001D406                            
0001D406                            ; ---------------------------------------------------------------------------
0001D406                            ; Debug	list - ending sequence / special stage
0001D406                            ; ---------------------------------------------------------------------------
0001D406                            Debug_Ending:
0001D406                            	include "_inc\Debug list - Ending and SS.asm"
0001D406                            ; ---------------------------------------------------------------------------
0001D406                            ; Debug	list - ending sequence / special stage
0001D406                            ; ---------------------------------------------------------------------------
0001D406 000D                       	dc.w $D
0001D408 2500 9F34                  	dc.l Map_obj25+$25000000
0001D40C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D410 4700 EA7E                  	dc.l Map_obj47+$47000000
0001D414 0000 0380                  	dc.b 0,	0, 3, $80
0001D418 2800 9430                  	dc.l Map_obj28a+$28000000
0001D41C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D420 2800 9430                  	dc.l Map_obj28a+$28000000
0001D424 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D428 2800 9430                  	dc.l Map_obj28a+$28000000
0001D42C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D430 2800 9418                  	dc.l Map_obj28+$28000000
0001D434 0D00 0553                  	dc.b $D, 0, 5, $53
0001D438 2800 9418                  	dc.l Map_obj28+$28000000
0001D43C 0E00 0553                  	dc.b $E, 0, 5, $53
0001D440 2800 9418                  	dc.l Map_obj28+$28000000
0001D444 0F00 0573                  	dc.b $F, 0, 5, $73
0001D448 2800 9418                  	dc.l Map_obj28+$28000000
0001D44C 1000 0573                  	dc.b $10, 0, 5,	$73
0001D450 2800 9430                  	dc.l Map_obj28a+$28000000
0001D454 1100 0585                  	dc.b $11, 0, 5,	$85
0001D458 2800 9448                  	dc.l Map_obj28b+$28000000
0001D45C 1200 0593                  	dc.b $12, 0, 5,	$93
0001D460 2800 9430                  	dc.l Map_obj28a+$28000000
0001D464 1300 0565                  	dc.b $13, 0, 5,	$65
0001D468 2800 9448                  	dc.l Map_obj28b+$28000000
0001D46C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D470                            	even
0001D470                            	even
0001D470                            
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            ; Main level load blocks
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            MainLoadBlocks:
0001D470                            	include "_inc\Main level load blocks.asm"
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            ; Main level load blocks
0001D470                            ;
0001D470                            ; ===FORMAT===
0001D470                            ; level	patterns + (1st	PLC num	* 10^6)
0001D470                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D470                            ; 256x256 mappings
0001D470                            ; blank, music (unused), pal index (unused), pal index
0001D470                            ; ---------------------------------------------------------------------------
0001D470 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D474 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D478 0000 0000                  	dc.l Blk256_GHZ
0001D47C 0081 0404                  	dc.b 0,	$81, 4,	4
0001D480 0000 0000                  	dc.l Nem_LZ+$6000000
0001D484 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D488 0000 0000                  	dc.l Blk256_LZ
0001D48C 0082 0505                  	dc.b 0,	$82, 5,	5
0001D490 0000 0000                  	dc.l Nem_MZ+$8000000
0001D494 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D498 0000 0000                  	dc.l Blk256_MZ
0001D49C 0083 0606                  	dc.b 0,	$83, 6,	6
0001D4A0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D4A4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D4A8 0000 0000                  	dc.l Blk256_SLZ
0001D4AC 0084 0707                  	dc.b 0,	$84, 7,	7
0001D4B0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D4B4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D4B8 0000 0000                  	dc.l Blk256_SYZ
0001D4BC 0085 0808                  	dc.b 0,	$85, 8,	8
0001D4C0 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D4C4 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D4C8 0000 0000                  	dc.l Blk256_SBZ
0001D4CC 0086 0909                  	dc.b 0,	$86, 9,	9
0001D4D0 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D4D4 0000 0000                  	dc.l Blk16_GHZ
0001D4D8 0000 0000                  	dc.l Blk256_GHZ
0001D4DC 0086 1313                  	dc.b 0,	$86, $13, $13
0001D4E0                            	even
0001D4E0                            	even
0001D4E0                            
0001D4E0                            ; ---------------------------------------------------------------------------
0001D4E0                            ; Pattern load cues
0001D4E0                            ; ---------------------------------------------------------------------------
0001D4E0                            ArtLoadCues:
0001D4E0                            	include "_inc\Pattern load cues.asm"
0001D4E0                            ; ---------------------------------------------------------------------------
0001D4E0                            ; Pattern load cues - index
0001D4E0                            ; ---------------------------------------------------------------------------
0001D4E0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D4E4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D4E8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D4EC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D4F0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D4F4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D4F8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D4FC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D500 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D504 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D508 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D50C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D510 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D514 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D518 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D51C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D520                            ; ---------------------------------------------------------------------------
0001D520                            ; Pattern load cues - standard block 1
0001D520                            ; ---------------------------------------------------------------------------
0001D520 0004                       PLC_Main:	dc.w 4
0001D522 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D526 F400                       		dc.w $F400
0001D528 0000 0000                  		dc.l Nem_Hud		; HUD
0001D52C D940                       		dc.w $D940
0001D52E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D532 FA80                       		dc.w $FA80
0001D534 0000 0000                  		dc.l Nem_Ring		; rings
0001D538 F640                       		dc.w $F640
0001D53A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D53E F2E0                       		dc.w $F2E0
0001D540                            ; ---------------------------------------------------------------------------
0001D540                            ; Pattern load cues - standard block 2
0001D540                            ; ---------------------------------------------------------------------------
0001D540 0002                       PLC_Main2:	dc.w 2
0001D542 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D546 D000                       		dc.w $D000
0001D548 0000 0000                  		dc.l Nem_Shield		; shield
0001D54C A820                       		dc.w $A820
0001D54E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D552 AB80                       		dc.w $AB80
0001D554                            ; ---------------------------------------------------------------------------
0001D554                            ; Pattern load cues - explosion
0001D554                            ; ---------------------------------------------------------------------------
0001D554 0000                       PLC_Explode:	dc.w 0
0001D556 0000 0000                  		dc.l Nem_Explode	; explosion
0001D55A B400                       		dc.w $B400
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C                            ; Pattern load cues - game/time	over
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C 0000                       PLC_GameOver:	dc.w 0
0001D55E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D562 ABC0                       		dc.w $ABC0
0001D564                            ; ---------------------------------------------------------------------------
0001D564                            ; Pattern load cues - Green Hill
0001D564                            ; ---------------------------------------------------------------------------
0001D564 000B                       PLC_GHZ:	dc.w $B
0001D566 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D56A 0000                       		dc.w 0
0001D56C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D570 39A0                       		dc.w $39A0
0001D572 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D576 6B00                       		dc.w $6B00
0001D578 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D57C 7A00                       		dc.w $7A00
0001D57E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D582 8000                       		dc.w $8000
0001D584 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D588 8880                       		dc.w $8880
0001D58A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D58E 8F60                       		dc.w $8F60
0001D590 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D594 9360                       		dc.w $9360
0001D596 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D59A 9E00                       		dc.w $9E00
0001D59C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D5A0 A360                       		dc.w $A360
0001D5A2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D5A6 A460                       		dc.w $A460
0001D5A8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D5AC A660                       		dc.w $A660
0001D5AE 0005                       PLC_GHZ2:	dc.w 5
0001D5B0 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D5B4 7000                       		dc.w $7000
0001D5B6 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D5BA 71C0                       		dc.w $71C0
0001D5BC 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D5C0 7300                       		dc.w $7300
0001D5C2 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D5C6 7540                       		dc.w $7540
0001D5C8 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D5CC A1E0                       		dc.w $A1E0
0001D5CE 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D5D2 6980                       		dc.w $6980
0001D5D4                            ; ---------------------------------------------------------------------------
0001D5D4                            ; Pattern load cues - Labyrinth
0001D5D4                            ; ---------------------------------------------------------------------------
0001D5D4 000B                       PLC_LZ:		dc.w $B
0001D5D6 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D5DA 0000                       		dc.w 0
0001D5DC 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D5E0 3C00                       		dc.w $3C00
0001D5E2 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D5E6 3E00                       		dc.w $3E00
0001D5E8 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D5EC 4B20                       		dc.w $4B20
0001D5EE 0000 0000                  		dc.l Nem_Water		; water	surface
0001D5F2 6000                       		dc.w $6000
0001D5F4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D5F8 6200                       		dc.w $6200
0001D5FA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D5FE 6500                       		dc.w $6500
0001D600 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D604 6900                       		dc.w $6900
0001D606 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D60A 7780                       		dc.w $7780
0001D60C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D610 7880                       		dc.w $7880
0001D612 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D616 7980                       		dc.w $7980
0001D618 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D61C 94C0                       		dc.w $94C0
0001D61E 000C                       PLC_LZ2:	dc.w $C
0001D620 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D624 7BC0                       		dc.w $7BC0
0001D626 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D62A 7CC0                       		dc.w $7CC0
0001D62C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D630 7EC0                       		dc.w $7EC0
0001D632 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D636 5D20                       		dc.w $5D20
0001D638 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D63C 8800                       		dc.w $8800
0001D63E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D642 89E0                       		dc.w $89E0
0001D644 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D648 8CE0                       		dc.w $8CE0
0001D64A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D64E 90C0                       		dc.w $90C0
0001D650 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D654 A1E0                       		dc.w $A1E0
0001D656 0000 0000                  		dc.l Nem_Cork		; cork block
0001D65A A000                       		dc.w $A000
0001D65C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D660 A360                       		dc.w $A360
0001D662 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D666 A460                       		dc.w $A460
0001D668 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D66C A660                       		dc.w $A660
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E                            ; Pattern load cues - Marble
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E 0009                       PLC_MZ:		dc.w 9
0001D670 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D674 0000                       		dc.w 0
0001D676 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D67A 6000                       		dc.w $6000
0001D67C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D680 68A0                       		dc.w $68A0
0001D682 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D686 7000                       		dc.w $7000
0001D688 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D68C 71C0                       		dc.w $71C0
0001D68E 0000 0000                  		dc.l Nem_Lava		; lava
0001D692 7500                       		dc.w $7500
0001D694 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D698 8880                       		dc.w $8880
0001D69A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D69E 8F60                       		dc.w $8F60
0001D6A0 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D6A4 9700                       		dc.w $9700
0001D6A6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D6AA 9FE0                       		dc.w $9FE0
0001D6AC 0004                       PLC_MZ2:	dc.w 4
0001D6AE 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D6B2 A260                       		dc.w $A260
0001D6B4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D6B8 A360                       		dc.w $A360
0001D6BA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D6BE A460                       		dc.w $A460
0001D6C0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D6C4 A660                       		dc.w $A660
0001D6C6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D6CA 5700                       		dc.w $5700
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC                            ; Pattern load cues - Star Light
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC 0008                       PLC_SLZ:	dc.w 8
0001D6CE 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D6D2 0000                       		dc.w 0
0001D6D4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D6D8 8000                       		dc.w $8000
0001D6DA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D6DE 8520                       		dc.w $8520
0001D6E0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D6E4 9000                       		dc.w $9000
0001D6E6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D6EA 9C00                       		dc.w $9C00
0001D6EC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D6F0 A260                       		dc.w $A260
0001D6F2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D6F6 A360                       		dc.w $A360
0001D6F8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D6FC A460                       		dc.w $A460
0001D6FE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D702 A660                       		dc.w $A660
0001D704 0005                       PLC_SLZ2:	dc.w 5
0001D706 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D70A 6E80                       		dc.w $6E80
0001D70C 0000 0000                  		dc.l Nem_Fan		; fan
0001D710 7400                       		dc.w $7400
0001D712 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D716 7980                       		dc.w $7980
0001D718 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D71C 7B80                       		dc.w $7B80
0001D71E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D722 9B00                       		dc.w $9B00
0001D724 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D728 9E00                       		dc.w $9E00
0001D72A                            ; ---------------------------------------------------------------------------
0001D72A                            ; Pattern load cues - Spring Yard
0001D72A                            ; ---------------------------------------------------------------------------
0001D72A 0004                       PLC_SYZ:	dc.w 4
0001D72C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D730 0000                       		dc.w 0
0001D732 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D736 8000                       		dc.w $8000
0001D738 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D73C 8880                       		dc.w $8880
0001D73E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D742 8F60                       		dc.w $8F60
0001D744 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D748 9700                       		dc.w $9700
0001D74A 0007                       PLC_SYZ2:	dc.w 7
0001D74C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D750 7000                       		dc.w $7000
0001D752 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D756 72C0                       		dc.w $72C0
0001D758 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D75C 7740                       		dc.w $7740
0001D75E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D762 9FE0                       		dc.w $9FE0
0001D764 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D768 A1E0                       		dc.w $A1E0
0001D76A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D76E A360                       		dc.w $A360
0001D770 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D774 A460                       		dc.w $A460
0001D776 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D77A A660                       		dc.w $A660
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C                            ; Pattern load cues - Scrap Brain
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C 000B                       PLC_SBZ:	dc.w $B
0001D77E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001D782 0000                       		dc.w 0
0001D784 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001D788 5800                       		dc.w $5800
0001D78A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001D78E 5D00                       		dc.w $5D00
0001D790 0000 0000                  		dc.l Nem_Girder		; girder
0001D794 5E00                       		dc.w $5E00
0001D796 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001D79A 6040                       		dc.w $6040
0001D79C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001D7A0 6880                       		dc.w $6880
0001D7A2 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001D7A6 6900                       		dc.w $6900
0001D7A8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D7AC 7220                       		dc.w $7220
0001D7AE 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001D7B2 76A0                       		dc.w $76A0
0001D7B4 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001D7B8 7B20                       		dc.w $7B20
0001D7BA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D7BE 7EA0                       		dc.w $7EA0
0001D7C0 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001D7C4 9860                       		dc.w $9860
0001D7C6 000C                       PLC_SBZ2:	dc.w $C
0001D7C8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D7CC 5600                       		dc.w $5600
0001D7CE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D7D2 8000                       		dc.w $8000
0001D7D4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D7D8 8520                       		dc.w $8520
0001D7DA 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001D7DE 8C00                       		dc.w $8C00
0001D7E0 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001D7E4 8DE0                       		dc.w $8DE0
0001D7E6 0000 0000                  		dc.l Nem_Electric	; electric orb
0001D7EA 8FC0                       		dc.w $8FC0
0001D7EC 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001D7F0 9240                       		dc.w $9240
0001D7F2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D7F6 7F20                       		dc.w $7F20
0001D7F8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001D7FC 9BE0                       		dc.w $9BE0
0001D7FE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D802 A1E0                       		dc.w $A1E0
0001D804 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D808 A360                       		dc.w $A360
0001D80A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D80E A460                       		dc.w $A460
0001D810 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D814 A660                       		dc.w $A660
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            ; Pattern load cues - title card
0001D816                            ; ---------------------------------------------------------------------------
0001D816 0000                       PLC_TitleCard:	dc.w 0
0001D818 0000 0000                  		dc.l Nem_TitleCard
0001D81C B000                       		dc.w $B000
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E                            ; Pattern load cues - act 3 boss
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E 0005                       PLC_Boss:	dc.w 5
0001D820 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D824 8000                       		dc.w $8000
0001D826 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001D82A 8D80                       		dc.w $8D80
0001D82C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001D830 93A0                       		dc.w $93A0
0001D832 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001D836 A300                       		dc.w $A300
0001D838 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001D83C A300                       		dc.w $A300
0001D83E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001D842 A540                       		dc.w $A540
0001D844                            ; ---------------------------------------------------------------------------
0001D844                            ; Pattern load cues - act 1/2 signpost
0001D844                            ; ---------------------------------------------------------------------------
0001D844 0002                       PLC_Signpost:	dc.w 2
0001D846 0000 0000                  		dc.l Nem_SignPost	; signpost
0001D84A D000                       		dc.w $D000
0001D84C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001D850 96C0                       		dc.w $96C0
0001D852 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001D856 8C40                       		dc.w $8C40
0001D858                            ; ---------------------------------------------------------------------------
0001D858                            ; Pattern load cues - beta special stage warp effect
0001D858                            ; ---------------------------------------------------------------------------
0001D858 0000                       PLC_Warp:	dc.w 0
0001D85A 0000 0000                  		dc.l Nem_Warp
0001D85E A820                       		dc.w $A820
0001D860                            ; ---------------------------------------------------------------------------
0001D860                            ; Pattern load cues - special stage
0001D860                            ; ---------------------------------------------------------------------------
0001D860 0010                       PLC_SpeStage:	dc.w $10
0001D862 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001D866 0000                       		dc.w 0
0001D868 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001D86C 0A20                       		dc.w $A20
0001D86E 0000 0000                  		dc.l Nem_SSWalls	; walls
0001D872 2840                       		dc.w $2840
0001D874 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D878 4760                       		dc.w $4760
0001D87A 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001D87E 4A20                       		dc.w $4A20
0001D880 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001D884 4C60                       		dc.w $4C60
0001D886 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001D88A 5E00                       		dc.w $5E00
0001D88C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001D890 6E00                       		dc.w $6E00
0001D892 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001D896 7E00                       		dc.w $7E00
0001D898 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001D89C 8E00                       		dc.w $8E00
0001D89E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001D8A2 9E00                       		dc.w $9E00
0001D8A4 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001D8A8 AE00                       		dc.w $AE00
0001D8AA 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001D8AE BE00                       		dc.w $BE00
0001D8B0 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001D8B4 EE00                       		dc.w $EE00
0001D8B6 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001D8BA F2E0                       		dc.w $F2E0
0001D8BC 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001D8C0 F400                       		dc.w $F400
0001D8C2 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001D8C6 F520                       		dc.w $F520
0001D8C8 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001D8CC F2E0                       		dc.w $F2E0
0001D8CE 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001D8D2 F400                       		dc.w $F400
0001D8D4 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001D8D8 F520                       		dc.w $F520
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA                            ; Pattern load cues - GHZ animals
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA 0001                       PLC_GHZAnimals:	dc.w 1
0001D8DC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D8E0 B000                       		dc.w $B000
0001D8E2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D8E6 B240                       		dc.w $B240
0001D8E8                            ; ---------------------------------------------------------------------------
0001D8E8                            ; Pattern load cues - LZ animals
0001D8E8                            ; ---------------------------------------------------------------------------
0001D8E8 0001                       PLC_LZAnimals:	dc.w 1
0001D8EA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001D8EE B000                       		dc.w $B000
0001D8F0 0000 0000                  		dc.l Nem_Seal		; seal
0001D8F4 B240                       		dc.w $B240
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6                            ; Pattern load cues - MZ animals
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6 0001                       PLC_MZAnimals:	dc.w 1
0001D8F8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001D8FC B000                       		dc.w $B000
0001D8FE 0000 0000                  		dc.l Nem_Seal		; seal
0001D902 B240                       		dc.w $B240
0001D904                            ; ---------------------------------------------------------------------------
0001D904                            ; Pattern load cues - SLZ animals
0001D904                            ; ---------------------------------------------------------------------------
0001D904 0001                       PLC_SLZAnimals:	dc.w 1
0001D906 0000 0000                  		dc.l Nem_Pig		; pig
0001D90A B000                       		dc.w $B000
0001D90C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D910 B240                       		dc.w $B240
0001D912                            ; ---------------------------------------------------------------------------
0001D912                            ; Pattern load cues - SYZ animals
0001D912                            ; ---------------------------------------------------------------------------
0001D912 0001                       PLC_SYZAnimals:	dc.w 1
0001D914 0000 0000                  		dc.l Nem_Pig		; pig
0001D918 B000                       		dc.w $B000
0001D91A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D91E B240                       		dc.w $B240
0001D920                            ; ---------------------------------------------------------------------------
0001D920                            ; Pattern load cues - SBZ animals
0001D920                            ; ---------------------------------------------------------------------------
0001D920 0001                       PLC_SBZAnimals:	dc.w 1
0001D922 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D926 B000                       		dc.w $B000
0001D928 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D92C B240                       		dc.w $B240
0001D92E                            ; ---------------------------------------------------------------------------
0001D92E                            ; Pattern load cues - special stage results screen
0001D92E                            ; ---------------------------------------------------------------------------
0001D92E 0001                       PLC_SpeStResult:dc.w 1
0001D930 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001D934 A820                       		dc.w $A820
0001D936 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001D93A AA20                       		dc.w $AA20
0001D93C                            ; ---------------------------------------------------------------------------
0001D93C                            ; Pattern load cues - ending sequence
0001D93C                            ; ---------------------------------------------------------------------------
0001D93C 000E                       PLC_Ending:	dc.w $E
0001D93E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D942 0000                       		dc.w 0
0001D944 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D948 39A0                       		dc.w $39A0
0001D94A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D94E 6B00                       		dc.w $6B00
0001D950 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001D954 7400                       		dc.w $7400
0001D956 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001D95A 78A0                       		dc.w $78A0
0001D95C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001D960 7C20                       		dc.w $7C20
0001D962 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001D966 A480                       		dc.w $A480
0001D968 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D96C AA60                       		dc.w $AA60
0001D96E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D972 ACA0                       		dc.w $ACA0
0001D974 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001D978 AE60                       		dc.w $AE60
0001D97A 0000 0000                  		dc.l Nem_Seal		; seal
0001D97E B0A0                       		dc.w $B0A0
0001D980 0000 0000                  		dc.l Nem_Pig		; pig
0001D984 B260                       		dc.w $B260
0001D986 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D98A B4A0                       		dc.w $B4A0
0001D98C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001D990 B660                       		dc.w $B660
0001D992 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001D996 B8A0                       		dc.w $B8A0
0001D998                            ; ---------------------------------------------------------------------------
0001D998                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001D998                            ; ---------------------------------------------------------------------------
0001D998 0002                       PLC_TryAgain:	dc.w 2
0001D99A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001D99E 78A0                       		dc.w $78A0
0001D9A0 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001D9A4 7C20                       		dc.w $7C20
0001D9A6 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001D9AA B400                       		dc.w $B400
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC                            ; Pattern load cues - Eggman on SBZ 2
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC 0002                       PLC_EggmanSBZ2:	dc.w 2
0001D9AE 0000 0000                  		dc.l Nem_SbzBlock	; block
0001D9B2 A300                       		dc.w $A300
0001D9B4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001D9B8 8000                       		dc.w $8000
0001D9BA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D9BE 9400                       		dc.w $9400
0001D9C0                            ; ---------------------------------------------------------------------------
0001D9C0                            ; Pattern load cues - final boss
0001D9C0                            ; ---------------------------------------------------------------------------
0001D9C0 0004                       PLC_FZBoss:	dc.w 4
0001D9C2 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001D9C6 7400                       		dc.w $7400
0001D9C8 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001D9CC 6000                       		dc.w $6000
0001D9CE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D9D2 8000                       		dc.w $8000
0001D9D4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001D9D8 8E00                       		dc.w $8E00
0001D9DA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001D9DE A540                       		dc.w $A540
0001D9E0                            		even
0001D9E0                            		even
0001D9E0                            
0001D9E0                            		incbin	misc\padding.bin
0001DACE                            		even
0001DACE                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001DF30                            		even
0001DF30                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E028                            		even
0001E028                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E13C                            		even
0001E13C                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F148                            		even
0001F148                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020B16                            		even
00020B16                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020B4A                            		even
00020B4A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00020C08                            		even
00020C08                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000210B0                            		even
000210B0                            ; ---------------------------------------------------------------------------
000210B0                            ; Sprite mappings - Sonic
000210B0                            ; ---------------------------------------------------------------------------
000210B0                            Map_Sonic:
000210B0                            	include "_maps\Sonic.asm"
000210B0                            ; ---------------------------------------------------------------------------
000210B0                            ; Sprite mappings - Sonic
000210B0                            ; ---------------------------------------------------------------------------
000210B0 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
000210B4 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
000210B8 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
000210BC 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
000210C0 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
000210C4 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
000210C8 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
000210CC 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
000210D0 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
000210D4 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
000210D8 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
000210DC 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
000210E0 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
000210E4 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
000210E8 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
000210EC 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
000210F0 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
000210F4 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
000210F8 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
000210FC 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00021100 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00021104 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00021108 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002110C 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00021110 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00021114 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00021118 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002111C 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00021120 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00021124 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00021128 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
0002112C 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00021130 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00021134 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00021138 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
0002113C 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00021140 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00021144 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00021148 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
0002114C 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00021150 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00021154 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00021158 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
0002115C 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00021160 00                         byte_21292:	dc.b 0
00021161 04                         byte_21293:	dc.b 4			; standing
00021162 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021167 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
0002116C 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00021171 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00021176 03                         byte_212A8:	dc.b 3			; waiting 1
00021177 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002117C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021181 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021186 03                         byte_212B8:	dc.b 3			; waiting 2
00021187 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002118C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021191 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021196 03                         byte_212C8:	dc.b 3			; waiting 3
00021197 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002119C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000211A1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000211A6 03                         byte_212D8:	dc.b 3			; looking up
000211A7 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000211AC 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
000211B1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000211B6 04                         byte_212E8:	dc.b 4			; walking 1-1
000211B7 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
000211BC FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
000211C1 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
000211C6 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
000211CB 02                         byte_212FD:	dc.b 2			; walking 1-2
000211CC EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
000211D1 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
000211D6 02                         byte_21308:	dc.b 2			; walking 1-3
000211D7 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
000211DC FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
000211E1 04                         byte_21313:	dc.b 4			; walking 1-4
000211E2 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000211E7 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
000211EC FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
000211F1 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
000211F6 02                         byte_21328:	dc.b 2			; walking 1-5
000211F7 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
000211FC FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00021201 03                         byte_21333:	dc.b 3			; walking 1-6
00021202 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00021207 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
0002120C 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00021211 05                         byte_21343:	dc.b 5			; walking 2-1
00021212 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021217 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
0002121C FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00021221 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00021226 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
0002122B 06                         byte_2135D:	dc.b 6			; walking 2-2
0002122C EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00021231 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021236 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
0002123B 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00021240 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00021245 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
0002124A 04                         byte_2137C:	dc.b 4			; walking 2-3
0002124B ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021250 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021255 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
0002125A 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
0002125F 05                         byte_21391:	dc.b 5			; walking 2-4
00021260 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021265 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
0002126A FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
0002126F 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00021274 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00021279 04                         byte_213AB:	dc.b 4			; walking 2-5
0002127A EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
0002127F EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021284 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00021289 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
0002128E 05                         byte_213C0:	dc.b 5			; walking 2-6
0002128F ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021294 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021299 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
0002129E FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
000212A3 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
000212A8 04                         byte_213DA:	dc.b 4			; walking 3-1
000212A9 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
000212AE EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
000212B3 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
000212B8 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
000212BD 02                         byte_213EF:	dc.b 2			; walking 3-2
000212BE F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
000212C3 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
000212C8 02                         byte_213FA:	dc.b 2			; walking 3-3
000212C9 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
000212CE F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
000212D3 04                         byte_21405:	dc.b 4			; walking 3-4
000212D4 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
000212D9 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
000212DE FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
000212E3 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
000212E8 02                         byte_2141A:	dc.b 2			; walking 3-5
000212E9 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
000212EE F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
000212F3 03                         byte_21425:	dc.b 3			; walking 3-6
000212F4 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
000212F9 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
000212FE F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00021303 06                         byte_21435:	dc.b 6			; walking 4-1
00021304 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00021309 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
0002130E F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00021313 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00021318 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
0002131D FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00021322 06                         byte_21454:	dc.b 6			; walking 4-2
00021323 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00021328 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
0002132D EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00021332 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00021337 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
0002133C 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00021341 04                         byte_21473:	dc.b 4			; walking 4-3
00021342 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00021347 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
0002134C EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00021351 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00021356 05                         byte_21488:	dc.b 5			; walking 4-4
00021357 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
0002135C ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00021361 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00021366 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
0002136B 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00021370 04                         byte_214A2:	dc.b 4			; walking 4-5
00021371 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00021376 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
0002137B EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00021380 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00021385 05                         byte_214B7:	dc.b 5			; walking 4-6
00021386 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002138B EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00021390 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00021395 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002139A 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
0002139F 02                         byte_214D1:	dc.b 2			; running 1-1
000213A0 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000213A5 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000213AA 02                         byte_214DC:	dc.b 2			; running 1-2
000213AB EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000213B0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000213B5 02                         byte_214E7:	dc.b 2			; running 1-3
000213B6 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000213BB FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000213C0 02                         byte_214F2:	dc.b 2			; running 1-4
000213C1 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000213C6 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000213CB 04                         byte_214FD:	dc.b 4			; running 2-1
000213CC EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000213D1 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000213D6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000213DB FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000213E0 03                         byte_21512:	dc.b 3			; running 2-2
000213E1 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000213E6 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000213EB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000213F0 04                         byte_21522:	dc.b 4			; running 2-3
000213F1 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000213F6 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000213FB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00021400 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00021405 03                         byte_21537:	dc.b 3			; running 2-4
00021406 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002140B EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00021410 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00021415 02                         byte_21547:	dc.b 2			; running 3-1
00021416 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002141B F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00021420 02                         byte_21552:	dc.b 2			; running 3-2
00021421 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00021426 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002142B 02                         byte_2155D:	dc.b 2			; running 3-3
0002142C F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00021431 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00021436 02                         byte_21568:	dc.b 2			; running 3-4
00021437 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002143C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00021441 04                         byte_21573:	dc.b 4			; running 4-1
00021442 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00021447 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
0002144C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00021451 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00021456 02                         byte_21588:	dc.b 2			; running 4-2
00021457 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
0002145C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00021461 04                         byte_21593:	dc.b 4			; running 4-3
00021462 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00021467 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
0002146C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00021471 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00021476 02                         byte_215A8:	dc.b 2			; running 4-4
00021477 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
0002147C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00021481 01                         byte_215B3:	dc.b 1			; rolling 1
00021482 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021487 01                         byte_215B9:	dc.b 1			; rolling 2
00021488 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002148D 01                         byte_215BF:	dc.b 1			; rolling 3
0002148E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021493 01                         byte_215C5:	dc.b 1			; rolling 4
00021494 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021499 01                         byte_215CB:	dc.b 1			; rolling 5
0002149A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002149F 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
000214A0 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
000214A5 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
000214AA 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
000214AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000214B0 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
000214B1 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
000214B6 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
000214BB 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
000214BC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000214C1 02                         byte_215F3:	dc.b 2			; stopping 1
000214C2 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000214C7 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
000214CC 04                         byte_215FE:	dc.b 4			; stopping 2
000214CD ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000214D2 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
000214D7 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
000214DC 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
000214E1 04                         byte_21613:	dc.b 4			; ducking
000214E2 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000214E7 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
000214EC 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
000214F1 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
000214F6 03                         byte_21628:	dc.b 3			; balancing 1
000214F7 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
000214FC F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00021501 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00021506 03                         byte_21638:	dc.b 3			; balancing 2
00021507 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
0002150C 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00021511 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00021516 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00021517 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
0002151C FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00021521 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00021526 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00021527 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
0002152C F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00021531 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00021532 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00021537 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
0002153C 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00021541 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00021542 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00021547 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
0002154C 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00021551 03                         byte_21683:	dc.b 3			; bouncing
00021552 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00021557 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
0002155C 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00021561 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00021562 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00021567 0005 000C 08               		dc.b 0,	5, 0, $C, 8
0002156C F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00021571 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00021576 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00021577 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
0002157C 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00021581 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00021586 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
0002158B 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
0002158C E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00021591 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00021596 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
0002159B 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000215A0 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000215A5 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
000215A6 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000215AB E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
000215B0 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000215B5 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000215BA 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000215BF 02                         byte_216F1:	dc.b 2			; pushing 1
000215C0 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000215C5 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000215CA 03                         byte_216FC:	dc.b 3			; pushing 2
000215CB EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000215D0 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000215D5 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000215DA 02                         byte_2170C:	dc.b 2			; pushing 3
000215DB ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000215E0 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000215E5 03                         byte_21717:	dc.b 3			; pushing 4
000215E6 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000215EB 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000215F0 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000215F5 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
000215F6 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000215FB FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00021600 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00021601 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00021606 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
0002160B E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00021610 03                         byte_21742:	dc.b 3			; death	1
00021611 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021616 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002161B F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00021620 05                         byte_21752:	dc.b 5			; drowning
00021621 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021626 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002162B F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00021630 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00021635 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002163A 05                         byte_2176C:	dc.b 5			; death	2
0002163B E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021640 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00021645 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
0002164A 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
0002164F 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00021654 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00021655 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002165A F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
0002165F 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00021660 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021665 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
0002166A 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
0002166F 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00021670 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00021675 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00021676 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0002167B 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
0002167C F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00021681 03                         byte_217B3:	dc.b 3			; injury
00021682 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00021687 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
0002168C 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00021691 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00021692 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00021697 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
0002169C 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
000216A1 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
000216A2 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
000216A7 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000216AC 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
000216B1 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
000216B2 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000216B7 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
000216BC 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
000216C1 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
000216C2 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
000216C7 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
000216CC                            		even
000216CC                            		even
000216CC                            
000216CC                            ; ---------------------------------------------------------------------------
000216CC                            ; Uncompressed graphics	loading	array for Sonic
000216CC                            ; ---------------------------------------------------------------------------
000216CC                            SonicDynPLC:
000216CC                            	include "_inc\Sonic dynamic pattern load cues.asm"
000216CC                            ; ---------------------------------------------------------------------------
000216CC                            ; Uncompressed graphics	loading	array for Sonic
000216CC                            ; ---------------------------------------------------------------------------
000216CC 0000                       		dc.w SonPLC_Blank-SonicDynPLC
000216CE 0000                       		dc.w SonPLC_Stand-SonicDynPLC
000216D0 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
000216D2 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
000216D4 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
000216D6 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
000216D8 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
000216DA 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
000216DC 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
000216DE 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
000216E0 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
000216E2 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
000216E4 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
000216E6 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
000216E8 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
000216EA 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
000216EC 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
000216EE 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
000216F0 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
000216F2 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
000216F4 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
000216F6 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
000216F8 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
000216FA 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
000216FC 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
000216FE 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00021700 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00021702 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00021704 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00021706 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00021708 0000                       		dc.w SonPLC_Run11-SonicDynPLC
0002170A 0000                       		dc.w SonPLC_Run12-SonicDynPLC
0002170C 0000                       		dc.w SonPLC_Run13-SonicDynPLC
0002170E 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00021710 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00021712 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00021714 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00021716 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00021718 0000                       		dc.w SonPLC_Run31-SonicDynPLC
0002171A 0000                       		dc.w SonPLC_Run32-SonicDynPLC
0002171C 0000                       		dc.w SonPLC_Run33-SonicDynPLC
0002171E 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00021720 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00021722 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00021724 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00021726 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00021728 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
0002172A 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
0002172C 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
0002172E 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00021730 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00021732 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00021734 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00021736 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00021738 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
0002173A 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
0002173C 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
0002173E 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00021740 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00021742 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00021744 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00021746 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00021748 0000                       		dc.w SonPLC_Float3-SonicDynPLC
0002174A 0000                       		dc.w SonPLC_Float4-SonicDynPLC
0002174C 0000                       		dc.w SonPLC_Spring-SonicDynPLC
0002174E 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00021750 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00021752 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00021754 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00021756 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00021758 0000                       		dc.w SonPLC_Push2-SonicDynPLC
0002175A 0000                       		dc.w SonPLC_Push3-SonicDynPLC
0002175C 0000                       		dc.w SonPLC_Push4-SonicDynPLC
0002175E 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00021760 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00021762 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00021764 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00021766 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00021768 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
0002176A 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
0002176C 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
0002176E 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00021770 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00021772 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00021774 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00021776 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00021778 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
0002177A 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
0002177C 00                         SonPLC_Blank:	dc.b 0
0002177D 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00021786 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
0002178D 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00021794 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
0002179B 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
000217A2 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
000217AB 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
000217B0 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
000217B5 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
000217BE 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
000217C3 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
000217CA 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
000217D5 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
000217E2 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
000217EB 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
000217F6 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
000217FF 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
0002180A 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00021813 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00021818 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
0002181D 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00021826 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
0002182B 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00021832 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
0002183F 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
0002184C 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00021855 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00021860 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00021869 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00021874 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00021879 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
0002187E 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00021883 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00021888 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00021891 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00021898 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
000218A1 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
000218A8 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
000218AD 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
000218B2 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
000218B7 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
000218BC 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
000218C5 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
000218CA 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
000218D3 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
000218D8 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
000218DB 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
000218DE 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
000218E1 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
000218E4 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
000218E7 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
000218EC 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
000218EF 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
000218F4 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
000218F7 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
000218FC 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00021905 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
0002190E 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00021915 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
0002191C 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00021923 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00021926 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
0002192D 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00021934 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
0002193B 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00021944 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
0002194D 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00021958 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00021963 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00021968 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
0002196F 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00021974 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
0002197B 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00021980 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00021987 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
0002198E 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00021999 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
000219A4 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
000219A9 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
000219B0 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
000219B3 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
000219B6 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
000219B9 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
000219C0 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
000219C7 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
000219CC                            		even
000219CC                            		even
000219CC                            
000219CC                            ; ---------------------------------------------------------------------------
000219CC                            ; Uncompressed graphics	- Sonic
000219CC                            ; ---------------------------------------------------------------------------
000219CC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002BAEC                            		even
0002BAEC                            ; ---------------------------------------------------------------------------
0002BAEC                            ; Compressed graphics - various
0002BAEC                            ; ---------------------------------------------------------------------------
0002BAEC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002BBF0                            		even
0002BBF0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002BC2A                            		even
0002BC2A                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002BDC0                            		even
0002BDC0                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002BF08                            		even
0002BF08                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002C012                            		even
0002C012                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002C064                            		even
0002C064                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002C2AC                            		even
0002C2AC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002C432                            		even
0002C432                            ; ---------------------------------------------------------------------------
0002C432                            ; Sprite mappings - walls of the special stage
0002C432                            ; ---------------------------------------------------------------------------
0002C432                            Map_SSWalls:
0002C432                            	include "_maps\SSwalls.asm"
0002C432                            ; ---------------------------------------------------------------------------
0002C432                            ; Sprite mappings - walls of the special stage
0002C432                            ; ---------------------------------------------------------------------------
0002C432 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002C436 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002C43A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002C43E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002C442 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002C446 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002C44A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002C44E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002C452 01                         byte_2C584:	dc.b 1
0002C453 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002C458 01                         byte_2C58A:	dc.b 1
0002C459 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002C45E 01                         byte_2C590:	dc.b 1
0002C45F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002C464 01                         byte_2C596:	dc.b 1
0002C465 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002C46A 01                         byte_2C59C:	dc.b 1
0002C46B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002C470 01                         byte_2C5A2:	dc.b 1
0002C471 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002C476 01                         byte_2C5A8:	dc.b 1
0002C477 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002C47C 01                         byte_2C5AE:	dc.b 1
0002C47D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002C482 01                         byte_2C5B4:	dc.b 1
0002C483 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002C488 01                         byte_2C5BA:	dc.b 1
0002C489 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002C48E 01                         byte_2C5C0:	dc.b 1
0002C48F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002C494 01                         byte_2C5C6:	dc.b 1
0002C495 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002C49A 01                         byte_2C5CC:	dc.b 1
0002C49B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002C4A0 01                         byte_2C5D2:	dc.b 1
0002C4A1 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002C4A6 01                         byte_2C5D8:	dc.b 1
0002C4A7 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002C4AC 01                         byte_2C5DE:	dc.b 1
0002C4AD F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002C4B2                            		even
0002C4B2                            		even
0002C4B2                            ; ---------------------------------------------------------------------------
0002C4B2                            ; Compressed graphics - special stage
0002C4B2                            ; ---------------------------------------------------------------------------
0002C4B2                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002CDEA                            		even
0002CDEA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002CF1E                            		even
0002CF1E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002DBAE                            		even
0002DBAE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002DEAE                            		even
0002DEAE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002E3A2                            		even
0002E3A2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002E490                            		even
0002E490                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002E560                            		even
0002E560                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002E656                            		even
0002E656                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002E6B4                            		even
0002E6B4                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002E746                            		even
0002E746                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002E808                            		even
0002E808                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0002E8D6                            		even
0002E8D6                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0002E9A2                            		even
0002E9A2                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0002EA6A                            		even
0002EA6A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0002EB34                            		even
0002EB34                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0002EC04                            		even
0002EC04                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0002EDF8                            		even
0002EDF8                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0002EF60                            		even
0002EF60                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0002F010                            		even
0002F010                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0002F0EA                            		even
0002F0EA                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0002F16E                            		even
0002F16E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0002F2EC                            		even
0002F2EC                            ; ---------------------------------------------------------------------------
0002F2EC                            ; Compressed graphics - GHZ stuff
0002F2EC                            ; ---------------------------------------------------------------------------
0002F2EC                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0002F336                            		even
0002F336                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0002F450                            		even
0002F450                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0002F53C                            		even
0002F53C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0002F584                            		even
0002F584                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0002F722                            		even
0002F722                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002F79E                            		even
0002F79E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0002F9B2                            		even
0002F9B2                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0002FADE                            		even
0002FADE                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0002FC0C                            		even
0002FC0C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0002FCAA                            		even
0002FCAA                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0002FD0A                            		even
0002FD0A                            ; ---------------------------------------------------------------------------
0002FD0A                            ; Compressed graphics - LZ stuff
0002FD0A                            ; ---------------------------------------------------------------------------
0002FD0A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0002FE2E                            		even
0002FE2E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00030622                            		even
00030622                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000307A2                            		even
000307A2                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003090C                            		even
0003090C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00030F62                            		even
00030F62                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00031018                            		even
00031018                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000310BA                            		even
000310BA                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00031216                            		even
00031216                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003127A                            		even
0003127A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000313CC                            		even
000313CC                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000318AE                            		even
000318AE                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00031A1E                            		even
00031A1E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00031CD6                            		even
00031CD6                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00031E0E                            		even
00031E0E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00031F38                            		even
00031F38                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00032048                            		even
00032048                            ; ---------------------------------------------------------------------------
00032048                            ; Compressed graphics - MZ stuff
00032048                            ; ---------------------------------------------------------------------------
00032048                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000322D6                            		even
000322D6                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00032394                            		even
00032394                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003244C                            		even
0003244C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000324A0                            		even
000324A0                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003277E                            		even
0003277E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00033094                            		even
00033094                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000331F8                            		even
000331F8                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00033280                            		even
00033280                            ; ---------------------------------------------------------------------------
00033280                            ; Compressed graphics - SLZ stuff
00033280                            ; ---------------------------------------------------------------------------
00033280                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000334BC                            		even
000334BC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00033602                            		even
00033602                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00033846                            		even
00033846                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000338A8                            		even
000338A8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003398A                            		even
0003398A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00033B6C                            		even
00033B6C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00033C78                            		even
00033C78                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00033D1C                            		even
00033D1C                            ; ---------------------------------------------------------------------------
00033D1C                            ; Compressed graphics - SYZ stuff
00033D1C                            ; ---------------------------------------------------------------------------
00033D1C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00033E86                            		even
00033E86                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00033EE8                            		even
00033EE8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00033FCA                            		even
00033FCA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00034258                            		even
00034258                            ; ---------------------------------------------------------------------------
00034258                            ; Compressed graphics - SBZ stuff
00034258                            ; ---------------------------------------------------------------------------
00034258                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000342AC                            		even
000342AC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00034548                            		even
00034548                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003474C                            		even
0003474C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000348EA                            		even
000348EA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00034C1A                            		even
00034C1A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00034DF8                            		even
00034DF8                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00034E50                            		even
00034E50                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00034FD0                            		even
00034FD0                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000350CE                            		even
000350CE                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003525A                            		even
0003525A                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000352AA                            		even
000352AA                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00035302                            		even
00035302                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000353FE                            		even
000353FE                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00035514                            		even
00035514                            ; ---------------------------------------------------------------------------
00035514                            ; Compressed graphics - enemies
00035514                            ; ---------------------------------------------------------------------------
00035514                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000358D4                            		even
000358D4                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00035DC2                            		even
00035DC2                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00036168                            		even
00036168                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00036350                            		even
00036350                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00036A3A                            		even
00036A3A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00036CA2                            		even
00036CA2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00036F2C                            		even
00036F2C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00037450                            		even
00037450                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000376DA                            		even
000376DA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00037CF8                            		even
00037CF8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000380E0                            		even
000380E0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000383DC                            		even
000383DC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00038624                            		even
00038624                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
000388BC                            		even
000388BC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00038A9A                            		even
00038A9A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00038C28                            		even
00038C28                            ; ---------------------------------------------------------------------------
00038C28                            ; Compressed graphics - various
00038C28                            ; ---------------------------------------------------------------------------
00038C28                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00039236                            		even
00039236                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003932C                            		even
0003932C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00039432                            		even
00039432                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00039526                            		even
00039526                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00039986                            		even
00039986                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00039FEC                            		even
00039FEC                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003A09C                            		even
0003A09C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003A22E                            		even
0003A22E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003A330                            		even
0003A330                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003A40C                            		even
0003A40C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003A888                            		even
0003A888                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003A948                            		even
0003A948                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003AABC                            		even
0003AABC                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003ADBE                            		even
0003ADBE                            ; ---------------------------------------------------------------------------
0003ADBE                            ; Compressed graphics - continue screen
0003ADBE                            ; ---------------------------------------------------------------------------
0003ADBE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003B06E                            		even
0003B06E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003B2A8                            		even
0003B2A8                            ; ---------------------------------------------------------------------------
0003B2A8                            ; Compressed graphics - animals
0003B2A8                            ; ---------------------------------------------------------------------------
0003B2A8                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003B400                            		even
0003B400                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003B55C                            		even
0003B55C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003B6D8                            		even
0003B6D8                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003B7F4                            		even
0003B7F4                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003B92A                            		even
0003B92A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003BA64                            		even
0003BA64                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003BBC0                            		even
0003BBC0                            ; ---------------------------------------------------------------------------
0003BBC0                            ; Compressed graphics - primary patterns and block mappings
0003BBC0                            ; ---------------------------------------------------------------------------
0003BBC0                            Blk16_GHZ:	incbin	map16\ghz.bin
0003C560                            		even
0003C560                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003DBC0                            		even
0003DBC0                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0003EF68                            		even
0003EF68                            Blk256_GHZ:	incbin	map256\ghz.bin
00041078                            		even
00041078                            Blk16_LZ:	incbin	map16\lz.bin
000413A2                            		even
000413A2                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00042EEA                            		even
00042EEA                            Blk256_LZ:	incbin	map256\lz.bin
000456DA                            		even
000456DA                            Blk16_MZ:	incbin	map16\mz.bin
00045EE4                            		even
00045EE4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00048728                            		even
00048728                            Blk256_MZ:	incbin	map256\mz.bin
00049EE8                            		even
00049EE8                            Blk16_SLZ:	incbin	map16\slz.bin
0004A6CC                            		even
0004A6CC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E220                            		even
0004E220                            Blk256_SLZ:	incbin	map256\slz.bin
00050650                            		even
00050650                            Blk16_SYZ:	incbin	map16\syz.bin
00050FBE                            		even
00050FBE                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000546EA                            		even
000546EA                            Blk256_SYZ:	incbin	map256\syz.bin
00056A9A                            		even
00056A9A                            Blk16_SBZ:	incbin	map16\sbz.bin
00057934                            		even
00057934                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005A0E0                            		even
0005A0E0                            Blk256_SBZ:	incbin	map256\sbz.bin
0005CB30                            		even
0005CB30                            ; ---------------------------------------------------------------------------
0005CB30                            ; Compressed graphics - bosses and ending sequence
0005CB30                            ; ---------------------------------------------------------------------------
0005CB30                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005D394                            		even
0005D394                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005D67E                            		even
0005D67E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005DF02                            		even
0005DF02                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005E72E                            		even
0005E72E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005EE96                            		even
0005EE96                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005F416                            		even
0005F416                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005F536                            		even
0005F536                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005F734                            		even
0005F734                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00060912                            		even
00060912                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00061256                            		even
00061256                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006162C                            		even
0006162C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00061BBC                            		even
00061BBC                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00061E44                            		even
00061E44                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00062442                            		even
00062442                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000626CA                            		even
000626CA                            		incbin	misc\padding2.bin
000627CE                            		even
000627CE                            ; ---------------------------------------------------------------------------
000627CE                            ; Collision data
000627CE                            ; ---------------------------------------------------------------------------
000627CE                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000628CE                            		even
000628CE                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000638CE                            		even
000638CE                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000648CE                            		even
000648CE                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00064A68                            		even
00064A68                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00064B30                            		even
00064B30                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00064CC0                            		even
00064CC0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00064EB4                            		even
00064EB4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000650A8                            		even
000650A8                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00065300                            		even
00065300                            ; ---------------------------------------------------------------------------
00065300                            ; Special layouts
00065300                            ; ---------------------------------------------------------------------------
00065300                            SS_1:		incbin	sslayout\1.bin
0006557A                            		even
0006557A                            SS_2:		incbin	sslayout\2.bin
0006598C                            		even
0006598C                            SS_3:		incbin	sslayout\3.bin
00065CE8                            		even
00065CE8                            SS_4:		incbin	sslayout\4.bin
000661C2                            		even
000661C2                            SS_5:		incbin	sslayout\5.bin
00066694                            		even
00066694                            SS_6:		incbin	sslayout\6.bin
000669A4                            		even
000669A4                            ; ---------------------------------------------------------------------------
000669A4                            ; Animated uncompressed graphics
000669A4                            ; ---------------------------------------------------------------------------
000669A4                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00066BA4                            		even
00066BA4                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00066FA4                            		even
00066FA4                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00067424                            		even
00067424                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00067724                            		even
00067724                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00067D24                            		even
00067D24                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00068024                            		even
00068024                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00068AA4                            		even
00068AA4                            
00068AA4                            ; ---------------------------------------------------------------------------
00068AA4                            ; Level	layout index
00068AA4                            ; ---------------------------------------------------------------------------
00068AA4 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00068AAA 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00068AB0 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00068AB6 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00068ABC 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00068AC2 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00068AC8 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00068ACE 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00068AD4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00068ADA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00068AE0 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00068AE6 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00068AEC 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068AF2 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068AF8 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068AFE 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00068B04 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00068B0A 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00068B10 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00068B16 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00068B1C 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00068B22 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00068B28 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00068B2E 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00068B34 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068B3A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068B40 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068B46 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068B4C                            
00068B4C                            Level_GHZ1:	incbin	levels\ghz1.bin
00068C3E                            		even
00068C3E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00068C42                            Level_GHZ2:	incbin	levels\ghz2.bin
00068D0A                            		even
00068D0A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00068D0E                            Level_GHZ3:	incbin	levels\ghz3.bin
00068E30                            		even
00068E30                            Level_GHZbg:	incbin	levels\ghzbg.bin
00068E52                            		even
00068E52 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00068E56 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00068E5A                            
00068E5A                            Level_LZ1:	incbin	levels\lz1.bin
00068F5C                            		even
00068F5C                            Level_LZbg:	incbin	levels\lzbg.bin
0006905E                            		even
0006905E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00069062                            Level_LZ2:	incbin	levels\lz2.bin
000690FC                            		even
000690FC 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00069100                            Level_LZ3:	incbin	levels\lz3.bin
0006921A                            		even
0006921A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006921E                            Level_SBZ3:	incbin	levels\sbz3.bin
000692D8                            		even
000692D8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000692DC                            
000692DC                            Level_MZ1:	incbin	levels\mz1.bin
0006937A                            		even
0006937A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000693F4                            		even
000693F4                            Level_MZ2:	incbin	levels\mz2.bin
00069498                            		even
00069498                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006952A                            		even
0006952A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006952E                            Level_MZ3:	incbin	levels\mz3.bin
00069610                            		even
00069610                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000696B4                            		even
000696B4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000696B8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000696BC                            
000696BC                            Level_SLZ1:	incbin	levels\slz1.bin
000697CE                            		even
000697CE                            Level_SLZbg:	incbin	levels\slzbg.bin
00069848                            		even
00069848                            Level_SLZ2:	incbin	levels\slz2.bin
00069938                            		even
00069938                            Level_SLZ3:	incbin	levels\slz3.bin
00069A52                            		even
00069A52 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00069A56                            
00069A56                            Level_SYZ1:	incbin	levels\syz1.bin
00069B12                            		even
00069B12                            Level_SYZbg:	incbin	levels\syzbg.bin
00069B4C                            		even
00069B4C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00069B50                            Level_SYZ2:	incbin	levels\syz2.bin
00069C54                            		even
00069C54 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00069C58                            Level_SYZ3:	incbin	levels\syz3.bin
00069DB2                            		even
00069DB2 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00069DB6 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00069DBA                            
00069DBA                            Level_SBZ1:	incbin	levels\sbz1.bin
00069EDC                            		even
00069EDC                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00069F1A                            		even
00069F1A                            Level_SBZ2:	incbin	levels\sbz2.bin
0006A05C                            		even
0006A05C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006A1C6                            		even
0006A1C6 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006A1CA 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006A1CE                            Level_End:	incbin	levels\ending.bin
0006A1EE                            		even
0006A1EE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006A1F2                            
0006A1F2                            ; ---------------------------------------------------------------------------
0006A1F2                            ; Animated uncompressed giant ring graphics
0006A1F2                            ; ---------------------------------------------------------------------------
0006A1F2                            Art_BigRing:	incbin	artunc\bigring.bin
0006AE32                            		even
0006AE32                            
0006AE32                            		incbin	misc\padding3.bin
0006AECE                            		even
0006AECE                            
0006AECE                            ; ---------------------------------------------------------------------------
0006AECE                            ; Sprite locations index
0006AECE                            ; ---------------------------------------------------------------------------
0006AECE 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AED2 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AED6 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEDA 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEDE 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEE2 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEE6 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEEA 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEEE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEF2 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEF6 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEFA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AEFE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF02 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF06 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF0A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF0E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF12 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF16 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF1A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF1E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF22 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF26 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF2A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF2E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF32 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF36 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF3A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AF3E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006AF42 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006AF46 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006AF4A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006AF4E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006AF52 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006AF56 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006AF5A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006AF5E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006AF64                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006B46E                            		even
0006B46E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006BA2C                            		even
0006BA2C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006C0E6                            		even
0006C0E6                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006C554                            		even
0006C554                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006C896                            		even
0006C896                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006CE78                            		even
0006CE78                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006D310                            		even
0006D310                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006D342                            		even
0006D342                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006D374                            		even
0006D374                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006D3A6                            		even
0006D3A6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006D3D8                            		even
0006D3D8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006D422                            		even
0006D422                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006D460                            		even
0006D460                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006D7CC                            		even
0006D7CC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006DC76                            		even
0006DC76                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006E1EC                            		even
0006E1EC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006E72C                            		even
0006E72C                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006EB94                            		even
0006EB94                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006F176                            		even
0006F176                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006F602                            		even
0006F602                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006FB6C                            		even
0006FB6C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00070172                            		even
00070172                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000708B0                            		even
000708B0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00070F8E                            		even
00070F8E                            ObjPos_FZ:	incbin	objpos\fz.bin
00070FA0                            		even
00070FA0                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00070FD2                            		even
00070FD2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00071004                            		even
00071004                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00071036                            		even
00071036                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00071068                            		even
00071068                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007109A                            		even
0007109A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000710D2                            		even
000710D2                            ObjPos_End:	incbin	objpos\ending.bin
0007122E                            		even
0007122E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00071234                            ; ---------------------------------------------------------------------------
00071234                            		incbin	misc\padding4.bin
0007185E                            		even
0007185E                            
0007185E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00071862 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00071866 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007186A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007186E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00071872 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00071876                            ; ---------------------------------------------------------------------------
00071876                            ; PSG instruments used in music
00071876                            ; ---------------------------------------------------------------------------
00071876 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00071882 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007188E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007189A                            PSG1:		incbin	sound\psg1.bin
000718B1                            PSG2:		incbin	sound\psg2.bin
000718B8                            PSG3:		incbin	sound\psg3.bin
000718C9                            PSG4:		incbin	sound\psg4.bin
000718D4                            PSG6:		incbin	sound\psg6.bin
000718E3                            PSG5:		incbin	sound\psg5.bin
0007190D                            PSG7:		incbin	sound\psg7.bin
00071929                            PSG8:		incbin	sound\psg8.bin
00071951                            PSG9:		incbin	sound\psg9.bin
00071962                            
00071962 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007196A                            ; ---------------------------------------------------------------------------
0007196A                            ; Music	Pointers
0007196A                            ; ---------------------------------------------------------------------------
0007196A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00071972 0000 0000 0000 0000        		dc.l Music83, Music84
0007197A 0000 0000 0000 0000        		dc.l Music85, Music86
00071982 0000 0000 0000 0000        		dc.l Music87, Music88
0007198A 0000 0000 0000 0000        		dc.l Music89, Music8A
00071992 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007199A 0000 0000 0000 0000        		dc.l Music8D, Music8E
000719A2 0000 0000 0000 0000        		dc.l Music8F, Music90
000719AA 0000 0000 0000 0000        		dc.l Music91, Music92
000719B2 0000 0000                  		dc.l Music93
000719B6                            ; ---------------------------------------------------------------------------
000719B6                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000719B6                            ; ---------------------------------------------------------------------------
000719B6 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000719C6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000719D6 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000719E6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000719F6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00071A06 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00071A16 9090 9090                  		dc.b $90, $90, $90, $90
00071A1A                            
00071A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071A1A                            
00071A1A                            
00071A1A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00071A1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00071A22 4E71                       		nop	
00071A24 4E71                       		nop	
00071A26 4E71                       		nop	
00071A28                            
00071A28                            loc_71B5A:
00071A28 0839 0000 00A1 1100        		btst	#0,($A11100).l
00071A30 66F6                       		bne.s	loc_71B5A
00071A32                            
00071A32 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00071A3A 6700                       		beq.s	loc_71B82
00071A3C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071A44 4E71                       		nop	
00071A46 4E71                       		nop	
00071A48 4E71                       		nop	
00071A4A 4E71                       		nop	
00071A4C 4E71                       		nop	
00071A4E 60CA                       		bra.s	sub_71B4C
00071A50                            ; ===========================================================================
00071A50                            
00071A50                            loc_71B82:
00071A50 4DF9 00FF F000             		lea	($FFF000).l,a6
00071A56 422E 000E                  		clr.b	$E(a6)
00071A5A 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00071A5E 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00071A62 532E 0001                  		subq.b	#1,1(a6)
00071A66 6600                       		bne.s	loc_71B9E
00071A68 4EBA 0000                  		jsr	sub_7260C(pc)
00071A6C                            
00071A6C                            loc_71B9E:
00071A6C 102E 0004                  		move.b	4(a6),d0
00071A70 6700                       		beq.s	loc_71BA8
00071A72 4EBA 0000                  		jsr	sub_72504(pc)
00071A76                            
00071A76                            loc_71BA8:
00071A76 4A2E 0024                  		tst.b	$24(a6)
00071A7A 6700                       		beq.s	loc_71BB2
00071A7C 4EBA 0000                  		jsr	sub_7267C(pc)
00071A80                            
00071A80                            loc_71BB2:
00071A80 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00071A84 6700                       		beq.s	loc_71BBC	; if not, branch
00071A86 4EBA 0000                  		jsr	Sound_Play(pc)
00071A8A                            
00071A8A                            loc_71BBC:
00071A8A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00071A90 6700                       		beq.s	loc_71BC8
00071A92 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00071A96                            
00071A96                            loc_71BC8:
00071A96 4BEE 0040                  		lea	$40(a6),a5
00071A9A 4A15                       		tst.b	(a5)
00071A9C 6A00                       		bpl.s	loc_71BD4
00071A9E 4EBA 0000                  		jsr	sub_71C4E(pc)
00071AA2                            
00071AA2                            loc_71BD4:
00071AA2 422E 0008                  		clr.b	8(a6)
00071AA6 7E05                       		moveq	#5,d7
00071AA8                            
00071AA8                            loc_71BDA:
00071AA8 DAFC 0030                  		adda.w	#$30,a5
00071AAC 4A15                       		tst.b	(a5)
00071AAE 6A00                       		bpl.s	loc_71BE6
00071AB0 4EBA 0000                  		jsr	sub_71CCA(pc)
00071AB4                            
00071AB4                            loc_71BE6:
00071AB4 51CF FFF2                  		dbf	d7,loc_71BDA
00071AB8                            
00071AB8 7E02                       		moveq	#2,d7
00071ABA                            
00071ABA                            loc_71BEC:
00071ABA DAFC 0030                  		adda.w	#$30,a5
00071ABE 4A15                       		tst.b	(a5)
00071AC0 6A00                       		bpl.s	loc_71BF8
00071AC2 4EBA 0000                  		jsr	sub_72850(pc)
00071AC6                            
00071AC6                            loc_71BF8:
00071AC6 51CF FFF2                  		dbf	d7,loc_71BEC
00071ACA                            
00071ACA 1D7C 0080 000E             		move.b	#$80,$E(a6)
00071AD0 7E02                       		moveq	#2,d7
00071AD2                            
00071AD2                            loc_71C04:
00071AD2 DAFC 0030                  		adda.w	#$30,a5
00071AD6 4A15                       		tst.b	(a5)
00071AD8 6A00                       		bpl.s	loc_71C10
00071ADA 4EBA 0000                  		jsr	sub_71CCA(pc)
00071ADE                            
00071ADE                            loc_71C10:
00071ADE 51CF FFF2                  		dbf	d7,loc_71C04
00071AE2                            
00071AE2 7E02                       		moveq	#2,d7
00071AE4                            
00071AE4                            loc_71C16:
00071AE4 DAFC 0030                  		adda.w	#$30,a5
00071AE8 4A15                       		tst.b	(a5)
00071AEA 6A00                       		bpl.s	loc_71C22
00071AEC 4EBA 0000                  		jsr	sub_72850(pc)
00071AF0                            
00071AF0                            loc_71C22:
00071AF0 51CF FFF2                  		dbf	d7,loc_71C16
00071AF4 1D7C 0040 000E             		move.b	#$40,$E(a6)
00071AFA DAFC 0030                  		adda.w	#$30,a5
00071AFE 4A15                       		tst.b	(a5)
00071B00 6A00                       		bpl.s	loc_71C38
00071B02 4EBA 0000                  		jsr	sub_71CCA(pc)
00071B06                            
00071B06                            loc_71C38:
00071B06 DAFC 0030                  		adda.w	#$30,a5
00071B0A 4A15                       		tst.b	(a5)
00071B0C 6A00                       		bpl.s	loc_71C44
00071B0E 4EBA 0000                  		jsr	sub_72850(pc)
00071B12                            
00071B12                            loc_71C44:
00071B12 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071B1A 4E75                       		rts	
00071B1C                            ; End of function sub_71B4C
00071B1C                            
00071B1C                            
00071B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B1C                            
00071B1C                            
00071B1C                            sub_71C4E:				; XREF: sub_71B4C
00071B1C 532D 000E                  		subq.b	#1,$E(a5)
00071B20 6600                       		bne.s	locret_71CAA
00071B22 1D7C 0080 0008             		move.b	#$80,8(a6)
00071B28 286D 0004                  		movea.l	4(a5),a4
00071B2C                            
00071B2C                            loc_71C5E:
00071B2C 7A00                       		moveq	#0,d5
00071B2E 1A1C                       		move.b	(a4)+,d5
00071B30 0C05 00E0                  		cmpi.b	#-$20,d5
00071B34 6500                       		bcs.s	loc_71C6E
00071B36 4EBA 0000                  		jsr	sub_72A5A(pc)
00071B3A 60F0                       		bra.s	loc_71C5E
00071B3C                            ; ===========================================================================
00071B3C                            
00071B3C                            loc_71C6E:
00071B3C 4A05                       		tst.b	d5
00071B3E 6A00                       		bpl.s	loc_71C84
00071B40 1B45 0010                  		move.b	d5,$10(a5)
00071B44 1A1C                       		move.b	(a4)+,d5
00071B46 6A00                       		bpl.s	loc_71C84
00071B48 534C                       		subq.w	#1,a4
00071B4A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071B50 6000                       		bra.s	loc_71C88
00071B52                            ; ===========================================================================
00071B52                            
00071B52                            loc_71C84:
00071B52 4EBA 0000                  		jsr	sub_71D40(pc)
00071B56                            
00071B56                            loc_71C88:
00071B56 2B4C 0004                  		move.l	a4,4(a5)
00071B5A 0815 0002                  		btst	#2,(a5)
00071B5E 6600                       		bne.s	locret_71CAA
00071B60 7000                       		moveq	#0,d0
00071B62 102D 0010                  		move.b	$10(a5),d0
00071B66 0C00 0080                  		cmpi.b	#$80,d0
00071B6A 6700                       		beq.s	locret_71CAA
00071B6C 0800 0003                  		btst	#3,d0
00071B70 6600                       		bne.s	loc_71CAC
00071B72 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00071B78                            
00071B78                            locret_71CAA:
00071B78 4E75                       		rts	
00071B7A                            ; ===========================================================================
00071B7A                            
00071B7A                            loc_71CAC:
00071B7A 0400 0088                  		subi.b	#$88,d0
00071B7E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00071B82 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00071B88 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00071B90 4E75                       		rts	
00071B92                            ; End of function sub_71C4E
00071B92                            
00071B92                            ; ===========================================================================
00071B92 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00071B98                            
00071B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B98                            
00071B98                            
00071B98                            sub_71CCA:				; XREF: sub_71B4C
00071B98 532D 000E                  		subq.b	#1,$E(a5)
00071B9C 6600                       		bne.s	loc_71CE0
00071B9E 0895 0004                  		bclr	#4,(a5)
00071BA2 4EBA 0000                  		jsr	sub_71CEC(pc)
00071BA6 4EBA 0000                  		jsr	sub_71E18(pc)
00071BAA 6000 0000                  		bra.w	loc_726E2
00071BAE                            ; ===========================================================================
00071BAE                            
00071BAE                            loc_71CE0:
00071BAE 4EBA 0000                  		jsr	sub_71D9E(pc)
00071BB2 4EBA 0000                  		jsr	sub_71DC6(pc)
00071BB6 6000 0000                  		bra.w	loc_71E24
00071BBA                            ; End of function sub_71CCA
00071BBA                            
00071BBA                            
00071BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071BBA                            
00071BBA                            
00071BBA                            sub_71CEC:				; XREF: sub_71CCA
00071BBA 286D 0004                  		movea.l	4(a5),a4
00071BBE 0895 0001                  		bclr	#1,(a5)
00071BC2                            
00071BC2                            loc_71CF4:
00071BC2 7A00                       		moveq	#0,d5
00071BC4 1A1C                       		move.b	(a4)+,d5
00071BC6 0C05 00E0                  		cmpi.b	#-$20,d5
00071BCA 6500                       		bcs.s	loc_71D04
00071BCC 4EBA 0000                  		jsr	sub_72A5A(pc)
00071BD0 60F0                       		bra.s	loc_71CF4
00071BD2                            ; ===========================================================================
00071BD2                            
00071BD2                            loc_71D04:
00071BD2 4EBA 0000                  		jsr	sub_726FE(pc)
00071BD6 4A05                       		tst.b	d5
00071BD8 6A00                       		bpl.s	loc_71D1A
00071BDA 4EBA 0000                  		jsr	sub_71D22(pc)
00071BDE 1A1C                       		move.b	(a4)+,d5
00071BE0 6A00                       		bpl.s	loc_71D1A
00071BE2 534C                       		subq.w	#1,a4
00071BE4 6000 0000                  		bra.w	sub_71D60
00071BE8                            ; ===========================================================================
00071BE8                            
00071BE8                            loc_71D1A:
00071BE8 4EBA 0000                  		jsr	sub_71D40(pc)
00071BEC 6000 0000                  		bra.w	sub_71D60
00071BF0                            ; End of function sub_71CEC
00071BF0                            
00071BF0                            
00071BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071BF0                            
00071BF0                            
00071BF0                            sub_71D22:				; XREF: sub_71CEC
00071BF0 0405 0080                  		subi.b	#$80,d5
00071BF4 6700                       		beq.s	loc_71D58
00071BF6 DA2D 0008                  		add.b	8(a5),d5
00071BFA 0245 007F                  		andi.w	#$7F,d5
00071BFE E34D                       		lsl.w	#1,d5
00071C00 41FA 0000                  		lea	word_72790(pc),a0
00071C04 3C30 5000                  		move.w	(a0,d5.w),d6
00071C08 3B46 0010                  		move.w	d6,$10(a5)
00071C0C 4E75                       		rts	
00071C0E                            ; End of function sub_71D22
00071C0E                            
00071C0E                            
00071C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C0E                            
00071C0E                            
00071C0E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00071C0E 1005                       		move.b	d5,d0
00071C10 122D 0002                  		move.b	2(a5),d1
00071C14                            
00071C14                            loc_71D46:
00071C14 5301                       		subq.b	#1,d1
00071C16 6700                       		beq.s	loc_71D4E
00071C18 D005                       		add.b	d5,d0
00071C1A 60F8                       		bra.s	loc_71D46
00071C1C                            ; ===========================================================================
00071C1C                            
00071C1C                            loc_71D4E:
00071C1C 1B40 000F                  		move.b	d0,$F(a5)
00071C20 1B40 000E                  		move.b	d0,$E(a5)
00071C24 4E75                       		rts	
00071C26                            ; End of function sub_71D40
00071C26                            
00071C26                            ; ===========================================================================
00071C26                            
00071C26                            loc_71D58:				; XREF: sub_71D22
00071C26 08D5 0001                  		bset	#1,(a5)
00071C2A 426D 0010                  		clr.w	$10(a5)
00071C2E                            
00071C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C2E                            
00071C2E                            
00071C2E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00071C2E 2B4C 0004                  		move.l	a4,4(a5)
00071C32 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071C38 0815 0004                  		btst	#4,(a5)
00071C3C 6600                       		bne.s	locret_71D9C
00071C3E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00071C44 422D 000C                  		clr.b	$C(a5)
00071C48 0815 0003                  		btst	#3,(a5)
00071C4C 6700                       		beq.s	locret_71D9C
00071C4E 206D 0014                  		movea.l	$14(a5),a0
00071C52 1B58 0018                  		move.b	(a0)+,$18(a5)
00071C56 1B58 0019                  		move.b	(a0)+,$19(a5)
00071C5A 1B58 001A                  		move.b	(a0)+,$1A(a5)
00071C5E 1018                       		move.b	(a0)+,d0
00071C60 E208                       		lsr.b	#1,d0
00071C62 1B40 001B                  		move.b	d0,$1B(a5)
00071C66 426D 001C                  		clr.w	$1C(a5)
00071C6A                            
00071C6A                            locret_71D9C:
00071C6A 4E75                       		rts	
00071C6C                            ; End of function sub_71D60
00071C6C                            
00071C6C                            
00071C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C6C                            
00071C6C                            
00071C6C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00071C6C 4A2D 0012                  		tst.b	$12(a5)
00071C70 6700                       		beq.s	locret_71DC4
00071C72 532D 0012                  		subq.b	#1,$12(a5)
00071C76 6600                       		bne.s	locret_71DC4
00071C78 08D5 0001                  		bset	#1,(a5)
00071C7C 4A2D 0001                  		tst.b	1(a5)
00071C80 6B00 0000                  		bmi.w	loc_71DBE
00071C84 4EBA 0000                  		jsr	sub_726FE(pc)
00071C88 584F                       		addq.w	#4,sp
00071C8A 4E75                       		rts	
00071C8C                            ; ===========================================================================
00071C8C                            
00071C8C                            loc_71DBE:
00071C8C 4EBA 0000                  		jsr	sub_729A0(pc)
00071C90 584F                       		addq.w	#4,sp
00071C92                            
00071C92                            locret_71DC4:
00071C92 4E75                       		rts	
00071C94                            ; End of function sub_71D9E
00071C94                            
00071C94                            
00071C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C94                            
00071C94                            
00071C94                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00071C94 584F                       		addq.w	#4,sp
00071C96 0815 0003                  		btst	#3,(a5)
00071C9A 6700                       		beq.s	locret_71E16
00071C9C 4A2D 0018                  		tst.b	$18(a5)
00071CA0 6700                       		beq.s	loc_71DDA
00071CA2 532D 0018                  		subq.b	#1,$18(a5)
00071CA6 4E75                       		rts	
00071CA8                            ; ===========================================================================
00071CA8                            
00071CA8                            loc_71DDA:
00071CA8 532D 0019                  		subq.b	#1,$19(a5)
00071CAC 6700                       		beq.s	loc_71DE2
00071CAE 4E75                       		rts	
00071CB0                            ; ===========================================================================
00071CB0                            
00071CB0                            loc_71DE2:
00071CB0 206D 0014                  		movea.l	$14(a5),a0
00071CB4 1B68 0001 0019             		move.b	1(a0),$19(a5)
00071CBA 4A2D 001B                  		tst.b	$1B(a5)
00071CBE 6600                       		bne.s	loc_71DFE
00071CC0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00071CC6 442D 001A                  		neg.b	$1A(a5)
00071CCA 4E75                       		rts	
00071CCC                            ; ===========================================================================
00071CCC                            
00071CCC                            loc_71DFE:
00071CCC 532D 001B                  		subq.b	#1,$1B(a5)
00071CD0 1C2D 001A                  		move.b	$1A(a5),d6
00071CD4 4886                       		ext.w	d6
00071CD6 DC6D 001C                  		add.w	$1C(a5),d6
00071CDA 3B46 001C                  		move.w	d6,$1C(a5)
00071CDE DC6D 0010                  		add.w	$10(a5),d6
00071CE2 594F                       		subq.w	#4,sp
00071CE4                            
00071CE4                            locret_71E16:
00071CE4 4E75                       		rts	
00071CE6                            ; End of function sub_71DC6
00071CE6                            
00071CE6                            
00071CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CE6                            
00071CE6                            
00071CE6                            sub_71E18:				; XREF: sub_71CCA
00071CE6 0815 0001                  		btst	#1,(a5)
00071CEA 6600                       		bne.s	locret_71E48
00071CEC 3C2D 0010                  		move.w	$10(a5),d6
00071CF0 6700                       		beq.s	loc_71E4A
00071CF2                            
00071CF2                            loc_71E24:				; XREF: sub_71CCA
00071CF2 102D 001E                  		move.b	$1E(a5),d0
00071CF6 4880                       		ext.w	d0
00071CF8 DC40                       		add.w	d0,d6
00071CFA 0815 0002                  		btst	#2,(a5)
00071CFE 6600                       		bne.s	locret_71E48
00071D00 3206                       		move.w	d6,d1
00071D02 E049                       		lsr.w	#8,d1
00071D04 103C 00A4                  		move.b	#-$5C,d0
00071D08 4EBA 0000                  		jsr	sub_72722(pc)
00071D0C 1206                       		move.b	d6,d1
00071D0E 103C 00A0                  		move.b	#-$60,d0
00071D12 4EBA 0000                  		jsr	sub_72722(pc)
00071D16                            
00071D16                            locret_71E48:
00071D16 4E75                       		rts	
00071D18                            ; ===========================================================================
00071D18                            
00071D18                            loc_71E4A:
00071D18 08D5 0001                  		bset	#1,(a5)
00071D1C 4E75                       		rts	
00071D1E                            ; End of function sub_71E18
00071D1E                            
00071D1E                            ; ===========================================================================
00071D1E                            
00071D1E                            loc_71E50:				; XREF: sub_71B4C
00071D1E 6B00                       		bmi.s	loc_71E94
00071D20 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00071D26 6700 0000                  		beq.w	loc_71EFE
00071D2A 1D7C 0002 0003             		move.b	#2,3(a6)
00071D30 7602                       		moveq	#2,d3
00071D32 103C 00B4                  		move.b	#-$4C,d0
00071D36 7200                       		moveq	#0,d1
00071D38                            
00071D38                            loc_71E6A:
00071D38 4EBA 0000                  		jsr	sub_7272E(pc)
00071D3C 4EBA 0000                  		jsr	sub_72764(pc)
00071D40 5200                       		addq.b	#1,d0
00071D42 51CB FFF4                  		dbf	d3,loc_71E6A
00071D46                            
00071D46 7602                       		moveq	#2,d3
00071D48 7028                       		moveq	#$28,d0
00071D4A                            
00071D4A                            loc_71E7C:
00071D4A 1203                       		move.b	d3,d1
00071D4C 4EBA 0000                  		jsr	sub_7272E(pc)
00071D50 5801                       		addq.b	#4,d1
00071D52 4EBA 0000                  		jsr	sub_7272E(pc)
00071D56 51CB FFF2                  		dbf	d3,loc_71E7C
00071D5A                            
00071D5A 4EBA 0000                  		jsr	sub_729B6(pc)
00071D5E 6000 FDB2                  		bra.w	loc_71C44
00071D62                            ; ===========================================================================
00071D62                            
00071D62                            loc_71E94:				; XREF: loc_71E50
00071D62 422E 0003                  		clr.b	3(a6)
00071D66 7630                       		moveq	#$30,d3
00071D68 4BEE 0040                  		lea	$40(a6),a5
00071D6C 7806                       		moveq	#6,d4
00071D6E                            
00071D6E                            loc_71EA0:
00071D6E 0815 0007                  		btst	#7,(a5)
00071D72 6700                       		beq.s	loc_71EB8
00071D74 0815 0002                  		btst	#2,(a5)
00071D78 6600                       		bne.s	loc_71EB8
00071D7A 103C 00B4                  		move.b	#-$4C,d0
00071D7E 122D 000A                  		move.b	$A(a5),d1
00071D82 4EBA 0000                  		jsr	sub_72722(pc)
00071D86                            
00071D86                            loc_71EB8:
00071D86 DAC3                       		adda.w	d3,a5
00071D88 51CC FFE4                  		dbf	d4,loc_71EA0
00071D8C                            
00071D8C 4BEE 0220                  		lea	$220(a6),a5
00071D90 7802                       		moveq	#2,d4
00071D92                            
00071D92                            loc_71EC4:
00071D92 0815 0007                  		btst	#7,(a5)
00071D96 6700                       		beq.s	loc_71EDC
00071D98 0815 0002                  		btst	#2,(a5)
00071D9C 6600                       		bne.s	loc_71EDC
00071D9E 103C 00B4                  		move.b	#-$4C,d0
00071DA2 122D 000A                  		move.b	$A(a5),d1
00071DA6 4EBA 0000                  		jsr	sub_72722(pc)
00071DAA                            
00071DAA                            loc_71EDC:
00071DAA DAC3                       		adda.w	d3,a5
00071DAC 51CC FFE4                  		dbf	d4,loc_71EC4
00071DB0                            
00071DB0 4BEE 0340                  		lea	$340(a6),a5
00071DB4 0815 0007                  		btst	#7,(a5)
00071DB8 6700                       		beq.s	loc_71EFE
00071DBA 0815 0002                  		btst	#2,(a5)
00071DBE 6600                       		bne.s	loc_71EFE
00071DC0 103C 00B4                  		move.b	#-$4C,d0
00071DC4 122D 000A                  		move.b	$A(a5),d1
00071DC8 4EBA 0000                  		jsr	sub_72722(pc)
00071DCC                            
00071DCC                            loc_71EFE:
00071DCC 6000 FD44                  		bra.w	loc_71C44
00071DD0                            
00071DD0                            ; ---------------------------------------------------------------------------
00071DD0                            ; Subroutine to	play a sound or	music track
00071DD0                            ; ---------------------------------------------------------------------------
00071DD0                            
00071DD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071DD0                            
00071DD0                            
00071DD0                            Sound_Play:				; XREF: sub_71B4C
00071DD0 2079 0007 185E             		movea.l	(Go_SoundTypes).l,a0
00071DD6 43EE 000A                  		lea	$A(a6),a1	; load music track number
00071DDA 1616                       		move.b	0(a6),d3
00071DDC 7802                       		moveq	#2,d4
00071DDE                            
00071DDE                            loc_71F12:
00071DDE 1011                       		move.b	(a1),d0		; move track number to d0
00071DE0 1200                       		move.b	d0,d1
00071DE2 4219                       		clr.b	(a1)+
00071DE4 0400 0081                  		subi.b	#$81,d0
00071DE8 6500                       		bcs.s	loc_71F3E
00071DEA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00071DF0 6700                       		beq.s	loc_71F2C
00071DF2 1D41 000A                  		move.b	d1,$A(a6)
00071DF6 6000                       		bra.s	loc_71F3E
00071DF8                            ; ===========================================================================
00071DF8                            
00071DF8                            loc_71F2C:
00071DF8 0240 007F                  		andi.w	#$7F,d0
00071DFC 1430 0000                  		move.b	(a0,d0.w),d2
00071E00 B403                       		cmp.b	d3,d2
00071E02 6500                       		bcs.s	loc_71F3E
00071E04 1602                       		move.b	d2,d3
00071E06 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00071E0A                            
00071E0A                            loc_71F3E:
00071E0A 51CC FFD2                  		dbf	d4,loc_71F12
00071E0E                            
00071E0E 4A03                       		tst.b	d3
00071E10 6B00                       		bmi.s	locret_71F4A
00071E12 1C83                       		move.b	d3,0(a6)
00071E14                            
00071E14                            locret_71F4A:
00071E14 4E75                       		rts	
00071E16                            ; End of function Sound_Play
00071E16                            
00071E16                            
00071E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E16                            
00071E16                            
00071E16                            Sound_ChkValue:				; XREF: sub_71B4C
00071E16 7E00                       		moveq	#0,d7
00071E18 1E2E 0009                  		move.b	9(a6),d7
00071E1C 6700 0000                  		beq.w	Sound_E4
00071E20 6A00                       		bpl.s	locret_71F8C
00071E22 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00071E28 0C07 009F                  		cmpi.b	#$9F,d7
00071E2C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00071E30 0C07 00A0                  		cmpi.b	#$A0,d7
00071E34 6500 0000                  		bcs.w	locret_71F8C
00071E38 0C07 00CF                  		cmpi.b	#$CF,d7
00071E3C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00071E40 0C07 00D0                  		cmpi.b	#$D0,d7
00071E44 6500 0000                  		bcs.w	locret_71F8C
00071E48 0C07 00E0                  		cmpi.b	#$E0,d7
00071E4C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00071E50 0C07 00E4                  		cmpi.b	#$E4,d7
00071E54 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00071E56                            
00071E56                            locret_71F8C:
00071E56 4E75                       		rts	
00071E58                            ; ===========================================================================
00071E58                            
00071E58                            Sound_E0toE4:				; XREF: Sound_ChkValue
00071E58 0407 00E0                  		subi.b	#$E0,d7
00071E5C E54F                       		lsl.w	#2,d7
00071E5E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00071E62                            ; ===========================================================================
00071E62                            
00071E62                            Sound_ExIndex:
00071E62 6000 0000                  		bra.w	Sound_E0
00071E66                            ; ===========================================================================
00071E66 6000 0000                  		bra.w	Sound_E1
00071E6A                            ; ===========================================================================
00071E6A 6000 0000                  		bra.w	Sound_E2
00071E6E                            ; ===========================================================================
00071E6E 6000 0000                  		bra.w	Sound_E3
00071E72                            ; ===========================================================================
00071E72 6000 0000                  		bra.w	Sound_E4
00071E76                            ; ===========================================================================
00071E76                            ; ---------------------------------------------------------------------------
00071E76                            ; Play "Say-gaa" PCM sound
00071E76                            ; ---------------------------------------------------------------------------
00071E76                            
00071E76                            Sound_E1:				; XREF: Sound_ExIndex
00071E76 13FC 0088 00A0 1FFF        		move.b	#$88,($A01FFF).l
00071E7E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071E86 323C 0011                  		move.w	#$11,d1
00071E8A                            
00071E8A                            loc_71FC0:
00071E8A 303C FFFF                  		move.w	#-1,d0
00071E8E                            
00071E8E                            loc_71FC4:
00071E8E 4E71                       		nop	
00071E90 51C8 FFFC                  		dbf	d0,loc_71FC4
00071E94                            
00071E94 51C9 FFF4                  		dbf	d1,loc_71FC0
00071E98                            
00071E98 584F                       		addq.w	#4,sp
00071E9A 4E75                       		rts	
00071E9C                            ; ===========================================================================
00071E9C                            ; ---------------------------------------------------------------------------
00071E9C                            ; Play music track $81-$9F
00071E9C                            ; ---------------------------------------------------------------------------
00071E9C                            
00071E9C                            Sound_81to9F:				; XREF: Sound_ChkValue
00071E9C 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00071EA0 6600                       		bne.s	loc_72024	; if not, branch
00071EA2 4A2E 0027                  		tst.b	$27(a6)
00071EA6 6600 0000                  		bne.w	loc_721B6
00071EAA 4BEE 0040                  		lea	$40(a6),a5
00071EAE 7009                       		moveq	#9,d0
00071EB0                            
00071EB0                            loc_71FE6:
00071EB0 0895 0002                  		bclr	#2,(a5)
00071EB4 DAFC 0030                  		adda.w	#$30,a5
00071EB8 51C8 FFF6                  		dbf	d0,loc_71FE6
00071EBC                            
00071EBC 4BEE 0220                  		lea	$220(a6),a5
00071EC0 7005                       		moveq	#5,d0
00071EC2                            
00071EC2                            loc_71FF8:
00071EC2 0895 0007                  		bclr	#7,(a5)
00071EC6 DAFC 0030                  		adda.w	#$30,a5
00071ECA 51C8 FFF6                  		dbf	d0,loc_71FF8
00071ECE 4216                       		clr.b	0(a6)
00071ED0 204E                       		movea.l	a6,a0
00071ED2 43EE 03A0                  		lea	$3A0(a6),a1
00071ED6 303C 0087                  		move.w	#$87,d0
00071EDA                            
00071EDA                            loc_72012:
00071EDA 22D8                       		move.l	(a0)+,(a1)+
00071EDC 51C8 FFFC                  		dbf	d0,loc_72012
00071EE0                            
00071EE0 1D7C 0080 0027             		move.b	#$80,$27(a6)
00071EE6 4216                       		clr.b	0(a6)
00071EE8 6000                       		bra.s	loc_7202C
00071EEA                            ; ===========================================================================
00071EEA                            
00071EEA                            loc_72024:
00071EEA 422E 0027                  		clr.b	$27(a6)
00071EEE 422E 0026                  		clr.b	$26(a6)
00071EF2                            
00071EF2                            loc_7202C:
00071EF2 4EBA 0000                  		jsr	sub_725CA(pc)
00071EF6 2879 0007 186E             		movea.l	(off_719A0).l,a4
00071EFC 0407 0081                  		subi.b	#$81,d7
00071F00 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00071F06 2879 0007 1866             		movea.l	(Go_MusicIndex).l,a4
00071F0C E54F                       		lsl.w	#2,d7
00071F0E 2874 7000                  		movea.l	(a4,d7.w),a4
00071F12 7000                       		moveq	#0,d0
00071F14 3014                       		move.w	(a4),d0
00071F16 D08C                       		add.l	a4,d0
00071F18 2D40 0018                  		move.l	d0,$18(a6)
00071F1C 102C 0005                  		move.b	5(a4),d0
00071F20 1D40 0028                  		move.b	d0,$28(a6)
00071F24 4A2E 002A                  		tst.b	$2A(a6)
00071F28 6700                       		beq.s	loc_72068
00071F2A 102E 0029                  		move.b	$29(a6),d0
00071F2E                            
00071F2E                            loc_72068:
00071F2E 1D40 0002                  		move.b	d0,2(a6)
00071F32 1D40 0001                  		move.b	d0,1(a6)
00071F36 7200                       		moveq	#0,d1
00071F38 264C                       		movea.l	a4,a3
00071F3A 5C4C                       		addq.w	#6,a4
00071F3C 7E00                       		moveq	#0,d7
00071F3E 1E2B 0002                  		move.b	2(a3),d7
00071F42 6700 0000                  		beq.w	loc_72114
00071F46 5307                       		subq.b	#1,d7
00071F48 123C 00C0                  		move.b	#-$40,d1
00071F4C 182B 0004                  		move.b	4(a3),d4
00071F50 7C30                       		moveq	#$30,d6
00071F52 1A3C 0001                  		move.b	#1,d5
00071F56 43EE 0040                  		lea	$40(a6),a1
00071F5A 45FA 0000                  		lea	byte_721BA(pc),a2
00071F5E                            
00071F5E                            loc_72098:
00071F5E 08D1 0007                  		bset	#7,(a1)
00071F62 135A 0001                  		move.b	(a2)+,1(a1)
00071F66 1344 0002                  		move.b	d4,2(a1)
00071F6A 1346 000D                  		move.b	d6,$D(a1)
00071F6E 1341 000A                  		move.b	d1,$A(a1)
00071F72 1345 000E                  		move.b	d5,$E(a1)
00071F76 7000                       		moveq	#0,d0
00071F78 301C                       		move.w	(a4)+,d0
00071F7A D08B                       		add.l	a3,d0
00071F7C 2340 0004                  		move.l	d0,4(a1)
00071F80 335C 0008                  		move.w	(a4)+,8(a1)
00071F84 D2C6                       		adda.w	d6,a1
00071F86 51CF FFD6                  		dbf	d7,loc_72098
00071F8A 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00071F90 6600                       		bne.s	loc_720D8
00071F92 702B                       		moveq	#$2B,d0
00071F94 7200                       		moveq	#0,d1
00071F96 4EBA 0000                  		jsr	sub_7272E(pc)
00071F9A 6000 0000                  		bra.w	loc_72114
00071F9E                            ; ===========================================================================
00071F9E                            
00071F9E                            loc_720D8:
00071F9E 7028                       		moveq	#$28,d0
00071FA0 7206                       		moveq	#6,d1
00071FA2 4EBA 0000                  		jsr	sub_7272E(pc)
00071FA6 103C 0042                  		move.b	#$42,d0
00071FAA 727F                       		moveq	#$7F,d1
00071FAC 4EBA 0000                  		jsr	sub_72764(pc)
00071FB0 103C 004A                  		move.b	#$4A,d0
00071FB4 727F                       		moveq	#$7F,d1
00071FB6 4EBA 0000                  		jsr	sub_72764(pc)
00071FBA 103C 0046                  		move.b	#$46,d0
00071FBE 727F                       		moveq	#$7F,d1
00071FC0 4EBA 0000                  		jsr	sub_72764(pc)
00071FC4 103C 004E                  		move.b	#$4E,d0
00071FC8 727F                       		moveq	#$7F,d1
00071FCA 4EBA 0000                  		jsr	sub_72764(pc)
00071FCE 103C 00B6                  		move.b	#-$4A,d0
00071FD2 123C 00C0                  		move.b	#-$40,d1
00071FD6 4EBA 0000                  		jsr	sub_72764(pc)
00071FDA                            
00071FDA                            loc_72114:
00071FDA 7E00                       		moveq	#0,d7
00071FDC 1E2B 0003                  		move.b	3(a3),d7
00071FE0 6700                       		beq.s	loc_72154
00071FE2 5307                       		subq.b	#1,d7
00071FE4 43EE 0190                  		lea	$190(a6),a1
00071FE8 45FA 0000                  		lea	byte_721C2(pc),a2
00071FEC                            
00071FEC                            loc_72126:
00071FEC 08D1 0007                  		bset	#7,(a1)
00071FF0 135A 0001                  		move.b	(a2)+,1(a1)
00071FF4 1344 0002                  		move.b	d4,2(a1)
00071FF8 1346 000D                  		move.b	d6,$D(a1)
00071FFC 1345 000E                  		move.b	d5,$E(a1)
00072000 7000                       		moveq	#0,d0
00072002 301C                       		move.w	(a4)+,d0
00072004 D08B                       		add.l	a3,d0
00072006 2340 0004                  		move.l	d0,4(a1)
0007200A 335C 0008                  		move.w	(a4)+,8(a1)
0007200E 101C                       		move.b	(a4)+,d0
00072010 135C 000B                  		move.b	(a4)+,$B(a1)
00072014 D2C6                       		adda.w	d6,a1
00072016 51CF FFD4                  		dbf	d7,loc_72126
0007201A                            
0007201A                            loc_72154:
0007201A 43EE 0220                  		lea	$220(a6),a1
0007201E 7E05                       		moveq	#5,d7
00072020                            
00072020                            loc_7215A:
00072020 4A11                       		tst.b	(a1)
00072022 6A00 0000                  		bpl.w	loc_7217C
00072026 7000                       		moveq	#0,d0
00072028 1029 0001                  		move.b	1(a1),d0
0007202C 6B00                       		bmi.s	loc_7216E
0007202E 5500                       		subq.b	#2,d0
00072030 E508                       		lsl.b	#2,d0
00072032 6000                       		bra.s	loc_72170
00072034                            ; ===========================================================================
00072034                            
00072034                            loc_7216E:
00072034 E608                       		lsr.b	#3,d0
00072036                            
00072036                            loc_72170:
00072036 41FA 0000                  		lea	dword_722CC(pc),a0
0007203A 2070 0000                  		movea.l	(a0,d0.w),a0
0007203E 08D0 0002                  		bset	#2,(a0)
00072042                            
00072042                            loc_7217C:
00072042 D2C6                       		adda.w	d6,a1
00072044 51CF FFDA                  		dbf	d7,loc_7215A
00072048                            
00072048 4A6E 0340                  		tst.w	$340(a6)
0007204C 6A00                       		bpl.s	loc_7218E
0007204E 08EE 0002 0100             		bset	#2,$100(a6)
00072054                            
00072054                            loc_7218E:
00072054 4A6E 0370                  		tst.w	$370(a6)
00072058 6A00                       		bpl.s	loc_7219A
0007205A 08EE 0002 01F0             		bset	#2,$1F0(a6)
00072060                            
00072060                            loc_7219A:
00072060 4BEE 0070                  		lea	$70(a6),a5
00072064 7805                       		moveq	#5,d4
00072066                            
00072066                            loc_721A0:
00072066 4EBA 0000                  		jsr	sub_726FE(pc)
0007206A DAC6                       		adda.w	d6,a5
0007206C 51CC FFF8                  		dbf	d4,loc_721A0
00072070 7802                       		moveq	#2,d4
00072072                            
00072072                            loc_721AC:
00072072 4EBA 0000                  		jsr	sub_729A0(pc)
00072076 DAC6                       		adda.w	d6,a5
00072078 51CC FFF8                  		dbf	d4,loc_721AC
0007207C                            
0007207C                            loc_721B6:
0007207C 584F                       		addq.w	#4,sp
0007207E 4E75                       		rts	
00072080                            ; ===========================================================================
00072080 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00072088                            		even
00072088 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007208C                            		even
0007208C                            ; ===========================================================================
0007208C                            ; ---------------------------------------------------------------------------
0007208C                            ; Play normal sound effect
0007208C                            ; ---------------------------------------------------------------------------
0007208C                            
0007208C                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007208C 4A2E 0027                  		tst.b	$27(a6)
00072090 6600 0000                  		bne.w	loc_722C6
00072094 4A2E 0004                  		tst.b	4(a6)
00072098 6600 0000                  		bne.w	loc_722C6
0007209C 4A2E 0024                  		tst.b	$24(a6)
000720A0 6600 0000                  		bne.w	loc_722C6
000720A4 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000720A8 6600                       		bne.s	Sound_notB5	; if not, branch
000720AA 4A2E 002B                  		tst.b	$2B(a6)
000720AE 6600                       		bne.s	loc_721EE
000720B0 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000720B4                            
000720B4                            loc_721EE:
000720B4 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000720BA                            
000720BA                            Sound_notB5:
000720BA 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000720BE 6600                       		bne.s	Sound_notA7	; if not, branch
000720C0 4A2E 002C                  		tst.b	$2C(a6)
000720C4 6600 0000                  		bne.w	locret_722C4
000720C8 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000720CE                            
000720CE                            Sound_notA7:
000720CE 2079 0007 186A             		movea.l	(Go_SoundIndex).l,a0
000720D4 0407 00A0                  		subi.b	#$A0,d7
000720D8 E54F                       		lsl.w	#2,d7
000720DA 2670 7000                  		movea.l	(a0,d7.w),a3
000720DE 224B                       		movea.l	a3,a1
000720E0 7200                       		moveq	#0,d1
000720E2 3219                       		move.w	(a1)+,d1
000720E4 D28B                       		add.l	a3,d1
000720E6 1A19                       		move.b	(a1)+,d5
000720E8 1E19                       		move.b	(a1)+,d7
000720EA 5307                       		subq.b	#1,d7
000720EC 7C30                       		moveq	#$30,d6
000720EE                            
000720EE                            loc_72228:
000720EE 7600                       		moveq	#0,d3
000720F0 1629 0001                  		move.b	1(a1),d3
000720F4 1803                       		move.b	d3,d4
000720F6 6B00                       		bmi.s	loc_72244
000720F8 5543                       		subq.w	#2,d3
000720FA E54B                       		lsl.w	#2,d3
000720FC 4BFA 0000                  		lea	dword_722CC(pc),a5
00072100 2A75 3000                  		movea.l	(a5,d3.w),a5
00072104 08D5 0002                  		bset	#2,(a5)
00072108 6000                       		bra.s	loc_7226E
0007210A                            ; ===========================================================================
0007210A                            
0007210A                            loc_72244:
0007210A E64B                       		lsr.w	#3,d3
0007210C 4BFA 0000                  		lea	dword_722CC(pc),a5
00072110 2A75 3000                  		movea.l	(a5,d3.w),a5
00072114 08D5 0002                  		bset	#2,(a5)
00072118 0C04 00C0                  		cmpi.b	#$C0,d4
0007211C 6600                       		bne.s	loc_7226E
0007211E 1004                       		move.b	d4,d0
00072120 0000 001F                  		ori.b	#$1F,d0
00072124 13C0 00C0 0011             		move.b	d0,($C00011).l
0007212A 0840 0005                  		bchg	#5,d0
0007212E 13C0 00C0 0011             		move.b	d0,($C00011).l
00072134                            
00072134                            loc_7226E:
00072134 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00072138 244D                       		movea.l	a5,a2
0007213A 700B                       		moveq	#$B,d0
0007213C                            
0007213C                            loc_72276:
0007213C 429A                       		clr.l	(a2)+
0007213E 51C8 FFFC                  		dbf	d0,loc_72276
00072142                            
00072142 3A99                       		move.w	(a1)+,(a5)
00072144 1B45 0002                  		move.b	d5,2(a5)
00072148 7000                       		moveq	#0,d0
0007214A 3019                       		move.w	(a1)+,d0
0007214C D08B                       		add.l	a3,d0
0007214E 2B40 0004                  		move.l	d0,4(a5)
00072152 3B59 0008                  		move.w	(a1)+,8(a5)
00072156 1B7C 0001 000E             		move.b	#1,$E(a5)
0007215C 1B46 000D                  		move.b	d6,$D(a5)
00072160 4A04                       		tst.b	d4
00072162 6B00                       		bmi.s	loc_722A8
00072164 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007216A 2B41 0020                  		move.l	d1,$20(a5)
0007216E                            
0007216E                            loc_722A8:
0007216E 51CF FF7E                  		dbf	d7,loc_72228
00072172                            
00072172 4A2E 0250                  		tst.b	$250(a6)
00072176 6A00                       		bpl.s	loc_722B8
00072178 08EE 0002 0340             		bset	#2,$340(a6)
0007217E                            
0007217E                            loc_722B8:
0007217E 4A2E 0310                  		tst.b	$310(a6)
00072182 6A00                       		bpl.s	locret_722C4
00072184 08EE 0002 0370             		bset	#2,$370(a6)
0007218A                            
0007218A                            locret_722C4:
0007218A 4E75                       		rts	
0007218C                            ; ===========================================================================
0007218C                            
0007218C                            loc_722C6:
0007218C 4216                       		clr.b	0(a6)
0007218E 4E75                       		rts	
00072190                            ; ===========================================================================
00072190 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00072194 0000 0000                  		dc.l 0
00072198 00FF F100                  		dc.l $FFF100
0007219C 00FF F130                  		dc.l $FFF130
000721A0 00FF F190                  		dc.l $FFF190
000721A4 00FF F1C0                  		dc.l $FFF1C0
000721A8 00FF F1F0                  		dc.l $FFF1F0
000721AC 00FF F1F0                  		dc.l $FFF1F0
000721B0 00FF F220                  dword_722EC:	dc.l $FFF220
000721B4 0000 0000                  		dc.l 0
000721B8 00FF F250                  		dc.l $FFF250
000721BC 00FF F280                  		dc.l $FFF280
000721C0 00FF F2B0                  		dc.l $FFF2B0
000721C4 00FF F2E0                  		dc.l $FFF2E0
000721C8 00FF F310                  		dc.l $FFF310
000721CC 00FF F310                  		dc.l $FFF310
000721D0                            ; ===========================================================================
000721D0                            ; ---------------------------------------------------------------------------
000721D0                            ; Play GHZ waterfall sound
000721D0                            ; ---------------------------------------------------------------------------
000721D0                            
000721D0                            Sound_D0toDF:				; XREF: Sound_ChkValue
000721D0 4A2E 0027                  		tst.b	$27(a6)
000721D4 6600 0000                  		bne.w	locret_723C6
000721D8 4A2E 0004                  		tst.b	4(a6)
000721DC 6600 0000                  		bne.w	locret_723C6
000721E0 4A2E 0024                  		tst.b	$24(a6)
000721E4 6600 0000                  		bne.w	locret_723C6
000721E8 2079 0007 1862             		movea.l	(Go_SoundD0).l,a0
000721EE 0407 00D0                  		subi.b	#$D0,d7
000721F2 E54F                       		lsl.w	#2,d7
000721F4 2670 7000                  		movea.l	(a0,d7.w),a3
000721F8 224B                       		movea.l	a3,a1
000721FA 7000                       		moveq	#0,d0
000721FC 3019                       		move.w	(a1)+,d0
000721FE D08B                       		add.l	a3,d0
00072200 2D40 0020                  		move.l	d0,$20(a6)
00072204 1A19                       		move.b	(a1)+,d5
00072206 1E19                       		move.b	(a1)+,d7
00072208 5307                       		subq.b	#1,d7
0007220A 7C30                       		moveq	#$30,d6
0007220C                            
0007220C                            loc_72348:
0007220C 1829 0001                  		move.b	1(a1),d4
00072210 6B00                       		bmi.s	loc_7235A
00072212 08EE 0002 0100             		bset	#2,$100(a6)
00072218 4BEE 0340                  		lea	$340(a6),a5
0007221C 6000                       		bra.s	loc_72364
0007221E                            ; ===========================================================================
0007221E                            
0007221E                            loc_7235A:
0007221E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00072224 4BEE 0370                  		lea	$370(a6),a5
00072228                            
00072228                            loc_72364:
00072228 244D                       		movea.l	a5,a2
0007222A 700B                       		moveq	#$B,d0
0007222C                            
0007222C                            loc_72368:
0007222C 429A                       		clr.l	(a2)+
0007222E 51C8 FFFC                  		dbf	d0,loc_72368
00072232                            
00072232 3A99                       		move.w	(a1)+,(a5)
00072234 1B45 0002                  		move.b	d5,2(a5)
00072238 7000                       		moveq	#0,d0
0007223A 3019                       		move.w	(a1)+,d0
0007223C D08B                       		add.l	a3,d0
0007223E 2B40 0004                  		move.l	d0,4(a5)
00072242 3B59 0008                  		move.w	(a1)+,8(a5)
00072246 1B7C 0001 000E             		move.b	#1,$E(a5)
0007224C 1B46 000D                  		move.b	d6,$D(a5)
00072250 4A04                       		tst.b	d4
00072252 6B00                       		bmi.s	loc_72396
00072254 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007225A                            
0007225A                            loc_72396:
0007225A 51CF FFB0                  		dbf	d7,loc_72348
0007225E                            
0007225E 4A2E 0250                  		tst.b	$250(a6)
00072262 6A00                       		bpl.s	loc_723A6
00072264 08EE 0002 0340             		bset	#2,$340(a6)
0007226A                            
0007226A                            loc_723A6:
0007226A 4A2E 0310                  		tst.b	$310(a6)
0007226E 6A00                       		bpl.s	locret_723C6
00072270 08EE 0002 0370             		bset	#2,$370(a6)
00072276 0004 001F                  		ori.b	#$1F,d4
0007227A 13C4 00C0 0011             		move.b	d4,($C00011).l
00072280 0844 0005                  		bchg	#5,d4
00072284 13C4 00C0 0011             		move.b	d4,($C00011).l
0007228A                            
0007228A                            locret_723C6:
0007228A 4E75                       		rts	
0007228C                            ; End of function Sound_ChkValue
0007228C                            
0007228C                            ; ===========================================================================
0007228C 00FF F100                  		dc.l $FFF100
00072290 00FF F1F0                  		dc.l $FFF1F0
00072294 00FF F250                  		dc.l $FFF250
00072298 00FF F310                  		dc.l $FFF310
0007229C 00FF F340                  		dc.l $FFF340
000722A0 00FF F370                  		dc.l $FFF370
000722A4                            
000722A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000722A4                            
000722A4                            
000722A4                            Snd_FadeOut1:				; XREF: Sound_E0
000722A4 4216                       		clr.b	0(a6)
000722A6 4BEE 0220                  		lea	$220(a6),a5
000722AA 7E05                       		moveq	#5,d7
000722AC                            
000722AC                            loc_723EA:
000722AC 4A15                       		tst.b	(a5)
000722AE 6A00 0000                  		bpl.w	loc_72472
000722B2 0895 0007                  		bclr	#7,(a5)
000722B6 7600                       		moveq	#0,d3
000722B8 162D 0001                  		move.b	1(a5),d3
000722BC 6B00                       		bmi.s	loc_7243C
000722BE 4EBA 0000                  		jsr	sub_726FE(pc)
000722C2 0C03 0004                  		cmpi.b	#4,d3
000722C6 6600                       		bne.s	loc_72416
000722C8 4A2E 0340                  		tst.b	$340(a6)
000722CC 6A00                       		bpl.s	loc_72416
000722CE 4BEE 0340                  		lea	$340(a6),a5
000722D2 226E 0020                  		movea.l	$20(a6),a1
000722D6 6000                       		bra.s	loc_72428
000722D8                            ; ===========================================================================
000722D8                            
000722D8                            loc_72416:
000722D8 5503                       		subq.b	#2,d3
000722DA E50B                       		lsl.b	#2,d3
000722DC 41FA FEB2                  		lea	dword_722CC(pc),a0
000722E0 264D                       		movea.l	a5,a3
000722E2 2A70 3000                  		movea.l	(a0,d3.w),a5
000722E6 226E 0018                  		movea.l	$18(a6),a1
000722EA                            
000722EA                            loc_72428:
000722EA 0895 0002                  		bclr	#2,(a5)
000722EE 08D5 0001                  		bset	#1,(a5)
000722F2 102D 000B                  		move.b	$B(a5),d0
000722F6 4EBA 0000                  		jsr	sub_72C4E(pc)
000722FA 2A4B                       		movea.l	a3,a5
000722FC 6000                       		bra.s	loc_72472
000722FE                            ; ===========================================================================
000722FE                            
000722FE                            loc_7243C:
000722FE 4EBA 0000                  		jsr	sub_729A0(pc)
00072302 41EE 0370                  		lea	$370(a6),a0
00072306 0C03 00E0                  		cmpi.b	#$E0,d3
0007230A 6700                       		beq.s	loc_7245A
0007230C 0C03 00C0                  		cmpi.b	#$C0,d3
00072310 6700                       		beq.s	loc_7245A
00072312 E60B                       		lsr.b	#3,d3
00072314 41FA FE7A                  		lea	dword_722CC(pc),a0
00072318 2070 3000                  		movea.l	(a0,d3.w),a0
0007231C                            
0007231C                            loc_7245A:
0007231C 0890 0002                  		bclr	#2,(a0)
00072320 08D0 0001                  		bset	#1,(a0)
00072324 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007232A 6600                       		bne.s	loc_72472
0007232C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072334                            
00072334                            loc_72472:
00072334 DAFC 0030                  		adda.w	#$30,a5
00072338 51CF FF72                  		dbf	d7,loc_723EA
0007233C                            
0007233C 4E75                       		rts	
0007233E                            ; End of function Snd_FadeOut1
0007233E                            
0007233E                            
0007233E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007233E                            
0007233E                            
0007233E                            Snd_FadeOut2:				; XREF: Sound_E0
0007233E 4BEE 0340                  		lea	$340(a6),a5
00072342 4A15                       		tst.b	(a5)
00072344 6A00                       		bpl.s	loc_724AE
00072346 0895 0007                  		bclr	#7,(a5)
0007234A 0815 0002                  		btst	#2,(a5)
0007234E 6600                       		bne.s	loc_724AE
00072350 4EBA 0000                  		jsr	loc_7270A(pc)
00072354 4BEE 0100                  		lea	$100(a6),a5
00072358 0895 0002                  		bclr	#2,(a5)
0007235C 08D5 0001                  		bset	#1,(a5)
00072360 4A15                       		tst.b	(a5)
00072362 6A00                       		bpl.s	loc_724AE
00072364 226E 0018                  		movea.l	$18(a6),a1
00072368 102D 000B                  		move.b	$B(a5),d0
0007236C 4EBA 0000                  		jsr	sub_72C4E(pc)
00072370                            
00072370                            loc_724AE:
00072370 4BEE 0370                  		lea	$370(a6),a5
00072374 4A15                       		tst.b	(a5)
00072376 6A00                       		bpl.s	locret_724E4
00072378 0895 0007                  		bclr	#7,(a5)
0007237C 0815 0002                  		btst	#2,(a5)
00072380 6600                       		bne.s	locret_724E4
00072382 4EBA 0000                  		jsr	loc_729A6(pc)
00072386 4BEE 01F0                  		lea	$1F0(a6),a5
0007238A 0895 0002                  		bclr	#2,(a5)
0007238E 08D5 0001                  		bset	#1,(a5)
00072392 4A15                       		tst.b	(a5)
00072394 6A00                       		bpl.s	locret_724E4
00072396 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007239C 6600                       		bne.s	locret_724E4
0007239E 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000723A6                            
000723A6                            locret_724E4:
000723A6 4E75                       		rts	
000723A8                            ; End of function Snd_FadeOut2
000723A8                            
000723A8                            ; ===========================================================================
000723A8                            ; ---------------------------------------------------------------------------
000723A8                            ; Fade out music
000723A8                            ; ---------------------------------------------------------------------------
000723A8                            
000723A8                            Sound_E0:				; XREF: Sound_ExIndex
000723A8 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000723AC 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000723B0 1D7C 0003 0006             		move.b	#3,6(a6)
000723B6 1D7C 0028 0004             		move.b	#$28,4(a6)
000723BC 422E 0040                  		clr.b	$40(a6)
000723C0 422E 002A                  		clr.b	$2A(a6)
000723C4 4E75                       		rts	
000723C6                            
000723C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000723C6                            
000723C6                            
000723C6                            sub_72504:				; XREF: sub_71B4C
000723C6 102E 0006                  		move.b	6(a6),d0
000723CA 6700                       		beq.s	loc_72510
000723CC 532E 0006                  		subq.b	#1,6(a6)
000723D0 4E75                       		rts	
000723D2                            ; ===========================================================================
000723D2                            
000723D2                            loc_72510:
000723D2 532E 0004                  		subq.b	#1,4(a6)
000723D6 6700 0000                  		beq.w	Sound_E4
000723DA 1D7C 0003 0006             		move.b	#3,6(a6)
000723E0 4BEE 0070                  		lea	$70(a6),a5
000723E4 7E05                       		moveq	#5,d7
000723E6                            
000723E6                            loc_72524:
000723E6 4A15                       		tst.b	(a5)
000723E8 6A00                       		bpl.s	loc_72538
000723EA 522D 0009                  		addq.b	#1,9(a5)
000723EE 6A00                       		bpl.s	loc_72534
000723F0 0895 0007                  		bclr	#7,(a5)
000723F4 6000                       		bra.s	loc_72538
000723F6                            ; ===========================================================================
000723F6                            
000723F6                            loc_72534:
000723F6 4EBA 0000                  		jsr	sub_72CB4(pc)
000723FA                            
000723FA                            loc_72538:
000723FA DAFC 0030                  		adda.w	#$30,a5
000723FE 51CF FFE6                  		dbf	d7,loc_72524
00072402                            
00072402 7E02                       		moveq	#2,d7
00072404                            
00072404                            loc_72542:
00072404 4A15                       		tst.b	(a5)
00072406 6A00                       		bpl.s	loc_72560
00072408 522D 0009                  		addq.b	#1,9(a5)
0007240C 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00072412 6500                       		bcs.s	loc_72558
00072414 0895 0007                  		bclr	#7,(a5)
00072418 6000                       		bra.s	loc_72560
0007241A                            ; ===========================================================================
0007241A                            
0007241A                            loc_72558:
0007241A 1C2D 0009                  		move.b	9(a5),d6
0007241E 4EBA 0000                  		jsr	sub_7296A(pc)
00072422                            
00072422                            loc_72560:
00072422 DAFC 0030                  		adda.w	#$30,a5
00072426 51CF FFDC                  		dbf	d7,loc_72542
0007242A                            
0007242A 4E75                       		rts	
0007242C                            ; End of function sub_72504
0007242C                            
0007242C                            
0007242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007242C                            
0007242C                            
0007242C                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007242C 7602                       		moveq	#2,d3
0007242E 7028                       		moveq	#$28,d0
00072430                            
00072430                            loc_7256E:
00072430 1203                       		move.b	d3,d1
00072432 4EBA 0000                  		jsr	sub_7272E(pc)
00072436 5801                       		addq.b	#4,d1
00072438 4EBA 0000                  		jsr	sub_7272E(pc)
0007243C 51CB FFF2                  		dbf	d3,loc_7256E
00072440                            
00072440 7040                       		moveq	#$40,d0
00072442 727F                       		moveq	#$7F,d1
00072444 7802                       		moveq	#2,d4
00072446                            
00072446                            loc_72584:
00072446 7603                       		moveq	#3,d3
00072448                            
00072448                            loc_72586:
00072448 4EBA 0000                  		jsr	sub_7272E(pc)
0007244C 4EBA 0000                  		jsr	sub_72764(pc)
00072450 5840                       		addq.w	#4,d0
00072452 51CB FFF4                  		dbf	d3,loc_72586
00072456                            
00072456 0400 000F                  		subi.b	#$F,d0
0007245A 51CC FFEA                  		dbf	d4,loc_72584
0007245E                            
0007245E 4E75                       		rts	
00072460                            ; End of function sub_7256A
00072460                            
00072460                            ; ===========================================================================
00072460                            ; ---------------------------------------------------------------------------
00072460                            ; Stop music
00072460                            ; ---------------------------------------------------------------------------
00072460                            
00072460                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00072460 702B                       		moveq	#$2B,d0
00072462 123C 0080                  		move.b	#$80,d1
00072466 4EBA 0000                  		jsr	sub_7272E(pc)
0007246A 7027                       		moveq	#$27,d0
0007246C 7200                       		moveq	#0,d1
0007246E 4EBA 0000                  		jsr	sub_7272E(pc)
00072472 204E                       		movea.l	a6,a0
00072474 303C 00E3                  		move.w	#$E3,d0
00072478                            
00072478                            loc_725B6:
00072478 4298                       		clr.l	(a0)+
0007247A 51C8 FFFC                  		dbf	d0,loc_725B6
0007247E                            
0007247E 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00072484 4EBA FFA6                  		jsr	sub_7256A(pc)
00072488 6000 0000                  		bra.w	sub_729B6
0007248C                            
0007248C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007248C                            
0007248C                            
0007248C                            sub_725CA:				; XREF: Sound_ChkValue
0007248C 204E                       		movea.l	a6,a0
0007248E 1216                       		move.b	0(a6),d1
00072490 142E 0027                  		move.b	$27(a6),d2
00072494 162E 002A                  		move.b	$2A(a6),d3
00072498 182E 0026                  		move.b	$26(a6),d4
0007249C 3A2E 000A                  		move.w	$A(a6),d5
000724A0 303C 0087                  		move.w	#$87,d0
000724A4                            
000724A4                            loc_725E4:
000724A4 4298                       		clr.l	(a0)+
000724A6 51C8 FFFC                  		dbf	d0,loc_725E4
000724AA                            
000724AA 1C81                       		move.b	d1,0(a6)
000724AC 1D42 0027                  		move.b	d2,$27(a6)
000724B0 1D43 002A                  		move.b	d3,$2A(a6)
000724B4 1D44 0026                  		move.b	d4,$26(a6)
000724B8 3D45 000A                  		move.w	d5,$A(a6)
000724BC 1D7C 0080 0009             		move.b	#$80,9(a6)
000724C2 4EBA FF68                  		jsr	sub_7256A(pc)
000724C6 6000 0000                  		bra.w	sub_729B6
000724CA                            ; End of function sub_725CA
000724CA                            
000724CA                            
000724CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000724CA                            
000724CA                            
000724CA                            sub_7260C:				; XREF: sub_71B4C
000724CA 1D6E 0002 0001             		move.b	2(a6),1(a6)
000724D0 41EE 004E                  		lea	$4E(a6),a0
000724D4 7030                       		moveq	#$30,d0
000724D6 7209                       		moveq	#9,d1
000724D8                            
000724D8                            loc_7261A:
000724D8 5210                       		addq.b	#1,(a0)
000724DA D0C0                       		adda.w	d0,a0
000724DC 51C9 FFFA                  		dbf	d1,loc_7261A
000724E0                            
000724E0 4E75                       		rts	
000724E2                            ; End of function sub_7260C
000724E2                            
000724E2                            ; ===========================================================================
000724E2                            ; ---------------------------------------------------------------------------
000724E2                            ; Speed	up music
000724E2                            ; ---------------------------------------------------------------------------
000724E2                            
000724E2                            Sound_E2:				; XREF: Sound_ExIndex
000724E2 4A2E 0027                  		tst.b	$27(a6)
000724E6 6600                       		bne.s	loc_7263E
000724E8 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000724EE 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000724F4 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000724FA 4E75                       		rts	
000724FC                            ; ===========================================================================
000724FC                            
000724FC                            loc_7263E:
000724FC 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00072502 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00072508 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007250E 4E75                       		rts	
00072510                            ; ===========================================================================
00072510                            ; ---------------------------------------------------------------------------
00072510                            ; Change music back to normal speed
00072510                            ; ---------------------------------------------------------------------------
00072510                            
00072510                            Sound_E3:				; XREF: Sound_ExIndex
00072510 4A2E 0027                  		tst.b	$27(a6)
00072514 6600                       		bne.s	loc_7266A
00072516 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007251C 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00072522 422E 002A                  		clr.b	$2A(a6)
00072526 4E75                       		rts	
00072528                            ; ===========================================================================
00072528                            
00072528                            loc_7266A:
00072528 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007252E 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00072534 422E 03CA                  		clr.b	$3CA(a6)
00072538 4E75                       		rts	
0007253A                            
0007253A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007253A                            
0007253A                            
0007253A                            sub_7267C:				; XREF: sub_71B4C
0007253A 4A2E 0025                  		tst.b	$25(a6)
0007253E 6700                       		beq.s	loc_72688
00072540 532E 0025                  		subq.b	#1,$25(a6)
00072544 4E75                       		rts	
00072546                            ; ===========================================================================
00072546                            
00072546                            loc_72688:
00072546 4A2E 0026                  		tst.b	$26(a6)
0007254A 6700                       		beq.s	loc_726D6
0007254C 532E 0026                  		subq.b	#1,$26(a6)
00072550 1D7C 0002 0025             		move.b	#2,$25(a6)
00072556 4BEE 0070                  		lea	$70(a6),a5
0007255A 7E05                       		moveq	#5,d7
0007255C                            
0007255C                            loc_7269E:
0007255C 4A15                       		tst.b	(a5)
0007255E 6A00                       		bpl.s	loc_726AA
00072560 532D 0009                  		subq.b	#1,9(a5)
00072564 4EBA 0000                  		jsr	sub_72CB4(pc)
00072568                            
00072568                            loc_726AA:
00072568 DAFC 0030                  		adda.w	#$30,a5
0007256C 51CF FFEE                  		dbf	d7,loc_7269E
00072570 7E02                       		moveq	#2,d7
00072572                            
00072572                            loc_726B4:
00072572 4A15                       		tst.b	(a5)
00072574 6A00                       		bpl.s	loc_726CC
00072576 532D 0009                  		subq.b	#1,9(a5)
0007257A 1C2D 0009                  		move.b	9(a5),d6
0007257E 0C06 0010                  		cmpi.b	#$10,d6
00072582 6500                       		bcs.s	loc_726C8
00072584 7C0F                       		moveq	#$F,d6
00072586                            
00072586                            loc_726C8:
00072586 4EBA 0000                  		jsr	sub_7296A(pc)
0007258A                            
0007258A                            loc_726CC:
0007258A DAFC 0030                  		adda.w	#$30,a5
0007258E 51CF FFE2                  		dbf	d7,loc_726B4
00072592 4E75                       		rts	
00072594                            ; ===========================================================================
00072594                            
00072594                            loc_726D6:
00072594 08AE 0002 0040             		bclr	#2,$40(a6)
0007259A 422E 0024                  		clr.b	$24(a6)
0007259E 4E75                       		rts	
000725A0                            ; End of function sub_7267C
000725A0                            
000725A0                            ; ===========================================================================
000725A0                            
000725A0                            loc_726E2:				; XREF: sub_71CCA
000725A0 0815 0001                  		btst	#1,(a5)
000725A4 6600                       		bne.s	locret_726FC
000725A6 0815 0002                  		btst	#2,(a5)
000725AA 6600                       		bne.s	locret_726FC
000725AC 7028                       		moveq	#$28,d0
000725AE 122D 0001                  		move.b	1(a5),d1
000725B2 0001 00F0                  		ori.b	#-$10,d1
000725B6 6000 0000                  		bra.w	sub_7272E
000725BA                            ; ===========================================================================
000725BA                            
000725BA                            locret_726FC:
000725BA 4E75                       		rts	
000725BC                            
000725BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725BC                            
000725BC                            
000725BC                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000725BC 0815 0004                  		btst	#4,(a5)
000725C0 6600                       		bne.s	locret_72714
000725C2 0815 0002                  		btst	#2,(a5)
000725C6 6600                       		bne.s	locret_72714
000725C8                            
000725C8                            loc_7270A:				; XREF: Snd_FadeOut2
000725C8 7028                       		moveq	#$28,d0
000725CA 122D 0001                  		move.b	1(a5),d1
000725CE 6000 0000                  		bra.w	sub_7272E
000725D2                            ; ===========================================================================
000725D2                            
000725D2                            locret_72714:
000725D2 4E75                       		rts	
000725D4                            ; End of function sub_726FE
000725D4                            
000725D4                            ; ===========================================================================
000725D4                            
000725D4                            loc_72716:				; XREF: sub_72A5A
000725D4 0815 0002                  		btst	#2,(a5)
000725D8 6600                       		bne.s	locret_72720
000725DA 6000 0000                  		bra.w	sub_72722
000725DE                            ; ===========================================================================
000725DE                            
000725DE                            locret_72720:
000725DE 4E75                       		rts	
000725E0                            
000725E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725E0                            
000725E0                            
000725E0                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000725E0 082D 0002 0001             		btst	#2,1(a5)
000725E6 6600                       		bne.s	loc_7275A
000725E8 D02D 0001                  		add.b	1(a5),d0
000725EC                            ; End of function sub_72722
000725EC                            
000725EC                            
000725EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725EC                            
000725EC                            
000725EC                            sub_7272E:				; XREF: loc_71E6A
000725EC 1439 00A0 4000             		move.b	($A04000).l,d2
000725F2 0802 0007                  		btst	#7,d2
000725F6 66F4                       		bne.s	sub_7272E
000725F8 13C0 00A0 4000             		move.b	d0,($A04000).l
000725FE 4E71                       		nop	
00072600 4E71                       		nop	
00072602 4E71                       		nop	
00072604                            
00072604                            loc_72746:
00072604 1439 00A0 4000             		move.b	($A04000).l,d2
0007260A 0802 0007                  		btst	#7,d2
0007260E 66F4                       		bne.s	loc_72746
00072610                            
00072610 13C1 00A0 4001             		move.b	d1,($A04001).l
00072616 4E75                       		rts	
00072618                            ; End of function sub_7272E
00072618                            
00072618                            ; ===========================================================================
00072618                            
00072618                            loc_7275A:				; XREF: sub_72722
00072618 142D 0001                  		move.b	1(a5),d2
0007261C 0882 0002                  		bclr	#2,d2
00072620 D002                       		add.b	d2,d0
00072622                            
00072622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072622                            
00072622                            
00072622                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00072622 1439 00A0 4000             		move.b	($A04000).l,d2
00072628 0802 0007                  		btst	#7,d2
0007262C 66F4                       		bne.s	sub_72764
0007262E 13C0 00A0 4002             		move.b	d0,($A04002).l
00072634 4E71                       		nop	
00072636 4E71                       		nop	
00072638 4E71                       		nop	
0007263A                            
0007263A                            loc_7277C:
0007263A 1439 00A0 4000             		move.b	($A04000).l,d2
00072640 0802 0007                  		btst	#7,d2
00072644 66F4                       		bne.s	loc_7277C
00072646                            
00072646 13C1 00A0 4003             		move.b	d1,($A04003).l
0007264C 4E75                       		rts	
0007264E                            ; End of function sub_72764
0007264E                            
0007264E                            ; ===========================================================================
0007264E 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00072660 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00072672 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00072682 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00072692 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000726A2 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000726B2 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000726C2 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000726D2 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000726E2 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000726F2 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00072702 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007270E                            
0007270E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007270E                            
0007270E                            
0007270E                            sub_72850:				; XREF: sub_71B4C
0007270E 532D 000E                  		subq.b	#1,$E(a5)
00072712 6600                       		bne.s	loc_72866
00072714 0895 0004                  		bclr	#4,(a5)
00072718 4EBA 0000                  		jsr	sub_72878(pc)
0007271C 4EBA 0000                  		jsr	sub_728DC(pc)
00072720 6000 0000                  		bra.w	loc_7292E
00072724                            ; ===========================================================================
00072724                            
00072724                            loc_72866:
00072724 4EBA F546                  		jsr	sub_71D9E(pc)
00072728 4EBA 0000                  		jsr	sub_72926(pc)
0007272C 4EBA F566                  		jsr	sub_71DC6(pc)
00072730 4EBA 0000                  		jsr	sub_728E2(pc)
00072734 4E75                       		rts	
00072736                            ; End of function sub_72850
00072736                            
00072736                            
00072736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072736                            
00072736                            
00072736                            sub_72878:				; XREF: sub_72850
00072736 0895 0001                  		bclr	#1,(a5)
0007273A 286D 0004                  		movea.l	4(a5),a4
0007273E                            
0007273E                            loc_72880:
0007273E 7A00                       		moveq	#0,d5
00072740 1A1C                       		move.b	(a4)+,d5
00072742 0C05 00E0                  		cmpi.b	#$E0,d5
00072746 6500                       		bcs.s	loc_72890
00072748 4EBA 0000                  		jsr	sub_72A5A(pc)
0007274C 60F0                       		bra.s	loc_72880
0007274E                            ; ===========================================================================
0007274E                            
0007274E                            loc_72890:
0007274E 4A05                       		tst.b	d5
00072750 6A00                       		bpl.s	loc_728A4
00072752 4EBA 0000                  		jsr	sub_728AC(pc)
00072756 1A1C                       		move.b	(a4)+,d5
00072758 4A05                       		tst.b	d5
0007275A 6A00                       		bpl.s	loc_728A4
0007275C 534C                       		subq.w	#1,a4
0007275E 6000 F4CE                  		bra.w	sub_71D60
00072762                            ; ===========================================================================
00072762                            
00072762                            loc_728A4:
00072762 4EBA F4AA                  		jsr	sub_71D40(pc)
00072766 6000 F4C6                  		bra.w	sub_71D60
0007276A                            ; End of function sub_72878
0007276A                            
0007276A                            
0007276A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007276A                            
0007276A                            
0007276A                            sub_728AC:				; XREF: sub_72878
0007276A 0405 0081                  		subi.b	#$81,d5
0007276E 6500                       		bcs.s	loc_728CA
00072770 DA2D 0008                  		add.b	8(a5),d5
00072774 0245 007F                  		andi.w	#$7F,d5
00072778 E34D                       		lsl.w	#1,d5
0007277A 41FA 0000                  		lea	word_729CE(pc),a0
0007277E 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00072784 6000 F4A8                  		bra.w	sub_71D60
00072788                            ; ===========================================================================
00072788                            
00072788                            loc_728CA:
00072788 08D5 0001                  		bset	#1,(a5)
0007278C 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00072792 4EBA F49A                  		jsr	sub_71D60(pc)
00072796 6000 0000                  		bra.w	sub_729A0
0007279A                            ; End of function sub_728AC
0007279A                            
0007279A                            
0007279A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007279A                            
0007279A                            
0007279A                            sub_728DC:				; XREF: sub_72850
0007279A 3C2D 0010                  		move.w	$10(a5),d6
0007279E 6B00                       		bmi.s	loc_72920
000727A0                            ; End of function sub_728DC
000727A0                            
000727A0                            
000727A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000727A0                            
000727A0                            
000727A0                            sub_728E2:				; XREF: sub_72850
000727A0 102D 001E                  		move.b	$1E(a5),d0
000727A4 4880                       		ext.w	d0
000727A6 DC40                       		add.w	d0,d6
000727A8 0815 0002                  		btst	#2,(a5)
000727AC 6600                       		bne.s	locret_7291E
000727AE 0815 0001                  		btst	#1,(a5)
000727B2 6600                       		bne.s	locret_7291E
000727B4 102D 0001                  		move.b	1(a5),d0
000727B8 0C00 00E0                  		cmpi.b	#$E0,d0
000727BC 6600                       		bne.s	loc_72904
000727BE 103C 00C0                  		move.b	#$C0,d0
000727C2                            
000727C2                            loc_72904:
000727C2 3206                       		move.w	d6,d1
000727C4 0201 000F                  		andi.b	#$F,d1
000727C8 8001                       		or.b	d1,d0
000727CA E84E                       		lsr.w	#4,d6
000727CC 0206 003F                  		andi.b	#$3F,d6
000727D0 13C0 00C0 0011             		move.b	d0,($C00011).l
000727D6 13C6 00C0 0011             		move.b	d6,($C00011).l
000727DC                            
000727DC                            locret_7291E:
000727DC 4E75                       		rts	
000727DE                            ; End of function sub_728E2
000727DE                            
000727DE                            ; ===========================================================================
000727DE                            
000727DE                            loc_72920:				; XREF: sub_728DC
000727DE 08D5 0001                  		bset	#1,(a5)
000727E2 4E75                       		rts	
000727E4                            
000727E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000727E4                            
000727E4                            
000727E4                            sub_72926:				; XREF: sub_72850
000727E4 4A2D 000B                  		tst.b	$B(a5)
000727E8 6700 0000                  		beq.w	locret_7298A
000727EC                            
000727EC                            loc_7292E:				; XREF: sub_72850
000727EC 1C2D 0009                  		move.b	9(a5),d6
000727F0 7000                       		moveq	#0,d0
000727F2 102D 000B                  		move.b	$B(a5),d0
000727F6 6700                       		beq.s	sub_7296A
000727F8 2079 0007 1872             		movea.l	(Go_PSGIndex).l,a0
000727FE 5340                       		subq.w	#1,d0
00072800 E548                       		lsl.w	#2,d0
00072802 2070 0000                  		movea.l	(a0,d0.w),a0
00072806 102D 000C                  		move.b	$C(a5),d0
0007280A 1030 0000                  		move.b	(a0,d0.w),d0
0007280E 522D 000C                  		addq.b	#1,$C(a5)
00072812 0800 0007                  		btst	#7,d0
00072816 6700                       		beq.s	loc_72960
00072818 0C00 0080                  		cmpi.b	#$80,d0
0007281C 6700                       		beq.s	loc_7299A
0007281E                            
0007281E                            loc_72960:
0007281E DC40                       		add.w	d0,d6
00072820 0C06 0010                  		cmpi.b	#$10,d6
00072824 6500                       		bcs.s	sub_7296A
00072826 7C0F                       		moveq	#$F,d6
00072828                            ; End of function sub_72926
00072828                            
00072828                            
00072828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072828                            
00072828                            
00072828                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00072828 0815 0001                  		btst	#1,(a5)
0007282C 6600                       		bne.s	locret_7298A
0007282E 0815 0002                  		btst	#2,(a5)
00072832 6600                       		bne.s	locret_7298A
00072834 0815 0004                  		btst	#4,(a5)
00072838 6600                       		bne.s	loc_7298C
0007283A                            
0007283A                            loc_7297C:
0007283A 8C2D 0001                  		or.b	1(a5),d6
0007283E 0606 0010                  		addi.b	#$10,d6
00072842 13C6 00C0 0011             		move.b	d6,($C00011).l
00072848                            
00072848                            locret_7298A:
00072848 4E75                       		rts	
0007284A                            ; ===========================================================================
0007284A                            
0007284A                            loc_7298C:
0007284A 4A2D 0013                  		tst.b	$13(a5)
0007284E 67EA                       		beq.s	loc_7297C
00072850 4A2D 0012                  		tst.b	$12(a5)
00072854 66E4                       		bne.s	loc_7297C
00072856 4E75                       		rts	
00072858                            ; End of function sub_7296A
00072858                            
00072858                            ; ===========================================================================
00072858                            
00072858                            loc_7299A:				; XREF: sub_72926
00072858 532D 000C                  		subq.b	#1,$C(a5)
0007285C 4E75                       		rts	
0007285E                            
0007285E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007285E                            
0007285E                            
0007285E                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007285E 0815 0002                  		btst	#2,(a5)
00072862 6600                       		bne.s	locret_729B4
00072864                            
00072864                            loc_729A6:				; XREF: Snd_FadeOut2
00072864 102D 0001                  		move.b	1(a5),d0
00072868 0000 001F                  		ori.b	#$1F,d0
0007286C 13C0 00C0 0011             		move.b	d0,($C00011).l
00072872                            
00072872                            locret_729B4:
00072872 4E75                       		rts	
00072874                            ; End of function sub_729A0
00072874                            
00072874                            
00072874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072874                            
00072874                            
00072874                            sub_729B6:				; XREF: loc_71E7C
00072874 41F9 00C0 0011             		lea	($C00011).l,a0
0007287A 10BC 009F                  		move.b	#$9F,(a0)
0007287E 10BC 00BF                  		move.b	#$BF,(a0)
00072882 10BC 00DF                  		move.b	#$DF,(a0)
00072886 10BC 00FF                  		move.b	#$FF,(a0)
0007288A 4E75                       		rts	
0007288C                            ; End of function sub_729B6
0007288C                            
0007288C                            ; ===========================================================================
0007288C 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007289E 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000728B0 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000728C4 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000728D8 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000728EC 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00072900 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00072914 0011 0000                  		dc.w $11, 0
00072918                            
00072918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072918                            
00072918                            
00072918                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00072918 0445 00E0                  		subi.w	#$E0,d5
0007291C E54D                       		lsl.w	#2,d5
0007291E 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00072922                            ; End of function sub_72A5A
00072922                            
00072922                            ; ===========================================================================
00072922                            
00072922                            loc_72A64:
00072922 6000 0000                  		bra.w	loc_72ACC
00072926                            ; ===========================================================================
00072926 6000 0000                  		bra.w	loc_72AEC
0007292A                            ; ===========================================================================
0007292A 6000 0000                  		bra.w	loc_72AF2
0007292E                            ; ===========================================================================
0007292E 6000 0000                  		bra.w	loc_72AF8
00072932                            ; ===========================================================================
00072932 6000 0000                  		bra.w	loc_72B14
00072936                            ; ===========================================================================
00072936 6000 0000                  		bra.w	loc_72B9E
0007293A                            ; ===========================================================================
0007293A 6000 0000                  		bra.w	loc_72BA4
0007293E                            ; ===========================================================================
0007293E 6000 0000                  		bra.w	loc_72BAE
00072942                            ; ===========================================================================
00072942 6000 0000                  		bra.w	loc_72BB4
00072946                            ; ===========================================================================
00072946 6000 0000                  		bra.w	loc_72BBE
0007294A                            ; ===========================================================================
0007294A 6000 0000                  		bra.w	loc_72BC6
0007294E                            ; ===========================================================================
0007294E 6000 0000                  		bra.w	loc_72BD0
00072952                            ; ===========================================================================
00072952 6000 0000                  		bra.w	loc_72BE6
00072956                            ; ===========================================================================
00072956 6000 0000                  		bra.w	loc_72BEE
0007295A                            ; ===========================================================================
0007295A 6000 0000                  		bra.w	loc_72BF4
0007295E                            ; ===========================================================================
0007295E 6000 0000                  		bra.w	loc_72C26
00072962                            ; ===========================================================================
00072962 6000 0000                  		bra.w	loc_72D30
00072966                            ; ===========================================================================
00072966 6000 0000                  		bra.w	loc_72D52
0007296A                            ; ===========================================================================
0007296A 6000 0000                  		bra.w	loc_72D58
0007296E                            ; ===========================================================================
0007296E 6000 0000                  		bra.w	loc_72E06
00072972                            ; ===========================================================================
00072972 6000 0000                  		bra.w	loc_72E20
00072976                            ; ===========================================================================
00072976 6000 0000                  		bra.w	loc_72E26
0007297A                            ; ===========================================================================
0007297A 6000 0000                  		bra.w	loc_72E2C
0007297E                            ; ===========================================================================
0007297E 6000 0000                  		bra.w	loc_72E38
00072982                            ; ===========================================================================
00072982 6000 0000                  		bra.w	loc_72E52
00072986                            ; ===========================================================================
00072986 6000 0000                  		bra.w	loc_72E64
0007298A                            ; ===========================================================================
0007298A                            
0007298A                            loc_72ACC:				; XREF: loc_72A64
0007298A 121C                       		move.b	(a4)+,d1
0007298C 4A2D 0001                  		tst.b	1(a5)
00072990 6B00                       		bmi.s	locret_72AEA
00072992 102D 000A                  		move.b	$A(a5),d0
00072996 0200 0037                  		andi.b	#$37,d0
0007299A 8200                       		or.b	d0,d1
0007299C 1B41 000A                  		move.b	d1,$A(a5)
000729A0 103C 00B4                  		move.b	#$B4,d0
000729A4 6000 FC2E                  		bra.w	loc_72716
000729A8                            ; ===========================================================================
000729A8                            
000729A8                            locret_72AEA:
000729A8 4E75                       		rts	
000729AA                            ; ===========================================================================
000729AA                            
000729AA                            loc_72AEC:				; XREF: loc_72A64
000729AA 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000729AE 4E75                       		rts	
000729B0                            ; ===========================================================================
000729B0                            
000729B0                            loc_72AF2:				; XREF: loc_72A64
000729B0 1D5C 0007                  		move.b	(a4)+,7(a6)
000729B4 4E75                       		rts	
000729B6                            ; ===========================================================================
000729B6                            
000729B6                            loc_72AF8:				; XREF: loc_72A64
000729B6 7000                       		moveq	#0,d0
000729B8 102D 000D                  		move.b	$D(a5),d0
000729BC 2875 0000                  		movea.l	(a5,d0.w),a4
000729C0 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000729C8 544C                       		addq.w	#2,a4
000729CA 5800                       		addq.b	#4,d0
000729CC 1B40 000D                  		move.b	d0,$D(a5)
000729D0 4E75                       		rts	
000729D2                            ; ===========================================================================
000729D2                            
000729D2                            loc_72B14:				; XREF: loc_72A64
000729D2 204E                       		movea.l	a6,a0
000729D4 43EE 03A0                  		lea	$3A0(a6),a1
000729D8 303C 0087                  		move.w	#$87,d0
000729DC                            
000729DC                            loc_72B1E:
000729DC 20D9                       		move.l	(a1)+,(a0)+
000729DE 51C8 FFFC                  		dbf	d0,loc_72B1E
000729E2                            
000729E2 08EE 0002 0040             		bset	#2,$40(a6)
000729E8 264D                       		movea.l	a5,a3
000729EA 1C3C 0028                  		move.b	#$28,d6
000729EE 9C2E 0026                  		sub.b	$26(a6),d6
000729F2 7E05                       		moveq	#5,d7
000729F4 4BEE 0070                  		lea	$70(a6),a5
000729F8                            
000729F8                            loc_72B3A:
000729F8 0815 0007                  		btst	#7,(a5)
000729FC 6700                       		beq.s	loc_72B5C
000729FE 08D5 0001                  		bset	#1,(a5)
00072A02 DD2D 0009                  		add.b	d6,9(a5)
00072A06 0815 0002                  		btst	#2,(a5)
00072A0A 6600                       		bne.s	loc_72B5C
00072A0C 7000                       		moveq	#0,d0
00072A0E 102D 000B                  		move.b	$B(a5),d0
00072A12 226E 0018                  		movea.l	$18(a6),a1
00072A16 4EBA 0000                  		jsr	sub_72C4E(pc)
00072A1A                            
00072A1A                            loc_72B5C:
00072A1A DAFC 0030                  		adda.w	#$30,a5
00072A1E 51CF FFD8                  		dbf	d7,loc_72B3A
00072A22                            
00072A22 7E02                       		moveq	#2,d7
00072A24                            
00072A24                            loc_72B66:
00072A24 0815 0007                  		btst	#7,(a5)
00072A28 6700                       		beq.s	loc_72B78
00072A2A 08D5 0001                  		bset	#1,(a5)
00072A2E 4EBA FE2E                  		jsr	sub_729A0(pc)
00072A32 DD2D 0009                  		add.b	d6,9(a5)
00072A36                            
00072A36                            loc_72B78:
00072A36 DAFC 0030                  		adda.w	#$30,a5
00072A3A 51CF FFE8                  		dbf	d7,loc_72B66
00072A3E 2A4B                       		movea.l	a3,a5
00072A40 1D7C 0080 0024             		move.b	#$80,$24(a6)
00072A46 1D7C 0028 0026             		move.b	#$28,$26(a6)
00072A4C 422E 0027                  		clr.b	$27(a6)
00072A50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00072A58 504F                       		addq.w	#8,sp
00072A5A 4E75                       		rts	
00072A5C                            ; ===========================================================================
00072A5C                            
00072A5C                            loc_72B9E:				; XREF: loc_72A64
00072A5C 1B5C 0002                  		move.b	(a4)+,2(a5)
00072A60 4E75                       		rts	
00072A62                            ; ===========================================================================
00072A62                            
00072A62                            loc_72BA4:				; XREF: loc_72A64
00072A62 101C                       		move.b	(a4)+,d0
00072A64 D12D 0009                  		add.b	d0,9(a5)
00072A68 6000 0000                  		bra.w	sub_72CB4
00072A6C                            ; ===========================================================================
00072A6C                            
00072A6C                            loc_72BAE:				; XREF: loc_72A64
00072A6C 08D5 0004                  		bset	#4,(a5)
00072A70 4E75                       		rts	
00072A72                            ; ===========================================================================
00072A72                            
00072A72                            loc_72BB4:				; XREF: loc_72A64
00072A72 1B54 0012                  		move.b	(a4),$12(a5)
00072A76 1B5C 0013                  		move.b	(a4)+,$13(a5)
00072A7A 4E75                       		rts	
00072A7C                            ; ===========================================================================
00072A7C                            
00072A7C                            loc_72BBE:				; XREF: loc_72A64
00072A7C 101C                       		move.b	(a4)+,d0
00072A7E D12D 0008                  		add.b	d0,8(a5)
00072A82 4E75                       		rts	
00072A84                            ; ===========================================================================
00072A84                            
00072A84                            loc_72BC6:				; XREF: loc_72A64
00072A84 1D54 0002                  		move.b	(a4),2(a6)
00072A88 1D5C 0001                  		move.b	(a4)+,1(a6)
00072A8C 4E75                       		rts	
00072A8E                            ; ===========================================================================
00072A8E                            
00072A8E                            loc_72BD0:				; XREF: loc_72A64
00072A8E 41EE 0040                  		lea	$40(a6),a0
00072A92 101C                       		move.b	(a4)+,d0
00072A94 7230                       		moveq	#$30,d1
00072A96 7409                       		moveq	#9,d2
00072A98                            
00072A98                            loc_72BDA:
00072A98 1140 0002                  		move.b	d0,2(a0)
00072A9C D0C1                       		adda.w	d1,a0
00072A9E 51CA FFF8                  		dbf	d2,loc_72BDA
00072AA2                            
00072AA2 4E75                       		rts	
00072AA4                            ; ===========================================================================
00072AA4                            
00072AA4                            loc_72BE6:				; XREF: loc_72A64
00072AA4 101C                       		move.b	(a4)+,d0
00072AA6 D12D 0009                  		add.b	d0,9(a5)
00072AAA 4E75                       		rts	
00072AAC                            ; ===========================================================================
00072AAC                            
00072AAC                            loc_72BEE:				; XREF: loc_72A64
00072AAC 422E 002C                  		clr.b	$2C(a6)
00072AB0 4E75                       		rts	
00072AB2                            ; ===========================================================================
00072AB2                            
00072AB2                            loc_72BF4:				; XREF: loc_72A64
00072AB2 0895 0007                  		bclr	#7,(a5)
00072AB6 0895 0004                  		bclr	#4,(a5)
00072ABA 4EBA FB00                  		jsr	sub_726FE(pc)
00072ABE 4A2E 0250                  		tst.b	$250(a6)
00072AC2 6B00                       		bmi.s	loc_72C22
00072AC4 264D                       		movea.l	a5,a3
00072AC6 4BEE 0100                  		lea	$100(a6),a5
00072ACA 226E 0018                  		movea.l	$18(a6),a1
00072ACE 0895 0002                  		bclr	#2,(a5)
00072AD2 08D5 0001                  		bset	#1,(a5)
00072AD6 102D 000B                  		move.b	$B(a5),d0
00072ADA 4EBA 0000                  		jsr	sub_72C4E(pc)
00072ADE 2A4B                       		movea.l	a3,a5
00072AE0                            
00072AE0                            loc_72C22:
00072AE0 504F                       		addq.w	#8,sp
00072AE2 4E75                       		rts	
00072AE4                            ; ===========================================================================
00072AE4                            
00072AE4                            loc_72C26:				; XREF: loc_72A64
00072AE4 7000                       		moveq	#0,d0
00072AE6 101C                       		move.b	(a4)+,d0
00072AE8 1B40 000B                  		move.b	d0,$B(a5)
00072AEC 0815 0002                  		btst	#2,(a5)
00072AF0 6600 0000                  		bne.w	locret_72CAA
00072AF4 226E 0018                  		movea.l	$18(a6),a1
00072AF8 4A2E 000E                  		tst.b	$E(a6)
00072AFC 6700                       		beq.s	sub_72C4E
00072AFE 226D 0020                  		movea.l	$20(a5),a1
00072B02 4A2E 000E                  		tst.b	$E(a6)
00072B06 6B00                       		bmi.s	sub_72C4E
00072B08 226E 0020                  		movea.l	$20(a6),a1
00072B0C                            
00072B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072B0C                            
00072B0C                            
00072B0C                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00072B0C 5340                       		subq.w	#1,d0
00072B0E 6B00                       		bmi.s	loc_72C5C
00072B10 323C 0019                  		move.w	#$19,d1
00072B14                            
00072B14                            loc_72C56:
00072B14 D2C1                       		adda.w	d1,a1
00072B16 51C8 FFFC                  		dbf	d0,loc_72C56
00072B1A                            
00072B1A                            loc_72C5C:
00072B1A 1219                       		move.b	(a1)+,d1
00072B1C 1B41 001F                  		move.b	d1,$1F(a5)
00072B20 1801                       		move.b	d1,d4
00072B22 103C 00B0                  		move.b	#$B0,d0
00072B26 4EBA FAB8                  		jsr	sub_72722(pc)
00072B2A 45FA 0000                  		lea	byte_72D18(pc),a2
00072B2E 7613                       		moveq	#$13,d3
00072B30                            
00072B30                            loc_72C72:
00072B30 101A                       		move.b	(a2)+,d0
00072B32 1219                       		move.b	(a1)+,d1
00072B34 4EBA FAAA                  		jsr	sub_72722(pc)
00072B38 51CB FFF6                  		dbf	d3,loc_72C72
00072B3C 7A03                       		moveq	#3,d5
00072B3E 0244 0007                  		andi.w	#7,d4
00072B42 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00072B46 162D 0009                  		move.b	9(a5),d3
00072B4A                            
00072B4A                            loc_72C8C:
00072B4A 101A                       		move.b	(a2)+,d0
00072B4C 1219                       		move.b	(a1)+,d1
00072B4E E20C                       		lsr.b	#1,d4
00072B50 6400                       		bcc.s	loc_72C96
00072B52 D203                       		add.b	d3,d1
00072B54                            
00072B54                            loc_72C96:
00072B54 4EBA FA8A                  		jsr	sub_72722(pc)
00072B58 51CD FFF0                  		dbf	d5,loc_72C8C
00072B5C 103C 00B4                  		move.b	#$B4,d0
00072B60 122D 000A                  		move.b	$A(a5),d1
00072B64 4EBA FA7A                  		jsr	sub_72722(pc)
00072B68                            
00072B68                            locret_72CAA:
00072B68 4E75                       		rts	
00072B6A                            ; End of function sub_72C4E
00072B6A                            
00072B6A                            ; ===========================================================================
00072B6A 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00072B72                            
00072B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072B72                            
00072B72                            
00072B72                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00072B72 0815 0002                  		btst	#2,(a5)
00072B76 6600                       		bne.s	locret_72D16
00072B78 7000                       		moveq	#0,d0
00072B7A 102D 000B                  		move.b	$B(a5),d0
00072B7E 226E 0018                  		movea.l	$18(a6),a1
00072B82 4A2E 000E                  		tst.b	$E(a6)
00072B86 6700                       		beq.s	loc_72CD8
00072B88 226E 0020                  		movea.l	$20(a6),a1
00072B8C 4A2E 000E                  		tst.b	$E(a6)
00072B90 6B00                       		bmi.s	loc_72CD8
00072B92 226E 0020                  		movea.l	$20(a6),a1
00072B96                            
00072B96                            loc_72CD8:
00072B96 5340                       		subq.w	#1,d0
00072B98 6B00                       		bmi.s	loc_72CE6
00072B9A 323C 0019                  		move.w	#$19,d1
00072B9E                            
00072B9E                            loc_72CE0:
00072B9E D2C1                       		adda.w	d1,a1
00072BA0 51C8 FFFC                  		dbf	d0,loc_72CE0
00072BA4                            
00072BA4                            loc_72CE6:
00072BA4 D2FC 0015                  		adda.w	#$15,a1
00072BA8 45FA 0000                  		lea	byte_72D2C(pc),a2
00072BAC 102D 001F                  		move.b	$1F(a5),d0
00072BB0 0240 0007                  		andi.w	#7,d0
00072BB4 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00072BB8 162D 0009                  		move.b	9(a5),d3
00072BBC 6B00                       		bmi.s	locret_72D16
00072BBE 7A03                       		moveq	#3,d5
00072BC0                            
00072BC0                            loc_72D02:
00072BC0 101A                       		move.b	(a2)+,d0
00072BC2 1219                       		move.b	(a1)+,d1
00072BC4 E20C                       		lsr.b	#1,d4
00072BC6 6400                       		bcc.s	loc_72D12
00072BC8 D203                       		add.b	d3,d1
00072BCA 6500                       		bcs.s	loc_72D12
00072BCC 4EBA FA12                  		jsr	sub_72722(pc)
00072BD0                            
00072BD0                            loc_72D12:
00072BD0 51CD FFEE                  		dbf	d5,loc_72D02
00072BD4                            
00072BD4                            locret_72D16:
00072BD4 4E75                       		rts	
00072BD6                            ; End of function sub_72CB4
00072BD6                            
00072BD6                            ; ===========================================================================
00072BD6 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00072BE0 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00072BEA 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00072BEE                            ; ===========================================================================
00072BEE                            
00072BEE                            loc_72D30:				; XREF: loc_72A64
00072BEE 08D5 0003                  		bset	#3,(a5)
00072BF2 2B4C 0014                  		move.l	a4,$14(a5)
00072BF6 1B5C 0018                  		move.b	(a4)+,$18(a5)
00072BFA 1B5C 0019                  		move.b	(a4)+,$19(a5)
00072BFE 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00072C02 101C                       		move.b	(a4)+,d0
00072C04 E208                       		lsr.b	#1,d0
00072C06 1B40 001B                  		move.b	d0,$1B(a5)
00072C0A 426D 001C                  		clr.w	$1C(a5)
00072C0E 4E75                       		rts	
00072C10                            ; ===========================================================================
00072C10                            
00072C10                            loc_72D52:				; XREF: loc_72A64
00072C10 08D5 0003                  		bset	#3,(a5)
00072C14 4E75                       		rts	
00072C16                            ; ===========================================================================
00072C16                            
00072C16                            loc_72D58:				; XREF: loc_72A64
00072C16 0895 0007                  		bclr	#7,(a5)
00072C1A 0895 0004                  		bclr	#4,(a5)
00072C1E 4A2D 0001                  		tst.b	1(a5)
00072C22 6B00                       		bmi.s	loc_72D74
00072C24 4A2E 0008                  		tst.b	8(a6)
00072C28 6B00 0000                  		bmi.w	loc_72E02
00072C2C 4EBA F98E                  		jsr	sub_726FE(pc)
00072C30 6000                       		bra.s	loc_72D78
00072C32                            ; ===========================================================================
00072C32                            
00072C32                            loc_72D74:
00072C32 4EBA FC2A                  		jsr	sub_729A0(pc)
00072C36                            
00072C36                            loc_72D78:
00072C36 4A2E 000E                  		tst.b	$E(a6)
00072C3A 6A00 0000                  		bpl.w	loc_72E02
00072C3E 4216                       		clr.b	0(a6)
00072C40 7000                       		moveq	#0,d0
00072C42 102D 0001                  		move.b	1(a5),d0
00072C46 6B00                       		bmi.s	loc_72DCC
00072C48 41FA F546                  		lea	dword_722CC(pc),a0
00072C4C 264D                       		movea.l	a5,a3
00072C4E 0C00 0004                  		cmpi.b	#4,d0
00072C52 6600                       		bne.s	loc_72DA8
00072C54 4A2E 0340                  		tst.b	$340(a6)
00072C58 6A00                       		bpl.s	loc_72DA8
00072C5A 4BEE 0340                  		lea	$340(a6),a5
00072C5E 226E 0020                  		movea.l	$20(a6),a1
00072C62 6000                       		bra.s	loc_72DB8
00072C64                            ; ===========================================================================
00072C64                            
00072C64                            loc_72DA8:
00072C64 5500                       		subq.b	#2,d0
00072C66 E508                       		lsl.b	#2,d0
00072C68 2A70 0000                  		movea.l	(a0,d0.w),a5
00072C6C 4A15                       		tst.b	(a5)
00072C6E 6A00                       		bpl.s	loc_72DC8
00072C70 226E 0018                  		movea.l	$18(a6),a1
00072C74                            
00072C74                            loc_72DB8:
00072C74 0895 0002                  		bclr	#2,(a5)
00072C78 08D5 0001                  		bset	#1,(a5)
00072C7C 102D 000B                  		move.b	$B(a5),d0
00072C80 4EBA FE8A                  		jsr	sub_72C4E(pc)
00072C84                            
00072C84                            loc_72DC8:
00072C84 2A4B                       		movea.l	a3,a5
00072C86 6000                       		bra.s	loc_72E02
00072C88                            ; ===========================================================================
00072C88                            
00072C88                            loc_72DCC:
00072C88 41EE 0370                  		lea	$370(a6),a0
00072C8C 4A10                       		tst.b	(a0)
00072C8E 6A00                       		bpl.s	loc_72DE0
00072C90 0C00 00E0                  		cmpi.b	#$E0,d0
00072C94 6700                       		beq.s	loc_72DEA
00072C96 0C00 00C0                  		cmpi.b	#$C0,d0
00072C9A 6700                       		beq.s	loc_72DEA
00072C9C                            
00072C9C                            loc_72DE0:
00072C9C 41FA F4F2                  		lea	dword_722CC(pc),a0
00072CA0 E608                       		lsr.b	#3,d0
00072CA2 2070 0000                  		movea.l	(a0,d0.w),a0
00072CA6                            
00072CA6                            loc_72DEA:
00072CA6 0890 0002                  		bclr	#2,(a0)
00072CAA 08D0 0001                  		bset	#1,(a0)
00072CAE 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072CB4 6600                       		bne.s	loc_72E02
00072CB6 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072CBE                            
00072CBE                            loc_72E02:
00072CBE 504F                       		addq.w	#8,sp
00072CC0 4E75                       		rts	
00072CC2                            ; ===========================================================================
00072CC2                            
00072CC2                            loc_72E06:				; XREF: loc_72A64
00072CC2 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00072CC8 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00072CCC 0815 0002                  		btst	#2,(a5)
00072CD0 6600                       		bne.s	locret_72E1E
00072CD2 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00072CDA                            
00072CDA                            locret_72E1E:
00072CDA 4E75                       		rts	
00072CDC                            ; ===========================================================================
00072CDC                            
00072CDC                            loc_72E20:				; XREF: loc_72A64
00072CDC 0895 0003                  		bclr	#3,(a5)
00072CE0 4E75                       		rts	
00072CE2                            ; ===========================================================================
00072CE2                            
00072CE2                            loc_72E26:				; XREF: loc_72A64
00072CE2 1B5C 000B                  		move.b	(a4)+,$B(a5)
00072CE6 4E75                       		rts	
00072CE8                            ; ===========================================================================
00072CE8                            
00072CE8                            loc_72E2C:				; XREF: loc_72A64
00072CE8 101C                       		move.b	(a4)+,d0
00072CEA E148                       		lsl.w	#8,d0
00072CEC 101C                       		move.b	(a4)+,d0
00072CEE D8C0                       		adda.w	d0,a4
00072CF0 534C                       		subq.w	#1,a4
00072CF2 4E75                       		rts	
00072CF4                            ; ===========================================================================
00072CF4                            
00072CF4                            loc_72E38:				; XREF: loc_72A64
00072CF4 7000                       		moveq	#0,d0
00072CF6 101C                       		move.b	(a4)+,d0
00072CF8 121C                       		move.b	(a4)+,d1
00072CFA 4A35 0024                  		tst.b	$24(a5,d0.w)
00072CFE 6600                       		bne.s	loc_72E48
00072D00 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00072D04                            
00072D04                            loc_72E48:
00072D04 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00072D08 66DE                       		bne.s	loc_72E2C
00072D0A 544C                       		addq.w	#2,a4
00072D0C 4E75                       		rts	
00072D0E                            ; ===========================================================================
00072D0E                            
00072D0E                            loc_72E52:				; XREF: loc_72A64
00072D0E 7000                       		moveq	#0,d0
00072D10 102D 000D                  		move.b	$D(a5),d0
00072D14 5900                       		subq.b	#4,d0
00072D16 2B8C 0000                  		move.l	a4,(a5,d0.w)
00072D1A 1B40 000D                  		move.b	d0,$D(a5)
00072D1E 60C8                       		bra.s	loc_72E2C
00072D20                            ; ===========================================================================
00072D20                            
00072D20                            loc_72E64:				; XREF: loc_72A64
00072D20 103C 0088                  		move.b	#$88,d0
00072D24 123C 000F                  		move.b	#$F,d1
00072D28 4EBA F8C2                  		jsr	sub_7272E(pc)
00072D2C 103C 008C                  		move.b	#$8C,d0
00072D30 123C 000F                  		move.b	#$F,d1
00072D34 6000 F8B6                  		bra.w	sub_7272E
00072D38                            ; ===========================================================================
00072D38                            Kos_Z80:	incbin	sound\z80_1.bin
00072DE8 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00072DEA 21                         		dc.b $21
00072DEB 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00072DED                            		incbin	sound\z80_2.bin
00074498                            		even
00074498                            Music81:	incbin	sound\music81.bin
00074C00                            		even
00074C00                            Music82:	incbin	sound\music82.bin
00075050                            		even
00075050                            Music83:	incbin	sound\music83.bin
000754AE                            		even
000754AE                            Music84:	incbin	sound\music84.bin
0007591C                            		even
0007591C                            Music85:	incbin	sound\music85.bin
00075D68                            		even
00075D68                            Music86:	incbin	sound\music86.bin
000762B8                            		even
000762B8                            Music87:	incbin	sound\music87.bin
0007649E                            		even
0007649E                            Music88:	incbin	sound\music88.bin
0007658C                            		even
0007658C                            Music89:	incbin	sound\music89.bin
000768B8                            		even
000768B8                            Music8A:	incbin	sound\music8A.bin
00076A64                            		even
00076A64                            Music8B:	incbin	sound\music8B.bin
00076CFE                            		even
00076CFE                            Music8C:	incbin	sound\music8C.bin
00076F1A                            		even
00076F1A                            Music8D:	incbin	sound\music8D.bin
00077136                            		even
00077136                            Music8E:	incbin	sound\music8E.bin
0007728C                            		even
0007728C                            Music8F:	incbin	sound\music8F.bin
000773DC                            		even
000773DC                            Music90:	incbin	sound\music90.bin
0007753A                            		even
0007753A                            Music91:	incbin	sound\music91.bin
00078808                            		even
00078808                            Music92:	incbin	sound\music92.bin
00078932                            		even
00078932                            Music93:	incbin	sound\music93.bin
00078A00                            		even
00078A00                            ; ---------------------------------------------------------------------------
00078A00                            ; Sound	effect pointers
00078A00                            ; ---------------------------------------------------------------------------
00078A00 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00078A0C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00078A18 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00078A24 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00078A30 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00078A3C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00078A48 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00078A54 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00078A60 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00078A6C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00078A78 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00078A84 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00078A90 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00078A9C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00078AA8 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00078AB4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00078AC0 0000 0000                  SoundD0Index:	dc.l SoundD0
00078AC4                            SoundA0:	incbin	sound\soundA0.bin
00078ADA                            		even
00078ADA                            SoundA1:	incbin	sound\soundA1.bin
00078B04                            		even
00078B04                            SoundA2:	incbin	sound\soundA2.bin
00078B24                            		even
00078B24                            SoundA3:	incbin	sound\soundA3.bin
00078B56                            		even
00078B56                            SoundA4:	incbin	sound\soundA4.bin
00078B8C                            		even
00078B8C                            SoundA5:	incbin	sound\soundA5.bin
00078BB8                            		even
00078BB8                            SoundA6:	incbin	sound\soundA6.bin
00078BE8                            		even
00078BE8                            SoundA7:	incbin	sound\soundA7.bin
00078C18                            		even
00078C18                            SoundA8:	incbin	sound\soundA8.bin
00078C4C                            		even
00078C4C                            SoundA9:	incbin	sound\soundA9.bin
00078C5E                            		even
00078C5E                            SoundAA:	incbin	sound\soundAA.bin
00078CA0                            		even
00078CA0                            SoundAB:	incbin	sound\soundAB.bin
00078CC0                            		even
00078CC0                            SoundAC:	incbin	sound\soundAC.bin
00078CF4                            		even
00078CF4                            SoundAD:	incbin	sound\soundAD.bin
00078D2A                            		even
00078D2A                            SoundAE:	incbin	sound\soundAE.bin
00078D74                            		even
00078D74                            SoundAF:	incbin	sound\soundAF.bin
00078DA2                            		even
00078DA2                            SoundB0:	incbin	sound\soundB0.bin
00078DD4                            		even
00078DD4                            SoundB1:	incbin	sound\soundB1.bin
00078E00                            		even
00078E00                            SoundB2:	incbin	sound\soundB2.bin
00078E50                            		even
00078E50                            SoundB3:	incbin	sound\soundB3.bin
00078E9A                            		even
00078E9A                            SoundB4:	incbin	sound\soundB4.bin
00078EF6                            		even
00078EF6                            SoundB5:	incbin	sound\soundB5.bin
00078F24                            		even
00078F24                            SoundB6:	incbin	sound\soundB6.bin
00078F42                            		even
00078F42                            SoundB7:	incbin	sound\soundB7.bin
00078F7E                            		even
00078F7E                            SoundB8:	incbin	sound\soundB8.bin
00078F9C                            		even
00078F9C                            SoundB9:	incbin	sound\soundB9.bin
00079000                            		even
00079000                            SoundBA:	incbin	sound\soundBA.bin
00079028                            		even
00079028                            SoundBB:	incbin	sound\soundBB.bin
00079054                            		even
00079054                            SoundBC:	incbin	sound\soundBC.bin
00079096                            		even
00079096                            SoundBD:	incbin	sound\soundBD.bin
000790EA                            		even
000790EA                            SoundBE:	incbin	sound\soundBE.bin
00079124                            		even
00079124                            SoundBF:	incbin	sound\soundBF.bin
00079196                            		even
00079196                            SoundC0:	incbin	sound\soundC0.bin
000791C4                            		even
000791C4                            SoundC1:	incbin	sound\soundC1.bin
000791FE                            		even
000791FE                            SoundC2:	incbin	sound\soundC2.bin
00079228                            		even
00079228                            SoundC3:	incbin	sound\soundC3.bin
000792A2                            		even
000792A2                            SoundC4:	incbin	sound\soundC4.bin
000792CA                            		even
000792CA                            SoundC5:	incbin	sound\soundC5.bin
00079332                            		even
00079332                            SoundC6:	incbin	sound\soundC6.bin
00079374                            		even
00079374                            SoundC7:	incbin	sound\soundC7.bin
000793A2                            		even
000793A2                            SoundC8:	incbin	sound\soundC8.bin
000793B4                            		even
000793B4                            SoundC9:	incbin	sound\soundC9.bin
000793E2                            		even
000793E2                            SoundCA:	incbin	sound\soundCA.bin
00079410                            		even
00079410                            SoundCB:	incbin	sound\soundCB.bin
0007945C                            		even
0007945C                            SoundCC:	incbin	sound\soundCC.bin
00079496                            		even
00079496                            SoundCD:	incbin	sound\soundCD.bin
000794A4                            		even
000794A4                            SoundCE:	incbin	sound\soundCE.bin
000794D2                            		even
000794D2                            SoundCF:	incbin	sound\soundCF.bin
0007950A                            		even
0007950A                            SoundD0:	incbin	sound\soundD0.bin
00079544                            		even
00079544                            SegaPCM:	incbin	sound\segapcm.bin
0007FEBC                            		even
0007FEBC                            
0007FEBC                            ; end of 'ROM'
0007FEBC                            EndOfRom:
0007FEBC                            
0007FEBC                            
